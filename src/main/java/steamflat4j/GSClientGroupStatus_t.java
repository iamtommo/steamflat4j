// Generated by jextract

package steamflat4j;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct GSClientGroupStatus_t {
 *     CSteamID m_SteamIDUser;
 *     CSteamID m_SteamIDGroup;
 *     bool m_bMember;
 *     bool m_bOfficer;
 * }
 * }
 */
public class GSClientGroupStatus_t {

    GSClientGroupStatus_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        SteamFlat.C_LONG_LONG.withName("m_SteamIDUser"),
        SteamFlat.C_LONG_LONG.withName("m_SteamIDGroup"),
        SteamFlat.C_BOOL.withName("m_bMember"),
        SteamFlat.C_BOOL.withName("m_bOfficer"),
        MemoryLayout.paddingLayout(6)
    ).withName("GSClientGroupStatus_t");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfLong m_SteamIDUser$LAYOUT = (OfLong)$LAYOUT.select(groupElement("m_SteamIDUser"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * CSteamID m_SteamIDUser
     * }
     */
    public static final OfLong m_SteamIDUser$layout() {
        return m_SteamIDUser$LAYOUT;
    }

    private static final long m_SteamIDUser$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * CSteamID m_SteamIDUser
     * }
     */
    public static final long m_SteamIDUser$offset() {
        return m_SteamIDUser$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * CSteamID m_SteamIDUser
     * }
     */
    public static long m_SteamIDUser(MemorySegment struct) {
        return struct.get(m_SteamIDUser$LAYOUT, m_SteamIDUser$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * CSteamID m_SteamIDUser
     * }
     */
    public static void m_SteamIDUser(MemorySegment struct, long fieldValue) {
        struct.set(m_SteamIDUser$LAYOUT, m_SteamIDUser$OFFSET, fieldValue);
    }

    private static final OfLong m_SteamIDGroup$LAYOUT = (OfLong)$LAYOUT.select(groupElement("m_SteamIDGroup"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * CSteamID m_SteamIDGroup
     * }
     */
    public static final OfLong m_SteamIDGroup$layout() {
        return m_SteamIDGroup$LAYOUT;
    }

    private static final long m_SteamIDGroup$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * CSteamID m_SteamIDGroup
     * }
     */
    public static final long m_SteamIDGroup$offset() {
        return m_SteamIDGroup$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * CSteamID m_SteamIDGroup
     * }
     */
    public static long m_SteamIDGroup(MemorySegment struct) {
        return struct.get(m_SteamIDGroup$LAYOUT, m_SteamIDGroup$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * CSteamID m_SteamIDGroup
     * }
     */
    public static void m_SteamIDGroup(MemorySegment struct, long fieldValue) {
        struct.set(m_SteamIDGroup$LAYOUT, m_SteamIDGroup$OFFSET, fieldValue);
    }

    private static final OfBoolean m_bMember$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("m_bMember"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool m_bMember
     * }
     */
    public static final OfBoolean m_bMember$layout() {
        return m_bMember$LAYOUT;
    }

    private static final long m_bMember$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool m_bMember
     * }
     */
    public static final long m_bMember$offset() {
        return m_bMember$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool m_bMember
     * }
     */
    public static boolean m_bMember(MemorySegment struct) {
        return struct.get(m_bMember$LAYOUT, m_bMember$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool m_bMember
     * }
     */
    public static void m_bMember(MemorySegment struct, boolean fieldValue) {
        struct.set(m_bMember$LAYOUT, m_bMember$OFFSET, fieldValue);
    }

    private static final OfBoolean m_bOfficer$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("m_bOfficer"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool m_bOfficer
     * }
     */
    public static final OfBoolean m_bOfficer$layout() {
        return m_bOfficer$LAYOUT;
    }

    private static final long m_bOfficer$OFFSET = 17;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool m_bOfficer
     * }
     */
    public static final long m_bOfficer$offset() {
        return m_bOfficer$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool m_bOfficer
     * }
     */
    public static boolean m_bOfficer(MemorySegment struct) {
        return struct.get(m_bOfficer$LAYOUT, m_bOfficer$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool m_bOfficer
     * }
     */
    public static void m_bOfficer(MemorySegment struct, boolean fieldValue) {
        struct.set(m_bOfficer$LAYOUT, m_bOfficer$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

