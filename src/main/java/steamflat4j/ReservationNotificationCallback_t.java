// Generated by jextract

package steamflat4j;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct ReservationNotificationCallback_t {
 *     PartyBeaconID_t m_ulBeaconID;
 *     CSteamID m_steamIDJoiner;
 * }
 * }
 */
public class ReservationNotificationCallback_t {

    ReservationNotificationCallback_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        SteamFlat.C_LONG_LONG.withName("m_ulBeaconID"),
        SteamFlat.C_LONG_LONG.withName("m_steamIDJoiner")
    ).withName("ReservationNotificationCallback_t");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfLong m_ulBeaconID$LAYOUT = (OfLong)$LAYOUT.select(groupElement("m_ulBeaconID"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PartyBeaconID_t m_ulBeaconID
     * }
     */
    public static final OfLong m_ulBeaconID$layout() {
        return m_ulBeaconID$LAYOUT;
    }

    private static final long m_ulBeaconID$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PartyBeaconID_t m_ulBeaconID
     * }
     */
    public static final long m_ulBeaconID$offset() {
        return m_ulBeaconID$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PartyBeaconID_t m_ulBeaconID
     * }
     */
    public static long m_ulBeaconID(MemorySegment struct) {
        return struct.get(m_ulBeaconID$LAYOUT, m_ulBeaconID$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PartyBeaconID_t m_ulBeaconID
     * }
     */
    public static void m_ulBeaconID(MemorySegment struct, long fieldValue) {
        struct.set(m_ulBeaconID$LAYOUT, m_ulBeaconID$OFFSET, fieldValue);
    }

    private static final OfLong m_steamIDJoiner$LAYOUT = (OfLong)$LAYOUT.select(groupElement("m_steamIDJoiner"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * CSteamID m_steamIDJoiner
     * }
     */
    public static final OfLong m_steamIDJoiner$layout() {
        return m_steamIDJoiner$LAYOUT;
    }

    private static final long m_steamIDJoiner$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * CSteamID m_steamIDJoiner
     * }
     */
    public static final long m_steamIDJoiner$offset() {
        return m_steamIDJoiner$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * CSteamID m_steamIDJoiner
     * }
     */
    public static long m_steamIDJoiner(MemorySegment struct) {
        return struct.get(m_steamIDJoiner$LAYOUT, m_steamIDJoiner$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * CSteamID m_steamIDJoiner
     * }
     */
    public static void m_steamIDJoiner(MemorySegment struct, long fieldValue) {
        struct.set(m_steamIDJoiner$LAYOUT, m_steamIDJoiner$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

