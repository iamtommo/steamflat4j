// Generated by jextract

package steamflat4j;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct RequestPlayersForGameResultCallback_t {
 *     EResult m_eResult;
 *     uint64 m_ullSearchID;
 *     CSteamID m_SteamIDPlayerFound;
 *     CSteamID m_SteamIDLobby;
 *     PlayerAcceptState_t m_ePlayerAcceptState;
 *     int32 m_nPlayerIndex;
 *     int32 m_nTotalPlayersFound;
 *     int32 m_nTotalPlayersAcceptedGame;
 *     int32 m_nSuggestedTeamIndex;
 *     uint64 m_ullUniqueGameID;
 * }
 * }
 */
public class RequestPlayersForGameResultCallback_t {

    RequestPlayersForGameResultCallback_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        SteamFlat.C_INT.withName("m_eResult"),
        MemoryLayout.paddingLayout(4),
        SteamFlat.C_LONG_LONG.withName("m_ullSearchID"),
        SteamFlat.C_LONG_LONG.withName("m_SteamIDPlayerFound"),
        SteamFlat.C_LONG_LONG.withName("m_SteamIDLobby"),
        SteamFlat.C_INT.withName("m_ePlayerAcceptState"),
        SteamFlat.C_INT.withName("m_nPlayerIndex"),
        SteamFlat.C_INT.withName("m_nTotalPlayersFound"),
        SteamFlat.C_INT.withName("m_nTotalPlayersAcceptedGame"),
        SteamFlat.C_INT.withName("m_nSuggestedTeamIndex"),
        MemoryLayout.paddingLayout(4),
        SteamFlat.C_LONG_LONG.withName("m_ullUniqueGameID")
    ).withName("RequestPlayersForGameResultCallback_t");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt m_eResult$LAYOUT = (OfInt)$LAYOUT.select(groupElement("m_eResult"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * EResult m_eResult
     * }
     */
    public static final OfInt m_eResult$layout() {
        return m_eResult$LAYOUT;
    }

    private static final long m_eResult$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * EResult m_eResult
     * }
     */
    public static final long m_eResult$offset() {
        return m_eResult$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * EResult m_eResult
     * }
     */
    public static int m_eResult(MemorySegment struct) {
        return struct.get(m_eResult$LAYOUT, m_eResult$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * EResult m_eResult
     * }
     */
    public static void m_eResult(MemorySegment struct, int fieldValue) {
        struct.set(m_eResult$LAYOUT, m_eResult$OFFSET, fieldValue);
    }

    private static final OfLong m_ullSearchID$LAYOUT = (OfLong)$LAYOUT.select(groupElement("m_ullSearchID"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64 m_ullSearchID
     * }
     */
    public static final OfLong m_ullSearchID$layout() {
        return m_ullSearchID$LAYOUT;
    }

    private static final long m_ullSearchID$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64 m_ullSearchID
     * }
     */
    public static final long m_ullSearchID$offset() {
        return m_ullSearchID$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64 m_ullSearchID
     * }
     */
    public static long m_ullSearchID(MemorySegment struct) {
        return struct.get(m_ullSearchID$LAYOUT, m_ullSearchID$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64 m_ullSearchID
     * }
     */
    public static void m_ullSearchID(MemorySegment struct, long fieldValue) {
        struct.set(m_ullSearchID$LAYOUT, m_ullSearchID$OFFSET, fieldValue);
    }

    private static final OfLong m_SteamIDPlayerFound$LAYOUT = (OfLong)$LAYOUT.select(groupElement("m_SteamIDPlayerFound"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * CSteamID m_SteamIDPlayerFound
     * }
     */
    public static final OfLong m_SteamIDPlayerFound$layout() {
        return m_SteamIDPlayerFound$LAYOUT;
    }

    private static final long m_SteamIDPlayerFound$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * CSteamID m_SteamIDPlayerFound
     * }
     */
    public static final long m_SteamIDPlayerFound$offset() {
        return m_SteamIDPlayerFound$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * CSteamID m_SteamIDPlayerFound
     * }
     */
    public static long m_SteamIDPlayerFound(MemorySegment struct) {
        return struct.get(m_SteamIDPlayerFound$LAYOUT, m_SteamIDPlayerFound$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * CSteamID m_SteamIDPlayerFound
     * }
     */
    public static void m_SteamIDPlayerFound(MemorySegment struct, long fieldValue) {
        struct.set(m_SteamIDPlayerFound$LAYOUT, m_SteamIDPlayerFound$OFFSET, fieldValue);
    }

    private static final OfLong m_SteamIDLobby$LAYOUT = (OfLong)$LAYOUT.select(groupElement("m_SteamIDLobby"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * CSteamID m_SteamIDLobby
     * }
     */
    public static final OfLong m_SteamIDLobby$layout() {
        return m_SteamIDLobby$LAYOUT;
    }

    private static final long m_SteamIDLobby$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * CSteamID m_SteamIDLobby
     * }
     */
    public static final long m_SteamIDLobby$offset() {
        return m_SteamIDLobby$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * CSteamID m_SteamIDLobby
     * }
     */
    public static long m_SteamIDLobby(MemorySegment struct) {
        return struct.get(m_SteamIDLobby$LAYOUT, m_SteamIDLobby$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * CSteamID m_SteamIDLobby
     * }
     */
    public static void m_SteamIDLobby(MemorySegment struct, long fieldValue) {
        struct.set(m_SteamIDLobby$LAYOUT, m_SteamIDLobby$OFFSET, fieldValue);
    }

    private static final OfInt m_ePlayerAcceptState$LAYOUT = (OfInt)$LAYOUT.select(groupElement("m_ePlayerAcceptState"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PlayerAcceptState_t m_ePlayerAcceptState
     * }
     */
    public static final OfInt m_ePlayerAcceptState$layout() {
        return m_ePlayerAcceptState$LAYOUT;
    }

    private static final long m_ePlayerAcceptState$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PlayerAcceptState_t m_ePlayerAcceptState
     * }
     */
    public static final long m_ePlayerAcceptState$offset() {
        return m_ePlayerAcceptState$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PlayerAcceptState_t m_ePlayerAcceptState
     * }
     */
    public static int m_ePlayerAcceptState(MemorySegment struct) {
        return struct.get(m_ePlayerAcceptState$LAYOUT, m_ePlayerAcceptState$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PlayerAcceptState_t m_ePlayerAcceptState
     * }
     */
    public static void m_ePlayerAcceptState(MemorySegment struct, int fieldValue) {
        struct.set(m_ePlayerAcceptState$LAYOUT, m_ePlayerAcceptState$OFFSET, fieldValue);
    }

    private static final OfInt m_nPlayerIndex$LAYOUT = (OfInt)$LAYOUT.select(groupElement("m_nPlayerIndex"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32 m_nPlayerIndex
     * }
     */
    public static final OfInt m_nPlayerIndex$layout() {
        return m_nPlayerIndex$LAYOUT;
    }

    private static final long m_nPlayerIndex$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32 m_nPlayerIndex
     * }
     */
    public static final long m_nPlayerIndex$offset() {
        return m_nPlayerIndex$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32 m_nPlayerIndex
     * }
     */
    public static int m_nPlayerIndex(MemorySegment struct) {
        return struct.get(m_nPlayerIndex$LAYOUT, m_nPlayerIndex$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32 m_nPlayerIndex
     * }
     */
    public static void m_nPlayerIndex(MemorySegment struct, int fieldValue) {
        struct.set(m_nPlayerIndex$LAYOUT, m_nPlayerIndex$OFFSET, fieldValue);
    }

    private static final OfInt m_nTotalPlayersFound$LAYOUT = (OfInt)$LAYOUT.select(groupElement("m_nTotalPlayersFound"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32 m_nTotalPlayersFound
     * }
     */
    public static final OfInt m_nTotalPlayersFound$layout() {
        return m_nTotalPlayersFound$LAYOUT;
    }

    private static final long m_nTotalPlayersFound$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32 m_nTotalPlayersFound
     * }
     */
    public static final long m_nTotalPlayersFound$offset() {
        return m_nTotalPlayersFound$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32 m_nTotalPlayersFound
     * }
     */
    public static int m_nTotalPlayersFound(MemorySegment struct) {
        return struct.get(m_nTotalPlayersFound$LAYOUT, m_nTotalPlayersFound$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32 m_nTotalPlayersFound
     * }
     */
    public static void m_nTotalPlayersFound(MemorySegment struct, int fieldValue) {
        struct.set(m_nTotalPlayersFound$LAYOUT, m_nTotalPlayersFound$OFFSET, fieldValue);
    }

    private static final OfInt m_nTotalPlayersAcceptedGame$LAYOUT = (OfInt)$LAYOUT.select(groupElement("m_nTotalPlayersAcceptedGame"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32 m_nTotalPlayersAcceptedGame
     * }
     */
    public static final OfInt m_nTotalPlayersAcceptedGame$layout() {
        return m_nTotalPlayersAcceptedGame$LAYOUT;
    }

    private static final long m_nTotalPlayersAcceptedGame$OFFSET = 44;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32 m_nTotalPlayersAcceptedGame
     * }
     */
    public static final long m_nTotalPlayersAcceptedGame$offset() {
        return m_nTotalPlayersAcceptedGame$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32 m_nTotalPlayersAcceptedGame
     * }
     */
    public static int m_nTotalPlayersAcceptedGame(MemorySegment struct) {
        return struct.get(m_nTotalPlayersAcceptedGame$LAYOUT, m_nTotalPlayersAcceptedGame$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32 m_nTotalPlayersAcceptedGame
     * }
     */
    public static void m_nTotalPlayersAcceptedGame(MemorySegment struct, int fieldValue) {
        struct.set(m_nTotalPlayersAcceptedGame$LAYOUT, m_nTotalPlayersAcceptedGame$OFFSET, fieldValue);
    }

    private static final OfInt m_nSuggestedTeamIndex$LAYOUT = (OfInt)$LAYOUT.select(groupElement("m_nSuggestedTeamIndex"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32 m_nSuggestedTeamIndex
     * }
     */
    public static final OfInt m_nSuggestedTeamIndex$layout() {
        return m_nSuggestedTeamIndex$LAYOUT;
    }

    private static final long m_nSuggestedTeamIndex$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32 m_nSuggestedTeamIndex
     * }
     */
    public static final long m_nSuggestedTeamIndex$offset() {
        return m_nSuggestedTeamIndex$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32 m_nSuggestedTeamIndex
     * }
     */
    public static int m_nSuggestedTeamIndex(MemorySegment struct) {
        return struct.get(m_nSuggestedTeamIndex$LAYOUT, m_nSuggestedTeamIndex$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32 m_nSuggestedTeamIndex
     * }
     */
    public static void m_nSuggestedTeamIndex(MemorySegment struct, int fieldValue) {
        struct.set(m_nSuggestedTeamIndex$LAYOUT, m_nSuggestedTeamIndex$OFFSET, fieldValue);
    }

    private static final OfLong m_ullUniqueGameID$LAYOUT = (OfLong)$LAYOUT.select(groupElement("m_ullUniqueGameID"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64 m_ullUniqueGameID
     * }
     */
    public static final OfLong m_ullUniqueGameID$layout() {
        return m_ullUniqueGameID$LAYOUT;
    }

    private static final long m_ullUniqueGameID$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64 m_ullUniqueGameID
     * }
     */
    public static final long m_ullUniqueGameID$offset() {
        return m_ullUniqueGameID$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64 m_ullUniqueGameID
     * }
     */
    public static long m_ullUniqueGameID(MemorySegment struct) {
        return struct.get(m_ullUniqueGameID$LAYOUT, m_ullUniqueGameID$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64 m_ullUniqueGameID
     * }
     */
    public static void m_ullUniqueGameID(MemorySegment struct, long fieldValue) {
        struct.set(m_ullUniqueGameID$LAYOUT, m_ullUniqueGameID$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

