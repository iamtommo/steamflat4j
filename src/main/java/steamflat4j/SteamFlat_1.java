// Generated by jextract

package steamflat4j;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class SteamFlat_1 extends SteamFlat_2 {

    SteamFlat_1() {
        // Should not be called directly
    }
    private static final int dc_crosshair = (int)6L;
    /**
     * {@snippet lang=c :
     * enum EMouseCursor.dc_crosshair = 6
     * }
     */
    public static int dc_crosshair() {
        return dc_crosshair;
    }
    private static final int dc_up = (int)7L;
    /**
     * {@snippet lang=c :
     * enum EMouseCursor.dc_up = 7
     * }
     */
    public static int dc_up() {
        return dc_up;
    }
    private static final int dc_sizenw = (int)8L;
    /**
     * {@snippet lang=c :
     * enum EMouseCursor.dc_sizenw = 8
     * }
     */
    public static int dc_sizenw() {
        return dc_sizenw;
    }
    private static final int dc_sizese = (int)9L;
    /**
     * {@snippet lang=c :
     * enum EMouseCursor.dc_sizese = 9
     * }
     */
    public static int dc_sizese() {
        return dc_sizese;
    }
    private static final int dc_sizene = (int)10L;
    /**
     * {@snippet lang=c :
     * enum EMouseCursor.dc_sizene = 10
     * }
     */
    public static int dc_sizene() {
        return dc_sizene;
    }
    private static final int dc_sizesw = (int)11L;
    /**
     * {@snippet lang=c :
     * enum EMouseCursor.dc_sizesw = 11
     * }
     */
    public static int dc_sizesw() {
        return dc_sizesw;
    }
    private static final int dc_sizew = (int)12L;
    /**
     * {@snippet lang=c :
     * enum EMouseCursor.dc_sizew = 12
     * }
     */
    public static int dc_sizew() {
        return dc_sizew;
    }
    private static final int dc_sizee = (int)13L;
    /**
     * {@snippet lang=c :
     * enum EMouseCursor.dc_sizee = 13
     * }
     */
    public static int dc_sizee() {
        return dc_sizee;
    }
    private static final int dc_sizen = (int)14L;
    /**
     * {@snippet lang=c :
     * enum EMouseCursor.dc_sizen = 14
     * }
     */
    public static int dc_sizen() {
        return dc_sizen;
    }
    private static final int dc_sizes = (int)15L;
    /**
     * {@snippet lang=c :
     * enum EMouseCursor.dc_sizes = 15
     * }
     */
    public static int dc_sizes() {
        return dc_sizes;
    }
    private static final int dc_sizewe = (int)16L;
    /**
     * {@snippet lang=c :
     * enum EMouseCursor.dc_sizewe = 16
     * }
     */
    public static int dc_sizewe() {
        return dc_sizewe;
    }
    private static final int dc_sizens = (int)17L;
    /**
     * {@snippet lang=c :
     * enum EMouseCursor.dc_sizens = 17
     * }
     */
    public static int dc_sizens() {
        return dc_sizens;
    }
    private static final int dc_sizeall = (int)18L;
    /**
     * {@snippet lang=c :
     * enum EMouseCursor.dc_sizeall = 18
     * }
     */
    public static int dc_sizeall() {
        return dc_sizeall;
    }
    private static final int dc_no = (int)19L;
    /**
     * {@snippet lang=c :
     * enum EMouseCursor.dc_no = 19
     * }
     */
    public static int dc_no() {
        return dc_no;
    }
    private static final int dc_hand = (int)20L;
    /**
     * {@snippet lang=c :
     * enum EMouseCursor.dc_hand = 20
     * }
     */
    public static int dc_hand() {
        return dc_hand;
    }
    private static final int dc_blank = (int)21L;
    /**
     * {@snippet lang=c :
     * enum EMouseCursor.dc_blank = 21
     * }
     */
    public static int dc_blank() {
        return dc_blank;
    }
    private static final int dc_middle_pan = (int)22L;
    /**
     * {@snippet lang=c :
     * enum EMouseCursor.dc_middle_pan = 22
     * }
     */
    public static int dc_middle_pan() {
        return dc_middle_pan;
    }
    private static final int dc_north_pan = (int)23L;
    /**
     * {@snippet lang=c :
     * enum EMouseCursor.dc_north_pan = 23
     * }
     */
    public static int dc_north_pan() {
        return dc_north_pan;
    }
    private static final int dc_north_east_pan = (int)24L;
    /**
     * {@snippet lang=c :
     * enum EMouseCursor.dc_north_east_pan = 24
     * }
     */
    public static int dc_north_east_pan() {
        return dc_north_east_pan;
    }
    private static final int dc_east_pan = (int)25L;
    /**
     * {@snippet lang=c :
     * enum EMouseCursor.dc_east_pan = 25
     * }
     */
    public static int dc_east_pan() {
        return dc_east_pan;
    }
    private static final int dc_south_east_pan = (int)26L;
    /**
     * {@snippet lang=c :
     * enum EMouseCursor.dc_south_east_pan = 26
     * }
     */
    public static int dc_south_east_pan() {
        return dc_south_east_pan;
    }
    private static final int dc_south_pan = (int)27L;
    /**
     * {@snippet lang=c :
     * enum EMouseCursor.dc_south_pan = 27
     * }
     */
    public static int dc_south_pan() {
        return dc_south_pan;
    }
    private static final int dc_south_west_pan = (int)28L;
    /**
     * {@snippet lang=c :
     * enum EMouseCursor.dc_south_west_pan = 28
     * }
     */
    public static int dc_south_west_pan() {
        return dc_south_west_pan;
    }
    private static final int dc_west_pan = (int)29L;
    /**
     * {@snippet lang=c :
     * enum EMouseCursor.dc_west_pan = 29
     * }
     */
    public static int dc_west_pan() {
        return dc_west_pan;
    }
    private static final int dc_north_west_pan = (int)30L;
    /**
     * {@snippet lang=c :
     * enum EMouseCursor.dc_north_west_pan = 30
     * }
     */
    public static int dc_north_west_pan() {
        return dc_north_west_pan;
    }
    private static final int dc_alias = (int)31L;
    /**
     * {@snippet lang=c :
     * enum EMouseCursor.dc_alias = 31
     * }
     */
    public static int dc_alias() {
        return dc_alias;
    }
    private static final int dc_cell = (int)32L;
    /**
     * {@snippet lang=c :
     * enum EMouseCursor.dc_cell = 32
     * }
     */
    public static int dc_cell() {
        return dc_cell;
    }
    private static final int dc_colresize = (int)33L;
    /**
     * {@snippet lang=c :
     * enum EMouseCursor.dc_colresize = 33
     * }
     */
    public static int dc_colresize() {
        return dc_colresize;
    }
    private static final int dc_copycur = (int)34L;
    /**
     * {@snippet lang=c :
     * enum EMouseCursor.dc_copycur = 34
     * }
     */
    public static int dc_copycur() {
        return dc_copycur;
    }
    private static final int dc_verticaltext = (int)35L;
    /**
     * {@snippet lang=c :
     * enum EMouseCursor.dc_verticaltext = 35
     * }
     */
    public static int dc_verticaltext() {
        return dc_verticaltext;
    }
    private static final int dc_rowresize = (int)36L;
    /**
     * {@snippet lang=c :
     * enum EMouseCursor.dc_rowresize = 36
     * }
     */
    public static int dc_rowresize() {
        return dc_rowresize;
    }
    private static final int dc_zoomin = (int)37L;
    /**
     * {@snippet lang=c :
     * enum EMouseCursor.dc_zoomin = 37
     * }
     */
    public static int dc_zoomin() {
        return dc_zoomin;
    }
    private static final int dc_zoomout = (int)38L;
    /**
     * {@snippet lang=c :
     * enum EMouseCursor.dc_zoomout = 38
     * }
     */
    public static int dc_zoomout() {
        return dc_zoomout;
    }
    private static final int dc_help = (int)39L;
    /**
     * {@snippet lang=c :
     * enum EMouseCursor.dc_help = 39
     * }
     */
    public static int dc_help() {
        return dc_help;
    }
    private static final int dc_custom = (int)40L;
    /**
     * {@snippet lang=c :
     * enum EMouseCursor.dc_custom = 40
     * }
     */
    public static int dc_custom() {
        return dc_custom;
    }
    private static final int dc_last = (int)41L;
    /**
     * {@snippet lang=c :
     * enum EMouseCursor.dc_last = 41
     * }
     */
    public static int dc_last() {
        return dc_last;
    }
    private static final int k_eHTMLKeyModifier_None = (int)0L;
    /**
     * {@snippet lang=c :
     * enum EHTMLKeyModifiers.k_eHTMLKeyModifier_None = 0
     * }
     */
    public static int k_eHTMLKeyModifier_None() {
        return k_eHTMLKeyModifier_None;
    }
    private static final int k_eHTMLKeyModifier_AltDown = (int)1L;
    /**
     * {@snippet lang=c :
     * enum EHTMLKeyModifiers.k_eHTMLKeyModifier_AltDown = 1
     * }
     */
    public static int k_eHTMLKeyModifier_AltDown() {
        return k_eHTMLKeyModifier_AltDown;
    }
    private static final int k_eHTMLKeyModifier_CtrlDown = (int)2L;
    /**
     * {@snippet lang=c :
     * enum EHTMLKeyModifiers.k_eHTMLKeyModifier_CtrlDown = 2
     * }
     */
    public static int k_eHTMLKeyModifier_CtrlDown() {
        return k_eHTMLKeyModifier_CtrlDown;
    }
    private static final int k_eHTMLKeyModifier_ShiftDown = (int)4L;
    /**
     * {@snippet lang=c :
     * enum EHTMLKeyModifiers.k_eHTMLKeyModifier_ShiftDown = 4
     * }
     */
    public static int k_eHTMLKeyModifier_ShiftDown() {
        return k_eHTMLKeyModifier_ShiftDown;
    }

    private static class SteamAPI_ISteamClient_CreateSteamPipe {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamClient_CreateSteamPipe"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HSteamPipe SteamAPI_ISteamClient_CreateSteamPipe(ISteamClient ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamClient_CreateSteamPipe$descriptor() {
        return SteamAPI_ISteamClient_CreateSteamPipe.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HSteamPipe SteamAPI_ISteamClient_CreateSteamPipe(ISteamClient ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamClient_CreateSteamPipe$handle() {
        return SteamAPI_ISteamClient_CreateSteamPipe.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HSteamPipe SteamAPI_ISteamClient_CreateSteamPipe(ISteamClient ptr)
     * }
     */
    public static int SteamAPI_ISteamClient_CreateSteamPipe(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamClient_CreateSteamPipe.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamClient_CreateSteamPipe", ptr);
            }
            return (int)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamClient_BReleaseSteamPipe {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamClient_BReleaseSteamPipe"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamClient_BReleaseSteamPipe(ISteamClient ptr, HSteamPipe hSteamPipe)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamClient_BReleaseSteamPipe$descriptor() {
        return SteamAPI_ISteamClient_BReleaseSteamPipe.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamClient_BReleaseSteamPipe(ISteamClient ptr, HSteamPipe hSteamPipe)
     * }
     */
    public static MethodHandle SteamAPI_ISteamClient_BReleaseSteamPipe$handle() {
        return SteamAPI_ISteamClient_BReleaseSteamPipe.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamClient_BReleaseSteamPipe(ISteamClient ptr, HSteamPipe hSteamPipe)
     * }
     */
    public static boolean SteamAPI_ISteamClient_BReleaseSteamPipe(MemorySegment ptr, int hSteamPipe) {
        var mh$ = SteamAPI_ISteamClient_BReleaseSteamPipe.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamClient_BReleaseSteamPipe", ptr, hSteamPipe);
            }
            return (boolean)mh$.invokeExact(ptr, hSteamPipe);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamClient_ConnectToGlobalUser {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamClient_ConnectToGlobalUser"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HSteamUser SteamAPI_ISteamClient_ConnectToGlobalUser(ISteamClient ptr, HSteamPipe hSteamPipe)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamClient_ConnectToGlobalUser$descriptor() {
        return SteamAPI_ISteamClient_ConnectToGlobalUser.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HSteamUser SteamAPI_ISteamClient_ConnectToGlobalUser(ISteamClient ptr, HSteamPipe hSteamPipe)
     * }
     */
    public static MethodHandle SteamAPI_ISteamClient_ConnectToGlobalUser$handle() {
        return SteamAPI_ISteamClient_ConnectToGlobalUser.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HSteamUser SteamAPI_ISteamClient_ConnectToGlobalUser(ISteamClient ptr, HSteamPipe hSteamPipe)
     * }
     */
    public static int SteamAPI_ISteamClient_ConnectToGlobalUser(MemorySegment ptr, int hSteamPipe) {
        var mh$ = SteamAPI_ISteamClient_ConnectToGlobalUser.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamClient_ConnectToGlobalUser", ptr, hSteamPipe);
            }
            return (int)mh$.invokeExact(ptr, hSteamPipe);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamClient_CreateLocalUser {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamClient_CreateLocalUser"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HSteamUser SteamAPI_ISteamClient_CreateLocalUser(ISteamClient ptr, HSteamPipe *phSteamPipe, EAccountType eAccountType)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamClient_CreateLocalUser$descriptor() {
        return SteamAPI_ISteamClient_CreateLocalUser.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HSteamUser SteamAPI_ISteamClient_CreateLocalUser(ISteamClient ptr, HSteamPipe *phSteamPipe, EAccountType eAccountType)
     * }
     */
    public static MethodHandle SteamAPI_ISteamClient_CreateLocalUser$handle() {
        return SteamAPI_ISteamClient_CreateLocalUser.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HSteamUser SteamAPI_ISteamClient_CreateLocalUser(ISteamClient ptr, HSteamPipe *phSteamPipe, EAccountType eAccountType)
     * }
     */
    public static int SteamAPI_ISteamClient_CreateLocalUser(MemorySegment ptr, MemorySegment phSteamPipe, int eAccountType) {
        var mh$ = SteamAPI_ISteamClient_CreateLocalUser.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamClient_CreateLocalUser", ptr, phSteamPipe, eAccountType);
            }
            return (int)mh$.invokeExact(ptr, phSteamPipe, eAccountType);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamClient_ReleaseUser {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamClient_ReleaseUser"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamClient_ReleaseUser(ISteamClient ptr, HSteamPipe hSteamPipe, HSteamUser hUser)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamClient_ReleaseUser$descriptor() {
        return SteamAPI_ISteamClient_ReleaseUser.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamClient_ReleaseUser(ISteamClient ptr, HSteamPipe hSteamPipe, HSteamUser hUser)
     * }
     */
    public static MethodHandle SteamAPI_ISteamClient_ReleaseUser$handle() {
        return SteamAPI_ISteamClient_ReleaseUser.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamClient_ReleaseUser(ISteamClient ptr, HSteamPipe hSteamPipe, HSteamUser hUser)
     * }
     */
    public static void SteamAPI_ISteamClient_ReleaseUser(MemorySegment ptr, int hSteamPipe, int hUser) {
        var mh$ = SteamAPI_ISteamClient_ReleaseUser.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamClient_ReleaseUser", ptr, hSteamPipe, hUser);
            }
            mh$.invokeExact(ptr, hSteamPipe, hUser);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamClient_GetISteamUser {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamClient_GetISteamUser"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ISteamUser *SteamAPI_ISteamClient_GetISteamUser(ISteamClient ptr, HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamClient_GetISteamUser$descriptor() {
        return SteamAPI_ISteamClient_GetISteamUser.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ISteamUser *SteamAPI_ISteamClient_GetISteamUser(ISteamClient ptr, HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static MethodHandle SteamAPI_ISteamClient_GetISteamUser$handle() {
        return SteamAPI_ISteamClient_GetISteamUser.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ISteamUser *SteamAPI_ISteamClient_GetISteamUser(ISteamClient ptr, HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static MemorySegment SteamAPI_ISteamClient_GetISteamUser(MemorySegment ptr, int hSteamUser, int hSteamPipe, MemorySegment pchVersion) {
        var mh$ = SteamAPI_ISteamClient_GetISteamUser.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamClient_GetISteamUser", ptr, hSteamUser, hSteamPipe, pchVersion);
            }
            return (MemorySegment)mh$.invokeExact(ptr, hSteamUser, hSteamPipe, pchVersion);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamClient_GetISteamGameServer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamClient_GetISteamGameServer"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ISteamGameServer *SteamAPI_ISteamClient_GetISteamGameServer(ISteamClient ptr, HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamClient_GetISteamGameServer$descriptor() {
        return SteamAPI_ISteamClient_GetISteamGameServer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ISteamGameServer *SteamAPI_ISteamClient_GetISteamGameServer(ISteamClient ptr, HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static MethodHandle SteamAPI_ISteamClient_GetISteamGameServer$handle() {
        return SteamAPI_ISteamClient_GetISteamGameServer.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ISteamGameServer *SteamAPI_ISteamClient_GetISteamGameServer(ISteamClient ptr, HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static MemorySegment SteamAPI_ISteamClient_GetISteamGameServer(MemorySegment ptr, int hSteamUser, int hSteamPipe, MemorySegment pchVersion) {
        var mh$ = SteamAPI_ISteamClient_GetISteamGameServer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamClient_GetISteamGameServer", ptr, hSteamUser, hSteamPipe, pchVersion);
            }
            return (MemorySegment)mh$.invokeExact(ptr, hSteamUser, hSteamPipe, pchVersion);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamClient_SetLocalIPBinding {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_SHORT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamClient_SetLocalIPBinding"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamClient_SetLocalIPBinding(ISteamClient ptr, const SteamIPAddress_t *unIP, uint16 usPort)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamClient_SetLocalIPBinding$descriptor() {
        return SteamAPI_ISteamClient_SetLocalIPBinding.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamClient_SetLocalIPBinding(ISteamClient ptr, const SteamIPAddress_t *unIP, uint16 usPort)
     * }
     */
    public static MethodHandle SteamAPI_ISteamClient_SetLocalIPBinding$handle() {
        return SteamAPI_ISteamClient_SetLocalIPBinding.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamClient_SetLocalIPBinding(ISteamClient ptr, const SteamIPAddress_t *unIP, uint16 usPort)
     * }
     */
    public static void SteamAPI_ISteamClient_SetLocalIPBinding(MemorySegment ptr, MemorySegment unIP, short usPort) {
        var mh$ = SteamAPI_ISteamClient_SetLocalIPBinding.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamClient_SetLocalIPBinding", ptr, unIP, usPort);
            }
            mh$.invokeExact(ptr, unIP, usPort);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamClient_GetISteamFriends {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamClient_GetISteamFriends"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ISteamFriends *SteamAPI_ISteamClient_GetISteamFriends(ISteamClient ptr, HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamClient_GetISteamFriends$descriptor() {
        return SteamAPI_ISteamClient_GetISteamFriends.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ISteamFriends *SteamAPI_ISteamClient_GetISteamFriends(ISteamClient ptr, HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static MethodHandle SteamAPI_ISteamClient_GetISteamFriends$handle() {
        return SteamAPI_ISteamClient_GetISteamFriends.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ISteamFriends *SteamAPI_ISteamClient_GetISteamFriends(ISteamClient ptr, HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static MemorySegment SteamAPI_ISteamClient_GetISteamFriends(MemorySegment ptr, int hSteamUser, int hSteamPipe, MemorySegment pchVersion) {
        var mh$ = SteamAPI_ISteamClient_GetISteamFriends.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamClient_GetISteamFriends", ptr, hSteamUser, hSteamPipe, pchVersion);
            }
            return (MemorySegment)mh$.invokeExact(ptr, hSteamUser, hSteamPipe, pchVersion);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamClient_GetISteamUtils {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamClient_GetISteamUtils"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ISteamUtils *SteamAPI_ISteamClient_GetISteamUtils(ISteamClient ptr, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamClient_GetISteamUtils$descriptor() {
        return SteamAPI_ISteamClient_GetISteamUtils.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ISteamUtils *SteamAPI_ISteamClient_GetISteamUtils(ISteamClient ptr, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static MethodHandle SteamAPI_ISteamClient_GetISteamUtils$handle() {
        return SteamAPI_ISteamClient_GetISteamUtils.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ISteamUtils *SteamAPI_ISteamClient_GetISteamUtils(ISteamClient ptr, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static MemorySegment SteamAPI_ISteamClient_GetISteamUtils(MemorySegment ptr, int hSteamPipe, MemorySegment pchVersion) {
        var mh$ = SteamAPI_ISteamClient_GetISteamUtils.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamClient_GetISteamUtils", ptr, hSteamPipe, pchVersion);
            }
            return (MemorySegment)mh$.invokeExact(ptr, hSteamPipe, pchVersion);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamClient_GetISteamMatchmaking {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamClient_GetISteamMatchmaking"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ISteamMatchmaking *SteamAPI_ISteamClient_GetISteamMatchmaking(ISteamClient ptr, HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamClient_GetISteamMatchmaking$descriptor() {
        return SteamAPI_ISteamClient_GetISteamMatchmaking.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ISteamMatchmaking *SteamAPI_ISteamClient_GetISteamMatchmaking(ISteamClient ptr, HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static MethodHandle SteamAPI_ISteamClient_GetISteamMatchmaking$handle() {
        return SteamAPI_ISteamClient_GetISteamMatchmaking.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ISteamMatchmaking *SteamAPI_ISteamClient_GetISteamMatchmaking(ISteamClient ptr, HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static MemorySegment SteamAPI_ISteamClient_GetISteamMatchmaking(MemorySegment ptr, int hSteamUser, int hSteamPipe, MemorySegment pchVersion) {
        var mh$ = SteamAPI_ISteamClient_GetISteamMatchmaking.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamClient_GetISteamMatchmaking", ptr, hSteamUser, hSteamPipe, pchVersion);
            }
            return (MemorySegment)mh$.invokeExact(ptr, hSteamUser, hSteamPipe, pchVersion);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamClient_GetISteamMatchmakingServers {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamClient_GetISteamMatchmakingServers"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ISteamMatchmakingServers *SteamAPI_ISteamClient_GetISteamMatchmakingServers(ISteamClient ptr, HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamClient_GetISteamMatchmakingServers$descriptor() {
        return SteamAPI_ISteamClient_GetISteamMatchmakingServers.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ISteamMatchmakingServers *SteamAPI_ISteamClient_GetISteamMatchmakingServers(ISteamClient ptr, HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static MethodHandle SteamAPI_ISteamClient_GetISteamMatchmakingServers$handle() {
        return SteamAPI_ISteamClient_GetISteamMatchmakingServers.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ISteamMatchmakingServers *SteamAPI_ISteamClient_GetISteamMatchmakingServers(ISteamClient ptr, HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static MemorySegment SteamAPI_ISteamClient_GetISteamMatchmakingServers(MemorySegment ptr, int hSteamUser, int hSteamPipe, MemorySegment pchVersion) {
        var mh$ = SteamAPI_ISteamClient_GetISteamMatchmakingServers.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamClient_GetISteamMatchmakingServers", ptr, hSteamUser, hSteamPipe, pchVersion);
            }
            return (MemorySegment)mh$.invokeExact(ptr, hSteamUser, hSteamPipe, pchVersion);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamClient_GetISteamGenericInterface {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamClient_GetISteamGenericInterface"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *SteamAPI_ISteamClient_GetISteamGenericInterface(ISteamClient ptr, HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamClient_GetISteamGenericInterface$descriptor() {
        return SteamAPI_ISteamClient_GetISteamGenericInterface.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *SteamAPI_ISteamClient_GetISteamGenericInterface(ISteamClient ptr, HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static MethodHandle SteamAPI_ISteamClient_GetISteamGenericInterface$handle() {
        return SteamAPI_ISteamClient_GetISteamGenericInterface.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void *SteamAPI_ISteamClient_GetISteamGenericInterface(ISteamClient ptr, HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static MemorySegment SteamAPI_ISteamClient_GetISteamGenericInterface(MemorySegment ptr, int hSteamUser, int hSteamPipe, MemorySegment pchVersion) {
        var mh$ = SteamAPI_ISteamClient_GetISteamGenericInterface.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamClient_GetISteamGenericInterface", ptr, hSteamUser, hSteamPipe, pchVersion);
            }
            return (MemorySegment)mh$.invokeExact(ptr, hSteamUser, hSteamPipe, pchVersion);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamClient_GetISteamUserStats {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamClient_GetISteamUserStats"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ISteamUserStats *SteamAPI_ISteamClient_GetISteamUserStats(ISteamClient ptr, HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamClient_GetISteamUserStats$descriptor() {
        return SteamAPI_ISteamClient_GetISteamUserStats.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ISteamUserStats *SteamAPI_ISteamClient_GetISteamUserStats(ISteamClient ptr, HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static MethodHandle SteamAPI_ISteamClient_GetISteamUserStats$handle() {
        return SteamAPI_ISteamClient_GetISteamUserStats.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ISteamUserStats *SteamAPI_ISteamClient_GetISteamUserStats(ISteamClient ptr, HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static MemorySegment SteamAPI_ISteamClient_GetISteamUserStats(MemorySegment ptr, int hSteamUser, int hSteamPipe, MemorySegment pchVersion) {
        var mh$ = SteamAPI_ISteamClient_GetISteamUserStats.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamClient_GetISteamUserStats", ptr, hSteamUser, hSteamPipe, pchVersion);
            }
            return (MemorySegment)mh$.invokeExact(ptr, hSteamUser, hSteamPipe, pchVersion);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamClient_GetISteamGameServerStats {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamClient_GetISteamGameServerStats"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ISteamGameServerStats *SteamAPI_ISteamClient_GetISteamGameServerStats(ISteamClient ptr, HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamClient_GetISteamGameServerStats$descriptor() {
        return SteamAPI_ISteamClient_GetISteamGameServerStats.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ISteamGameServerStats *SteamAPI_ISteamClient_GetISteamGameServerStats(ISteamClient ptr, HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static MethodHandle SteamAPI_ISteamClient_GetISteamGameServerStats$handle() {
        return SteamAPI_ISteamClient_GetISteamGameServerStats.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ISteamGameServerStats *SteamAPI_ISteamClient_GetISteamGameServerStats(ISteamClient ptr, HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static MemorySegment SteamAPI_ISteamClient_GetISteamGameServerStats(MemorySegment ptr, int hSteamuser, int hSteamPipe, MemorySegment pchVersion) {
        var mh$ = SteamAPI_ISteamClient_GetISteamGameServerStats.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamClient_GetISteamGameServerStats", ptr, hSteamuser, hSteamPipe, pchVersion);
            }
            return (MemorySegment)mh$.invokeExact(ptr, hSteamuser, hSteamPipe, pchVersion);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamClient_GetISteamApps {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamClient_GetISteamApps"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ISteamApps *SteamAPI_ISteamClient_GetISteamApps(ISteamClient ptr, HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamClient_GetISteamApps$descriptor() {
        return SteamAPI_ISteamClient_GetISteamApps.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ISteamApps *SteamAPI_ISteamClient_GetISteamApps(ISteamClient ptr, HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static MethodHandle SteamAPI_ISteamClient_GetISteamApps$handle() {
        return SteamAPI_ISteamClient_GetISteamApps.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ISteamApps *SteamAPI_ISteamClient_GetISteamApps(ISteamClient ptr, HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static MemorySegment SteamAPI_ISteamClient_GetISteamApps(MemorySegment ptr, int hSteamUser, int hSteamPipe, MemorySegment pchVersion) {
        var mh$ = SteamAPI_ISteamClient_GetISteamApps.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamClient_GetISteamApps", ptr, hSteamUser, hSteamPipe, pchVersion);
            }
            return (MemorySegment)mh$.invokeExact(ptr, hSteamUser, hSteamPipe, pchVersion);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamClient_GetISteamNetworking {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamClient_GetISteamNetworking"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ISteamNetworking *SteamAPI_ISteamClient_GetISteamNetworking(ISteamClient ptr, HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamClient_GetISteamNetworking$descriptor() {
        return SteamAPI_ISteamClient_GetISteamNetworking.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ISteamNetworking *SteamAPI_ISteamClient_GetISteamNetworking(ISteamClient ptr, HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static MethodHandle SteamAPI_ISteamClient_GetISteamNetworking$handle() {
        return SteamAPI_ISteamClient_GetISteamNetworking.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ISteamNetworking *SteamAPI_ISteamClient_GetISteamNetworking(ISteamClient ptr, HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static MemorySegment SteamAPI_ISteamClient_GetISteamNetworking(MemorySegment ptr, int hSteamUser, int hSteamPipe, MemorySegment pchVersion) {
        var mh$ = SteamAPI_ISteamClient_GetISteamNetworking.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamClient_GetISteamNetworking", ptr, hSteamUser, hSteamPipe, pchVersion);
            }
            return (MemorySegment)mh$.invokeExact(ptr, hSteamUser, hSteamPipe, pchVersion);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamClient_GetISteamRemoteStorage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamClient_GetISteamRemoteStorage"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ISteamRemoteStorage *SteamAPI_ISteamClient_GetISteamRemoteStorage(ISteamClient ptr, HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamClient_GetISteamRemoteStorage$descriptor() {
        return SteamAPI_ISteamClient_GetISteamRemoteStorage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ISteamRemoteStorage *SteamAPI_ISteamClient_GetISteamRemoteStorage(ISteamClient ptr, HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static MethodHandle SteamAPI_ISteamClient_GetISteamRemoteStorage$handle() {
        return SteamAPI_ISteamClient_GetISteamRemoteStorage.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ISteamRemoteStorage *SteamAPI_ISteamClient_GetISteamRemoteStorage(ISteamClient ptr, HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static MemorySegment SteamAPI_ISteamClient_GetISteamRemoteStorage(MemorySegment ptr, int hSteamuser, int hSteamPipe, MemorySegment pchVersion) {
        var mh$ = SteamAPI_ISteamClient_GetISteamRemoteStorage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamClient_GetISteamRemoteStorage", ptr, hSteamuser, hSteamPipe, pchVersion);
            }
            return (MemorySegment)mh$.invokeExact(ptr, hSteamuser, hSteamPipe, pchVersion);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamClient_GetISteamScreenshots {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamClient_GetISteamScreenshots"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ISteamScreenshots *SteamAPI_ISteamClient_GetISteamScreenshots(ISteamClient ptr, HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamClient_GetISteamScreenshots$descriptor() {
        return SteamAPI_ISteamClient_GetISteamScreenshots.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ISteamScreenshots *SteamAPI_ISteamClient_GetISteamScreenshots(ISteamClient ptr, HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static MethodHandle SteamAPI_ISteamClient_GetISteamScreenshots$handle() {
        return SteamAPI_ISteamClient_GetISteamScreenshots.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ISteamScreenshots *SteamAPI_ISteamClient_GetISteamScreenshots(ISteamClient ptr, HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static MemorySegment SteamAPI_ISteamClient_GetISteamScreenshots(MemorySegment ptr, int hSteamuser, int hSteamPipe, MemorySegment pchVersion) {
        var mh$ = SteamAPI_ISteamClient_GetISteamScreenshots.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamClient_GetISteamScreenshots", ptr, hSteamuser, hSteamPipe, pchVersion);
            }
            return (MemorySegment)mh$.invokeExact(ptr, hSteamuser, hSteamPipe, pchVersion);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamClient_GetISteamGameSearch {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamClient_GetISteamGameSearch"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ISteamGameSearch *SteamAPI_ISteamClient_GetISteamGameSearch(ISteamClient ptr, HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamClient_GetISteamGameSearch$descriptor() {
        return SteamAPI_ISteamClient_GetISteamGameSearch.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ISteamGameSearch *SteamAPI_ISteamClient_GetISteamGameSearch(ISteamClient ptr, HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static MethodHandle SteamAPI_ISteamClient_GetISteamGameSearch$handle() {
        return SteamAPI_ISteamClient_GetISteamGameSearch.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ISteamGameSearch *SteamAPI_ISteamClient_GetISteamGameSearch(ISteamClient ptr, HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static MemorySegment SteamAPI_ISteamClient_GetISteamGameSearch(MemorySegment ptr, int hSteamuser, int hSteamPipe, MemorySegment pchVersion) {
        var mh$ = SteamAPI_ISteamClient_GetISteamGameSearch.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamClient_GetISteamGameSearch", ptr, hSteamuser, hSteamPipe, pchVersion);
            }
            return (MemorySegment)mh$.invokeExact(ptr, hSteamuser, hSteamPipe, pchVersion);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamClient_GetIPCCallCount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamClient_GetIPCCallCount"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamClient_GetIPCCallCount(ISteamClient ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamClient_GetIPCCallCount$descriptor() {
        return SteamAPI_ISteamClient_GetIPCCallCount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamClient_GetIPCCallCount(ISteamClient ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamClient_GetIPCCallCount$handle() {
        return SteamAPI_ISteamClient_GetIPCCallCount.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamClient_GetIPCCallCount(ISteamClient ptr)
     * }
     */
    public static int SteamAPI_ISteamClient_GetIPCCallCount(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamClient_GetIPCCallCount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamClient_GetIPCCallCount", ptr);
            }
            return (int)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamClient_BShutdownIfAllPipesClosed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamClient_BShutdownIfAllPipesClosed"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamClient_BShutdownIfAllPipesClosed(ISteamClient ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamClient_BShutdownIfAllPipesClosed$descriptor() {
        return SteamAPI_ISteamClient_BShutdownIfAllPipesClosed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamClient_BShutdownIfAllPipesClosed(ISteamClient ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamClient_BShutdownIfAllPipesClosed$handle() {
        return SteamAPI_ISteamClient_BShutdownIfAllPipesClosed.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamClient_BShutdownIfAllPipesClosed(ISteamClient ptr)
     * }
     */
    public static boolean SteamAPI_ISteamClient_BShutdownIfAllPipesClosed(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamClient_BShutdownIfAllPipesClosed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamClient_BShutdownIfAllPipesClosed", ptr);
            }
            return (boolean)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamClient_GetISteamHTTP {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamClient_GetISteamHTTP"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ISteamHTTP *SteamAPI_ISteamClient_GetISteamHTTP(ISteamClient ptr, HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamClient_GetISteamHTTP$descriptor() {
        return SteamAPI_ISteamClient_GetISteamHTTP.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ISteamHTTP *SteamAPI_ISteamClient_GetISteamHTTP(ISteamClient ptr, HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static MethodHandle SteamAPI_ISteamClient_GetISteamHTTP$handle() {
        return SteamAPI_ISteamClient_GetISteamHTTP.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ISteamHTTP *SteamAPI_ISteamClient_GetISteamHTTP(ISteamClient ptr, HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static MemorySegment SteamAPI_ISteamClient_GetISteamHTTP(MemorySegment ptr, int hSteamuser, int hSteamPipe, MemorySegment pchVersion) {
        var mh$ = SteamAPI_ISteamClient_GetISteamHTTP.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamClient_GetISteamHTTP", ptr, hSteamuser, hSteamPipe, pchVersion);
            }
            return (MemorySegment)mh$.invokeExact(ptr, hSteamuser, hSteamPipe, pchVersion);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamClient_GetISteamController {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamClient_GetISteamController"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ISteamController *SteamAPI_ISteamClient_GetISteamController(ISteamClient ptr, HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamClient_GetISteamController$descriptor() {
        return SteamAPI_ISteamClient_GetISteamController.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ISteamController *SteamAPI_ISteamClient_GetISteamController(ISteamClient ptr, HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static MethodHandle SteamAPI_ISteamClient_GetISteamController$handle() {
        return SteamAPI_ISteamClient_GetISteamController.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ISteamController *SteamAPI_ISteamClient_GetISteamController(ISteamClient ptr, HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static MemorySegment SteamAPI_ISteamClient_GetISteamController(MemorySegment ptr, int hSteamUser, int hSteamPipe, MemorySegment pchVersion) {
        var mh$ = SteamAPI_ISteamClient_GetISteamController.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamClient_GetISteamController", ptr, hSteamUser, hSteamPipe, pchVersion);
            }
            return (MemorySegment)mh$.invokeExact(ptr, hSteamUser, hSteamPipe, pchVersion);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamClient_GetISteamUGC {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamClient_GetISteamUGC"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ISteamUGC *SteamAPI_ISteamClient_GetISteamUGC(ISteamClient ptr, HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamClient_GetISteamUGC$descriptor() {
        return SteamAPI_ISteamClient_GetISteamUGC.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ISteamUGC *SteamAPI_ISteamClient_GetISteamUGC(ISteamClient ptr, HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static MethodHandle SteamAPI_ISteamClient_GetISteamUGC$handle() {
        return SteamAPI_ISteamClient_GetISteamUGC.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ISteamUGC *SteamAPI_ISteamClient_GetISteamUGC(ISteamClient ptr, HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static MemorySegment SteamAPI_ISteamClient_GetISteamUGC(MemorySegment ptr, int hSteamUser, int hSteamPipe, MemorySegment pchVersion) {
        var mh$ = SteamAPI_ISteamClient_GetISteamUGC.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamClient_GetISteamUGC", ptr, hSteamUser, hSteamPipe, pchVersion);
            }
            return (MemorySegment)mh$.invokeExact(ptr, hSteamUser, hSteamPipe, pchVersion);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamClient_GetISteamMusic {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamClient_GetISteamMusic"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ISteamMusic *SteamAPI_ISteamClient_GetISteamMusic(ISteamClient ptr, HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamClient_GetISteamMusic$descriptor() {
        return SteamAPI_ISteamClient_GetISteamMusic.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ISteamMusic *SteamAPI_ISteamClient_GetISteamMusic(ISteamClient ptr, HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static MethodHandle SteamAPI_ISteamClient_GetISteamMusic$handle() {
        return SteamAPI_ISteamClient_GetISteamMusic.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ISteamMusic *SteamAPI_ISteamClient_GetISteamMusic(ISteamClient ptr, HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static MemorySegment SteamAPI_ISteamClient_GetISteamMusic(MemorySegment ptr, int hSteamuser, int hSteamPipe, MemorySegment pchVersion) {
        var mh$ = SteamAPI_ISteamClient_GetISteamMusic.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamClient_GetISteamMusic", ptr, hSteamuser, hSteamPipe, pchVersion);
            }
            return (MemorySegment)mh$.invokeExact(ptr, hSteamuser, hSteamPipe, pchVersion);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamClient_GetISteamMusicRemote {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamClient_GetISteamMusicRemote"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ISteamMusicRemote *SteamAPI_ISteamClient_GetISteamMusicRemote(ISteamClient ptr, HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamClient_GetISteamMusicRemote$descriptor() {
        return SteamAPI_ISteamClient_GetISteamMusicRemote.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ISteamMusicRemote *SteamAPI_ISteamClient_GetISteamMusicRemote(ISteamClient ptr, HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static MethodHandle SteamAPI_ISteamClient_GetISteamMusicRemote$handle() {
        return SteamAPI_ISteamClient_GetISteamMusicRemote.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ISteamMusicRemote *SteamAPI_ISteamClient_GetISteamMusicRemote(ISteamClient ptr, HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static MemorySegment SteamAPI_ISteamClient_GetISteamMusicRemote(MemorySegment ptr, int hSteamuser, int hSteamPipe, MemorySegment pchVersion) {
        var mh$ = SteamAPI_ISteamClient_GetISteamMusicRemote.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamClient_GetISteamMusicRemote", ptr, hSteamuser, hSteamPipe, pchVersion);
            }
            return (MemorySegment)mh$.invokeExact(ptr, hSteamuser, hSteamPipe, pchVersion);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamClient_GetISteamHTMLSurface {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamClient_GetISteamHTMLSurface"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ISteamHTMLSurface *SteamAPI_ISteamClient_GetISteamHTMLSurface(ISteamClient ptr, HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamClient_GetISteamHTMLSurface$descriptor() {
        return SteamAPI_ISteamClient_GetISteamHTMLSurface.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ISteamHTMLSurface *SteamAPI_ISteamClient_GetISteamHTMLSurface(ISteamClient ptr, HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static MethodHandle SteamAPI_ISteamClient_GetISteamHTMLSurface$handle() {
        return SteamAPI_ISteamClient_GetISteamHTMLSurface.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ISteamHTMLSurface *SteamAPI_ISteamClient_GetISteamHTMLSurface(ISteamClient ptr, HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static MemorySegment SteamAPI_ISteamClient_GetISteamHTMLSurface(MemorySegment ptr, int hSteamuser, int hSteamPipe, MemorySegment pchVersion) {
        var mh$ = SteamAPI_ISteamClient_GetISteamHTMLSurface.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamClient_GetISteamHTMLSurface", ptr, hSteamuser, hSteamPipe, pchVersion);
            }
            return (MemorySegment)mh$.invokeExact(ptr, hSteamuser, hSteamPipe, pchVersion);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamClient_GetISteamInventory {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamClient_GetISteamInventory"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ISteamInventory *SteamAPI_ISteamClient_GetISteamInventory(ISteamClient ptr, HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamClient_GetISteamInventory$descriptor() {
        return SteamAPI_ISteamClient_GetISteamInventory.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ISteamInventory *SteamAPI_ISteamClient_GetISteamInventory(ISteamClient ptr, HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static MethodHandle SteamAPI_ISteamClient_GetISteamInventory$handle() {
        return SteamAPI_ISteamClient_GetISteamInventory.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ISteamInventory *SteamAPI_ISteamClient_GetISteamInventory(ISteamClient ptr, HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static MemorySegment SteamAPI_ISteamClient_GetISteamInventory(MemorySegment ptr, int hSteamuser, int hSteamPipe, MemorySegment pchVersion) {
        var mh$ = SteamAPI_ISteamClient_GetISteamInventory.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamClient_GetISteamInventory", ptr, hSteamuser, hSteamPipe, pchVersion);
            }
            return (MemorySegment)mh$.invokeExact(ptr, hSteamuser, hSteamPipe, pchVersion);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamClient_GetISteamParentalSettings {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamClient_GetISteamParentalSettings"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ISteamParentalSettings *SteamAPI_ISteamClient_GetISteamParentalSettings(ISteamClient ptr, HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamClient_GetISteamParentalSettings$descriptor() {
        return SteamAPI_ISteamClient_GetISteamParentalSettings.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ISteamParentalSettings *SteamAPI_ISteamClient_GetISteamParentalSettings(ISteamClient ptr, HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static MethodHandle SteamAPI_ISteamClient_GetISteamParentalSettings$handle() {
        return SteamAPI_ISteamClient_GetISteamParentalSettings.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ISteamParentalSettings *SteamAPI_ISteamClient_GetISteamParentalSettings(ISteamClient ptr, HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static MemorySegment SteamAPI_ISteamClient_GetISteamParentalSettings(MemorySegment ptr, int hSteamuser, int hSteamPipe, MemorySegment pchVersion) {
        var mh$ = SteamAPI_ISteamClient_GetISteamParentalSettings.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamClient_GetISteamParentalSettings", ptr, hSteamuser, hSteamPipe, pchVersion);
            }
            return (MemorySegment)mh$.invokeExact(ptr, hSteamuser, hSteamPipe, pchVersion);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamClient_GetISteamInput {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamClient_GetISteamInput"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ISteamInput *SteamAPI_ISteamClient_GetISteamInput(ISteamClient ptr, HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamClient_GetISteamInput$descriptor() {
        return SteamAPI_ISteamClient_GetISteamInput.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ISteamInput *SteamAPI_ISteamClient_GetISteamInput(ISteamClient ptr, HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static MethodHandle SteamAPI_ISteamClient_GetISteamInput$handle() {
        return SteamAPI_ISteamClient_GetISteamInput.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ISteamInput *SteamAPI_ISteamClient_GetISteamInput(ISteamClient ptr, HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static MemorySegment SteamAPI_ISteamClient_GetISteamInput(MemorySegment ptr, int hSteamUser, int hSteamPipe, MemorySegment pchVersion) {
        var mh$ = SteamAPI_ISteamClient_GetISteamInput.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamClient_GetISteamInput", ptr, hSteamUser, hSteamPipe, pchVersion);
            }
            return (MemorySegment)mh$.invokeExact(ptr, hSteamUser, hSteamPipe, pchVersion);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamClient_GetISteamParties {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamClient_GetISteamParties"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ISteamParties *SteamAPI_ISteamClient_GetISteamParties(ISteamClient ptr, HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamClient_GetISteamParties$descriptor() {
        return SteamAPI_ISteamClient_GetISteamParties.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ISteamParties *SteamAPI_ISteamClient_GetISteamParties(ISteamClient ptr, HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static MethodHandle SteamAPI_ISteamClient_GetISteamParties$handle() {
        return SteamAPI_ISteamClient_GetISteamParties.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ISteamParties *SteamAPI_ISteamClient_GetISteamParties(ISteamClient ptr, HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static MemorySegment SteamAPI_ISteamClient_GetISteamParties(MemorySegment ptr, int hSteamUser, int hSteamPipe, MemorySegment pchVersion) {
        var mh$ = SteamAPI_ISteamClient_GetISteamParties.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamClient_GetISteamParties", ptr, hSteamUser, hSteamPipe, pchVersion);
            }
            return (MemorySegment)mh$.invokeExact(ptr, hSteamUser, hSteamPipe, pchVersion);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamClient_GetISteamRemotePlay {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamClient_GetISteamRemotePlay"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ISteamRemotePlay *SteamAPI_ISteamClient_GetISteamRemotePlay(ISteamClient ptr, HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamClient_GetISteamRemotePlay$descriptor() {
        return SteamAPI_ISteamClient_GetISteamRemotePlay.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ISteamRemotePlay *SteamAPI_ISteamClient_GetISteamRemotePlay(ISteamClient ptr, HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static MethodHandle SteamAPI_ISteamClient_GetISteamRemotePlay$handle() {
        return SteamAPI_ISteamClient_GetISteamRemotePlay.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ISteamRemotePlay *SteamAPI_ISteamClient_GetISteamRemotePlay(ISteamClient ptr, HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static MemorySegment SteamAPI_ISteamClient_GetISteamRemotePlay(MemorySegment ptr, int hSteamUser, int hSteamPipe, MemorySegment pchVersion) {
        var mh$ = SteamAPI_ISteamClient_GetISteamRemotePlay.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamClient_GetISteamRemotePlay", ptr, hSteamUser, hSteamPipe, pchVersion);
            }
            return (MemorySegment)mh$.invokeExact(ptr, hSteamUser, hSteamPipe, pchVersion);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUser_GetHSteamUser {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUser_GetHSteamUser"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HSteamUser SteamAPI_ISteamUser_GetHSteamUser(ISteamUser ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUser_GetHSteamUser$descriptor() {
        return SteamAPI_ISteamUser_GetHSteamUser.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HSteamUser SteamAPI_ISteamUser_GetHSteamUser(ISteamUser ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUser_GetHSteamUser$handle() {
        return SteamAPI_ISteamUser_GetHSteamUser.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HSteamUser SteamAPI_ISteamUser_GetHSteamUser(ISteamUser ptr)
     * }
     */
    public static int SteamAPI_ISteamUser_GetHSteamUser(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamUser_GetHSteamUser.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUser_GetHSteamUser", ptr);
            }
            return (int)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUser_BLoggedOn {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUser_BLoggedOn"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUser_BLoggedOn(ISteamUser ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUser_BLoggedOn$descriptor() {
        return SteamAPI_ISteamUser_BLoggedOn.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUser_BLoggedOn(ISteamUser ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUser_BLoggedOn$handle() {
        return SteamAPI_ISteamUser_BLoggedOn.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUser_BLoggedOn(ISteamUser ptr)
     * }
     */
    public static boolean SteamAPI_ISteamUser_BLoggedOn(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamUser_BLoggedOn.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUser_BLoggedOn", ptr);
            }
            return (boolean)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUser_GetSteamID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUser_GetSteamID"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint64_steamid SteamAPI_ISteamUser_GetSteamID(ISteamUser ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUser_GetSteamID$descriptor() {
        return SteamAPI_ISteamUser_GetSteamID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint64_steamid SteamAPI_ISteamUser_GetSteamID(ISteamUser ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUser_GetSteamID$handle() {
        return SteamAPI_ISteamUser_GetSteamID.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * uint64_steamid SteamAPI_ISteamUser_GetSteamID(ISteamUser ptr)
     * }
     */
    public static long SteamAPI_ISteamUser_GetSteamID(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamUser_GetSteamID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUser_GetSteamID", ptr);
            }
            return (long)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUser_InitiateGameConnection_DEPRECATED {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_INT,
            SteamFlat.C_SHORT,
            SteamFlat.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUser_InitiateGameConnection_DEPRECATED"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamUser_InitiateGameConnection_DEPRECATED(ISteamUser ptr, void *pAuthBlob, int cbMaxAuthBlob, uint64_steamid steamIDGameServer, uint32 unIPServer, uint16 usPortServer, bool bSecure)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUser_InitiateGameConnection_DEPRECATED$descriptor() {
        return SteamAPI_ISteamUser_InitiateGameConnection_DEPRECATED.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamUser_InitiateGameConnection_DEPRECATED(ISteamUser ptr, void *pAuthBlob, int cbMaxAuthBlob, uint64_steamid steamIDGameServer, uint32 unIPServer, uint16 usPortServer, bool bSecure)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUser_InitiateGameConnection_DEPRECATED$handle() {
        return SteamAPI_ISteamUser_InitiateGameConnection_DEPRECATED.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int SteamAPI_ISteamUser_InitiateGameConnection_DEPRECATED(ISteamUser ptr, void *pAuthBlob, int cbMaxAuthBlob, uint64_steamid steamIDGameServer, uint32 unIPServer, uint16 usPortServer, bool bSecure)
     * }
     */
    public static int SteamAPI_ISteamUser_InitiateGameConnection_DEPRECATED(MemorySegment ptr, MemorySegment pAuthBlob, int cbMaxAuthBlob, long steamIDGameServer, int unIPServer, short usPortServer, boolean bSecure) {
        var mh$ = SteamAPI_ISteamUser_InitiateGameConnection_DEPRECATED.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUser_InitiateGameConnection_DEPRECATED", ptr, pAuthBlob, cbMaxAuthBlob, steamIDGameServer, unIPServer, usPortServer, bSecure);
            }
            return (int)mh$.invokeExact(ptr, pAuthBlob, cbMaxAuthBlob, steamIDGameServer, unIPServer, usPortServer, bSecure);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUser_TerminateGameConnection_DEPRECATED {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_SHORT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUser_TerminateGameConnection_DEPRECATED"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamUser_TerminateGameConnection_DEPRECATED(ISteamUser ptr, uint32 unIPServer, uint16 usPortServer)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUser_TerminateGameConnection_DEPRECATED$descriptor() {
        return SteamAPI_ISteamUser_TerminateGameConnection_DEPRECATED.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamUser_TerminateGameConnection_DEPRECATED(ISteamUser ptr, uint32 unIPServer, uint16 usPortServer)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUser_TerminateGameConnection_DEPRECATED$handle() {
        return SteamAPI_ISteamUser_TerminateGameConnection_DEPRECATED.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamUser_TerminateGameConnection_DEPRECATED(ISteamUser ptr, uint32 unIPServer, uint16 usPortServer)
     * }
     */
    public static void SteamAPI_ISteamUser_TerminateGameConnection_DEPRECATED(MemorySegment ptr, int unIPServer, short usPortServer) {
        var mh$ = SteamAPI_ISteamUser_TerminateGameConnection_DEPRECATED.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUser_TerminateGameConnection_DEPRECATED", ptr, unIPServer, usPortServer);
            }
            mh$.invokeExact(ptr, unIPServer, usPortServer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUser_TrackAppUsageEvent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUser_TrackAppUsageEvent"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamUser_TrackAppUsageEvent(ISteamUser ptr, uint64_gameid gameID, int eAppUsageEvent, const char *pchExtraInfo)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUser_TrackAppUsageEvent$descriptor() {
        return SteamAPI_ISteamUser_TrackAppUsageEvent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamUser_TrackAppUsageEvent(ISteamUser ptr, uint64_gameid gameID, int eAppUsageEvent, const char *pchExtraInfo)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUser_TrackAppUsageEvent$handle() {
        return SteamAPI_ISteamUser_TrackAppUsageEvent.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamUser_TrackAppUsageEvent(ISteamUser ptr, uint64_gameid gameID, int eAppUsageEvent, const char *pchExtraInfo)
     * }
     */
    public static void SteamAPI_ISteamUser_TrackAppUsageEvent(MemorySegment ptr, long gameID, int eAppUsageEvent, MemorySegment pchExtraInfo) {
        var mh$ = SteamAPI_ISteamUser_TrackAppUsageEvent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUser_TrackAppUsageEvent", ptr, gameID, eAppUsageEvent, pchExtraInfo);
            }
            mh$.invokeExact(ptr, gameID, eAppUsageEvent, pchExtraInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUser_GetUserDataFolder {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUser_GetUserDataFolder"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUser_GetUserDataFolder(ISteamUser ptr, char *pchBuffer, int cubBuffer)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUser_GetUserDataFolder$descriptor() {
        return SteamAPI_ISteamUser_GetUserDataFolder.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUser_GetUserDataFolder(ISteamUser ptr, char *pchBuffer, int cubBuffer)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUser_GetUserDataFolder$handle() {
        return SteamAPI_ISteamUser_GetUserDataFolder.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUser_GetUserDataFolder(ISteamUser ptr, char *pchBuffer, int cubBuffer)
     * }
     */
    public static boolean SteamAPI_ISteamUser_GetUserDataFolder(MemorySegment ptr, MemorySegment pchBuffer, int cubBuffer) {
        var mh$ = SteamAPI_ISteamUser_GetUserDataFolder.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUser_GetUserDataFolder", ptr, pchBuffer, cubBuffer);
            }
            return (boolean)mh$.invokeExact(ptr, pchBuffer, cubBuffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUser_StartVoiceRecording {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUser_StartVoiceRecording"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamUser_StartVoiceRecording(ISteamUser ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUser_StartVoiceRecording$descriptor() {
        return SteamAPI_ISteamUser_StartVoiceRecording.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamUser_StartVoiceRecording(ISteamUser ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUser_StartVoiceRecording$handle() {
        return SteamAPI_ISteamUser_StartVoiceRecording.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamUser_StartVoiceRecording(ISteamUser ptr)
     * }
     */
    public static void SteamAPI_ISteamUser_StartVoiceRecording(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamUser_StartVoiceRecording.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUser_StartVoiceRecording", ptr);
            }
            mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUser_StopVoiceRecording {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUser_StopVoiceRecording"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamUser_StopVoiceRecording(ISteamUser ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUser_StopVoiceRecording$descriptor() {
        return SteamAPI_ISteamUser_StopVoiceRecording.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamUser_StopVoiceRecording(ISteamUser ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUser_StopVoiceRecording$handle() {
        return SteamAPI_ISteamUser_StopVoiceRecording.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamUser_StopVoiceRecording(ISteamUser ptr)
     * }
     */
    public static void SteamAPI_ISteamUser_StopVoiceRecording(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamUser_StopVoiceRecording.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUser_StopVoiceRecording", ptr);
            }
            mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUser_GetAvailableVoice {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUser_GetAvailableVoice"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * EVoiceResult SteamAPI_ISteamUser_GetAvailableVoice(ISteamUser ptr, uint32 *pcbCompressed, uint32 *pcbUncompressed_Deprecated, uint32 nUncompressedVoiceDesiredSampleRate_Deprecated)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUser_GetAvailableVoice$descriptor() {
        return SteamAPI_ISteamUser_GetAvailableVoice.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * EVoiceResult SteamAPI_ISteamUser_GetAvailableVoice(ISteamUser ptr, uint32 *pcbCompressed, uint32 *pcbUncompressed_Deprecated, uint32 nUncompressedVoiceDesiredSampleRate_Deprecated)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUser_GetAvailableVoice$handle() {
        return SteamAPI_ISteamUser_GetAvailableVoice.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * EVoiceResult SteamAPI_ISteamUser_GetAvailableVoice(ISteamUser ptr, uint32 *pcbCompressed, uint32 *pcbUncompressed_Deprecated, uint32 nUncompressedVoiceDesiredSampleRate_Deprecated)
     * }
     */
    public static int SteamAPI_ISteamUser_GetAvailableVoice(MemorySegment ptr, MemorySegment pcbCompressed, MemorySegment pcbUncompressed_Deprecated, int nUncompressedVoiceDesiredSampleRate_Deprecated) {
        var mh$ = SteamAPI_ISteamUser_GetAvailableVoice.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUser_GetAvailableVoice", ptr, pcbCompressed, pcbUncompressed_Deprecated, nUncompressedVoiceDesiredSampleRate_Deprecated);
            }
            return (int)mh$.invokeExact(ptr, pcbCompressed, pcbUncompressed_Deprecated, nUncompressedVoiceDesiredSampleRate_Deprecated);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUser_GetVoice {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUser_GetVoice"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * EVoiceResult SteamAPI_ISteamUser_GetVoice(ISteamUser ptr, bool bWantCompressed, void *pDestBuffer, uint32 cbDestBufferSize, uint32 *nBytesWritten, bool bWantUncompressed_Deprecated, void *pUncompressedDestBuffer_Deprecated, uint32 cbUncompressedDestBufferSize_Deprecated, uint32 *nUncompressBytesWritten_Deprecated, uint32 nUncompressedVoiceDesiredSampleRate_Deprecated)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUser_GetVoice$descriptor() {
        return SteamAPI_ISteamUser_GetVoice.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * EVoiceResult SteamAPI_ISteamUser_GetVoice(ISteamUser ptr, bool bWantCompressed, void *pDestBuffer, uint32 cbDestBufferSize, uint32 *nBytesWritten, bool bWantUncompressed_Deprecated, void *pUncompressedDestBuffer_Deprecated, uint32 cbUncompressedDestBufferSize_Deprecated, uint32 *nUncompressBytesWritten_Deprecated, uint32 nUncompressedVoiceDesiredSampleRate_Deprecated)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUser_GetVoice$handle() {
        return SteamAPI_ISteamUser_GetVoice.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * EVoiceResult SteamAPI_ISteamUser_GetVoice(ISteamUser ptr, bool bWantCompressed, void *pDestBuffer, uint32 cbDestBufferSize, uint32 *nBytesWritten, bool bWantUncompressed_Deprecated, void *pUncompressedDestBuffer_Deprecated, uint32 cbUncompressedDestBufferSize_Deprecated, uint32 *nUncompressBytesWritten_Deprecated, uint32 nUncompressedVoiceDesiredSampleRate_Deprecated)
     * }
     */
    public static int SteamAPI_ISteamUser_GetVoice(MemorySegment ptr, boolean bWantCompressed, MemorySegment pDestBuffer, int cbDestBufferSize, MemorySegment nBytesWritten, boolean bWantUncompressed_Deprecated, MemorySegment pUncompressedDestBuffer_Deprecated, int cbUncompressedDestBufferSize_Deprecated, MemorySegment nUncompressBytesWritten_Deprecated, int nUncompressedVoiceDesiredSampleRate_Deprecated) {
        var mh$ = SteamAPI_ISteamUser_GetVoice.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUser_GetVoice", ptr, bWantCompressed, pDestBuffer, cbDestBufferSize, nBytesWritten, bWantUncompressed_Deprecated, pUncompressedDestBuffer_Deprecated, cbUncompressedDestBufferSize_Deprecated, nUncompressBytesWritten_Deprecated, nUncompressedVoiceDesiredSampleRate_Deprecated);
            }
            return (int)mh$.invokeExact(ptr, bWantCompressed, pDestBuffer, cbDestBufferSize, nBytesWritten, bWantUncompressed_Deprecated, pUncompressedDestBuffer_Deprecated, cbUncompressedDestBufferSize_Deprecated, nUncompressBytesWritten_Deprecated, nUncompressedVoiceDesiredSampleRate_Deprecated);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUser_DecompressVoice {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUser_DecompressVoice"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * EVoiceResult SteamAPI_ISteamUser_DecompressVoice(ISteamUser ptr, const void *pCompressed, uint32 cbCompressed, void *pDestBuffer, uint32 cbDestBufferSize, uint32 *nBytesWritten, uint32 nDesiredSampleRate)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUser_DecompressVoice$descriptor() {
        return SteamAPI_ISteamUser_DecompressVoice.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * EVoiceResult SteamAPI_ISteamUser_DecompressVoice(ISteamUser ptr, const void *pCompressed, uint32 cbCompressed, void *pDestBuffer, uint32 cbDestBufferSize, uint32 *nBytesWritten, uint32 nDesiredSampleRate)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUser_DecompressVoice$handle() {
        return SteamAPI_ISteamUser_DecompressVoice.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * EVoiceResult SteamAPI_ISteamUser_DecompressVoice(ISteamUser ptr, const void *pCompressed, uint32 cbCompressed, void *pDestBuffer, uint32 cbDestBufferSize, uint32 *nBytesWritten, uint32 nDesiredSampleRate)
     * }
     */
    public static int SteamAPI_ISteamUser_DecompressVoice(MemorySegment ptr, MemorySegment pCompressed, int cbCompressed, MemorySegment pDestBuffer, int cbDestBufferSize, MemorySegment nBytesWritten, int nDesiredSampleRate) {
        var mh$ = SteamAPI_ISteamUser_DecompressVoice.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUser_DecompressVoice", ptr, pCompressed, cbCompressed, pDestBuffer, cbDestBufferSize, nBytesWritten, nDesiredSampleRate);
            }
            return (int)mh$.invokeExact(ptr, pCompressed, cbCompressed, pDestBuffer, cbDestBufferSize, nBytesWritten, nDesiredSampleRate);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUser_GetVoiceOptimalSampleRate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUser_GetVoiceOptimalSampleRate"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamUser_GetVoiceOptimalSampleRate(ISteamUser ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUser_GetVoiceOptimalSampleRate$descriptor() {
        return SteamAPI_ISteamUser_GetVoiceOptimalSampleRate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamUser_GetVoiceOptimalSampleRate(ISteamUser ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUser_GetVoiceOptimalSampleRate$handle() {
        return SteamAPI_ISteamUser_GetVoiceOptimalSampleRate.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamUser_GetVoiceOptimalSampleRate(ISteamUser ptr)
     * }
     */
    public static int SteamAPI_ISteamUser_GetVoiceOptimalSampleRate(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamUser_GetVoiceOptimalSampleRate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUser_GetVoiceOptimalSampleRate", ptr);
            }
            return (int)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUser_GetAuthSessionTicket {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUser_GetAuthSessionTicket"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HAuthTicket SteamAPI_ISteamUser_GetAuthSessionTicket(ISteamUser ptr, void *pTicket, int cbMaxTicket, uint32 *pcbTicket, const SteamNetworkingIdentity *pSteamNetworkingIdentity)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUser_GetAuthSessionTicket$descriptor() {
        return SteamAPI_ISteamUser_GetAuthSessionTicket.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HAuthTicket SteamAPI_ISteamUser_GetAuthSessionTicket(ISteamUser ptr, void *pTicket, int cbMaxTicket, uint32 *pcbTicket, const SteamNetworkingIdentity *pSteamNetworkingIdentity)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUser_GetAuthSessionTicket$handle() {
        return SteamAPI_ISteamUser_GetAuthSessionTicket.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HAuthTicket SteamAPI_ISteamUser_GetAuthSessionTicket(ISteamUser ptr, void *pTicket, int cbMaxTicket, uint32 *pcbTicket, const SteamNetworkingIdentity *pSteamNetworkingIdentity)
     * }
     */
    public static int SteamAPI_ISteamUser_GetAuthSessionTicket(MemorySegment ptr, MemorySegment pTicket, int cbMaxTicket, MemorySegment pcbTicket, MemorySegment pSteamNetworkingIdentity) {
        var mh$ = SteamAPI_ISteamUser_GetAuthSessionTicket.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUser_GetAuthSessionTicket", ptr, pTicket, cbMaxTicket, pcbTicket, pSteamNetworkingIdentity);
            }
            return (int)mh$.invokeExact(ptr, pTicket, cbMaxTicket, pcbTicket, pSteamNetworkingIdentity);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUser_GetAuthTicketForWebApi {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUser_GetAuthTicketForWebApi"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HAuthTicket SteamAPI_ISteamUser_GetAuthTicketForWebApi(ISteamUser ptr, const char *pchIdentity)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUser_GetAuthTicketForWebApi$descriptor() {
        return SteamAPI_ISteamUser_GetAuthTicketForWebApi.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HAuthTicket SteamAPI_ISteamUser_GetAuthTicketForWebApi(ISteamUser ptr, const char *pchIdentity)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUser_GetAuthTicketForWebApi$handle() {
        return SteamAPI_ISteamUser_GetAuthTicketForWebApi.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HAuthTicket SteamAPI_ISteamUser_GetAuthTicketForWebApi(ISteamUser ptr, const char *pchIdentity)
     * }
     */
    public static int SteamAPI_ISteamUser_GetAuthTicketForWebApi(MemorySegment ptr, MemorySegment pchIdentity) {
        var mh$ = SteamAPI_ISteamUser_GetAuthTicketForWebApi.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUser_GetAuthTicketForWebApi", ptr, pchIdentity);
            }
            return (int)mh$.invokeExact(ptr, pchIdentity);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUser_BeginAuthSession {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUser_BeginAuthSession"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * EBeginAuthSessionResult SteamAPI_ISteamUser_BeginAuthSession(ISteamUser ptr, const void *pAuthTicket, int cbAuthTicket, uint64_steamid steamID)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUser_BeginAuthSession$descriptor() {
        return SteamAPI_ISteamUser_BeginAuthSession.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * EBeginAuthSessionResult SteamAPI_ISteamUser_BeginAuthSession(ISteamUser ptr, const void *pAuthTicket, int cbAuthTicket, uint64_steamid steamID)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUser_BeginAuthSession$handle() {
        return SteamAPI_ISteamUser_BeginAuthSession.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * EBeginAuthSessionResult SteamAPI_ISteamUser_BeginAuthSession(ISteamUser ptr, const void *pAuthTicket, int cbAuthTicket, uint64_steamid steamID)
     * }
     */
    public static int SteamAPI_ISteamUser_BeginAuthSession(MemorySegment ptr, MemorySegment pAuthTicket, int cbAuthTicket, long steamID) {
        var mh$ = SteamAPI_ISteamUser_BeginAuthSession.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUser_BeginAuthSession", ptr, pAuthTicket, cbAuthTicket, steamID);
            }
            return (int)mh$.invokeExact(ptr, pAuthTicket, cbAuthTicket, steamID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUser_EndAuthSession {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUser_EndAuthSession"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamUser_EndAuthSession(ISteamUser ptr, uint64_steamid steamID)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUser_EndAuthSession$descriptor() {
        return SteamAPI_ISteamUser_EndAuthSession.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamUser_EndAuthSession(ISteamUser ptr, uint64_steamid steamID)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUser_EndAuthSession$handle() {
        return SteamAPI_ISteamUser_EndAuthSession.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamUser_EndAuthSession(ISteamUser ptr, uint64_steamid steamID)
     * }
     */
    public static void SteamAPI_ISteamUser_EndAuthSession(MemorySegment ptr, long steamID) {
        var mh$ = SteamAPI_ISteamUser_EndAuthSession.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUser_EndAuthSession", ptr, steamID);
            }
            mh$.invokeExact(ptr, steamID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUser_CancelAuthTicket {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUser_CancelAuthTicket"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamUser_CancelAuthTicket(ISteamUser ptr, HAuthTicket hAuthTicket)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUser_CancelAuthTicket$descriptor() {
        return SteamAPI_ISteamUser_CancelAuthTicket.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamUser_CancelAuthTicket(ISteamUser ptr, HAuthTicket hAuthTicket)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUser_CancelAuthTicket$handle() {
        return SteamAPI_ISteamUser_CancelAuthTicket.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamUser_CancelAuthTicket(ISteamUser ptr, HAuthTicket hAuthTicket)
     * }
     */
    public static void SteamAPI_ISteamUser_CancelAuthTicket(MemorySegment ptr, int hAuthTicket) {
        var mh$ = SteamAPI_ISteamUser_CancelAuthTicket.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUser_CancelAuthTicket", ptr, hAuthTicket);
            }
            mh$.invokeExact(ptr, hAuthTicket);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUser_UserHasLicenseForApp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUser_UserHasLicenseForApp"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * EUserHasLicenseForAppResult SteamAPI_ISteamUser_UserHasLicenseForApp(ISteamUser ptr, uint64_steamid steamID, AppId_t appID)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUser_UserHasLicenseForApp$descriptor() {
        return SteamAPI_ISteamUser_UserHasLicenseForApp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * EUserHasLicenseForAppResult SteamAPI_ISteamUser_UserHasLicenseForApp(ISteamUser ptr, uint64_steamid steamID, AppId_t appID)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUser_UserHasLicenseForApp$handle() {
        return SteamAPI_ISteamUser_UserHasLicenseForApp.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * EUserHasLicenseForAppResult SteamAPI_ISteamUser_UserHasLicenseForApp(ISteamUser ptr, uint64_steamid steamID, AppId_t appID)
     * }
     */
    public static int SteamAPI_ISteamUser_UserHasLicenseForApp(MemorySegment ptr, long steamID, int appID) {
        var mh$ = SteamAPI_ISteamUser_UserHasLicenseForApp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUser_UserHasLicenseForApp", ptr, steamID, appID);
            }
            return (int)mh$.invokeExact(ptr, steamID, appID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUser_BIsBehindNAT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUser_BIsBehindNAT"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUser_BIsBehindNAT(ISteamUser ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUser_BIsBehindNAT$descriptor() {
        return SteamAPI_ISteamUser_BIsBehindNAT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUser_BIsBehindNAT(ISteamUser ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUser_BIsBehindNAT$handle() {
        return SteamAPI_ISteamUser_BIsBehindNAT.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUser_BIsBehindNAT(ISteamUser ptr)
     * }
     */
    public static boolean SteamAPI_ISteamUser_BIsBehindNAT(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamUser_BIsBehindNAT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUser_BIsBehindNAT", ptr);
            }
            return (boolean)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUser_AdvertiseGame {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_INT,
            SteamFlat.C_SHORT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUser_AdvertiseGame"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamUser_AdvertiseGame(ISteamUser ptr, uint64_steamid steamIDGameServer, uint32 unIPServer, uint16 usPortServer)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUser_AdvertiseGame$descriptor() {
        return SteamAPI_ISteamUser_AdvertiseGame.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamUser_AdvertiseGame(ISteamUser ptr, uint64_steamid steamIDGameServer, uint32 unIPServer, uint16 usPortServer)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUser_AdvertiseGame$handle() {
        return SteamAPI_ISteamUser_AdvertiseGame.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamUser_AdvertiseGame(ISteamUser ptr, uint64_steamid steamIDGameServer, uint32 unIPServer, uint16 usPortServer)
     * }
     */
    public static void SteamAPI_ISteamUser_AdvertiseGame(MemorySegment ptr, long steamIDGameServer, int unIPServer, short usPortServer) {
        var mh$ = SteamAPI_ISteamUser_AdvertiseGame.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUser_AdvertiseGame", ptr, steamIDGameServer, unIPServer, usPortServer);
            }
            mh$.invokeExact(ptr, steamIDGameServer, unIPServer, usPortServer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUser_RequestEncryptedAppTicket {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUser_RequestEncryptedAppTicket"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUser_RequestEncryptedAppTicket(ISteamUser ptr, void *pDataToInclude, int cbDataToInclude)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUser_RequestEncryptedAppTicket$descriptor() {
        return SteamAPI_ISteamUser_RequestEncryptedAppTicket.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUser_RequestEncryptedAppTicket(ISteamUser ptr, void *pDataToInclude, int cbDataToInclude)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUser_RequestEncryptedAppTicket$handle() {
        return SteamAPI_ISteamUser_RequestEncryptedAppTicket.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUser_RequestEncryptedAppTicket(ISteamUser ptr, void *pDataToInclude, int cbDataToInclude)
     * }
     */
    public static long SteamAPI_ISteamUser_RequestEncryptedAppTicket(MemorySegment ptr, MemorySegment pDataToInclude, int cbDataToInclude) {
        var mh$ = SteamAPI_ISteamUser_RequestEncryptedAppTicket.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUser_RequestEncryptedAppTicket", ptr, pDataToInclude, cbDataToInclude);
            }
            return (long)mh$.invokeExact(ptr, pDataToInclude, cbDataToInclude);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUser_GetEncryptedAppTicket {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUser_GetEncryptedAppTicket"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUser_GetEncryptedAppTicket(ISteamUser ptr, void *pTicket, int cbMaxTicket, uint32 *pcbTicket)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUser_GetEncryptedAppTicket$descriptor() {
        return SteamAPI_ISteamUser_GetEncryptedAppTicket.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUser_GetEncryptedAppTicket(ISteamUser ptr, void *pTicket, int cbMaxTicket, uint32 *pcbTicket)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUser_GetEncryptedAppTicket$handle() {
        return SteamAPI_ISteamUser_GetEncryptedAppTicket.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUser_GetEncryptedAppTicket(ISteamUser ptr, void *pTicket, int cbMaxTicket, uint32 *pcbTicket)
     * }
     */
    public static boolean SteamAPI_ISteamUser_GetEncryptedAppTicket(MemorySegment ptr, MemorySegment pTicket, int cbMaxTicket, MemorySegment pcbTicket) {
        var mh$ = SteamAPI_ISteamUser_GetEncryptedAppTicket.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUser_GetEncryptedAppTicket", ptr, pTicket, cbMaxTicket, pcbTicket);
            }
            return (boolean)mh$.invokeExact(ptr, pTicket, cbMaxTicket, pcbTicket);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUser_GetGameBadgeLevel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUser_GetGameBadgeLevel"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamUser_GetGameBadgeLevel(ISteamUser ptr, int nSeries, bool bFoil)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUser_GetGameBadgeLevel$descriptor() {
        return SteamAPI_ISteamUser_GetGameBadgeLevel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamUser_GetGameBadgeLevel(ISteamUser ptr, int nSeries, bool bFoil)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUser_GetGameBadgeLevel$handle() {
        return SteamAPI_ISteamUser_GetGameBadgeLevel.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int SteamAPI_ISteamUser_GetGameBadgeLevel(ISteamUser ptr, int nSeries, bool bFoil)
     * }
     */
    public static int SteamAPI_ISteamUser_GetGameBadgeLevel(MemorySegment ptr, int nSeries, boolean bFoil) {
        var mh$ = SteamAPI_ISteamUser_GetGameBadgeLevel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUser_GetGameBadgeLevel", ptr, nSeries, bFoil);
            }
            return (int)mh$.invokeExact(ptr, nSeries, bFoil);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUser_GetPlayerSteamLevel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUser_GetPlayerSteamLevel"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamUser_GetPlayerSteamLevel(ISteamUser ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUser_GetPlayerSteamLevel$descriptor() {
        return SteamAPI_ISteamUser_GetPlayerSteamLevel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamUser_GetPlayerSteamLevel(ISteamUser ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUser_GetPlayerSteamLevel$handle() {
        return SteamAPI_ISteamUser_GetPlayerSteamLevel.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int SteamAPI_ISteamUser_GetPlayerSteamLevel(ISteamUser ptr)
     * }
     */
    public static int SteamAPI_ISteamUser_GetPlayerSteamLevel(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamUser_GetPlayerSteamLevel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUser_GetPlayerSteamLevel", ptr);
            }
            return (int)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUser_RequestStoreAuthURL {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUser_RequestStoreAuthURL"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUser_RequestStoreAuthURL(ISteamUser ptr, const char *pchRedirectURL)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUser_RequestStoreAuthURL$descriptor() {
        return SteamAPI_ISteamUser_RequestStoreAuthURL.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUser_RequestStoreAuthURL(ISteamUser ptr, const char *pchRedirectURL)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUser_RequestStoreAuthURL$handle() {
        return SteamAPI_ISteamUser_RequestStoreAuthURL.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUser_RequestStoreAuthURL(ISteamUser ptr, const char *pchRedirectURL)
     * }
     */
    public static long SteamAPI_ISteamUser_RequestStoreAuthURL(MemorySegment ptr, MemorySegment pchRedirectURL) {
        var mh$ = SteamAPI_ISteamUser_RequestStoreAuthURL.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUser_RequestStoreAuthURL", ptr, pchRedirectURL);
            }
            return (long)mh$.invokeExact(ptr, pchRedirectURL);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUser_BIsPhoneVerified {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUser_BIsPhoneVerified"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUser_BIsPhoneVerified(ISteamUser ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUser_BIsPhoneVerified$descriptor() {
        return SteamAPI_ISteamUser_BIsPhoneVerified.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUser_BIsPhoneVerified(ISteamUser ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUser_BIsPhoneVerified$handle() {
        return SteamAPI_ISteamUser_BIsPhoneVerified.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUser_BIsPhoneVerified(ISteamUser ptr)
     * }
     */
    public static boolean SteamAPI_ISteamUser_BIsPhoneVerified(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamUser_BIsPhoneVerified.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUser_BIsPhoneVerified", ptr);
            }
            return (boolean)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUser_BIsTwoFactorEnabled {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUser_BIsTwoFactorEnabled"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUser_BIsTwoFactorEnabled(ISteamUser ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUser_BIsTwoFactorEnabled$descriptor() {
        return SteamAPI_ISteamUser_BIsTwoFactorEnabled.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUser_BIsTwoFactorEnabled(ISteamUser ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUser_BIsTwoFactorEnabled$handle() {
        return SteamAPI_ISteamUser_BIsTwoFactorEnabled.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUser_BIsTwoFactorEnabled(ISteamUser ptr)
     * }
     */
    public static boolean SteamAPI_ISteamUser_BIsTwoFactorEnabled(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamUser_BIsTwoFactorEnabled.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUser_BIsTwoFactorEnabled", ptr);
            }
            return (boolean)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUser_BIsPhoneIdentifying {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUser_BIsPhoneIdentifying"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUser_BIsPhoneIdentifying(ISteamUser ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUser_BIsPhoneIdentifying$descriptor() {
        return SteamAPI_ISteamUser_BIsPhoneIdentifying.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUser_BIsPhoneIdentifying(ISteamUser ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUser_BIsPhoneIdentifying$handle() {
        return SteamAPI_ISteamUser_BIsPhoneIdentifying.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUser_BIsPhoneIdentifying(ISteamUser ptr)
     * }
     */
    public static boolean SteamAPI_ISteamUser_BIsPhoneIdentifying(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamUser_BIsPhoneIdentifying.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUser_BIsPhoneIdentifying", ptr);
            }
            return (boolean)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUser_BIsPhoneRequiringVerification {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUser_BIsPhoneRequiringVerification"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUser_BIsPhoneRequiringVerification(ISteamUser ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUser_BIsPhoneRequiringVerification$descriptor() {
        return SteamAPI_ISteamUser_BIsPhoneRequiringVerification.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUser_BIsPhoneRequiringVerification(ISteamUser ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUser_BIsPhoneRequiringVerification$handle() {
        return SteamAPI_ISteamUser_BIsPhoneRequiringVerification.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUser_BIsPhoneRequiringVerification(ISteamUser ptr)
     * }
     */
    public static boolean SteamAPI_ISteamUser_BIsPhoneRequiringVerification(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamUser_BIsPhoneRequiringVerification.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUser_BIsPhoneRequiringVerification", ptr);
            }
            return (boolean)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUser_GetMarketEligibility {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUser_GetMarketEligibility"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUser_GetMarketEligibility(ISteamUser ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUser_GetMarketEligibility$descriptor() {
        return SteamAPI_ISteamUser_GetMarketEligibility.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUser_GetMarketEligibility(ISteamUser ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUser_GetMarketEligibility$handle() {
        return SteamAPI_ISteamUser_GetMarketEligibility.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUser_GetMarketEligibility(ISteamUser ptr)
     * }
     */
    public static long SteamAPI_ISteamUser_GetMarketEligibility(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamUser_GetMarketEligibility.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUser_GetMarketEligibility", ptr);
            }
            return (long)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUser_GetDurationControl {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUser_GetDurationControl"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUser_GetDurationControl(ISteamUser ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUser_GetDurationControl$descriptor() {
        return SteamAPI_ISteamUser_GetDurationControl.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUser_GetDurationControl(ISteamUser ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUser_GetDurationControl$handle() {
        return SteamAPI_ISteamUser_GetDurationControl.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUser_GetDurationControl(ISteamUser ptr)
     * }
     */
    public static long SteamAPI_ISteamUser_GetDurationControl(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamUser_GetDurationControl.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUser_GetDurationControl", ptr);
            }
            return (long)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUser_BSetDurationControlOnlineState {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUser_BSetDurationControlOnlineState"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUser_BSetDurationControlOnlineState(ISteamUser ptr, EDurationControlOnlineState eNewState)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUser_BSetDurationControlOnlineState$descriptor() {
        return SteamAPI_ISteamUser_BSetDurationControlOnlineState.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUser_BSetDurationControlOnlineState(ISteamUser ptr, EDurationControlOnlineState eNewState)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUser_BSetDurationControlOnlineState$handle() {
        return SteamAPI_ISteamUser_BSetDurationControlOnlineState.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUser_BSetDurationControlOnlineState(ISteamUser ptr, EDurationControlOnlineState eNewState)
     * }
     */
    public static boolean SteamAPI_ISteamUser_BSetDurationControlOnlineState(MemorySegment ptr, int eNewState) {
        var mh$ = SteamAPI_ISteamUser_BSetDurationControlOnlineState.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUser_BSetDurationControlOnlineState", ptr, eNewState);
            }
            return (boolean)mh$.invokeExact(ptr, eNewState);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_SteamUser_v023 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_SteamUser_v023"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ISteamUser SteamAPI_SteamUser_v023()
     * }
     */
    public static FunctionDescriptor SteamAPI_SteamUser_v023$descriptor() {
        return SteamAPI_SteamUser_v023.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ISteamUser SteamAPI_SteamUser_v023()
     * }
     */
    public static MethodHandle SteamAPI_SteamUser_v023$handle() {
        return SteamAPI_SteamUser_v023.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ISteamUser SteamAPI_SteamUser_v023()
     * }
     */
    public static MemorySegment SteamAPI_SteamUser_v023() {
        var mh$ = SteamAPI_SteamUser_v023.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_SteamUser_v023");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_GetPersonaName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamFriends_GetPersonaName"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamFriends_GetPersonaName(ISteamFriends ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_GetPersonaName$descriptor() {
        return SteamAPI_ISteamFriends_GetPersonaName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamFriends_GetPersonaName(ISteamFriends ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_GetPersonaName$handle() {
        return SteamAPI_ISteamFriends_GetPersonaName.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamFriends_GetPersonaName(ISteamFriends ptr)
     * }
     */
    public static MemorySegment SteamAPI_ISteamFriends_GetPersonaName(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamFriends_GetPersonaName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_GetPersonaName", ptr);
            }
            return (MemorySegment)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_SetPersonaName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamFriends_SetPersonaName"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamFriends_SetPersonaName(ISteamFriends ptr, const char *pchPersonaName)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_SetPersonaName$descriptor() {
        return SteamAPI_ISteamFriends_SetPersonaName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamFriends_SetPersonaName(ISteamFriends ptr, const char *pchPersonaName)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_SetPersonaName$handle() {
        return SteamAPI_ISteamFriends_SetPersonaName.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamFriends_SetPersonaName(ISteamFriends ptr, const char *pchPersonaName)
     * }
     */
    public static long SteamAPI_ISteamFriends_SetPersonaName(MemorySegment ptr, MemorySegment pchPersonaName) {
        var mh$ = SteamAPI_ISteamFriends_SetPersonaName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_SetPersonaName", ptr, pchPersonaName);
            }
            return (long)mh$.invokeExact(ptr, pchPersonaName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_GetPersonaState {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamFriends_GetPersonaState"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * EPersonaState SteamAPI_ISteamFriends_GetPersonaState(ISteamFriends ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_GetPersonaState$descriptor() {
        return SteamAPI_ISteamFriends_GetPersonaState.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * EPersonaState SteamAPI_ISteamFriends_GetPersonaState(ISteamFriends ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_GetPersonaState$handle() {
        return SteamAPI_ISteamFriends_GetPersonaState.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * EPersonaState SteamAPI_ISteamFriends_GetPersonaState(ISteamFriends ptr)
     * }
     */
    public static int SteamAPI_ISteamFriends_GetPersonaState(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamFriends_GetPersonaState.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_GetPersonaState", ptr);
            }
            return (int)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_GetFriendCount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamFriends_GetFriendCount"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamFriends_GetFriendCount(ISteamFriends ptr, int iFriendFlags)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_GetFriendCount$descriptor() {
        return SteamAPI_ISteamFriends_GetFriendCount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamFriends_GetFriendCount(ISteamFriends ptr, int iFriendFlags)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_GetFriendCount$handle() {
        return SteamAPI_ISteamFriends_GetFriendCount.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int SteamAPI_ISteamFriends_GetFriendCount(ISteamFriends ptr, int iFriendFlags)
     * }
     */
    public static int SteamAPI_ISteamFriends_GetFriendCount(MemorySegment ptr, int iFriendFlags) {
        var mh$ = SteamAPI_ISteamFriends_GetFriendCount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_GetFriendCount", ptr, iFriendFlags);
            }
            return (int)mh$.invokeExact(ptr, iFriendFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_GetFriendByIndex {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamFriends_GetFriendByIndex"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint64_steamid SteamAPI_ISteamFriends_GetFriendByIndex(ISteamFriends ptr, int iFriend, int iFriendFlags)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_GetFriendByIndex$descriptor() {
        return SteamAPI_ISteamFriends_GetFriendByIndex.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint64_steamid SteamAPI_ISteamFriends_GetFriendByIndex(ISteamFriends ptr, int iFriend, int iFriendFlags)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_GetFriendByIndex$handle() {
        return SteamAPI_ISteamFriends_GetFriendByIndex.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * uint64_steamid SteamAPI_ISteamFriends_GetFriendByIndex(ISteamFriends ptr, int iFriend, int iFriendFlags)
     * }
     */
    public static long SteamAPI_ISteamFriends_GetFriendByIndex(MemorySegment ptr, int iFriend, int iFriendFlags) {
        var mh$ = SteamAPI_ISteamFriends_GetFriendByIndex.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_GetFriendByIndex", ptr, iFriend, iFriendFlags);
            }
            return (long)mh$.invokeExact(ptr, iFriend, iFriendFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_GetFriendRelationship {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamFriends_GetFriendRelationship"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * EFriendRelationship SteamAPI_ISteamFriends_GetFriendRelationship(ISteamFriends ptr, uint64_steamid steamIDFriend)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_GetFriendRelationship$descriptor() {
        return SteamAPI_ISteamFriends_GetFriendRelationship.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * EFriendRelationship SteamAPI_ISteamFriends_GetFriendRelationship(ISteamFriends ptr, uint64_steamid steamIDFriend)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_GetFriendRelationship$handle() {
        return SteamAPI_ISteamFriends_GetFriendRelationship.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * EFriendRelationship SteamAPI_ISteamFriends_GetFriendRelationship(ISteamFriends ptr, uint64_steamid steamIDFriend)
     * }
     */
    public static int SteamAPI_ISteamFriends_GetFriendRelationship(MemorySegment ptr, long steamIDFriend) {
        var mh$ = SteamAPI_ISteamFriends_GetFriendRelationship.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_GetFriendRelationship", ptr, steamIDFriend);
            }
            return (int)mh$.invokeExact(ptr, steamIDFriend);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_GetFriendPersonaState {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamFriends_GetFriendPersonaState"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * EPersonaState SteamAPI_ISteamFriends_GetFriendPersonaState(ISteamFriends ptr, uint64_steamid steamIDFriend)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_GetFriendPersonaState$descriptor() {
        return SteamAPI_ISteamFriends_GetFriendPersonaState.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * EPersonaState SteamAPI_ISteamFriends_GetFriendPersonaState(ISteamFriends ptr, uint64_steamid steamIDFriend)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_GetFriendPersonaState$handle() {
        return SteamAPI_ISteamFriends_GetFriendPersonaState.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * EPersonaState SteamAPI_ISteamFriends_GetFriendPersonaState(ISteamFriends ptr, uint64_steamid steamIDFriend)
     * }
     */
    public static int SteamAPI_ISteamFriends_GetFriendPersonaState(MemorySegment ptr, long steamIDFriend) {
        var mh$ = SteamAPI_ISteamFriends_GetFriendPersonaState.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_GetFriendPersonaState", ptr, steamIDFriend);
            }
            return (int)mh$.invokeExact(ptr, steamIDFriend);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_GetFriendPersonaName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamFriends_GetFriendPersonaName"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamFriends_GetFriendPersonaName(ISteamFriends ptr, uint64_steamid steamIDFriend)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_GetFriendPersonaName$descriptor() {
        return SteamAPI_ISteamFriends_GetFriendPersonaName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamFriends_GetFriendPersonaName(ISteamFriends ptr, uint64_steamid steamIDFriend)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_GetFriendPersonaName$handle() {
        return SteamAPI_ISteamFriends_GetFriendPersonaName.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamFriends_GetFriendPersonaName(ISteamFriends ptr, uint64_steamid steamIDFriend)
     * }
     */
    public static MemorySegment SteamAPI_ISteamFriends_GetFriendPersonaName(MemorySegment ptr, long steamIDFriend) {
        var mh$ = SteamAPI_ISteamFriends_GetFriendPersonaName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_GetFriendPersonaName", ptr, steamIDFriend);
            }
            return (MemorySegment)mh$.invokeExact(ptr, steamIDFriend);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_GetFriendGamePlayed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamFriends_GetFriendGamePlayed"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamFriends_GetFriendGamePlayed(ISteamFriends ptr, uint64_steamid steamIDFriend, FriendGameInfo_t *pFriendGameInfo)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_GetFriendGamePlayed$descriptor() {
        return SteamAPI_ISteamFriends_GetFriendGamePlayed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamFriends_GetFriendGamePlayed(ISteamFriends ptr, uint64_steamid steamIDFriend, FriendGameInfo_t *pFriendGameInfo)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_GetFriendGamePlayed$handle() {
        return SteamAPI_ISteamFriends_GetFriendGamePlayed.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamFriends_GetFriendGamePlayed(ISteamFriends ptr, uint64_steamid steamIDFriend, FriendGameInfo_t *pFriendGameInfo)
     * }
     */
    public static boolean SteamAPI_ISteamFriends_GetFriendGamePlayed(MemorySegment ptr, long steamIDFriend, MemorySegment pFriendGameInfo) {
        var mh$ = SteamAPI_ISteamFriends_GetFriendGamePlayed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_GetFriendGamePlayed", ptr, steamIDFriend, pFriendGameInfo);
            }
            return (boolean)mh$.invokeExact(ptr, steamIDFriend, pFriendGameInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_GetFriendPersonaNameHistory {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamFriends_GetFriendPersonaNameHistory"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamFriends_GetFriendPersonaNameHistory(ISteamFriends ptr, uint64_steamid steamIDFriend, int iPersonaName)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_GetFriendPersonaNameHistory$descriptor() {
        return SteamAPI_ISteamFriends_GetFriendPersonaNameHistory.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamFriends_GetFriendPersonaNameHistory(ISteamFriends ptr, uint64_steamid steamIDFriend, int iPersonaName)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_GetFriendPersonaNameHistory$handle() {
        return SteamAPI_ISteamFriends_GetFriendPersonaNameHistory.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamFriends_GetFriendPersonaNameHistory(ISteamFriends ptr, uint64_steamid steamIDFriend, int iPersonaName)
     * }
     */
    public static MemorySegment SteamAPI_ISteamFriends_GetFriendPersonaNameHistory(MemorySegment ptr, long steamIDFriend, int iPersonaName) {
        var mh$ = SteamAPI_ISteamFriends_GetFriendPersonaNameHistory.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_GetFriendPersonaNameHistory", ptr, steamIDFriend, iPersonaName);
            }
            return (MemorySegment)mh$.invokeExact(ptr, steamIDFriend, iPersonaName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_GetFriendSteamLevel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamFriends_GetFriendSteamLevel"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamFriends_GetFriendSteamLevel(ISteamFriends ptr, uint64_steamid steamIDFriend)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_GetFriendSteamLevel$descriptor() {
        return SteamAPI_ISteamFriends_GetFriendSteamLevel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamFriends_GetFriendSteamLevel(ISteamFriends ptr, uint64_steamid steamIDFriend)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_GetFriendSteamLevel$handle() {
        return SteamAPI_ISteamFriends_GetFriendSteamLevel.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int SteamAPI_ISteamFriends_GetFriendSteamLevel(ISteamFriends ptr, uint64_steamid steamIDFriend)
     * }
     */
    public static int SteamAPI_ISteamFriends_GetFriendSteamLevel(MemorySegment ptr, long steamIDFriend) {
        var mh$ = SteamAPI_ISteamFriends_GetFriendSteamLevel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_GetFriendSteamLevel", ptr, steamIDFriend);
            }
            return (int)mh$.invokeExact(ptr, steamIDFriend);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_GetPlayerNickname {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamFriends_GetPlayerNickname"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamFriends_GetPlayerNickname(ISteamFriends ptr, uint64_steamid steamIDPlayer)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_GetPlayerNickname$descriptor() {
        return SteamAPI_ISteamFriends_GetPlayerNickname.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamFriends_GetPlayerNickname(ISteamFriends ptr, uint64_steamid steamIDPlayer)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_GetPlayerNickname$handle() {
        return SteamAPI_ISteamFriends_GetPlayerNickname.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamFriends_GetPlayerNickname(ISteamFriends ptr, uint64_steamid steamIDPlayer)
     * }
     */
    public static MemorySegment SteamAPI_ISteamFriends_GetPlayerNickname(MemorySegment ptr, long steamIDPlayer) {
        var mh$ = SteamAPI_ISteamFriends_GetPlayerNickname.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_GetPlayerNickname", ptr, steamIDPlayer);
            }
            return (MemorySegment)mh$.invokeExact(ptr, steamIDPlayer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_GetFriendsGroupCount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamFriends_GetFriendsGroupCount"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamFriends_GetFriendsGroupCount(ISteamFriends ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_GetFriendsGroupCount$descriptor() {
        return SteamAPI_ISteamFriends_GetFriendsGroupCount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamFriends_GetFriendsGroupCount(ISteamFriends ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_GetFriendsGroupCount$handle() {
        return SteamAPI_ISteamFriends_GetFriendsGroupCount.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int SteamAPI_ISteamFriends_GetFriendsGroupCount(ISteamFriends ptr)
     * }
     */
    public static int SteamAPI_ISteamFriends_GetFriendsGroupCount(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamFriends_GetFriendsGroupCount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_GetFriendsGroupCount", ptr);
            }
            return (int)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_GetFriendsGroupIDByIndex {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_SHORT,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamFriends_GetFriendsGroupIDByIndex"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FriendsGroupID_t SteamAPI_ISteamFriends_GetFriendsGroupIDByIndex(ISteamFriends ptr, int iFG)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_GetFriendsGroupIDByIndex$descriptor() {
        return SteamAPI_ISteamFriends_GetFriendsGroupIDByIndex.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FriendsGroupID_t SteamAPI_ISteamFriends_GetFriendsGroupIDByIndex(ISteamFriends ptr, int iFG)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_GetFriendsGroupIDByIndex$handle() {
        return SteamAPI_ISteamFriends_GetFriendsGroupIDByIndex.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * FriendsGroupID_t SteamAPI_ISteamFriends_GetFriendsGroupIDByIndex(ISteamFriends ptr, int iFG)
     * }
     */
    public static short SteamAPI_ISteamFriends_GetFriendsGroupIDByIndex(MemorySegment ptr, int iFG) {
        var mh$ = SteamAPI_ISteamFriends_GetFriendsGroupIDByIndex.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_GetFriendsGroupIDByIndex", ptr, iFG);
            }
            return (short)mh$.invokeExact(ptr, iFG);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_GetFriendsGroupName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_SHORT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamFriends_GetFriendsGroupName"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamFriends_GetFriendsGroupName(ISteamFriends ptr, FriendsGroupID_t friendsGroupID)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_GetFriendsGroupName$descriptor() {
        return SteamAPI_ISteamFriends_GetFriendsGroupName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamFriends_GetFriendsGroupName(ISteamFriends ptr, FriendsGroupID_t friendsGroupID)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_GetFriendsGroupName$handle() {
        return SteamAPI_ISteamFriends_GetFriendsGroupName.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamFriends_GetFriendsGroupName(ISteamFriends ptr, FriendsGroupID_t friendsGroupID)
     * }
     */
    public static MemorySegment SteamAPI_ISteamFriends_GetFriendsGroupName(MemorySegment ptr, short friendsGroupID) {
        var mh$ = SteamAPI_ISteamFriends_GetFriendsGroupName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_GetFriendsGroupName", ptr, friendsGroupID);
            }
            return (MemorySegment)mh$.invokeExact(ptr, friendsGroupID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_GetFriendsGroupMembersCount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_SHORT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamFriends_GetFriendsGroupMembersCount"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamFriends_GetFriendsGroupMembersCount(ISteamFriends ptr, FriendsGroupID_t friendsGroupID)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_GetFriendsGroupMembersCount$descriptor() {
        return SteamAPI_ISteamFriends_GetFriendsGroupMembersCount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamFriends_GetFriendsGroupMembersCount(ISteamFriends ptr, FriendsGroupID_t friendsGroupID)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_GetFriendsGroupMembersCount$handle() {
        return SteamAPI_ISteamFriends_GetFriendsGroupMembersCount.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int SteamAPI_ISteamFriends_GetFriendsGroupMembersCount(ISteamFriends ptr, FriendsGroupID_t friendsGroupID)
     * }
     */
    public static int SteamAPI_ISteamFriends_GetFriendsGroupMembersCount(MemorySegment ptr, short friendsGroupID) {
        var mh$ = SteamAPI_ISteamFriends_GetFriendsGroupMembersCount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_GetFriendsGroupMembersCount", ptr, friendsGroupID);
            }
            return (int)mh$.invokeExact(ptr, friendsGroupID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_GetFriendsGroupMembersList {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_SHORT,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamFriends_GetFriendsGroupMembersList"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamFriends_GetFriendsGroupMembersList(ISteamFriends ptr, FriendsGroupID_t friendsGroupID, CSteamID *pOutSteamIDMembers, int nMembersCount)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_GetFriendsGroupMembersList$descriptor() {
        return SteamAPI_ISteamFriends_GetFriendsGroupMembersList.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamFriends_GetFriendsGroupMembersList(ISteamFriends ptr, FriendsGroupID_t friendsGroupID, CSteamID *pOutSteamIDMembers, int nMembersCount)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_GetFriendsGroupMembersList$handle() {
        return SteamAPI_ISteamFriends_GetFriendsGroupMembersList.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamFriends_GetFriendsGroupMembersList(ISteamFriends ptr, FriendsGroupID_t friendsGroupID, CSteamID *pOutSteamIDMembers, int nMembersCount)
     * }
     */
    public static void SteamAPI_ISteamFriends_GetFriendsGroupMembersList(MemorySegment ptr, short friendsGroupID, MemorySegment pOutSteamIDMembers, int nMembersCount) {
        var mh$ = SteamAPI_ISteamFriends_GetFriendsGroupMembersList.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_GetFriendsGroupMembersList", ptr, friendsGroupID, pOutSteamIDMembers, nMembersCount);
            }
            mh$.invokeExact(ptr, friendsGroupID, pOutSteamIDMembers, nMembersCount);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_HasFriend {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamFriends_HasFriend"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamFriends_HasFriend(ISteamFriends ptr, uint64_steamid steamIDFriend, int iFriendFlags)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_HasFriend$descriptor() {
        return SteamAPI_ISteamFriends_HasFriend.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamFriends_HasFriend(ISteamFriends ptr, uint64_steamid steamIDFriend, int iFriendFlags)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_HasFriend$handle() {
        return SteamAPI_ISteamFriends_HasFriend.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamFriends_HasFriend(ISteamFriends ptr, uint64_steamid steamIDFriend, int iFriendFlags)
     * }
     */
    public static boolean SteamAPI_ISteamFriends_HasFriend(MemorySegment ptr, long steamIDFriend, int iFriendFlags) {
        var mh$ = SteamAPI_ISteamFriends_HasFriend.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_HasFriend", ptr, steamIDFriend, iFriendFlags);
            }
            return (boolean)mh$.invokeExact(ptr, steamIDFriend, iFriendFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_GetClanCount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamFriends_GetClanCount"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamFriends_GetClanCount(ISteamFriends ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_GetClanCount$descriptor() {
        return SteamAPI_ISteamFriends_GetClanCount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamFriends_GetClanCount(ISteamFriends ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_GetClanCount$handle() {
        return SteamAPI_ISteamFriends_GetClanCount.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int SteamAPI_ISteamFriends_GetClanCount(ISteamFriends ptr)
     * }
     */
    public static int SteamAPI_ISteamFriends_GetClanCount(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamFriends_GetClanCount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_GetClanCount", ptr);
            }
            return (int)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_GetClanByIndex {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamFriends_GetClanByIndex"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint64_steamid SteamAPI_ISteamFriends_GetClanByIndex(ISteamFriends ptr, int iClan)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_GetClanByIndex$descriptor() {
        return SteamAPI_ISteamFriends_GetClanByIndex.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint64_steamid SteamAPI_ISteamFriends_GetClanByIndex(ISteamFriends ptr, int iClan)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_GetClanByIndex$handle() {
        return SteamAPI_ISteamFriends_GetClanByIndex.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * uint64_steamid SteamAPI_ISteamFriends_GetClanByIndex(ISteamFriends ptr, int iClan)
     * }
     */
    public static long SteamAPI_ISteamFriends_GetClanByIndex(MemorySegment ptr, int iClan) {
        var mh$ = SteamAPI_ISteamFriends_GetClanByIndex.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_GetClanByIndex", ptr, iClan);
            }
            return (long)mh$.invokeExact(ptr, iClan);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_GetClanName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamFriends_GetClanName"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamFriends_GetClanName(ISteamFriends ptr, uint64_steamid steamIDClan)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_GetClanName$descriptor() {
        return SteamAPI_ISteamFriends_GetClanName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamFriends_GetClanName(ISteamFriends ptr, uint64_steamid steamIDClan)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_GetClanName$handle() {
        return SteamAPI_ISteamFriends_GetClanName.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamFriends_GetClanName(ISteamFriends ptr, uint64_steamid steamIDClan)
     * }
     */
    public static MemorySegment SteamAPI_ISteamFriends_GetClanName(MemorySegment ptr, long steamIDClan) {
        var mh$ = SteamAPI_ISteamFriends_GetClanName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_GetClanName", ptr, steamIDClan);
            }
            return (MemorySegment)mh$.invokeExact(ptr, steamIDClan);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_GetClanTag {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamFriends_GetClanTag"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamFriends_GetClanTag(ISteamFriends ptr, uint64_steamid steamIDClan)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_GetClanTag$descriptor() {
        return SteamAPI_ISteamFriends_GetClanTag.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamFriends_GetClanTag(ISteamFriends ptr, uint64_steamid steamIDClan)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_GetClanTag$handle() {
        return SteamAPI_ISteamFriends_GetClanTag.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamFriends_GetClanTag(ISteamFriends ptr, uint64_steamid steamIDClan)
     * }
     */
    public static MemorySegment SteamAPI_ISteamFriends_GetClanTag(MemorySegment ptr, long steamIDClan) {
        var mh$ = SteamAPI_ISteamFriends_GetClanTag.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_GetClanTag", ptr, steamIDClan);
            }
            return (MemorySegment)mh$.invokeExact(ptr, steamIDClan);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_GetClanActivityCounts {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamFriends_GetClanActivityCounts"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamFriends_GetClanActivityCounts(ISteamFriends ptr, uint64_steamid steamIDClan, int *pnOnline, int *pnInGame, int *pnChatting)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_GetClanActivityCounts$descriptor() {
        return SteamAPI_ISteamFriends_GetClanActivityCounts.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamFriends_GetClanActivityCounts(ISteamFriends ptr, uint64_steamid steamIDClan, int *pnOnline, int *pnInGame, int *pnChatting)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_GetClanActivityCounts$handle() {
        return SteamAPI_ISteamFriends_GetClanActivityCounts.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamFriends_GetClanActivityCounts(ISteamFriends ptr, uint64_steamid steamIDClan, int *pnOnline, int *pnInGame, int *pnChatting)
     * }
     */
    public static boolean SteamAPI_ISteamFriends_GetClanActivityCounts(MemorySegment ptr, long steamIDClan, MemorySegment pnOnline, MemorySegment pnInGame, MemorySegment pnChatting) {
        var mh$ = SteamAPI_ISteamFriends_GetClanActivityCounts.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_GetClanActivityCounts", ptr, steamIDClan, pnOnline, pnInGame, pnChatting);
            }
            return (boolean)mh$.invokeExact(ptr, steamIDClan, pnOnline, pnInGame, pnChatting);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_DownloadClanActivityCounts {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamFriends_DownloadClanActivityCounts"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamFriends_DownloadClanActivityCounts(ISteamFriends ptr, CSteamID *psteamIDClans, int cClansToRequest)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_DownloadClanActivityCounts$descriptor() {
        return SteamAPI_ISteamFriends_DownloadClanActivityCounts.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamFriends_DownloadClanActivityCounts(ISteamFriends ptr, CSteamID *psteamIDClans, int cClansToRequest)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_DownloadClanActivityCounts$handle() {
        return SteamAPI_ISteamFriends_DownloadClanActivityCounts.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamFriends_DownloadClanActivityCounts(ISteamFriends ptr, CSteamID *psteamIDClans, int cClansToRequest)
     * }
     */
    public static long SteamAPI_ISteamFriends_DownloadClanActivityCounts(MemorySegment ptr, MemorySegment psteamIDClans, int cClansToRequest) {
        var mh$ = SteamAPI_ISteamFriends_DownloadClanActivityCounts.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_DownloadClanActivityCounts", ptr, psteamIDClans, cClansToRequest);
            }
            return (long)mh$.invokeExact(ptr, psteamIDClans, cClansToRequest);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_GetFriendCountFromSource {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamFriends_GetFriendCountFromSource"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamFriends_GetFriendCountFromSource(ISteamFriends ptr, uint64_steamid steamIDSource)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_GetFriendCountFromSource$descriptor() {
        return SteamAPI_ISteamFriends_GetFriendCountFromSource.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamFriends_GetFriendCountFromSource(ISteamFriends ptr, uint64_steamid steamIDSource)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_GetFriendCountFromSource$handle() {
        return SteamAPI_ISteamFriends_GetFriendCountFromSource.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int SteamAPI_ISteamFriends_GetFriendCountFromSource(ISteamFriends ptr, uint64_steamid steamIDSource)
     * }
     */
    public static int SteamAPI_ISteamFriends_GetFriendCountFromSource(MemorySegment ptr, long steamIDSource) {
        var mh$ = SteamAPI_ISteamFriends_GetFriendCountFromSource.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_GetFriendCountFromSource", ptr, steamIDSource);
            }
            return (int)mh$.invokeExact(ptr, steamIDSource);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_GetFriendFromSourceByIndex {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamFriends_GetFriendFromSourceByIndex"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint64_steamid SteamAPI_ISteamFriends_GetFriendFromSourceByIndex(ISteamFriends ptr, uint64_steamid steamIDSource, int iFriend)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_GetFriendFromSourceByIndex$descriptor() {
        return SteamAPI_ISteamFriends_GetFriendFromSourceByIndex.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint64_steamid SteamAPI_ISteamFriends_GetFriendFromSourceByIndex(ISteamFriends ptr, uint64_steamid steamIDSource, int iFriend)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_GetFriendFromSourceByIndex$handle() {
        return SteamAPI_ISteamFriends_GetFriendFromSourceByIndex.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * uint64_steamid SteamAPI_ISteamFriends_GetFriendFromSourceByIndex(ISteamFriends ptr, uint64_steamid steamIDSource, int iFriend)
     * }
     */
    public static long SteamAPI_ISteamFriends_GetFriendFromSourceByIndex(MemorySegment ptr, long steamIDSource, int iFriend) {
        var mh$ = SteamAPI_ISteamFriends_GetFriendFromSourceByIndex.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_GetFriendFromSourceByIndex", ptr, steamIDSource, iFriend);
            }
            return (long)mh$.invokeExact(ptr, steamIDSource, iFriend);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_IsUserInSource {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamFriends_IsUserInSource"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamFriends_IsUserInSource(ISteamFriends ptr, uint64_steamid steamIDUser, uint64_steamid steamIDSource)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_IsUserInSource$descriptor() {
        return SteamAPI_ISteamFriends_IsUserInSource.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamFriends_IsUserInSource(ISteamFriends ptr, uint64_steamid steamIDUser, uint64_steamid steamIDSource)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_IsUserInSource$handle() {
        return SteamAPI_ISteamFriends_IsUserInSource.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamFriends_IsUserInSource(ISteamFriends ptr, uint64_steamid steamIDUser, uint64_steamid steamIDSource)
     * }
     */
    public static boolean SteamAPI_ISteamFriends_IsUserInSource(MemorySegment ptr, long steamIDUser, long steamIDSource) {
        var mh$ = SteamAPI_ISteamFriends_IsUserInSource.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_IsUserInSource", ptr, steamIDUser, steamIDSource);
            }
            return (boolean)mh$.invokeExact(ptr, steamIDUser, steamIDSource);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_SetInGameVoiceSpeaking {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamFriends_SetInGameVoiceSpeaking"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamFriends_SetInGameVoiceSpeaking(ISteamFriends ptr, uint64_steamid steamIDUser, bool bSpeaking)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_SetInGameVoiceSpeaking$descriptor() {
        return SteamAPI_ISteamFriends_SetInGameVoiceSpeaking.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamFriends_SetInGameVoiceSpeaking(ISteamFriends ptr, uint64_steamid steamIDUser, bool bSpeaking)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_SetInGameVoiceSpeaking$handle() {
        return SteamAPI_ISteamFriends_SetInGameVoiceSpeaking.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamFriends_SetInGameVoiceSpeaking(ISteamFriends ptr, uint64_steamid steamIDUser, bool bSpeaking)
     * }
     */
    public static void SteamAPI_ISteamFriends_SetInGameVoiceSpeaking(MemorySegment ptr, long steamIDUser, boolean bSpeaking) {
        var mh$ = SteamAPI_ISteamFriends_SetInGameVoiceSpeaking.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_SetInGameVoiceSpeaking", ptr, steamIDUser, bSpeaking);
            }
            mh$.invokeExact(ptr, steamIDUser, bSpeaking);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_ActivateGameOverlay {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamFriends_ActivateGameOverlay"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamFriends_ActivateGameOverlay(ISteamFriends ptr, const char *pchDialog)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_ActivateGameOverlay$descriptor() {
        return SteamAPI_ISteamFriends_ActivateGameOverlay.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamFriends_ActivateGameOverlay(ISteamFriends ptr, const char *pchDialog)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_ActivateGameOverlay$handle() {
        return SteamAPI_ISteamFriends_ActivateGameOverlay.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamFriends_ActivateGameOverlay(ISteamFriends ptr, const char *pchDialog)
     * }
     */
    public static void SteamAPI_ISteamFriends_ActivateGameOverlay(MemorySegment ptr, MemorySegment pchDialog) {
        var mh$ = SteamAPI_ISteamFriends_ActivateGameOverlay.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_ActivateGameOverlay", ptr, pchDialog);
            }
            mh$.invokeExact(ptr, pchDialog);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_ActivateGameOverlayToUser {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamFriends_ActivateGameOverlayToUser"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamFriends_ActivateGameOverlayToUser(ISteamFriends ptr, const char *pchDialog, uint64_steamid steamID)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_ActivateGameOverlayToUser$descriptor() {
        return SteamAPI_ISteamFriends_ActivateGameOverlayToUser.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamFriends_ActivateGameOverlayToUser(ISteamFriends ptr, const char *pchDialog, uint64_steamid steamID)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_ActivateGameOverlayToUser$handle() {
        return SteamAPI_ISteamFriends_ActivateGameOverlayToUser.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamFriends_ActivateGameOverlayToUser(ISteamFriends ptr, const char *pchDialog, uint64_steamid steamID)
     * }
     */
    public static void SteamAPI_ISteamFriends_ActivateGameOverlayToUser(MemorySegment ptr, MemorySegment pchDialog, long steamID) {
        var mh$ = SteamAPI_ISteamFriends_ActivateGameOverlayToUser.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_ActivateGameOverlayToUser", ptr, pchDialog, steamID);
            }
            mh$.invokeExact(ptr, pchDialog, steamID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_ActivateGameOverlayToWebPage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamFriends_ActivateGameOverlayToWebPage"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamFriends_ActivateGameOverlayToWebPage(ISteamFriends ptr, const char *pchURL, EActivateGameOverlayToWebPageMode eMode)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_ActivateGameOverlayToWebPage$descriptor() {
        return SteamAPI_ISteamFriends_ActivateGameOverlayToWebPage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamFriends_ActivateGameOverlayToWebPage(ISteamFriends ptr, const char *pchURL, EActivateGameOverlayToWebPageMode eMode)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_ActivateGameOverlayToWebPage$handle() {
        return SteamAPI_ISteamFriends_ActivateGameOverlayToWebPage.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamFriends_ActivateGameOverlayToWebPage(ISteamFriends ptr, const char *pchURL, EActivateGameOverlayToWebPageMode eMode)
     * }
     */
    public static void SteamAPI_ISteamFriends_ActivateGameOverlayToWebPage(MemorySegment ptr, MemorySegment pchURL, int eMode) {
        var mh$ = SteamAPI_ISteamFriends_ActivateGameOverlayToWebPage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_ActivateGameOverlayToWebPage", ptr, pchURL, eMode);
            }
            mh$.invokeExact(ptr, pchURL, eMode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_ActivateGameOverlayToStore {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamFriends_ActivateGameOverlayToStore"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamFriends_ActivateGameOverlayToStore(ISteamFriends ptr, AppId_t nAppID, EOverlayToStoreFlag eFlag)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_ActivateGameOverlayToStore$descriptor() {
        return SteamAPI_ISteamFriends_ActivateGameOverlayToStore.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamFriends_ActivateGameOverlayToStore(ISteamFriends ptr, AppId_t nAppID, EOverlayToStoreFlag eFlag)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_ActivateGameOverlayToStore$handle() {
        return SteamAPI_ISteamFriends_ActivateGameOverlayToStore.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamFriends_ActivateGameOverlayToStore(ISteamFriends ptr, AppId_t nAppID, EOverlayToStoreFlag eFlag)
     * }
     */
    public static void SteamAPI_ISteamFriends_ActivateGameOverlayToStore(MemorySegment ptr, int nAppID, int eFlag) {
        var mh$ = SteamAPI_ISteamFriends_ActivateGameOverlayToStore.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_ActivateGameOverlayToStore", ptr, nAppID, eFlag);
            }
            mh$.invokeExact(ptr, nAppID, eFlag);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_SetPlayedWith {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamFriends_SetPlayedWith"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamFriends_SetPlayedWith(ISteamFriends ptr, uint64_steamid steamIDUserPlayedWith)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_SetPlayedWith$descriptor() {
        return SteamAPI_ISteamFriends_SetPlayedWith.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamFriends_SetPlayedWith(ISteamFriends ptr, uint64_steamid steamIDUserPlayedWith)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_SetPlayedWith$handle() {
        return SteamAPI_ISteamFriends_SetPlayedWith.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamFriends_SetPlayedWith(ISteamFriends ptr, uint64_steamid steamIDUserPlayedWith)
     * }
     */
    public static void SteamAPI_ISteamFriends_SetPlayedWith(MemorySegment ptr, long steamIDUserPlayedWith) {
        var mh$ = SteamAPI_ISteamFriends_SetPlayedWith.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_SetPlayedWith", ptr, steamIDUserPlayedWith);
            }
            mh$.invokeExact(ptr, steamIDUserPlayedWith);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_ActivateGameOverlayInviteDialog {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamFriends_ActivateGameOverlayInviteDialog"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamFriends_ActivateGameOverlayInviteDialog(ISteamFriends ptr, uint64_steamid steamIDLobby)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_ActivateGameOverlayInviteDialog$descriptor() {
        return SteamAPI_ISteamFriends_ActivateGameOverlayInviteDialog.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamFriends_ActivateGameOverlayInviteDialog(ISteamFriends ptr, uint64_steamid steamIDLobby)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_ActivateGameOverlayInviteDialog$handle() {
        return SteamAPI_ISteamFriends_ActivateGameOverlayInviteDialog.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamFriends_ActivateGameOverlayInviteDialog(ISteamFriends ptr, uint64_steamid steamIDLobby)
     * }
     */
    public static void SteamAPI_ISteamFriends_ActivateGameOverlayInviteDialog(MemorySegment ptr, long steamIDLobby) {
        var mh$ = SteamAPI_ISteamFriends_ActivateGameOverlayInviteDialog.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_ActivateGameOverlayInviteDialog", ptr, steamIDLobby);
            }
            mh$.invokeExact(ptr, steamIDLobby);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_GetSmallFriendAvatar {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamFriends_GetSmallFriendAvatar"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamFriends_GetSmallFriendAvatar(ISteamFriends ptr, uint64_steamid steamIDFriend)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_GetSmallFriendAvatar$descriptor() {
        return SteamAPI_ISteamFriends_GetSmallFriendAvatar.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamFriends_GetSmallFriendAvatar(ISteamFriends ptr, uint64_steamid steamIDFriend)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_GetSmallFriendAvatar$handle() {
        return SteamAPI_ISteamFriends_GetSmallFriendAvatar.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int SteamAPI_ISteamFriends_GetSmallFriendAvatar(ISteamFriends ptr, uint64_steamid steamIDFriend)
     * }
     */
    public static int SteamAPI_ISteamFriends_GetSmallFriendAvatar(MemorySegment ptr, long steamIDFriend) {
        var mh$ = SteamAPI_ISteamFriends_GetSmallFriendAvatar.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_GetSmallFriendAvatar", ptr, steamIDFriend);
            }
            return (int)mh$.invokeExact(ptr, steamIDFriend);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_GetMediumFriendAvatar {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamFriends_GetMediumFriendAvatar"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamFriends_GetMediumFriendAvatar(ISteamFriends ptr, uint64_steamid steamIDFriend)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_GetMediumFriendAvatar$descriptor() {
        return SteamAPI_ISteamFriends_GetMediumFriendAvatar.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamFriends_GetMediumFriendAvatar(ISteamFriends ptr, uint64_steamid steamIDFriend)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_GetMediumFriendAvatar$handle() {
        return SteamAPI_ISteamFriends_GetMediumFriendAvatar.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int SteamAPI_ISteamFriends_GetMediumFriendAvatar(ISteamFriends ptr, uint64_steamid steamIDFriend)
     * }
     */
    public static int SteamAPI_ISteamFriends_GetMediumFriendAvatar(MemorySegment ptr, long steamIDFriend) {
        var mh$ = SteamAPI_ISteamFriends_GetMediumFriendAvatar.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_GetMediumFriendAvatar", ptr, steamIDFriend);
            }
            return (int)mh$.invokeExact(ptr, steamIDFriend);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_GetLargeFriendAvatar {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamFriends_GetLargeFriendAvatar"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamFriends_GetLargeFriendAvatar(ISteamFriends ptr, uint64_steamid steamIDFriend)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_GetLargeFriendAvatar$descriptor() {
        return SteamAPI_ISteamFriends_GetLargeFriendAvatar.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamFriends_GetLargeFriendAvatar(ISteamFriends ptr, uint64_steamid steamIDFriend)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_GetLargeFriendAvatar$handle() {
        return SteamAPI_ISteamFriends_GetLargeFriendAvatar.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int SteamAPI_ISteamFriends_GetLargeFriendAvatar(ISteamFriends ptr, uint64_steamid steamIDFriend)
     * }
     */
    public static int SteamAPI_ISteamFriends_GetLargeFriendAvatar(MemorySegment ptr, long steamIDFriend) {
        var mh$ = SteamAPI_ISteamFriends_GetLargeFriendAvatar.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_GetLargeFriendAvatar", ptr, steamIDFriend);
            }
            return (int)mh$.invokeExact(ptr, steamIDFriend);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_RequestUserInformation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamFriends_RequestUserInformation"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamFriends_RequestUserInformation(ISteamFriends ptr, uint64_steamid steamIDUser, bool bRequireNameOnly)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_RequestUserInformation$descriptor() {
        return SteamAPI_ISteamFriends_RequestUserInformation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamFriends_RequestUserInformation(ISteamFriends ptr, uint64_steamid steamIDUser, bool bRequireNameOnly)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_RequestUserInformation$handle() {
        return SteamAPI_ISteamFriends_RequestUserInformation.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamFriends_RequestUserInformation(ISteamFriends ptr, uint64_steamid steamIDUser, bool bRequireNameOnly)
     * }
     */
    public static boolean SteamAPI_ISteamFriends_RequestUserInformation(MemorySegment ptr, long steamIDUser, boolean bRequireNameOnly) {
        var mh$ = SteamAPI_ISteamFriends_RequestUserInformation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_RequestUserInformation", ptr, steamIDUser, bRequireNameOnly);
            }
            return (boolean)mh$.invokeExact(ptr, steamIDUser, bRequireNameOnly);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_RequestClanOfficerList {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamFriends_RequestClanOfficerList"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamFriends_RequestClanOfficerList(ISteamFriends ptr, uint64_steamid steamIDClan)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_RequestClanOfficerList$descriptor() {
        return SteamAPI_ISteamFriends_RequestClanOfficerList.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamFriends_RequestClanOfficerList(ISteamFriends ptr, uint64_steamid steamIDClan)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_RequestClanOfficerList$handle() {
        return SteamAPI_ISteamFriends_RequestClanOfficerList.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamFriends_RequestClanOfficerList(ISteamFriends ptr, uint64_steamid steamIDClan)
     * }
     */
    public static long SteamAPI_ISteamFriends_RequestClanOfficerList(MemorySegment ptr, long steamIDClan) {
        var mh$ = SteamAPI_ISteamFriends_RequestClanOfficerList.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_RequestClanOfficerList", ptr, steamIDClan);
            }
            return (long)mh$.invokeExact(ptr, steamIDClan);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_GetClanOwner {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamFriends_GetClanOwner"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint64_steamid SteamAPI_ISteamFriends_GetClanOwner(ISteamFriends ptr, uint64_steamid steamIDClan)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_GetClanOwner$descriptor() {
        return SteamAPI_ISteamFriends_GetClanOwner.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint64_steamid SteamAPI_ISteamFriends_GetClanOwner(ISteamFriends ptr, uint64_steamid steamIDClan)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_GetClanOwner$handle() {
        return SteamAPI_ISteamFriends_GetClanOwner.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * uint64_steamid SteamAPI_ISteamFriends_GetClanOwner(ISteamFriends ptr, uint64_steamid steamIDClan)
     * }
     */
    public static long SteamAPI_ISteamFriends_GetClanOwner(MemorySegment ptr, long steamIDClan) {
        var mh$ = SteamAPI_ISteamFriends_GetClanOwner.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_GetClanOwner", ptr, steamIDClan);
            }
            return (long)mh$.invokeExact(ptr, steamIDClan);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_GetClanOfficerCount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamFriends_GetClanOfficerCount"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamFriends_GetClanOfficerCount(ISteamFriends ptr, uint64_steamid steamIDClan)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_GetClanOfficerCount$descriptor() {
        return SteamAPI_ISteamFriends_GetClanOfficerCount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamFriends_GetClanOfficerCount(ISteamFriends ptr, uint64_steamid steamIDClan)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_GetClanOfficerCount$handle() {
        return SteamAPI_ISteamFriends_GetClanOfficerCount.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int SteamAPI_ISteamFriends_GetClanOfficerCount(ISteamFriends ptr, uint64_steamid steamIDClan)
     * }
     */
    public static int SteamAPI_ISteamFriends_GetClanOfficerCount(MemorySegment ptr, long steamIDClan) {
        var mh$ = SteamAPI_ISteamFriends_GetClanOfficerCount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_GetClanOfficerCount", ptr, steamIDClan);
            }
            return (int)mh$.invokeExact(ptr, steamIDClan);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_GetClanOfficerByIndex {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamFriends_GetClanOfficerByIndex"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint64_steamid SteamAPI_ISteamFriends_GetClanOfficerByIndex(ISteamFriends ptr, uint64_steamid steamIDClan, int iOfficer)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_GetClanOfficerByIndex$descriptor() {
        return SteamAPI_ISteamFriends_GetClanOfficerByIndex.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint64_steamid SteamAPI_ISteamFriends_GetClanOfficerByIndex(ISteamFriends ptr, uint64_steamid steamIDClan, int iOfficer)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_GetClanOfficerByIndex$handle() {
        return SteamAPI_ISteamFriends_GetClanOfficerByIndex.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * uint64_steamid SteamAPI_ISteamFriends_GetClanOfficerByIndex(ISteamFriends ptr, uint64_steamid steamIDClan, int iOfficer)
     * }
     */
    public static long SteamAPI_ISteamFriends_GetClanOfficerByIndex(MemorySegment ptr, long steamIDClan, int iOfficer) {
        var mh$ = SteamAPI_ISteamFriends_GetClanOfficerByIndex.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_GetClanOfficerByIndex", ptr, steamIDClan, iOfficer);
            }
            return (long)mh$.invokeExact(ptr, steamIDClan, iOfficer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_GetUserRestrictions {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamFriends_GetUserRestrictions"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamFriends_GetUserRestrictions(ISteamFriends ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_GetUserRestrictions$descriptor() {
        return SteamAPI_ISteamFriends_GetUserRestrictions.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamFriends_GetUserRestrictions(ISteamFriends ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_GetUserRestrictions$handle() {
        return SteamAPI_ISteamFriends_GetUserRestrictions.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamFriends_GetUserRestrictions(ISteamFriends ptr)
     * }
     */
    public static int SteamAPI_ISteamFriends_GetUserRestrictions(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamFriends_GetUserRestrictions.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_GetUserRestrictions", ptr);
            }
            return (int)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_SetRichPresence {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamFriends_SetRichPresence"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamFriends_SetRichPresence(ISteamFriends ptr, const char *pchKey, const char *pchValue)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_SetRichPresence$descriptor() {
        return SteamAPI_ISteamFriends_SetRichPresence.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamFriends_SetRichPresence(ISteamFriends ptr, const char *pchKey, const char *pchValue)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_SetRichPresence$handle() {
        return SteamAPI_ISteamFriends_SetRichPresence.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamFriends_SetRichPresence(ISteamFriends ptr, const char *pchKey, const char *pchValue)
     * }
     */
    public static boolean SteamAPI_ISteamFriends_SetRichPresence(MemorySegment ptr, MemorySegment pchKey, MemorySegment pchValue) {
        var mh$ = SteamAPI_ISteamFriends_SetRichPresence.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_SetRichPresence", ptr, pchKey, pchValue);
            }
            return (boolean)mh$.invokeExact(ptr, pchKey, pchValue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_ClearRichPresence {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamFriends_ClearRichPresence"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamFriends_ClearRichPresence(ISteamFriends ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_ClearRichPresence$descriptor() {
        return SteamAPI_ISteamFriends_ClearRichPresence.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamFriends_ClearRichPresence(ISteamFriends ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_ClearRichPresence$handle() {
        return SteamAPI_ISteamFriends_ClearRichPresence.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamFriends_ClearRichPresence(ISteamFriends ptr)
     * }
     */
    public static void SteamAPI_ISteamFriends_ClearRichPresence(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamFriends_ClearRichPresence.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_ClearRichPresence", ptr);
            }
            mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_GetFriendRichPresence {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamFriends_GetFriendRichPresence"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamFriends_GetFriendRichPresence(ISteamFriends ptr, uint64_steamid steamIDFriend, const char *pchKey)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_GetFriendRichPresence$descriptor() {
        return SteamAPI_ISteamFriends_GetFriendRichPresence.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamFriends_GetFriendRichPresence(ISteamFriends ptr, uint64_steamid steamIDFriend, const char *pchKey)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_GetFriendRichPresence$handle() {
        return SteamAPI_ISteamFriends_GetFriendRichPresence.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamFriends_GetFriendRichPresence(ISteamFriends ptr, uint64_steamid steamIDFriend, const char *pchKey)
     * }
     */
    public static MemorySegment SteamAPI_ISteamFriends_GetFriendRichPresence(MemorySegment ptr, long steamIDFriend, MemorySegment pchKey) {
        var mh$ = SteamAPI_ISteamFriends_GetFriendRichPresence.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_GetFriendRichPresence", ptr, steamIDFriend, pchKey);
            }
            return (MemorySegment)mh$.invokeExact(ptr, steamIDFriend, pchKey);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_GetFriendRichPresenceKeyCount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamFriends_GetFriendRichPresenceKeyCount"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamFriends_GetFriendRichPresenceKeyCount(ISteamFriends ptr, uint64_steamid steamIDFriend)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_GetFriendRichPresenceKeyCount$descriptor() {
        return SteamAPI_ISteamFriends_GetFriendRichPresenceKeyCount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamFriends_GetFriendRichPresenceKeyCount(ISteamFriends ptr, uint64_steamid steamIDFriend)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_GetFriendRichPresenceKeyCount$handle() {
        return SteamAPI_ISteamFriends_GetFriendRichPresenceKeyCount.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int SteamAPI_ISteamFriends_GetFriendRichPresenceKeyCount(ISteamFriends ptr, uint64_steamid steamIDFriend)
     * }
     */
    public static int SteamAPI_ISteamFriends_GetFriendRichPresenceKeyCount(MemorySegment ptr, long steamIDFriend) {
        var mh$ = SteamAPI_ISteamFriends_GetFriendRichPresenceKeyCount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_GetFriendRichPresenceKeyCount", ptr, steamIDFriend);
            }
            return (int)mh$.invokeExact(ptr, steamIDFriend);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_GetFriendRichPresenceKeyByIndex {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamFriends_GetFriendRichPresenceKeyByIndex"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamFriends_GetFriendRichPresenceKeyByIndex(ISteamFriends ptr, uint64_steamid steamIDFriend, int iKey)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_GetFriendRichPresenceKeyByIndex$descriptor() {
        return SteamAPI_ISteamFriends_GetFriendRichPresenceKeyByIndex.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamFriends_GetFriendRichPresenceKeyByIndex(ISteamFriends ptr, uint64_steamid steamIDFriend, int iKey)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_GetFriendRichPresenceKeyByIndex$handle() {
        return SteamAPI_ISteamFriends_GetFriendRichPresenceKeyByIndex.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamFriends_GetFriendRichPresenceKeyByIndex(ISteamFriends ptr, uint64_steamid steamIDFriend, int iKey)
     * }
     */
    public static MemorySegment SteamAPI_ISteamFriends_GetFriendRichPresenceKeyByIndex(MemorySegment ptr, long steamIDFriend, int iKey) {
        var mh$ = SteamAPI_ISteamFriends_GetFriendRichPresenceKeyByIndex.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_GetFriendRichPresenceKeyByIndex", ptr, steamIDFriend, iKey);
            }
            return (MemorySegment)mh$.invokeExact(ptr, steamIDFriend, iKey);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_RequestFriendRichPresence {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamFriends_RequestFriendRichPresence"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamFriends_RequestFriendRichPresence(ISteamFriends ptr, uint64_steamid steamIDFriend)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_RequestFriendRichPresence$descriptor() {
        return SteamAPI_ISteamFriends_RequestFriendRichPresence.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamFriends_RequestFriendRichPresence(ISteamFriends ptr, uint64_steamid steamIDFriend)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_RequestFriendRichPresence$handle() {
        return SteamAPI_ISteamFriends_RequestFriendRichPresence.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamFriends_RequestFriendRichPresence(ISteamFriends ptr, uint64_steamid steamIDFriend)
     * }
     */
    public static void SteamAPI_ISteamFriends_RequestFriendRichPresence(MemorySegment ptr, long steamIDFriend) {
        var mh$ = SteamAPI_ISteamFriends_RequestFriendRichPresence.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_RequestFriendRichPresence", ptr, steamIDFriend);
            }
            mh$.invokeExact(ptr, steamIDFriend);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_InviteUserToGame {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamFriends_InviteUserToGame"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamFriends_InviteUserToGame(ISteamFriends ptr, uint64_steamid steamIDFriend, const char *pchConnectString)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_InviteUserToGame$descriptor() {
        return SteamAPI_ISteamFriends_InviteUserToGame.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamFriends_InviteUserToGame(ISteamFriends ptr, uint64_steamid steamIDFriend, const char *pchConnectString)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_InviteUserToGame$handle() {
        return SteamAPI_ISteamFriends_InviteUserToGame.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamFriends_InviteUserToGame(ISteamFriends ptr, uint64_steamid steamIDFriend, const char *pchConnectString)
     * }
     */
    public static boolean SteamAPI_ISteamFriends_InviteUserToGame(MemorySegment ptr, long steamIDFriend, MemorySegment pchConnectString) {
        var mh$ = SteamAPI_ISteamFriends_InviteUserToGame.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_InviteUserToGame", ptr, steamIDFriend, pchConnectString);
            }
            return (boolean)mh$.invokeExact(ptr, steamIDFriend, pchConnectString);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_GetCoplayFriendCount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamFriends_GetCoplayFriendCount"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamFriends_GetCoplayFriendCount(ISteamFriends ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_GetCoplayFriendCount$descriptor() {
        return SteamAPI_ISteamFriends_GetCoplayFriendCount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamFriends_GetCoplayFriendCount(ISteamFriends ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_GetCoplayFriendCount$handle() {
        return SteamAPI_ISteamFriends_GetCoplayFriendCount.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int SteamAPI_ISteamFriends_GetCoplayFriendCount(ISteamFriends ptr)
     * }
     */
    public static int SteamAPI_ISteamFriends_GetCoplayFriendCount(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamFriends_GetCoplayFriendCount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_GetCoplayFriendCount", ptr);
            }
            return (int)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_GetCoplayFriend {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamFriends_GetCoplayFriend"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint64_steamid SteamAPI_ISteamFriends_GetCoplayFriend(ISteamFriends ptr, int iCoplayFriend)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_GetCoplayFriend$descriptor() {
        return SteamAPI_ISteamFriends_GetCoplayFriend.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint64_steamid SteamAPI_ISteamFriends_GetCoplayFriend(ISteamFriends ptr, int iCoplayFriend)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_GetCoplayFriend$handle() {
        return SteamAPI_ISteamFriends_GetCoplayFriend.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * uint64_steamid SteamAPI_ISteamFriends_GetCoplayFriend(ISteamFriends ptr, int iCoplayFriend)
     * }
     */
    public static long SteamAPI_ISteamFriends_GetCoplayFriend(MemorySegment ptr, int iCoplayFriend) {
        var mh$ = SteamAPI_ISteamFriends_GetCoplayFriend.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_GetCoplayFriend", ptr, iCoplayFriend);
            }
            return (long)mh$.invokeExact(ptr, iCoplayFriend);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_GetFriendCoplayTime {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamFriends_GetFriendCoplayTime"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamFriends_GetFriendCoplayTime(ISteamFriends ptr, uint64_steamid steamIDFriend)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_GetFriendCoplayTime$descriptor() {
        return SteamAPI_ISteamFriends_GetFriendCoplayTime.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamFriends_GetFriendCoplayTime(ISteamFriends ptr, uint64_steamid steamIDFriend)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_GetFriendCoplayTime$handle() {
        return SteamAPI_ISteamFriends_GetFriendCoplayTime.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int SteamAPI_ISteamFriends_GetFriendCoplayTime(ISteamFriends ptr, uint64_steamid steamIDFriend)
     * }
     */
    public static int SteamAPI_ISteamFriends_GetFriendCoplayTime(MemorySegment ptr, long steamIDFriend) {
        var mh$ = SteamAPI_ISteamFriends_GetFriendCoplayTime.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_GetFriendCoplayTime", ptr, steamIDFriend);
            }
            return (int)mh$.invokeExact(ptr, steamIDFriend);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_GetFriendCoplayGame {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamFriends_GetFriendCoplayGame"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * AppId_t SteamAPI_ISteamFriends_GetFriendCoplayGame(ISteamFriends ptr, uint64_steamid steamIDFriend)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_GetFriendCoplayGame$descriptor() {
        return SteamAPI_ISteamFriends_GetFriendCoplayGame.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * AppId_t SteamAPI_ISteamFriends_GetFriendCoplayGame(ISteamFriends ptr, uint64_steamid steamIDFriend)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_GetFriendCoplayGame$handle() {
        return SteamAPI_ISteamFriends_GetFriendCoplayGame.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * AppId_t SteamAPI_ISteamFriends_GetFriendCoplayGame(ISteamFriends ptr, uint64_steamid steamIDFriend)
     * }
     */
    public static int SteamAPI_ISteamFriends_GetFriendCoplayGame(MemorySegment ptr, long steamIDFriend) {
        var mh$ = SteamAPI_ISteamFriends_GetFriendCoplayGame.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_GetFriendCoplayGame", ptr, steamIDFriend);
            }
            return (int)mh$.invokeExact(ptr, steamIDFriend);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_JoinClanChatRoom {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamFriends_JoinClanChatRoom"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamFriends_JoinClanChatRoom(ISteamFriends ptr, uint64_steamid steamIDClan)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_JoinClanChatRoom$descriptor() {
        return SteamAPI_ISteamFriends_JoinClanChatRoom.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamFriends_JoinClanChatRoom(ISteamFriends ptr, uint64_steamid steamIDClan)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_JoinClanChatRoom$handle() {
        return SteamAPI_ISteamFriends_JoinClanChatRoom.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamFriends_JoinClanChatRoom(ISteamFriends ptr, uint64_steamid steamIDClan)
     * }
     */
    public static long SteamAPI_ISteamFriends_JoinClanChatRoom(MemorySegment ptr, long steamIDClan) {
        var mh$ = SteamAPI_ISteamFriends_JoinClanChatRoom.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_JoinClanChatRoom", ptr, steamIDClan);
            }
            return (long)mh$.invokeExact(ptr, steamIDClan);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_LeaveClanChatRoom {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamFriends_LeaveClanChatRoom"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamFriends_LeaveClanChatRoom(ISteamFriends ptr, uint64_steamid steamIDClan)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_LeaveClanChatRoom$descriptor() {
        return SteamAPI_ISteamFriends_LeaveClanChatRoom.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamFriends_LeaveClanChatRoom(ISteamFriends ptr, uint64_steamid steamIDClan)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_LeaveClanChatRoom$handle() {
        return SteamAPI_ISteamFriends_LeaveClanChatRoom.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamFriends_LeaveClanChatRoom(ISteamFriends ptr, uint64_steamid steamIDClan)
     * }
     */
    public static boolean SteamAPI_ISteamFriends_LeaveClanChatRoom(MemorySegment ptr, long steamIDClan) {
        var mh$ = SteamAPI_ISteamFriends_LeaveClanChatRoom.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_LeaveClanChatRoom", ptr, steamIDClan);
            }
            return (boolean)mh$.invokeExact(ptr, steamIDClan);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_GetClanChatMemberCount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamFriends_GetClanChatMemberCount"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamFriends_GetClanChatMemberCount(ISteamFriends ptr, uint64_steamid steamIDClan)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_GetClanChatMemberCount$descriptor() {
        return SteamAPI_ISteamFriends_GetClanChatMemberCount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamFriends_GetClanChatMemberCount(ISteamFriends ptr, uint64_steamid steamIDClan)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_GetClanChatMemberCount$handle() {
        return SteamAPI_ISteamFriends_GetClanChatMemberCount.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int SteamAPI_ISteamFriends_GetClanChatMemberCount(ISteamFriends ptr, uint64_steamid steamIDClan)
     * }
     */
    public static int SteamAPI_ISteamFriends_GetClanChatMemberCount(MemorySegment ptr, long steamIDClan) {
        var mh$ = SteamAPI_ISteamFriends_GetClanChatMemberCount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_GetClanChatMemberCount", ptr, steamIDClan);
            }
            return (int)mh$.invokeExact(ptr, steamIDClan);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_GetChatMemberByIndex {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamFriends_GetChatMemberByIndex"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint64_steamid SteamAPI_ISteamFriends_GetChatMemberByIndex(ISteamFriends ptr, uint64_steamid steamIDClan, int iUser)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_GetChatMemberByIndex$descriptor() {
        return SteamAPI_ISteamFriends_GetChatMemberByIndex.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint64_steamid SteamAPI_ISteamFriends_GetChatMemberByIndex(ISteamFriends ptr, uint64_steamid steamIDClan, int iUser)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_GetChatMemberByIndex$handle() {
        return SteamAPI_ISteamFriends_GetChatMemberByIndex.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * uint64_steamid SteamAPI_ISteamFriends_GetChatMemberByIndex(ISteamFriends ptr, uint64_steamid steamIDClan, int iUser)
     * }
     */
    public static long SteamAPI_ISteamFriends_GetChatMemberByIndex(MemorySegment ptr, long steamIDClan, int iUser) {
        var mh$ = SteamAPI_ISteamFriends_GetChatMemberByIndex.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_GetChatMemberByIndex", ptr, steamIDClan, iUser);
            }
            return (long)mh$.invokeExact(ptr, steamIDClan, iUser);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_SendClanChatMessage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamFriends_SendClanChatMessage"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamFriends_SendClanChatMessage(ISteamFriends ptr, uint64_steamid steamIDClanChat, const char *pchText)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_SendClanChatMessage$descriptor() {
        return SteamAPI_ISteamFriends_SendClanChatMessage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamFriends_SendClanChatMessage(ISteamFriends ptr, uint64_steamid steamIDClanChat, const char *pchText)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_SendClanChatMessage$handle() {
        return SteamAPI_ISteamFriends_SendClanChatMessage.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamFriends_SendClanChatMessage(ISteamFriends ptr, uint64_steamid steamIDClanChat, const char *pchText)
     * }
     */
    public static boolean SteamAPI_ISteamFriends_SendClanChatMessage(MemorySegment ptr, long steamIDClanChat, MemorySegment pchText) {
        var mh$ = SteamAPI_ISteamFriends_SendClanChatMessage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_SendClanChatMessage", ptr, steamIDClanChat, pchText);
            }
            return (boolean)mh$.invokeExact(ptr, steamIDClanChat, pchText);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_GetClanChatMessage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamFriends_GetClanChatMessage"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamFriends_GetClanChatMessage(ISteamFriends ptr, uint64_steamid steamIDClanChat, int iMessage, void *prgchText, int cchTextMax, EChatEntryType *peChatEntryType, CSteamID *psteamidChatter)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_GetClanChatMessage$descriptor() {
        return SteamAPI_ISteamFriends_GetClanChatMessage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamFriends_GetClanChatMessage(ISteamFriends ptr, uint64_steamid steamIDClanChat, int iMessage, void *prgchText, int cchTextMax, EChatEntryType *peChatEntryType, CSteamID *psteamidChatter)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_GetClanChatMessage$handle() {
        return SteamAPI_ISteamFriends_GetClanChatMessage.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int SteamAPI_ISteamFriends_GetClanChatMessage(ISteamFriends ptr, uint64_steamid steamIDClanChat, int iMessage, void *prgchText, int cchTextMax, EChatEntryType *peChatEntryType, CSteamID *psteamidChatter)
     * }
     */
    public static int SteamAPI_ISteamFriends_GetClanChatMessage(MemorySegment ptr, long steamIDClanChat, int iMessage, MemorySegment prgchText, int cchTextMax, MemorySegment peChatEntryType, MemorySegment psteamidChatter) {
        var mh$ = SteamAPI_ISteamFriends_GetClanChatMessage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_GetClanChatMessage", ptr, steamIDClanChat, iMessage, prgchText, cchTextMax, peChatEntryType, psteamidChatter);
            }
            return (int)mh$.invokeExact(ptr, steamIDClanChat, iMessage, prgchText, cchTextMax, peChatEntryType, psteamidChatter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_IsClanChatAdmin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamFriends_IsClanChatAdmin"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamFriends_IsClanChatAdmin(ISteamFriends ptr, uint64_steamid steamIDClanChat, uint64_steamid steamIDUser)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_IsClanChatAdmin$descriptor() {
        return SteamAPI_ISteamFriends_IsClanChatAdmin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamFriends_IsClanChatAdmin(ISteamFriends ptr, uint64_steamid steamIDClanChat, uint64_steamid steamIDUser)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_IsClanChatAdmin$handle() {
        return SteamAPI_ISteamFriends_IsClanChatAdmin.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamFriends_IsClanChatAdmin(ISteamFriends ptr, uint64_steamid steamIDClanChat, uint64_steamid steamIDUser)
     * }
     */
    public static boolean SteamAPI_ISteamFriends_IsClanChatAdmin(MemorySegment ptr, long steamIDClanChat, long steamIDUser) {
        var mh$ = SteamAPI_ISteamFriends_IsClanChatAdmin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_IsClanChatAdmin", ptr, steamIDClanChat, steamIDUser);
            }
            return (boolean)mh$.invokeExact(ptr, steamIDClanChat, steamIDUser);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_IsClanChatWindowOpenInSteam {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamFriends_IsClanChatWindowOpenInSteam"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamFriends_IsClanChatWindowOpenInSteam(ISteamFriends ptr, uint64_steamid steamIDClanChat)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_IsClanChatWindowOpenInSteam$descriptor() {
        return SteamAPI_ISteamFriends_IsClanChatWindowOpenInSteam.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamFriends_IsClanChatWindowOpenInSteam(ISteamFriends ptr, uint64_steamid steamIDClanChat)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_IsClanChatWindowOpenInSteam$handle() {
        return SteamAPI_ISteamFriends_IsClanChatWindowOpenInSteam.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamFriends_IsClanChatWindowOpenInSteam(ISteamFriends ptr, uint64_steamid steamIDClanChat)
     * }
     */
    public static boolean SteamAPI_ISteamFriends_IsClanChatWindowOpenInSteam(MemorySegment ptr, long steamIDClanChat) {
        var mh$ = SteamAPI_ISteamFriends_IsClanChatWindowOpenInSteam.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_IsClanChatWindowOpenInSteam", ptr, steamIDClanChat);
            }
            return (boolean)mh$.invokeExact(ptr, steamIDClanChat);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_OpenClanChatWindowInSteam {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamFriends_OpenClanChatWindowInSteam"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamFriends_OpenClanChatWindowInSteam(ISteamFriends ptr, uint64_steamid steamIDClanChat)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_OpenClanChatWindowInSteam$descriptor() {
        return SteamAPI_ISteamFriends_OpenClanChatWindowInSteam.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamFriends_OpenClanChatWindowInSteam(ISteamFriends ptr, uint64_steamid steamIDClanChat)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_OpenClanChatWindowInSteam$handle() {
        return SteamAPI_ISteamFriends_OpenClanChatWindowInSteam.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamFriends_OpenClanChatWindowInSteam(ISteamFriends ptr, uint64_steamid steamIDClanChat)
     * }
     */
    public static boolean SteamAPI_ISteamFriends_OpenClanChatWindowInSteam(MemorySegment ptr, long steamIDClanChat) {
        var mh$ = SteamAPI_ISteamFriends_OpenClanChatWindowInSteam.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_OpenClanChatWindowInSteam", ptr, steamIDClanChat);
            }
            return (boolean)mh$.invokeExact(ptr, steamIDClanChat);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_CloseClanChatWindowInSteam {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamFriends_CloseClanChatWindowInSteam"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamFriends_CloseClanChatWindowInSteam(ISteamFriends ptr, uint64_steamid steamIDClanChat)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_CloseClanChatWindowInSteam$descriptor() {
        return SteamAPI_ISteamFriends_CloseClanChatWindowInSteam.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamFriends_CloseClanChatWindowInSteam(ISteamFriends ptr, uint64_steamid steamIDClanChat)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_CloseClanChatWindowInSteam$handle() {
        return SteamAPI_ISteamFriends_CloseClanChatWindowInSteam.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamFriends_CloseClanChatWindowInSteam(ISteamFriends ptr, uint64_steamid steamIDClanChat)
     * }
     */
    public static boolean SteamAPI_ISteamFriends_CloseClanChatWindowInSteam(MemorySegment ptr, long steamIDClanChat) {
        var mh$ = SteamAPI_ISteamFriends_CloseClanChatWindowInSteam.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_CloseClanChatWindowInSteam", ptr, steamIDClanChat);
            }
            return (boolean)mh$.invokeExact(ptr, steamIDClanChat);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_SetListenForFriendsMessages {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamFriends_SetListenForFriendsMessages"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamFriends_SetListenForFriendsMessages(ISteamFriends ptr, bool bInterceptEnabled)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_SetListenForFriendsMessages$descriptor() {
        return SteamAPI_ISteamFriends_SetListenForFriendsMessages.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamFriends_SetListenForFriendsMessages(ISteamFriends ptr, bool bInterceptEnabled)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_SetListenForFriendsMessages$handle() {
        return SteamAPI_ISteamFriends_SetListenForFriendsMessages.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamFriends_SetListenForFriendsMessages(ISteamFriends ptr, bool bInterceptEnabled)
     * }
     */
    public static boolean SteamAPI_ISteamFriends_SetListenForFriendsMessages(MemorySegment ptr, boolean bInterceptEnabled) {
        var mh$ = SteamAPI_ISteamFriends_SetListenForFriendsMessages.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_SetListenForFriendsMessages", ptr, bInterceptEnabled);
            }
            return (boolean)mh$.invokeExact(ptr, bInterceptEnabled);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_ReplyToFriendMessage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamFriends_ReplyToFriendMessage"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamFriends_ReplyToFriendMessage(ISteamFriends ptr, uint64_steamid steamIDFriend, const char *pchMsgToSend)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_ReplyToFriendMessage$descriptor() {
        return SteamAPI_ISteamFriends_ReplyToFriendMessage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamFriends_ReplyToFriendMessage(ISteamFriends ptr, uint64_steamid steamIDFriend, const char *pchMsgToSend)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_ReplyToFriendMessage$handle() {
        return SteamAPI_ISteamFriends_ReplyToFriendMessage.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamFriends_ReplyToFriendMessage(ISteamFriends ptr, uint64_steamid steamIDFriend, const char *pchMsgToSend)
     * }
     */
    public static boolean SteamAPI_ISteamFriends_ReplyToFriendMessage(MemorySegment ptr, long steamIDFriend, MemorySegment pchMsgToSend) {
        var mh$ = SteamAPI_ISteamFriends_ReplyToFriendMessage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_ReplyToFriendMessage", ptr, steamIDFriend, pchMsgToSend);
            }
            return (boolean)mh$.invokeExact(ptr, steamIDFriend, pchMsgToSend);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_GetFriendMessage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamFriends_GetFriendMessage"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamFriends_GetFriendMessage(ISteamFriends ptr, uint64_steamid steamIDFriend, int iMessageID, void *pvData, int cubData, EChatEntryType *peChatEntryType)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_GetFriendMessage$descriptor() {
        return SteamAPI_ISteamFriends_GetFriendMessage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamFriends_GetFriendMessage(ISteamFriends ptr, uint64_steamid steamIDFriend, int iMessageID, void *pvData, int cubData, EChatEntryType *peChatEntryType)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_GetFriendMessage$handle() {
        return SteamAPI_ISteamFriends_GetFriendMessage.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int SteamAPI_ISteamFriends_GetFriendMessage(ISteamFriends ptr, uint64_steamid steamIDFriend, int iMessageID, void *pvData, int cubData, EChatEntryType *peChatEntryType)
     * }
     */
    public static int SteamAPI_ISteamFriends_GetFriendMessage(MemorySegment ptr, long steamIDFriend, int iMessageID, MemorySegment pvData, int cubData, MemorySegment peChatEntryType) {
        var mh$ = SteamAPI_ISteamFriends_GetFriendMessage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_GetFriendMessage", ptr, steamIDFriend, iMessageID, pvData, cubData, peChatEntryType);
            }
            return (int)mh$.invokeExact(ptr, steamIDFriend, iMessageID, pvData, cubData, peChatEntryType);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_GetFollowerCount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamFriends_GetFollowerCount"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamFriends_GetFollowerCount(ISteamFriends ptr, uint64_steamid steamID)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_GetFollowerCount$descriptor() {
        return SteamAPI_ISteamFriends_GetFollowerCount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamFriends_GetFollowerCount(ISteamFriends ptr, uint64_steamid steamID)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_GetFollowerCount$handle() {
        return SteamAPI_ISteamFriends_GetFollowerCount.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamFriends_GetFollowerCount(ISteamFriends ptr, uint64_steamid steamID)
     * }
     */
    public static long SteamAPI_ISteamFriends_GetFollowerCount(MemorySegment ptr, long steamID) {
        var mh$ = SteamAPI_ISteamFriends_GetFollowerCount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_GetFollowerCount", ptr, steamID);
            }
            return (long)mh$.invokeExact(ptr, steamID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_IsFollowing {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamFriends_IsFollowing"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamFriends_IsFollowing(ISteamFriends ptr, uint64_steamid steamID)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_IsFollowing$descriptor() {
        return SteamAPI_ISteamFriends_IsFollowing.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamFriends_IsFollowing(ISteamFriends ptr, uint64_steamid steamID)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_IsFollowing$handle() {
        return SteamAPI_ISteamFriends_IsFollowing.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamFriends_IsFollowing(ISteamFriends ptr, uint64_steamid steamID)
     * }
     */
    public static long SteamAPI_ISteamFriends_IsFollowing(MemorySegment ptr, long steamID) {
        var mh$ = SteamAPI_ISteamFriends_IsFollowing.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_IsFollowing", ptr, steamID);
            }
            return (long)mh$.invokeExact(ptr, steamID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_EnumerateFollowingList {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamFriends_EnumerateFollowingList"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamFriends_EnumerateFollowingList(ISteamFriends ptr, uint32 unStartIndex)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_EnumerateFollowingList$descriptor() {
        return SteamAPI_ISteamFriends_EnumerateFollowingList.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamFriends_EnumerateFollowingList(ISteamFriends ptr, uint32 unStartIndex)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_EnumerateFollowingList$handle() {
        return SteamAPI_ISteamFriends_EnumerateFollowingList.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamFriends_EnumerateFollowingList(ISteamFriends ptr, uint32 unStartIndex)
     * }
     */
    public static long SteamAPI_ISteamFriends_EnumerateFollowingList(MemorySegment ptr, int unStartIndex) {
        var mh$ = SteamAPI_ISteamFriends_EnumerateFollowingList.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_EnumerateFollowingList", ptr, unStartIndex);
            }
            return (long)mh$.invokeExact(ptr, unStartIndex);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_IsClanPublic {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamFriends_IsClanPublic"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamFriends_IsClanPublic(ISteamFriends ptr, uint64_steamid steamIDClan)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_IsClanPublic$descriptor() {
        return SteamAPI_ISteamFriends_IsClanPublic.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamFriends_IsClanPublic(ISteamFriends ptr, uint64_steamid steamIDClan)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_IsClanPublic$handle() {
        return SteamAPI_ISteamFriends_IsClanPublic.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamFriends_IsClanPublic(ISteamFriends ptr, uint64_steamid steamIDClan)
     * }
     */
    public static boolean SteamAPI_ISteamFriends_IsClanPublic(MemorySegment ptr, long steamIDClan) {
        var mh$ = SteamAPI_ISteamFriends_IsClanPublic.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_IsClanPublic", ptr, steamIDClan);
            }
            return (boolean)mh$.invokeExact(ptr, steamIDClan);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_IsClanOfficialGameGroup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamFriends_IsClanOfficialGameGroup"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamFriends_IsClanOfficialGameGroup(ISteamFriends ptr, uint64_steamid steamIDClan)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_IsClanOfficialGameGroup$descriptor() {
        return SteamAPI_ISteamFriends_IsClanOfficialGameGroup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamFriends_IsClanOfficialGameGroup(ISteamFriends ptr, uint64_steamid steamIDClan)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_IsClanOfficialGameGroup$handle() {
        return SteamAPI_ISteamFriends_IsClanOfficialGameGroup.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamFriends_IsClanOfficialGameGroup(ISteamFriends ptr, uint64_steamid steamIDClan)
     * }
     */
    public static boolean SteamAPI_ISteamFriends_IsClanOfficialGameGroup(MemorySegment ptr, long steamIDClan) {
        var mh$ = SteamAPI_ISteamFriends_IsClanOfficialGameGroup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_IsClanOfficialGameGroup", ptr, steamIDClan);
            }
            return (boolean)mh$.invokeExact(ptr, steamIDClan);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_GetNumChatsWithUnreadPriorityMessages {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamFriends_GetNumChatsWithUnreadPriorityMessages"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamFriends_GetNumChatsWithUnreadPriorityMessages(ISteamFriends ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_GetNumChatsWithUnreadPriorityMessages$descriptor() {
        return SteamAPI_ISteamFriends_GetNumChatsWithUnreadPriorityMessages.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamFriends_GetNumChatsWithUnreadPriorityMessages(ISteamFriends ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_GetNumChatsWithUnreadPriorityMessages$handle() {
        return SteamAPI_ISteamFriends_GetNumChatsWithUnreadPriorityMessages.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int SteamAPI_ISteamFriends_GetNumChatsWithUnreadPriorityMessages(ISteamFriends ptr)
     * }
     */
    public static int SteamAPI_ISteamFriends_GetNumChatsWithUnreadPriorityMessages(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamFriends_GetNumChatsWithUnreadPriorityMessages.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_GetNumChatsWithUnreadPriorityMessages", ptr);
            }
            return (int)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_ActivateGameOverlayRemotePlayTogetherInviteDialog {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamFriends_ActivateGameOverlayRemotePlayTogetherInviteDialog"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamFriends_ActivateGameOverlayRemotePlayTogetherInviteDialog(ISteamFriends ptr, uint64_steamid steamIDLobby)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_ActivateGameOverlayRemotePlayTogetherInviteDialog$descriptor() {
        return SteamAPI_ISteamFriends_ActivateGameOverlayRemotePlayTogetherInviteDialog.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamFriends_ActivateGameOverlayRemotePlayTogetherInviteDialog(ISteamFriends ptr, uint64_steamid steamIDLobby)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_ActivateGameOverlayRemotePlayTogetherInviteDialog$handle() {
        return SteamAPI_ISteamFriends_ActivateGameOverlayRemotePlayTogetherInviteDialog.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamFriends_ActivateGameOverlayRemotePlayTogetherInviteDialog(ISteamFriends ptr, uint64_steamid steamIDLobby)
     * }
     */
    public static void SteamAPI_ISteamFriends_ActivateGameOverlayRemotePlayTogetherInviteDialog(MemorySegment ptr, long steamIDLobby) {
        var mh$ = SteamAPI_ISteamFriends_ActivateGameOverlayRemotePlayTogetherInviteDialog.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_ActivateGameOverlayRemotePlayTogetherInviteDialog", ptr, steamIDLobby);
            }
            mh$.invokeExact(ptr, steamIDLobby);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_RegisterProtocolInOverlayBrowser {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamFriends_RegisterProtocolInOverlayBrowser"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamFriends_RegisterProtocolInOverlayBrowser(ISteamFriends ptr, const char *pchProtocol)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_RegisterProtocolInOverlayBrowser$descriptor() {
        return SteamAPI_ISteamFriends_RegisterProtocolInOverlayBrowser.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamFriends_RegisterProtocolInOverlayBrowser(ISteamFriends ptr, const char *pchProtocol)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_RegisterProtocolInOverlayBrowser$handle() {
        return SteamAPI_ISteamFriends_RegisterProtocolInOverlayBrowser.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamFriends_RegisterProtocolInOverlayBrowser(ISteamFriends ptr, const char *pchProtocol)
     * }
     */
    public static boolean SteamAPI_ISteamFriends_RegisterProtocolInOverlayBrowser(MemorySegment ptr, MemorySegment pchProtocol) {
        var mh$ = SteamAPI_ISteamFriends_RegisterProtocolInOverlayBrowser.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_RegisterProtocolInOverlayBrowser", ptr, pchProtocol);
            }
            return (boolean)mh$.invokeExact(ptr, pchProtocol);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_ActivateGameOverlayInviteDialogConnectString {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamFriends_ActivateGameOverlayInviteDialogConnectString"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamFriends_ActivateGameOverlayInviteDialogConnectString(ISteamFriends ptr, const char *pchConnectString)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_ActivateGameOverlayInviteDialogConnectString$descriptor() {
        return SteamAPI_ISteamFriends_ActivateGameOverlayInviteDialogConnectString.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamFriends_ActivateGameOverlayInviteDialogConnectString(ISteamFriends ptr, const char *pchConnectString)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_ActivateGameOverlayInviteDialogConnectString$handle() {
        return SteamAPI_ISteamFriends_ActivateGameOverlayInviteDialogConnectString.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamFriends_ActivateGameOverlayInviteDialogConnectString(ISteamFriends ptr, const char *pchConnectString)
     * }
     */
    public static void SteamAPI_ISteamFriends_ActivateGameOverlayInviteDialogConnectString(MemorySegment ptr, MemorySegment pchConnectString) {
        var mh$ = SteamAPI_ISteamFriends_ActivateGameOverlayInviteDialogConnectString.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_ActivateGameOverlayInviteDialogConnectString", ptr, pchConnectString);
            }
            mh$.invokeExact(ptr, pchConnectString);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_RequestEquippedProfileItems {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamFriends_RequestEquippedProfileItems"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamFriends_RequestEquippedProfileItems(ISteamFriends ptr, uint64_steamid steamID)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_RequestEquippedProfileItems$descriptor() {
        return SteamAPI_ISteamFriends_RequestEquippedProfileItems.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamFriends_RequestEquippedProfileItems(ISteamFriends ptr, uint64_steamid steamID)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_RequestEquippedProfileItems$handle() {
        return SteamAPI_ISteamFriends_RequestEquippedProfileItems.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamFriends_RequestEquippedProfileItems(ISteamFriends ptr, uint64_steamid steamID)
     * }
     */
    public static long SteamAPI_ISteamFriends_RequestEquippedProfileItems(MemorySegment ptr, long steamID) {
        var mh$ = SteamAPI_ISteamFriends_RequestEquippedProfileItems.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_RequestEquippedProfileItems", ptr, steamID);
            }
            return (long)mh$.invokeExact(ptr, steamID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_BHasEquippedProfileItem {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamFriends_BHasEquippedProfileItem"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamFriends_BHasEquippedProfileItem(ISteamFriends ptr, uint64_steamid steamID, ECommunityProfileItemType itemType)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_BHasEquippedProfileItem$descriptor() {
        return SteamAPI_ISteamFriends_BHasEquippedProfileItem.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamFriends_BHasEquippedProfileItem(ISteamFriends ptr, uint64_steamid steamID, ECommunityProfileItemType itemType)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_BHasEquippedProfileItem$handle() {
        return SteamAPI_ISteamFriends_BHasEquippedProfileItem.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamFriends_BHasEquippedProfileItem(ISteamFriends ptr, uint64_steamid steamID, ECommunityProfileItemType itemType)
     * }
     */
    public static boolean SteamAPI_ISteamFriends_BHasEquippedProfileItem(MemorySegment ptr, long steamID, int itemType) {
        var mh$ = SteamAPI_ISteamFriends_BHasEquippedProfileItem.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_BHasEquippedProfileItem", ptr, steamID, itemType);
            }
            return (boolean)mh$.invokeExact(ptr, steamID, itemType);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_GetProfileItemPropertyString {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_INT,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamFriends_GetProfileItemPropertyString"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamFriends_GetProfileItemPropertyString(ISteamFriends ptr, uint64_steamid steamID, ECommunityProfileItemType itemType, ECommunityProfileItemProperty prop)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_GetProfileItemPropertyString$descriptor() {
        return SteamAPI_ISteamFriends_GetProfileItemPropertyString.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamFriends_GetProfileItemPropertyString(ISteamFriends ptr, uint64_steamid steamID, ECommunityProfileItemType itemType, ECommunityProfileItemProperty prop)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_GetProfileItemPropertyString$handle() {
        return SteamAPI_ISteamFriends_GetProfileItemPropertyString.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamFriends_GetProfileItemPropertyString(ISteamFriends ptr, uint64_steamid steamID, ECommunityProfileItemType itemType, ECommunityProfileItemProperty prop)
     * }
     */
    public static MemorySegment SteamAPI_ISteamFriends_GetProfileItemPropertyString(MemorySegment ptr, long steamID, int itemType, int prop) {
        var mh$ = SteamAPI_ISteamFriends_GetProfileItemPropertyString.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_GetProfileItemPropertyString", ptr, steamID, itemType, prop);
            }
            return (MemorySegment)mh$.invokeExact(ptr, steamID, itemType, prop);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_GetProfileItemPropertyUint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_INT,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamFriends_GetProfileItemPropertyUint"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamFriends_GetProfileItemPropertyUint(ISteamFriends ptr, uint64_steamid steamID, ECommunityProfileItemType itemType, ECommunityProfileItemProperty prop)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_GetProfileItemPropertyUint$descriptor() {
        return SteamAPI_ISteamFriends_GetProfileItemPropertyUint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamFriends_GetProfileItemPropertyUint(ISteamFriends ptr, uint64_steamid steamID, ECommunityProfileItemType itemType, ECommunityProfileItemProperty prop)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_GetProfileItemPropertyUint$handle() {
        return SteamAPI_ISteamFriends_GetProfileItemPropertyUint.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamFriends_GetProfileItemPropertyUint(ISteamFriends ptr, uint64_steamid steamID, ECommunityProfileItemType itemType, ECommunityProfileItemProperty prop)
     * }
     */
    public static int SteamAPI_ISteamFriends_GetProfileItemPropertyUint(MemorySegment ptr, long steamID, int itemType, int prop) {
        var mh$ = SteamAPI_ISteamFriends_GetProfileItemPropertyUint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_GetProfileItemPropertyUint", ptr, steamID, itemType, prop);
            }
            return (int)mh$.invokeExact(ptr, steamID, itemType, prop);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_SteamFriends_v017 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_SteamFriends_v017"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ISteamFriends SteamAPI_SteamFriends_v017()
     * }
     */
    public static FunctionDescriptor SteamAPI_SteamFriends_v017$descriptor() {
        return SteamAPI_SteamFriends_v017.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ISteamFriends SteamAPI_SteamFriends_v017()
     * }
     */
    public static MethodHandle SteamAPI_SteamFriends_v017$handle() {
        return SteamAPI_SteamFriends_v017.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ISteamFriends SteamAPI_SteamFriends_v017()
     * }
     */
    public static MemorySegment SteamAPI_SteamFriends_v017() {
        var mh$ = SteamAPI_SteamFriends_v017.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_SteamFriends_v017");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUtils_GetSecondsSinceAppActive {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUtils_GetSecondsSinceAppActive"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamUtils_GetSecondsSinceAppActive(ISteamUtils ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUtils_GetSecondsSinceAppActive$descriptor() {
        return SteamAPI_ISteamUtils_GetSecondsSinceAppActive.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamUtils_GetSecondsSinceAppActive(ISteamUtils ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUtils_GetSecondsSinceAppActive$handle() {
        return SteamAPI_ISteamUtils_GetSecondsSinceAppActive.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamUtils_GetSecondsSinceAppActive(ISteamUtils ptr)
     * }
     */
    public static int SteamAPI_ISteamUtils_GetSecondsSinceAppActive(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamUtils_GetSecondsSinceAppActive.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUtils_GetSecondsSinceAppActive", ptr);
            }
            return (int)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUtils_GetSecondsSinceComputerActive {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUtils_GetSecondsSinceComputerActive"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamUtils_GetSecondsSinceComputerActive(ISteamUtils ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUtils_GetSecondsSinceComputerActive$descriptor() {
        return SteamAPI_ISteamUtils_GetSecondsSinceComputerActive.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamUtils_GetSecondsSinceComputerActive(ISteamUtils ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUtils_GetSecondsSinceComputerActive$handle() {
        return SteamAPI_ISteamUtils_GetSecondsSinceComputerActive.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamUtils_GetSecondsSinceComputerActive(ISteamUtils ptr)
     * }
     */
    public static int SteamAPI_ISteamUtils_GetSecondsSinceComputerActive(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamUtils_GetSecondsSinceComputerActive.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUtils_GetSecondsSinceComputerActive", ptr);
            }
            return (int)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUtils_GetConnectedUniverse {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUtils_GetConnectedUniverse"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * EUniverse SteamAPI_ISteamUtils_GetConnectedUniverse(ISteamUtils ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUtils_GetConnectedUniverse$descriptor() {
        return SteamAPI_ISteamUtils_GetConnectedUniverse.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * EUniverse SteamAPI_ISteamUtils_GetConnectedUniverse(ISteamUtils ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUtils_GetConnectedUniverse$handle() {
        return SteamAPI_ISteamUtils_GetConnectedUniverse.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * EUniverse SteamAPI_ISteamUtils_GetConnectedUniverse(ISteamUtils ptr)
     * }
     */
    public static int SteamAPI_ISteamUtils_GetConnectedUniverse(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamUtils_GetConnectedUniverse.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUtils_GetConnectedUniverse", ptr);
            }
            return (int)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUtils_GetServerRealTime {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUtils_GetServerRealTime"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamUtils_GetServerRealTime(ISteamUtils ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUtils_GetServerRealTime$descriptor() {
        return SteamAPI_ISteamUtils_GetServerRealTime.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamUtils_GetServerRealTime(ISteamUtils ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUtils_GetServerRealTime$handle() {
        return SteamAPI_ISteamUtils_GetServerRealTime.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamUtils_GetServerRealTime(ISteamUtils ptr)
     * }
     */
    public static int SteamAPI_ISteamUtils_GetServerRealTime(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamUtils_GetServerRealTime.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUtils_GetServerRealTime", ptr);
            }
            return (int)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUtils_GetIPCountry {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUtils_GetIPCountry"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamUtils_GetIPCountry(ISteamUtils ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUtils_GetIPCountry$descriptor() {
        return SteamAPI_ISteamUtils_GetIPCountry.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamUtils_GetIPCountry(ISteamUtils ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUtils_GetIPCountry$handle() {
        return SteamAPI_ISteamUtils_GetIPCountry.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamUtils_GetIPCountry(ISteamUtils ptr)
     * }
     */
    public static MemorySegment SteamAPI_ISteamUtils_GetIPCountry(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamUtils_GetIPCountry.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUtils_GetIPCountry", ptr);
            }
            return (MemorySegment)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUtils_GetImageSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUtils_GetImageSize"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUtils_GetImageSize(ISteamUtils ptr, int iImage, uint32 *pnWidth, uint32 *pnHeight)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUtils_GetImageSize$descriptor() {
        return SteamAPI_ISteamUtils_GetImageSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUtils_GetImageSize(ISteamUtils ptr, int iImage, uint32 *pnWidth, uint32 *pnHeight)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUtils_GetImageSize$handle() {
        return SteamAPI_ISteamUtils_GetImageSize.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUtils_GetImageSize(ISteamUtils ptr, int iImage, uint32 *pnWidth, uint32 *pnHeight)
     * }
     */
    public static boolean SteamAPI_ISteamUtils_GetImageSize(MemorySegment ptr, int iImage, MemorySegment pnWidth, MemorySegment pnHeight) {
        var mh$ = SteamAPI_ISteamUtils_GetImageSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUtils_GetImageSize", ptr, iImage, pnWidth, pnHeight);
            }
            return (boolean)mh$.invokeExact(ptr, iImage, pnWidth, pnHeight);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUtils_GetImageRGBA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUtils_GetImageRGBA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUtils_GetImageRGBA(ISteamUtils ptr, int iImage, uint8 *pubDest, int nDestBufferSize)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUtils_GetImageRGBA$descriptor() {
        return SteamAPI_ISteamUtils_GetImageRGBA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUtils_GetImageRGBA(ISteamUtils ptr, int iImage, uint8 *pubDest, int nDestBufferSize)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUtils_GetImageRGBA$handle() {
        return SteamAPI_ISteamUtils_GetImageRGBA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUtils_GetImageRGBA(ISteamUtils ptr, int iImage, uint8 *pubDest, int nDestBufferSize)
     * }
     */
    public static boolean SteamAPI_ISteamUtils_GetImageRGBA(MemorySegment ptr, int iImage, MemorySegment pubDest, int nDestBufferSize) {
        var mh$ = SteamAPI_ISteamUtils_GetImageRGBA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUtils_GetImageRGBA", ptr, iImage, pubDest, nDestBufferSize);
            }
            return (boolean)mh$.invokeExact(ptr, iImage, pubDest, nDestBufferSize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUtils_GetCurrentBatteryPower {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_CHAR,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUtils_GetCurrentBatteryPower"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint8 SteamAPI_ISteamUtils_GetCurrentBatteryPower(ISteamUtils ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUtils_GetCurrentBatteryPower$descriptor() {
        return SteamAPI_ISteamUtils_GetCurrentBatteryPower.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint8 SteamAPI_ISteamUtils_GetCurrentBatteryPower(ISteamUtils ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUtils_GetCurrentBatteryPower$handle() {
        return SteamAPI_ISteamUtils_GetCurrentBatteryPower.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * uint8 SteamAPI_ISteamUtils_GetCurrentBatteryPower(ISteamUtils ptr)
     * }
     */
    public static byte SteamAPI_ISteamUtils_GetCurrentBatteryPower(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamUtils_GetCurrentBatteryPower.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUtils_GetCurrentBatteryPower", ptr);
            }
            return (byte)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUtils_GetAppID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUtils_GetAppID"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamUtils_GetAppID(ISteamUtils ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUtils_GetAppID$descriptor() {
        return SteamAPI_ISteamUtils_GetAppID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamUtils_GetAppID(ISteamUtils ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUtils_GetAppID$handle() {
        return SteamAPI_ISteamUtils_GetAppID.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamUtils_GetAppID(ISteamUtils ptr)
     * }
     */
    public static int SteamAPI_ISteamUtils_GetAppID(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamUtils_GetAppID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUtils_GetAppID", ptr);
            }
            return (int)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUtils_SetOverlayNotificationPosition {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUtils_SetOverlayNotificationPosition"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamUtils_SetOverlayNotificationPosition(ISteamUtils ptr, ENotificationPosition eNotificationPosition)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUtils_SetOverlayNotificationPosition$descriptor() {
        return SteamAPI_ISteamUtils_SetOverlayNotificationPosition.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamUtils_SetOverlayNotificationPosition(ISteamUtils ptr, ENotificationPosition eNotificationPosition)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUtils_SetOverlayNotificationPosition$handle() {
        return SteamAPI_ISteamUtils_SetOverlayNotificationPosition.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamUtils_SetOverlayNotificationPosition(ISteamUtils ptr, ENotificationPosition eNotificationPosition)
     * }
     */
    public static void SteamAPI_ISteamUtils_SetOverlayNotificationPosition(MemorySegment ptr, int eNotificationPosition) {
        var mh$ = SteamAPI_ISteamUtils_SetOverlayNotificationPosition.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUtils_SetOverlayNotificationPosition", ptr, eNotificationPosition);
            }
            mh$.invokeExact(ptr, eNotificationPosition);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUtils_IsAPICallCompleted {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUtils_IsAPICallCompleted"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUtils_IsAPICallCompleted(ISteamUtils ptr, SteamAPICall_t hSteamAPICall, bool *pbFailed)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUtils_IsAPICallCompleted$descriptor() {
        return SteamAPI_ISteamUtils_IsAPICallCompleted.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUtils_IsAPICallCompleted(ISteamUtils ptr, SteamAPICall_t hSteamAPICall, bool *pbFailed)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUtils_IsAPICallCompleted$handle() {
        return SteamAPI_ISteamUtils_IsAPICallCompleted.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUtils_IsAPICallCompleted(ISteamUtils ptr, SteamAPICall_t hSteamAPICall, bool *pbFailed)
     * }
     */
    public static boolean SteamAPI_ISteamUtils_IsAPICallCompleted(MemorySegment ptr, long hSteamAPICall, MemorySegment pbFailed) {
        var mh$ = SteamAPI_ISteamUtils_IsAPICallCompleted.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUtils_IsAPICallCompleted", ptr, hSteamAPICall, pbFailed);
            }
            return (boolean)mh$.invokeExact(ptr, hSteamAPICall, pbFailed);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUtils_GetAPICallFailureReason {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUtils_GetAPICallFailureReason"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ESteamAPICallFailure SteamAPI_ISteamUtils_GetAPICallFailureReason(ISteamUtils ptr, SteamAPICall_t hSteamAPICall)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUtils_GetAPICallFailureReason$descriptor() {
        return SteamAPI_ISteamUtils_GetAPICallFailureReason.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ESteamAPICallFailure SteamAPI_ISteamUtils_GetAPICallFailureReason(ISteamUtils ptr, SteamAPICall_t hSteamAPICall)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUtils_GetAPICallFailureReason$handle() {
        return SteamAPI_ISteamUtils_GetAPICallFailureReason.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ESteamAPICallFailure SteamAPI_ISteamUtils_GetAPICallFailureReason(ISteamUtils ptr, SteamAPICall_t hSteamAPICall)
     * }
     */
    public static int SteamAPI_ISteamUtils_GetAPICallFailureReason(MemorySegment ptr, long hSteamAPICall) {
        var mh$ = SteamAPI_ISteamUtils_GetAPICallFailureReason.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUtils_GetAPICallFailureReason", ptr, hSteamAPICall);
            }
            return (int)mh$.invokeExact(ptr, hSteamAPICall);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUtils_GetAPICallResult {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUtils_GetAPICallResult"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUtils_GetAPICallResult(ISteamUtils ptr, SteamAPICall_t hSteamAPICall, void *pCallback, int cubCallback, int iCallbackExpected, bool *pbFailed)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUtils_GetAPICallResult$descriptor() {
        return SteamAPI_ISteamUtils_GetAPICallResult.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUtils_GetAPICallResult(ISteamUtils ptr, SteamAPICall_t hSteamAPICall, void *pCallback, int cubCallback, int iCallbackExpected, bool *pbFailed)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUtils_GetAPICallResult$handle() {
        return SteamAPI_ISteamUtils_GetAPICallResult.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUtils_GetAPICallResult(ISteamUtils ptr, SteamAPICall_t hSteamAPICall, void *pCallback, int cubCallback, int iCallbackExpected, bool *pbFailed)
     * }
     */
    public static boolean SteamAPI_ISteamUtils_GetAPICallResult(MemorySegment ptr, long hSteamAPICall, MemorySegment pCallback, int cubCallback, int iCallbackExpected, MemorySegment pbFailed) {
        var mh$ = SteamAPI_ISteamUtils_GetAPICallResult.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUtils_GetAPICallResult", ptr, hSteamAPICall, pCallback, cubCallback, iCallbackExpected, pbFailed);
            }
            return (boolean)mh$.invokeExact(ptr, hSteamAPICall, pCallback, cubCallback, iCallbackExpected, pbFailed);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUtils_GetIPCCallCount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUtils_GetIPCCallCount"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamUtils_GetIPCCallCount(ISteamUtils ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUtils_GetIPCCallCount$descriptor() {
        return SteamAPI_ISteamUtils_GetIPCCallCount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamUtils_GetIPCCallCount(ISteamUtils ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUtils_GetIPCCallCount$handle() {
        return SteamAPI_ISteamUtils_GetIPCCallCount.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamUtils_GetIPCCallCount(ISteamUtils ptr)
     * }
     */
    public static int SteamAPI_ISteamUtils_GetIPCCallCount(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamUtils_GetIPCCallCount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUtils_GetIPCCallCount", ptr);
            }
            return (int)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUtils_IsOverlayEnabled {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUtils_IsOverlayEnabled"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUtils_IsOverlayEnabled(ISteamUtils ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUtils_IsOverlayEnabled$descriptor() {
        return SteamAPI_ISteamUtils_IsOverlayEnabled.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUtils_IsOverlayEnabled(ISteamUtils ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUtils_IsOverlayEnabled$handle() {
        return SteamAPI_ISteamUtils_IsOverlayEnabled.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUtils_IsOverlayEnabled(ISteamUtils ptr)
     * }
     */
    public static boolean SteamAPI_ISteamUtils_IsOverlayEnabled(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamUtils_IsOverlayEnabled.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUtils_IsOverlayEnabled", ptr);
            }
            return (boolean)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUtils_BOverlayNeedsPresent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUtils_BOverlayNeedsPresent"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUtils_BOverlayNeedsPresent(ISteamUtils ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUtils_BOverlayNeedsPresent$descriptor() {
        return SteamAPI_ISteamUtils_BOverlayNeedsPresent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUtils_BOverlayNeedsPresent(ISteamUtils ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUtils_BOverlayNeedsPresent$handle() {
        return SteamAPI_ISteamUtils_BOverlayNeedsPresent.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUtils_BOverlayNeedsPresent(ISteamUtils ptr)
     * }
     */
    public static boolean SteamAPI_ISteamUtils_BOverlayNeedsPresent(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamUtils_BOverlayNeedsPresent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUtils_BOverlayNeedsPresent", ptr);
            }
            return (boolean)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUtils_CheckFileSignature {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUtils_CheckFileSignature"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUtils_CheckFileSignature(ISteamUtils ptr, const char *szFileName)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUtils_CheckFileSignature$descriptor() {
        return SteamAPI_ISteamUtils_CheckFileSignature.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUtils_CheckFileSignature(ISteamUtils ptr, const char *szFileName)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUtils_CheckFileSignature$handle() {
        return SteamAPI_ISteamUtils_CheckFileSignature.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUtils_CheckFileSignature(ISteamUtils ptr, const char *szFileName)
     * }
     */
    public static long SteamAPI_ISteamUtils_CheckFileSignature(MemorySegment ptr, MemorySegment szFileName) {
        var mh$ = SteamAPI_ISteamUtils_CheckFileSignature.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUtils_CheckFileSignature", ptr, szFileName);
            }
            return (long)mh$.invokeExact(ptr, szFileName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUtils_ShowGamepadTextInput {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUtils_ShowGamepadTextInput"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUtils_ShowGamepadTextInput(ISteamUtils ptr, EGamepadTextInputMode eInputMode, EGamepadTextInputLineMode eLineInputMode, const char *pchDescription, uint32 unCharMax, const char *pchExistingText)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUtils_ShowGamepadTextInput$descriptor() {
        return SteamAPI_ISteamUtils_ShowGamepadTextInput.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUtils_ShowGamepadTextInput(ISteamUtils ptr, EGamepadTextInputMode eInputMode, EGamepadTextInputLineMode eLineInputMode, const char *pchDescription, uint32 unCharMax, const char *pchExistingText)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUtils_ShowGamepadTextInput$handle() {
        return SteamAPI_ISteamUtils_ShowGamepadTextInput.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUtils_ShowGamepadTextInput(ISteamUtils ptr, EGamepadTextInputMode eInputMode, EGamepadTextInputLineMode eLineInputMode, const char *pchDescription, uint32 unCharMax, const char *pchExistingText)
     * }
     */
    public static boolean SteamAPI_ISteamUtils_ShowGamepadTextInput(MemorySegment ptr, int eInputMode, int eLineInputMode, MemorySegment pchDescription, int unCharMax, MemorySegment pchExistingText) {
        var mh$ = SteamAPI_ISteamUtils_ShowGamepadTextInput.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUtils_ShowGamepadTextInput", ptr, eInputMode, eLineInputMode, pchDescription, unCharMax, pchExistingText);
            }
            return (boolean)mh$.invokeExact(ptr, eInputMode, eLineInputMode, pchDescription, unCharMax, pchExistingText);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUtils_GetEnteredGamepadTextLength {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUtils_GetEnteredGamepadTextLength"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamUtils_GetEnteredGamepadTextLength(ISteamUtils ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUtils_GetEnteredGamepadTextLength$descriptor() {
        return SteamAPI_ISteamUtils_GetEnteredGamepadTextLength.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamUtils_GetEnteredGamepadTextLength(ISteamUtils ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUtils_GetEnteredGamepadTextLength$handle() {
        return SteamAPI_ISteamUtils_GetEnteredGamepadTextLength.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamUtils_GetEnteredGamepadTextLength(ISteamUtils ptr)
     * }
     */
    public static int SteamAPI_ISteamUtils_GetEnteredGamepadTextLength(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamUtils_GetEnteredGamepadTextLength.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUtils_GetEnteredGamepadTextLength", ptr);
            }
            return (int)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUtils_GetEnteredGamepadTextInput {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUtils_GetEnteredGamepadTextInput"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUtils_GetEnteredGamepadTextInput(ISteamUtils ptr, char *pchText, uint32 cchText)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUtils_GetEnteredGamepadTextInput$descriptor() {
        return SteamAPI_ISteamUtils_GetEnteredGamepadTextInput.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUtils_GetEnteredGamepadTextInput(ISteamUtils ptr, char *pchText, uint32 cchText)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUtils_GetEnteredGamepadTextInput$handle() {
        return SteamAPI_ISteamUtils_GetEnteredGamepadTextInput.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUtils_GetEnteredGamepadTextInput(ISteamUtils ptr, char *pchText, uint32 cchText)
     * }
     */
    public static boolean SteamAPI_ISteamUtils_GetEnteredGamepadTextInput(MemorySegment ptr, MemorySegment pchText, int cchText) {
        var mh$ = SteamAPI_ISteamUtils_GetEnteredGamepadTextInput.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUtils_GetEnteredGamepadTextInput", ptr, pchText, cchText);
            }
            return (boolean)mh$.invokeExact(ptr, pchText, cchText);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUtils_GetSteamUILanguage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUtils_GetSteamUILanguage"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamUtils_GetSteamUILanguage(ISteamUtils ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUtils_GetSteamUILanguage$descriptor() {
        return SteamAPI_ISteamUtils_GetSteamUILanguage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamUtils_GetSteamUILanguage(ISteamUtils ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUtils_GetSteamUILanguage$handle() {
        return SteamAPI_ISteamUtils_GetSteamUILanguage.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamUtils_GetSteamUILanguage(ISteamUtils ptr)
     * }
     */
    public static MemorySegment SteamAPI_ISteamUtils_GetSteamUILanguage(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamUtils_GetSteamUILanguage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUtils_GetSteamUILanguage", ptr);
            }
            return (MemorySegment)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUtils_IsSteamRunningInVR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUtils_IsSteamRunningInVR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUtils_IsSteamRunningInVR(ISteamUtils ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUtils_IsSteamRunningInVR$descriptor() {
        return SteamAPI_ISteamUtils_IsSteamRunningInVR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUtils_IsSteamRunningInVR(ISteamUtils ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUtils_IsSteamRunningInVR$handle() {
        return SteamAPI_ISteamUtils_IsSteamRunningInVR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUtils_IsSteamRunningInVR(ISteamUtils ptr)
     * }
     */
    public static boolean SteamAPI_ISteamUtils_IsSteamRunningInVR(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamUtils_IsSteamRunningInVR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUtils_IsSteamRunningInVR", ptr);
            }
            return (boolean)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUtils_SetOverlayNotificationInset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUtils_SetOverlayNotificationInset"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamUtils_SetOverlayNotificationInset(ISteamUtils ptr, int nHorizontalInset, int nVerticalInset)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUtils_SetOverlayNotificationInset$descriptor() {
        return SteamAPI_ISteamUtils_SetOverlayNotificationInset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamUtils_SetOverlayNotificationInset(ISteamUtils ptr, int nHorizontalInset, int nVerticalInset)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUtils_SetOverlayNotificationInset$handle() {
        return SteamAPI_ISteamUtils_SetOverlayNotificationInset.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamUtils_SetOverlayNotificationInset(ISteamUtils ptr, int nHorizontalInset, int nVerticalInset)
     * }
     */
    public static void SteamAPI_ISteamUtils_SetOverlayNotificationInset(MemorySegment ptr, int nHorizontalInset, int nVerticalInset) {
        var mh$ = SteamAPI_ISteamUtils_SetOverlayNotificationInset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUtils_SetOverlayNotificationInset", ptr, nHorizontalInset, nVerticalInset);
            }
            mh$.invokeExact(ptr, nHorizontalInset, nVerticalInset);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUtils_IsSteamInBigPictureMode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUtils_IsSteamInBigPictureMode"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUtils_IsSteamInBigPictureMode(ISteamUtils ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUtils_IsSteamInBigPictureMode$descriptor() {
        return SteamAPI_ISteamUtils_IsSteamInBigPictureMode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUtils_IsSteamInBigPictureMode(ISteamUtils ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUtils_IsSteamInBigPictureMode$handle() {
        return SteamAPI_ISteamUtils_IsSteamInBigPictureMode.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUtils_IsSteamInBigPictureMode(ISteamUtils ptr)
     * }
     */
    public static boolean SteamAPI_ISteamUtils_IsSteamInBigPictureMode(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamUtils_IsSteamInBigPictureMode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUtils_IsSteamInBigPictureMode", ptr);
            }
            return (boolean)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUtils_StartVRDashboard {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUtils_StartVRDashboard"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamUtils_StartVRDashboard(ISteamUtils ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUtils_StartVRDashboard$descriptor() {
        return SteamAPI_ISteamUtils_StartVRDashboard.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamUtils_StartVRDashboard(ISteamUtils ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUtils_StartVRDashboard$handle() {
        return SteamAPI_ISteamUtils_StartVRDashboard.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamUtils_StartVRDashboard(ISteamUtils ptr)
     * }
     */
    public static void SteamAPI_ISteamUtils_StartVRDashboard(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamUtils_StartVRDashboard.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUtils_StartVRDashboard", ptr);
            }
            mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUtils_IsVRHeadsetStreamingEnabled {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUtils_IsVRHeadsetStreamingEnabled"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUtils_IsVRHeadsetStreamingEnabled(ISteamUtils ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUtils_IsVRHeadsetStreamingEnabled$descriptor() {
        return SteamAPI_ISteamUtils_IsVRHeadsetStreamingEnabled.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUtils_IsVRHeadsetStreamingEnabled(ISteamUtils ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUtils_IsVRHeadsetStreamingEnabled$handle() {
        return SteamAPI_ISteamUtils_IsVRHeadsetStreamingEnabled.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUtils_IsVRHeadsetStreamingEnabled(ISteamUtils ptr)
     * }
     */
    public static boolean SteamAPI_ISteamUtils_IsVRHeadsetStreamingEnabled(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamUtils_IsVRHeadsetStreamingEnabled.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUtils_IsVRHeadsetStreamingEnabled", ptr);
            }
            return (boolean)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUtils_SetVRHeadsetStreamingEnabled {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUtils_SetVRHeadsetStreamingEnabled"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamUtils_SetVRHeadsetStreamingEnabled(ISteamUtils ptr, bool bEnabled)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUtils_SetVRHeadsetStreamingEnabled$descriptor() {
        return SteamAPI_ISteamUtils_SetVRHeadsetStreamingEnabled.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamUtils_SetVRHeadsetStreamingEnabled(ISteamUtils ptr, bool bEnabled)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUtils_SetVRHeadsetStreamingEnabled$handle() {
        return SteamAPI_ISteamUtils_SetVRHeadsetStreamingEnabled.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamUtils_SetVRHeadsetStreamingEnabled(ISteamUtils ptr, bool bEnabled)
     * }
     */
    public static void SteamAPI_ISteamUtils_SetVRHeadsetStreamingEnabled(MemorySegment ptr, boolean bEnabled) {
        var mh$ = SteamAPI_ISteamUtils_SetVRHeadsetStreamingEnabled.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUtils_SetVRHeadsetStreamingEnabled", ptr, bEnabled);
            }
            mh$.invokeExact(ptr, bEnabled);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUtils_IsSteamChinaLauncher {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUtils_IsSteamChinaLauncher"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUtils_IsSteamChinaLauncher(ISteamUtils ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUtils_IsSteamChinaLauncher$descriptor() {
        return SteamAPI_ISteamUtils_IsSteamChinaLauncher.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUtils_IsSteamChinaLauncher(ISteamUtils ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUtils_IsSteamChinaLauncher$handle() {
        return SteamAPI_ISteamUtils_IsSteamChinaLauncher.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUtils_IsSteamChinaLauncher(ISteamUtils ptr)
     * }
     */
    public static boolean SteamAPI_ISteamUtils_IsSteamChinaLauncher(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamUtils_IsSteamChinaLauncher.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUtils_IsSteamChinaLauncher", ptr);
            }
            return (boolean)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUtils_InitFilterText {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUtils_InitFilterText"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUtils_InitFilterText(ISteamUtils ptr, uint32 unFilterOptions)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUtils_InitFilterText$descriptor() {
        return SteamAPI_ISteamUtils_InitFilterText.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUtils_InitFilterText(ISteamUtils ptr, uint32 unFilterOptions)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUtils_InitFilterText$handle() {
        return SteamAPI_ISteamUtils_InitFilterText.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUtils_InitFilterText(ISteamUtils ptr, uint32 unFilterOptions)
     * }
     */
    public static boolean SteamAPI_ISteamUtils_InitFilterText(MemorySegment ptr, int unFilterOptions) {
        var mh$ = SteamAPI_ISteamUtils_InitFilterText.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUtils_InitFilterText", ptr, unFilterOptions);
            }
            return (boolean)mh$.invokeExact(ptr, unFilterOptions);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUtils_FilterText {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUtils_FilterText"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamUtils_FilterText(ISteamUtils ptr, ETextFilteringContext eContext, uint64_steamid sourceSteamID, const char *pchInputMessage, char *pchOutFilteredText, uint32 nByteSizeOutFilteredText)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUtils_FilterText$descriptor() {
        return SteamAPI_ISteamUtils_FilterText.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamUtils_FilterText(ISteamUtils ptr, ETextFilteringContext eContext, uint64_steamid sourceSteamID, const char *pchInputMessage, char *pchOutFilteredText, uint32 nByteSizeOutFilteredText)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUtils_FilterText$handle() {
        return SteamAPI_ISteamUtils_FilterText.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int SteamAPI_ISteamUtils_FilterText(ISteamUtils ptr, ETextFilteringContext eContext, uint64_steamid sourceSteamID, const char *pchInputMessage, char *pchOutFilteredText, uint32 nByteSizeOutFilteredText)
     * }
     */
    public static int SteamAPI_ISteamUtils_FilterText(MemorySegment ptr, int eContext, long sourceSteamID, MemorySegment pchInputMessage, MemorySegment pchOutFilteredText, int nByteSizeOutFilteredText) {
        var mh$ = SteamAPI_ISteamUtils_FilterText.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUtils_FilterText", ptr, eContext, sourceSteamID, pchInputMessage, pchOutFilteredText, nByteSizeOutFilteredText);
            }
            return (int)mh$.invokeExact(ptr, eContext, sourceSteamID, pchInputMessage, pchOutFilteredText, nByteSizeOutFilteredText);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUtils_GetIPv6ConnectivityState {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUtils_GetIPv6ConnectivityState"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ESteamIPv6ConnectivityState SteamAPI_ISteamUtils_GetIPv6ConnectivityState(ISteamUtils ptr, ESteamIPv6ConnectivityProtocol eProtocol)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUtils_GetIPv6ConnectivityState$descriptor() {
        return SteamAPI_ISteamUtils_GetIPv6ConnectivityState.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ESteamIPv6ConnectivityState SteamAPI_ISteamUtils_GetIPv6ConnectivityState(ISteamUtils ptr, ESteamIPv6ConnectivityProtocol eProtocol)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUtils_GetIPv6ConnectivityState$handle() {
        return SteamAPI_ISteamUtils_GetIPv6ConnectivityState.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ESteamIPv6ConnectivityState SteamAPI_ISteamUtils_GetIPv6ConnectivityState(ISteamUtils ptr, ESteamIPv6ConnectivityProtocol eProtocol)
     * }
     */
    public static int SteamAPI_ISteamUtils_GetIPv6ConnectivityState(MemorySegment ptr, int eProtocol) {
        var mh$ = SteamAPI_ISteamUtils_GetIPv6ConnectivityState.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUtils_GetIPv6ConnectivityState", ptr, eProtocol);
            }
            return (int)mh$.invokeExact(ptr, eProtocol);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUtils_IsSteamRunningOnSteamDeck {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUtils_IsSteamRunningOnSteamDeck"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUtils_IsSteamRunningOnSteamDeck(ISteamUtils ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUtils_IsSteamRunningOnSteamDeck$descriptor() {
        return SteamAPI_ISteamUtils_IsSteamRunningOnSteamDeck.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUtils_IsSteamRunningOnSteamDeck(ISteamUtils ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUtils_IsSteamRunningOnSteamDeck$handle() {
        return SteamAPI_ISteamUtils_IsSteamRunningOnSteamDeck.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUtils_IsSteamRunningOnSteamDeck(ISteamUtils ptr)
     * }
     */
    public static boolean SteamAPI_ISteamUtils_IsSteamRunningOnSteamDeck(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamUtils_IsSteamRunningOnSteamDeck.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUtils_IsSteamRunningOnSteamDeck", ptr);
            }
            return (boolean)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUtils_ShowFloatingGamepadTextInput {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_INT,
            SteamFlat.C_INT,
            SteamFlat.C_INT,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUtils_ShowFloatingGamepadTextInput"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUtils_ShowFloatingGamepadTextInput(ISteamUtils ptr, EFloatingGamepadTextInputMode eKeyboardMode, int nTextFieldXPosition, int nTextFieldYPosition, int nTextFieldWidth, int nTextFieldHeight)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUtils_ShowFloatingGamepadTextInput$descriptor() {
        return SteamAPI_ISteamUtils_ShowFloatingGamepadTextInput.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUtils_ShowFloatingGamepadTextInput(ISteamUtils ptr, EFloatingGamepadTextInputMode eKeyboardMode, int nTextFieldXPosition, int nTextFieldYPosition, int nTextFieldWidth, int nTextFieldHeight)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUtils_ShowFloatingGamepadTextInput$handle() {
        return SteamAPI_ISteamUtils_ShowFloatingGamepadTextInput.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUtils_ShowFloatingGamepadTextInput(ISteamUtils ptr, EFloatingGamepadTextInputMode eKeyboardMode, int nTextFieldXPosition, int nTextFieldYPosition, int nTextFieldWidth, int nTextFieldHeight)
     * }
     */
    public static boolean SteamAPI_ISteamUtils_ShowFloatingGamepadTextInput(MemorySegment ptr, int eKeyboardMode, int nTextFieldXPosition, int nTextFieldYPosition, int nTextFieldWidth, int nTextFieldHeight) {
        var mh$ = SteamAPI_ISteamUtils_ShowFloatingGamepadTextInput.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUtils_ShowFloatingGamepadTextInput", ptr, eKeyboardMode, nTextFieldXPosition, nTextFieldYPosition, nTextFieldWidth, nTextFieldHeight);
            }
            return (boolean)mh$.invokeExact(ptr, eKeyboardMode, nTextFieldXPosition, nTextFieldYPosition, nTextFieldWidth, nTextFieldHeight);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUtils_SetGameLauncherMode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUtils_SetGameLauncherMode"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamUtils_SetGameLauncherMode(ISteamUtils ptr, bool bLauncherMode)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUtils_SetGameLauncherMode$descriptor() {
        return SteamAPI_ISteamUtils_SetGameLauncherMode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamUtils_SetGameLauncherMode(ISteamUtils ptr, bool bLauncherMode)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUtils_SetGameLauncherMode$handle() {
        return SteamAPI_ISteamUtils_SetGameLauncherMode.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamUtils_SetGameLauncherMode(ISteamUtils ptr, bool bLauncherMode)
     * }
     */
    public static void SteamAPI_ISteamUtils_SetGameLauncherMode(MemorySegment ptr, boolean bLauncherMode) {
        var mh$ = SteamAPI_ISteamUtils_SetGameLauncherMode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUtils_SetGameLauncherMode", ptr, bLauncherMode);
            }
            mh$.invokeExact(ptr, bLauncherMode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUtils_DismissFloatingGamepadTextInput {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUtils_DismissFloatingGamepadTextInput"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUtils_DismissFloatingGamepadTextInput(ISteamUtils ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUtils_DismissFloatingGamepadTextInput$descriptor() {
        return SteamAPI_ISteamUtils_DismissFloatingGamepadTextInput.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUtils_DismissFloatingGamepadTextInput(ISteamUtils ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUtils_DismissFloatingGamepadTextInput$handle() {
        return SteamAPI_ISteamUtils_DismissFloatingGamepadTextInput.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUtils_DismissFloatingGamepadTextInput(ISteamUtils ptr)
     * }
     */
    public static boolean SteamAPI_ISteamUtils_DismissFloatingGamepadTextInput(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamUtils_DismissFloatingGamepadTextInput.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUtils_DismissFloatingGamepadTextInput", ptr);
            }
            return (boolean)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUtils_DismissGamepadTextInput {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUtils_DismissGamepadTextInput"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUtils_DismissGamepadTextInput(ISteamUtils ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUtils_DismissGamepadTextInput$descriptor() {
        return SteamAPI_ISteamUtils_DismissGamepadTextInput.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUtils_DismissGamepadTextInput(ISteamUtils ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUtils_DismissGamepadTextInput$handle() {
        return SteamAPI_ISteamUtils_DismissGamepadTextInput.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUtils_DismissGamepadTextInput(ISteamUtils ptr)
     * }
     */
    public static boolean SteamAPI_ISteamUtils_DismissGamepadTextInput(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamUtils_DismissGamepadTextInput.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUtils_DismissGamepadTextInput", ptr);
            }
            return (boolean)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_SteamUtils_v010 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_SteamUtils_v010"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ISteamUtils SteamAPI_SteamUtils_v010()
     * }
     */
    public static FunctionDescriptor SteamAPI_SteamUtils_v010$descriptor() {
        return SteamAPI_SteamUtils_v010.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ISteamUtils SteamAPI_SteamUtils_v010()
     * }
     */
    public static MethodHandle SteamAPI_SteamUtils_v010$handle() {
        return SteamAPI_SteamUtils_v010.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ISteamUtils SteamAPI_SteamUtils_v010()
     * }
     */
    public static MemorySegment SteamAPI_SteamUtils_v010() {
        var mh$ = SteamAPI_SteamUtils_v010.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_SteamUtils_v010");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_SteamGameServerUtils_v010 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_SteamGameServerUtils_v010"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ISteamUtils SteamAPI_SteamGameServerUtils_v010()
     * }
     */
    public static FunctionDescriptor SteamAPI_SteamGameServerUtils_v010$descriptor() {
        return SteamAPI_SteamGameServerUtils_v010.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ISteamUtils SteamAPI_SteamGameServerUtils_v010()
     * }
     */
    public static MethodHandle SteamAPI_SteamGameServerUtils_v010$handle() {
        return SteamAPI_SteamGameServerUtils_v010.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ISteamUtils SteamAPI_SteamGameServerUtils_v010()
     * }
     */
    public static MemorySegment SteamAPI_SteamGameServerUtils_v010() {
        var mh$ = SteamAPI_SteamGameServerUtils_v010.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_SteamGameServerUtils_v010");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmaking_GetFavoriteGameCount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamMatchmaking_GetFavoriteGameCount"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamMatchmaking_GetFavoriteGameCount(ISteamMatchmaking ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmaking_GetFavoriteGameCount$descriptor() {
        return SteamAPI_ISteamMatchmaking_GetFavoriteGameCount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamMatchmaking_GetFavoriteGameCount(ISteamMatchmaking ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmaking_GetFavoriteGameCount$handle() {
        return SteamAPI_ISteamMatchmaking_GetFavoriteGameCount.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int SteamAPI_ISteamMatchmaking_GetFavoriteGameCount(ISteamMatchmaking ptr)
     * }
     */
    public static int SteamAPI_ISteamMatchmaking_GetFavoriteGameCount(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamMatchmaking_GetFavoriteGameCount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmaking_GetFavoriteGameCount", ptr);
            }
            return (int)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmaking_GetFavoriteGame {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamMatchmaking_GetFavoriteGame"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMatchmaking_GetFavoriteGame(ISteamMatchmaking ptr, int iGame, AppId_t *pnAppID, uint32 *pnIP, uint16 *pnConnPort, uint16 *pnQueryPort, uint32 *punFlags, uint32 *pRTime32LastPlayedOnServer)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmaking_GetFavoriteGame$descriptor() {
        return SteamAPI_ISteamMatchmaking_GetFavoriteGame.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMatchmaking_GetFavoriteGame(ISteamMatchmaking ptr, int iGame, AppId_t *pnAppID, uint32 *pnIP, uint16 *pnConnPort, uint16 *pnQueryPort, uint32 *punFlags, uint32 *pRTime32LastPlayedOnServer)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmaking_GetFavoriteGame$handle() {
        return SteamAPI_ISteamMatchmaking_GetFavoriteGame.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMatchmaking_GetFavoriteGame(ISteamMatchmaking ptr, int iGame, AppId_t *pnAppID, uint32 *pnIP, uint16 *pnConnPort, uint16 *pnQueryPort, uint32 *punFlags, uint32 *pRTime32LastPlayedOnServer)
     * }
     */
    public static boolean SteamAPI_ISteamMatchmaking_GetFavoriteGame(MemorySegment ptr, int iGame, MemorySegment pnAppID, MemorySegment pnIP, MemorySegment pnConnPort, MemorySegment pnQueryPort, MemorySegment punFlags, MemorySegment pRTime32LastPlayedOnServer) {
        var mh$ = SteamAPI_ISteamMatchmaking_GetFavoriteGame.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmaking_GetFavoriteGame", ptr, iGame, pnAppID, pnIP, pnConnPort, pnQueryPort, punFlags, pRTime32LastPlayedOnServer);
            }
            return (boolean)mh$.invokeExact(ptr, iGame, pnAppID, pnIP, pnConnPort, pnQueryPort, punFlags, pRTime32LastPlayedOnServer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmaking_AddFavoriteGame {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_INT,
            SteamFlat.C_SHORT,
            SteamFlat.C_SHORT,
            SteamFlat.C_INT,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamMatchmaking_AddFavoriteGame"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamMatchmaking_AddFavoriteGame(ISteamMatchmaking ptr, AppId_t nAppID, uint32 nIP, uint16 nConnPort, uint16 nQueryPort, uint32 unFlags, uint32 rTime32LastPlayedOnServer)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmaking_AddFavoriteGame$descriptor() {
        return SteamAPI_ISteamMatchmaking_AddFavoriteGame.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamMatchmaking_AddFavoriteGame(ISteamMatchmaking ptr, AppId_t nAppID, uint32 nIP, uint16 nConnPort, uint16 nQueryPort, uint32 unFlags, uint32 rTime32LastPlayedOnServer)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmaking_AddFavoriteGame$handle() {
        return SteamAPI_ISteamMatchmaking_AddFavoriteGame.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int SteamAPI_ISteamMatchmaking_AddFavoriteGame(ISteamMatchmaking ptr, AppId_t nAppID, uint32 nIP, uint16 nConnPort, uint16 nQueryPort, uint32 unFlags, uint32 rTime32LastPlayedOnServer)
     * }
     */
    public static int SteamAPI_ISteamMatchmaking_AddFavoriteGame(MemorySegment ptr, int nAppID, int nIP, short nConnPort, short nQueryPort, int unFlags, int rTime32LastPlayedOnServer) {
        var mh$ = SteamAPI_ISteamMatchmaking_AddFavoriteGame.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmaking_AddFavoriteGame", ptr, nAppID, nIP, nConnPort, nQueryPort, unFlags, rTime32LastPlayedOnServer);
            }
            return (int)mh$.invokeExact(ptr, nAppID, nIP, nConnPort, nQueryPort, unFlags, rTime32LastPlayedOnServer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmaking_RemoveFavoriteGame {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_INT,
            SteamFlat.C_SHORT,
            SteamFlat.C_SHORT,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamMatchmaking_RemoveFavoriteGame"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMatchmaking_RemoveFavoriteGame(ISteamMatchmaking ptr, AppId_t nAppID, uint32 nIP, uint16 nConnPort, uint16 nQueryPort, uint32 unFlags)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmaking_RemoveFavoriteGame$descriptor() {
        return SteamAPI_ISteamMatchmaking_RemoveFavoriteGame.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMatchmaking_RemoveFavoriteGame(ISteamMatchmaking ptr, AppId_t nAppID, uint32 nIP, uint16 nConnPort, uint16 nQueryPort, uint32 unFlags)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmaking_RemoveFavoriteGame$handle() {
        return SteamAPI_ISteamMatchmaking_RemoveFavoriteGame.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMatchmaking_RemoveFavoriteGame(ISteamMatchmaking ptr, AppId_t nAppID, uint32 nIP, uint16 nConnPort, uint16 nQueryPort, uint32 unFlags)
     * }
     */
    public static boolean SteamAPI_ISteamMatchmaking_RemoveFavoriteGame(MemorySegment ptr, int nAppID, int nIP, short nConnPort, short nQueryPort, int unFlags) {
        var mh$ = SteamAPI_ISteamMatchmaking_RemoveFavoriteGame.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmaking_RemoveFavoriteGame", ptr, nAppID, nIP, nConnPort, nQueryPort, unFlags);
            }
            return (boolean)mh$.invokeExact(ptr, nAppID, nIP, nConnPort, nQueryPort, unFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmaking_RequestLobbyList {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamMatchmaking_RequestLobbyList"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamMatchmaking_RequestLobbyList(ISteamMatchmaking ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmaking_RequestLobbyList$descriptor() {
        return SteamAPI_ISteamMatchmaking_RequestLobbyList.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamMatchmaking_RequestLobbyList(ISteamMatchmaking ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmaking_RequestLobbyList$handle() {
        return SteamAPI_ISteamMatchmaking_RequestLobbyList.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamMatchmaking_RequestLobbyList(ISteamMatchmaking ptr)
     * }
     */
    public static long SteamAPI_ISteamMatchmaking_RequestLobbyList(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamMatchmaking_RequestLobbyList.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmaking_RequestLobbyList", ptr);
            }
            return (long)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmaking_AddRequestLobbyListStringFilter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamMatchmaking_AddRequestLobbyListStringFilter"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmaking_AddRequestLobbyListStringFilter(ISteamMatchmaking ptr, const char *pchKeyToMatch, const char *pchValueToMatch, ELobbyComparison eComparisonType)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmaking_AddRequestLobbyListStringFilter$descriptor() {
        return SteamAPI_ISteamMatchmaking_AddRequestLobbyListStringFilter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmaking_AddRequestLobbyListStringFilter(ISteamMatchmaking ptr, const char *pchKeyToMatch, const char *pchValueToMatch, ELobbyComparison eComparisonType)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmaking_AddRequestLobbyListStringFilter$handle() {
        return SteamAPI_ISteamMatchmaking_AddRequestLobbyListStringFilter.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmaking_AddRequestLobbyListStringFilter(ISteamMatchmaking ptr, const char *pchKeyToMatch, const char *pchValueToMatch, ELobbyComparison eComparisonType)
     * }
     */
    public static void SteamAPI_ISteamMatchmaking_AddRequestLobbyListStringFilter(MemorySegment ptr, MemorySegment pchKeyToMatch, MemorySegment pchValueToMatch, int eComparisonType) {
        var mh$ = SteamAPI_ISteamMatchmaking_AddRequestLobbyListStringFilter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmaking_AddRequestLobbyListStringFilter", ptr, pchKeyToMatch, pchValueToMatch, eComparisonType);
            }
            mh$.invokeExact(ptr, pchKeyToMatch, pchValueToMatch, eComparisonType);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmaking_AddRequestLobbyListNumericalFilter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamMatchmaking_AddRequestLobbyListNumericalFilter"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmaking_AddRequestLobbyListNumericalFilter(ISteamMatchmaking ptr, const char *pchKeyToMatch, int nValueToMatch, ELobbyComparison eComparisonType)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmaking_AddRequestLobbyListNumericalFilter$descriptor() {
        return SteamAPI_ISteamMatchmaking_AddRequestLobbyListNumericalFilter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmaking_AddRequestLobbyListNumericalFilter(ISteamMatchmaking ptr, const char *pchKeyToMatch, int nValueToMatch, ELobbyComparison eComparisonType)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmaking_AddRequestLobbyListNumericalFilter$handle() {
        return SteamAPI_ISteamMatchmaking_AddRequestLobbyListNumericalFilter.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmaking_AddRequestLobbyListNumericalFilter(ISteamMatchmaking ptr, const char *pchKeyToMatch, int nValueToMatch, ELobbyComparison eComparisonType)
     * }
     */
    public static void SteamAPI_ISteamMatchmaking_AddRequestLobbyListNumericalFilter(MemorySegment ptr, MemorySegment pchKeyToMatch, int nValueToMatch, int eComparisonType) {
        var mh$ = SteamAPI_ISteamMatchmaking_AddRequestLobbyListNumericalFilter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmaking_AddRequestLobbyListNumericalFilter", ptr, pchKeyToMatch, nValueToMatch, eComparisonType);
            }
            mh$.invokeExact(ptr, pchKeyToMatch, nValueToMatch, eComparisonType);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmaking_AddRequestLobbyListNearValueFilter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamMatchmaking_AddRequestLobbyListNearValueFilter"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmaking_AddRequestLobbyListNearValueFilter(ISteamMatchmaking ptr, const char *pchKeyToMatch, int nValueToBeCloseTo)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmaking_AddRequestLobbyListNearValueFilter$descriptor() {
        return SteamAPI_ISteamMatchmaking_AddRequestLobbyListNearValueFilter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmaking_AddRequestLobbyListNearValueFilter(ISteamMatchmaking ptr, const char *pchKeyToMatch, int nValueToBeCloseTo)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmaking_AddRequestLobbyListNearValueFilter$handle() {
        return SteamAPI_ISteamMatchmaking_AddRequestLobbyListNearValueFilter.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmaking_AddRequestLobbyListNearValueFilter(ISteamMatchmaking ptr, const char *pchKeyToMatch, int nValueToBeCloseTo)
     * }
     */
    public static void SteamAPI_ISteamMatchmaking_AddRequestLobbyListNearValueFilter(MemorySegment ptr, MemorySegment pchKeyToMatch, int nValueToBeCloseTo) {
        var mh$ = SteamAPI_ISteamMatchmaking_AddRequestLobbyListNearValueFilter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmaking_AddRequestLobbyListNearValueFilter", ptr, pchKeyToMatch, nValueToBeCloseTo);
            }
            mh$.invokeExact(ptr, pchKeyToMatch, nValueToBeCloseTo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable(ISteamMatchmaking ptr, int nSlotsAvailable)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable$descriptor() {
        return SteamAPI_ISteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable(ISteamMatchmaking ptr, int nSlotsAvailable)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable$handle() {
        return SteamAPI_ISteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable(ISteamMatchmaking ptr, int nSlotsAvailable)
     * }
     */
    public static void SteamAPI_ISteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable(MemorySegment ptr, int nSlotsAvailable) {
        var mh$ = SteamAPI_ISteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable", ptr, nSlotsAvailable);
            }
            mh$.invokeExact(ptr, nSlotsAvailable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmaking_AddRequestLobbyListDistanceFilter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamMatchmaking_AddRequestLobbyListDistanceFilter"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmaking_AddRequestLobbyListDistanceFilter(ISteamMatchmaking ptr, ELobbyDistanceFilter eLobbyDistanceFilter)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmaking_AddRequestLobbyListDistanceFilter$descriptor() {
        return SteamAPI_ISteamMatchmaking_AddRequestLobbyListDistanceFilter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmaking_AddRequestLobbyListDistanceFilter(ISteamMatchmaking ptr, ELobbyDistanceFilter eLobbyDistanceFilter)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmaking_AddRequestLobbyListDistanceFilter$handle() {
        return SteamAPI_ISteamMatchmaking_AddRequestLobbyListDistanceFilter.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmaking_AddRequestLobbyListDistanceFilter(ISteamMatchmaking ptr, ELobbyDistanceFilter eLobbyDistanceFilter)
     * }
     */
    public static void SteamAPI_ISteamMatchmaking_AddRequestLobbyListDistanceFilter(MemorySegment ptr, int eLobbyDistanceFilter) {
        var mh$ = SteamAPI_ISteamMatchmaking_AddRequestLobbyListDistanceFilter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmaking_AddRequestLobbyListDistanceFilter", ptr, eLobbyDistanceFilter);
            }
            mh$.invokeExact(ptr, eLobbyDistanceFilter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmaking_AddRequestLobbyListResultCountFilter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamMatchmaking_AddRequestLobbyListResultCountFilter"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmaking_AddRequestLobbyListResultCountFilter(ISteamMatchmaking ptr, int cMaxResults)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmaking_AddRequestLobbyListResultCountFilter$descriptor() {
        return SteamAPI_ISteamMatchmaking_AddRequestLobbyListResultCountFilter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmaking_AddRequestLobbyListResultCountFilter(ISteamMatchmaking ptr, int cMaxResults)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmaking_AddRequestLobbyListResultCountFilter$handle() {
        return SteamAPI_ISteamMatchmaking_AddRequestLobbyListResultCountFilter.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmaking_AddRequestLobbyListResultCountFilter(ISteamMatchmaking ptr, int cMaxResults)
     * }
     */
    public static void SteamAPI_ISteamMatchmaking_AddRequestLobbyListResultCountFilter(MemorySegment ptr, int cMaxResults) {
        var mh$ = SteamAPI_ISteamMatchmaking_AddRequestLobbyListResultCountFilter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmaking_AddRequestLobbyListResultCountFilter", ptr, cMaxResults);
            }
            mh$.invokeExact(ptr, cMaxResults);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter(ISteamMatchmaking ptr, uint64_steamid steamIDLobby)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter$descriptor() {
        return SteamAPI_ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter(ISteamMatchmaking ptr, uint64_steamid steamIDLobby)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter$handle() {
        return SteamAPI_ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter(ISteamMatchmaking ptr, uint64_steamid steamIDLobby)
     * }
     */
    public static void SteamAPI_ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter(MemorySegment ptr, long steamIDLobby) {
        var mh$ = SteamAPI_ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter", ptr, steamIDLobby);
            }
            mh$.invokeExact(ptr, steamIDLobby);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmaking_GetLobbyByIndex {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamMatchmaking_GetLobbyByIndex"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint64_steamid SteamAPI_ISteamMatchmaking_GetLobbyByIndex(ISteamMatchmaking ptr, int iLobby)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmaking_GetLobbyByIndex$descriptor() {
        return SteamAPI_ISteamMatchmaking_GetLobbyByIndex.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint64_steamid SteamAPI_ISteamMatchmaking_GetLobbyByIndex(ISteamMatchmaking ptr, int iLobby)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmaking_GetLobbyByIndex$handle() {
        return SteamAPI_ISteamMatchmaking_GetLobbyByIndex.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * uint64_steamid SteamAPI_ISteamMatchmaking_GetLobbyByIndex(ISteamMatchmaking ptr, int iLobby)
     * }
     */
    public static long SteamAPI_ISteamMatchmaking_GetLobbyByIndex(MemorySegment ptr, int iLobby) {
        var mh$ = SteamAPI_ISteamMatchmaking_GetLobbyByIndex.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmaking_GetLobbyByIndex", ptr, iLobby);
            }
            return (long)mh$.invokeExact(ptr, iLobby);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmaking_CreateLobby {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamMatchmaking_CreateLobby"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamMatchmaking_CreateLobby(ISteamMatchmaking ptr, ELobbyType eLobbyType, int cMaxMembers)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmaking_CreateLobby$descriptor() {
        return SteamAPI_ISteamMatchmaking_CreateLobby.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamMatchmaking_CreateLobby(ISteamMatchmaking ptr, ELobbyType eLobbyType, int cMaxMembers)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmaking_CreateLobby$handle() {
        return SteamAPI_ISteamMatchmaking_CreateLobby.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamMatchmaking_CreateLobby(ISteamMatchmaking ptr, ELobbyType eLobbyType, int cMaxMembers)
     * }
     */
    public static long SteamAPI_ISteamMatchmaking_CreateLobby(MemorySegment ptr, int eLobbyType, int cMaxMembers) {
        var mh$ = SteamAPI_ISteamMatchmaking_CreateLobby.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmaking_CreateLobby", ptr, eLobbyType, cMaxMembers);
            }
            return (long)mh$.invokeExact(ptr, eLobbyType, cMaxMembers);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmaking_JoinLobby {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamMatchmaking_JoinLobby"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamMatchmaking_JoinLobby(ISteamMatchmaking ptr, uint64_steamid steamIDLobby)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmaking_JoinLobby$descriptor() {
        return SteamAPI_ISteamMatchmaking_JoinLobby.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamMatchmaking_JoinLobby(ISteamMatchmaking ptr, uint64_steamid steamIDLobby)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmaking_JoinLobby$handle() {
        return SteamAPI_ISteamMatchmaking_JoinLobby.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamMatchmaking_JoinLobby(ISteamMatchmaking ptr, uint64_steamid steamIDLobby)
     * }
     */
    public static long SteamAPI_ISteamMatchmaking_JoinLobby(MemorySegment ptr, long steamIDLobby) {
        var mh$ = SteamAPI_ISteamMatchmaking_JoinLobby.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmaking_JoinLobby", ptr, steamIDLobby);
            }
            return (long)mh$.invokeExact(ptr, steamIDLobby);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmaking_LeaveLobby {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamMatchmaking_LeaveLobby"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmaking_LeaveLobby(ISteamMatchmaking ptr, uint64_steamid steamIDLobby)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmaking_LeaveLobby$descriptor() {
        return SteamAPI_ISteamMatchmaking_LeaveLobby.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmaking_LeaveLobby(ISteamMatchmaking ptr, uint64_steamid steamIDLobby)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmaking_LeaveLobby$handle() {
        return SteamAPI_ISteamMatchmaking_LeaveLobby.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmaking_LeaveLobby(ISteamMatchmaking ptr, uint64_steamid steamIDLobby)
     * }
     */
    public static void SteamAPI_ISteamMatchmaking_LeaveLobby(MemorySegment ptr, long steamIDLobby) {
        var mh$ = SteamAPI_ISteamMatchmaking_LeaveLobby.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmaking_LeaveLobby", ptr, steamIDLobby);
            }
            mh$.invokeExact(ptr, steamIDLobby);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmaking_InviteUserToLobby {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamMatchmaking_InviteUserToLobby"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMatchmaking_InviteUserToLobby(ISteamMatchmaking ptr, uint64_steamid steamIDLobby, uint64_steamid steamIDInvitee)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmaking_InviteUserToLobby$descriptor() {
        return SteamAPI_ISteamMatchmaking_InviteUserToLobby.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMatchmaking_InviteUserToLobby(ISteamMatchmaking ptr, uint64_steamid steamIDLobby, uint64_steamid steamIDInvitee)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmaking_InviteUserToLobby$handle() {
        return SteamAPI_ISteamMatchmaking_InviteUserToLobby.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMatchmaking_InviteUserToLobby(ISteamMatchmaking ptr, uint64_steamid steamIDLobby, uint64_steamid steamIDInvitee)
     * }
     */
    public static boolean SteamAPI_ISteamMatchmaking_InviteUserToLobby(MemorySegment ptr, long steamIDLobby, long steamIDInvitee) {
        var mh$ = SteamAPI_ISteamMatchmaking_InviteUserToLobby.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmaking_InviteUserToLobby", ptr, steamIDLobby, steamIDInvitee);
            }
            return (boolean)mh$.invokeExact(ptr, steamIDLobby, steamIDInvitee);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmaking_GetNumLobbyMembers {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamMatchmaking_GetNumLobbyMembers"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamMatchmaking_GetNumLobbyMembers(ISteamMatchmaking ptr, uint64_steamid steamIDLobby)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmaking_GetNumLobbyMembers$descriptor() {
        return SteamAPI_ISteamMatchmaking_GetNumLobbyMembers.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamMatchmaking_GetNumLobbyMembers(ISteamMatchmaking ptr, uint64_steamid steamIDLobby)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmaking_GetNumLobbyMembers$handle() {
        return SteamAPI_ISteamMatchmaking_GetNumLobbyMembers.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int SteamAPI_ISteamMatchmaking_GetNumLobbyMembers(ISteamMatchmaking ptr, uint64_steamid steamIDLobby)
     * }
     */
    public static int SteamAPI_ISteamMatchmaking_GetNumLobbyMembers(MemorySegment ptr, long steamIDLobby) {
        var mh$ = SteamAPI_ISteamMatchmaking_GetNumLobbyMembers.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmaking_GetNumLobbyMembers", ptr, steamIDLobby);
            }
            return (int)mh$.invokeExact(ptr, steamIDLobby);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmaking_GetLobbyMemberByIndex {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamMatchmaking_GetLobbyMemberByIndex"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint64_steamid SteamAPI_ISteamMatchmaking_GetLobbyMemberByIndex(ISteamMatchmaking ptr, uint64_steamid steamIDLobby, int iMember)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmaking_GetLobbyMemberByIndex$descriptor() {
        return SteamAPI_ISteamMatchmaking_GetLobbyMemberByIndex.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint64_steamid SteamAPI_ISteamMatchmaking_GetLobbyMemberByIndex(ISteamMatchmaking ptr, uint64_steamid steamIDLobby, int iMember)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmaking_GetLobbyMemberByIndex$handle() {
        return SteamAPI_ISteamMatchmaking_GetLobbyMemberByIndex.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * uint64_steamid SteamAPI_ISteamMatchmaking_GetLobbyMemberByIndex(ISteamMatchmaking ptr, uint64_steamid steamIDLobby, int iMember)
     * }
     */
    public static long SteamAPI_ISteamMatchmaking_GetLobbyMemberByIndex(MemorySegment ptr, long steamIDLobby, int iMember) {
        var mh$ = SteamAPI_ISteamMatchmaking_GetLobbyMemberByIndex.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmaking_GetLobbyMemberByIndex", ptr, steamIDLobby, iMember);
            }
            return (long)mh$.invokeExact(ptr, steamIDLobby, iMember);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmaking_GetLobbyData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamMatchmaking_GetLobbyData"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamMatchmaking_GetLobbyData(ISteamMatchmaking ptr, uint64_steamid steamIDLobby, const char *pchKey)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmaking_GetLobbyData$descriptor() {
        return SteamAPI_ISteamMatchmaking_GetLobbyData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamMatchmaking_GetLobbyData(ISteamMatchmaking ptr, uint64_steamid steamIDLobby, const char *pchKey)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmaking_GetLobbyData$handle() {
        return SteamAPI_ISteamMatchmaking_GetLobbyData.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamMatchmaking_GetLobbyData(ISteamMatchmaking ptr, uint64_steamid steamIDLobby, const char *pchKey)
     * }
     */
    public static MemorySegment SteamAPI_ISteamMatchmaking_GetLobbyData(MemorySegment ptr, long steamIDLobby, MemorySegment pchKey) {
        var mh$ = SteamAPI_ISteamMatchmaking_GetLobbyData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmaking_GetLobbyData", ptr, steamIDLobby, pchKey);
            }
            return (MemorySegment)mh$.invokeExact(ptr, steamIDLobby, pchKey);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmaking_SetLobbyData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamMatchmaking_SetLobbyData"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMatchmaking_SetLobbyData(ISteamMatchmaking ptr, uint64_steamid steamIDLobby, const char *pchKey, const char *pchValue)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmaking_SetLobbyData$descriptor() {
        return SteamAPI_ISteamMatchmaking_SetLobbyData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMatchmaking_SetLobbyData(ISteamMatchmaking ptr, uint64_steamid steamIDLobby, const char *pchKey, const char *pchValue)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmaking_SetLobbyData$handle() {
        return SteamAPI_ISteamMatchmaking_SetLobbyData.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMatchmaking_SetLobbyData(ISteamMatchmaking ptr, uint64_steamid steamIDLobby, const char *pchKey, const char *pchValue)
     * }
     */
    public static boolean SteamAPI_ISteamMatchmaking_SetLobbyData(MemorySegment ptr, long steamIDLobby, MemorySegment pchKey, MemorySegment pchValue) {
        var mh$ = SteamAPI_ISteamMatchmaking_SetLobbyData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmaking_SetLobbyData", ptr, steamIDLobby, pchKey, pchValue);
            }
            return (boolean)mh$.invokeExact(ptr, steamIDLobby, pchKey, pchValue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmaking_GetLobbyDataCount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamMatchmaking_GetLobbyDataCount"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamMatchmaking_GetLobbyDataCount(ISteamMatchmaking ptr, uint64_steamid steamIDLobby)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmaking_GetLobbyDataCount$descriptor() {
        return SteamAPI_ISteamMatchmaking_GetLobbyDataCount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamMatchmaking_GetLobbyDataCount(ISteamMatchmaking ptr, uint64_steamid steamIDLobby)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmaking_GetLobbyDataCount$handle() {
        return SteamAPI_ISteamMatchmaking_GetLobbyDataCount.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int SteamAPI_ISteamMatchmaking_GetLobbyDataCount(ISteamMatchmaking ptr, uint64_steamid steamIDLobby)
     * }
     */
    public static int SteamAPI_ISteamMatchmaking_GetLobbyDataCount(MemorySegment ptr, long steamIDLobby) {
        var mh$ = SteamAPI_ISteamMatchmaking_GetLobbyDataCount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmaking_GetLobbyDataCount", ptr, steamIDLobby);
            }
            return (int)mh$.invokeExact(ptr, steamIDLobby);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmaking_GetLobbyDataByIndex {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamMatchmaking_GetLobbyDataByIndex"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMatchmaking_GetLobbyDataByIndex(ISteamMatchmaking ptr, uint64_steamid steamIDLobby, int iLobbyData, char *pchKey, int cchKeyBufferSize, char *pchValue, int cchValueBufferSize)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmaking_GetLobbyDataByIndex$descriptor() {
        return SteamAPI_ISteamMatchmaking_GetLobbyDataByIndex.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMatchmaking_GetLobbyDataByIndex(ISteamMatchmaking ptr, uint64_steamid steamIDLobby, int iLobbyData, char *pchKey, int cchKeyBufferSize, char *pchValue, int cchValueBufferSize)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmaking_GetLobbyDataByIndex$handle() {
        return SteamAPI_ISteamMatchmaking_GetLobbyDataByIndex.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMatchmaking_GetLobbyDataByIndex(ISteamMatchmaking ptr, uint64_steamid steamIDLobby, int iLobbyData, char *pchKey, int cchKeyBufferSize, char *pchValue, int cchValueBufferSize)
     * }
     */
    public static boolean SteamAPI_ISteamMatchmaking_GetLobbyDataByIndex(MemorySegment ptr, long steamIDLobby, int iLobbyData, MemorySegment pchKey, int cchKeyBufferSize, MemorySegment pchValue, int cchValueBufferSize) {
        var mh$ = SteamAPI_ISteamMatchmaking_GetLobbyDataByIndex.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmaking_GetLobbyDataByIndex", ptr, steamIDLobby, iLobbyData, pchKey, cchKeyBufferSize, pchValue, cchValueBufferSize);
            }
            return (boolean)mh$.invokeExact(ptr, steamIDLobby, iLobbyData, pchKey, cchKeyBufferSize, pchValue, cchValueBufferSize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmaking_DeleteLobbyData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamMatchmaking_DeleteLobbyData"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMatchmaking_DeleteLobbyData(ISteamMatchmaking ptr, uint64_steamid steamIDLobby, const char *pchKey)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmaking_DeleteLobbyData$descriptor() {
        return SteamAPI_ISteamMatchmaking_DeleteLobbyData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMatchmaking_DeleteLobbyData(ISteamMatchmaking ptr, uint64_steamid steamIDLobby, const char *pchKey)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmaking_DeleteLobbyData$handle() {
        return SteamAPI_ISteamMatchmaking_DeleteLobbyData.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMatchmaking_DeleteLobbyData(ISteamMatchmaking ptr, uint64_steamid steamIDLobby, const char *pchKey)
     * }
     */
    public static boolean SteamAPI_ISteamMatchmaking_DeleteLobbyData(MemorySegment ptr, long steamIDLobby, MemorySegment pchKey) {
        var mh$ = SteamAPI_ISteamMatchmaking_DeleteLobbyData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmaking_DeleteLobbyData", ptr, steamIDLobby, pchKey);
            }
            return (boolean)mh$.invokeExact(ptr, steamIDLobby, pchKey);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmaking_GetLobbyMemberData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamMatchmaking_GetLobbyMemberData"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamMatchmaking_GetLobbyMemberData(ISteamMatchmaking ptr, uint64_steamid steamIDLobby, uint64_steamid steamIDUser, const char *pchKey)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmaking_GetLobbyMemberData$descriptor() {
        return SteamAPI_ISteamMatchmaking_GetLobbyMemberData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamMatchmaking_GetLobbyMemberData(ISteamMatchmaking ptr, uint64_steamid steamIDLobby, uint64_steamid steamIDUser, const char *pchKey)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmaking_GetLobbyMemberData$handle() {
        return SteamAPI_ISteamMatchmaking_GetLobbyMemberData.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamMatchmaking_GetLobbyMemberData(ISteamMatchmaking ptr, uint64_steamid steamIDLobby, uint64_steamid steamIDUser, const char *pchKey)
     * }
     */
    public static MemorySegment SteamAPI_ISteamMatchmaking_GetLobbyMemberData(MemorySegment ptr, long steamIDLobby, long steamIDUser, MemorySegment pchKey) {
        var mh$ = SteamAPI_ISteamMatchmaking_GetLobbyMemberData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmaking_GetLobbyMemberData", ptr, steamIDLobby, steamIDUser, pchKey);
            }
            return (MemorySegment)mh$.invokeExact(ptr, steamIDLobby, steamIDUser, pchKey);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmaking_SetLobbyMemberData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamMatchmaking_SetLobbyMemberData"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmaking_SetLobbyMemberData(ISteamMatchmaking ptr, uint64_steamid steamIDLobby, const char *pchKey, const char *pchValue)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmaking_SetLobbyMemberData$descriptor() {
        return SteamAPI_ISteamMatchmaking_SetLobbyMemberData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmaking_SetLobbyMemberData(ISteamMatchmaking ptr, uint64_steamid steamIDLobby, const char *pchKey, const char *pchValue)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmaking_SetLobbyMemberData$handle() {
        return SteamAPI_ISteamMatchmaking_SetLobbyMemberData.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmaking_SetLobbyMemberData(ISteamMatchmaking ptr, uint64_steamid steamIDLobby, const char *pchKey, const char *pchValue)
     * }
     */
    public static void SteamAPI_ISteamMatchmaking_SetLobbyMemberData(MemorySegment ptr, long steamIDLobby, MemorySegment pchKey, MemorySegment pchValue) {
        var mh$ = SteamAPI_ISteamMatchmaking_SetLobbyMemberData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmaking_SetLobbyMemberData", ptr, steamIDLobby, pchKey, pchValue);
            }
            mh$.invokeExact(ptr, steamIDLobby, pchKey, pchValue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmaking_SendLobbyChatMsg {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamMatchmaking_SendLobbyChatMsg"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMatchmaking_SendLobbyChatMsg(ISteamMatchmaking ptr, uint64_steamid steamIDLobby, const void *pvMsgBody, int cubMsgBody)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmaking_SendLobbyChatMsg$descriptor() {
        return SteamAPI_ISteamMatchmaking_SendLobbyChatMsg.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMatchmaking_SendLobbyChatMsg(ISteamMatchmaking ptr, uint64_steamid steamIDLobby, const void *pvMsgBody, int cubMsgBody)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmaking_SendLobbyChatMsg$handle() {
        return SteamAPI_ISteamMatchmaking_SendLobbyChatMsg.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMatchmaking_SendLobbyChatMsg(ISteamMatchmaking ptr, uint64_steamid steamIDLobby, const void *pvMsgBody, int cubMsgBody)
     * }
     */
    public static boolean SteamAPI_ISteamMatchmaking_SendLobbyChatMsg(MemorySegment ptr, long steamIDLobby, MemorySegment pvMsgBody, int cubMsgBody) {
        var mh$ = SteamAPI_ISteamMatchmaking_SendLobbyChatMsg.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmaking_SendLobbyChatMsg", ptr, steamIDLobby, pvMsgBody, cubMsgBody);
            }
            return (boolean)mh$.invokeExact(ptr, steamIDLobby, pvMsgBody, cubMsgBody);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmaking_GetLobbyChatEntry {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamMatchmaking_GetLobbyChatEntry"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamMatchmaking_GetLobbyChatEntry(ISteamMatchmaking ptr, uint64_steamid steamIDLobby, int iChatID, CSteamID *pSteamIDUser, void *pvData, int cubData, EChatEntryType *peChatEntryType)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmaking_GetLobbyChatEntry$descriptor() {
        return SteamAPI_ISteamMatchmaking_GetLobbyChatEntry.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamMatchmaking_GetLobbyChatEntry(ISteamMatchmaking ptr, uint64_steamid steamIDLobby, int iChatID, CSteamID *pSteamIDUser, void *pvData, int cubData, EChatEntryType *peChatEntryType)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmaking_GetLobbyChatEntry$handle() {
        return SteamAPI_ISteamMatchmaking_GetLobbyChatEntry.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int SteamAPI_ISteamMatchmaking_GetLobbyChatEntry(ISteamMatchmaking ptr, uint64_steamid steamIDLobby, int iChatID, CSteamID *pSteamIDUser, void *pvData, int cubData, EChatEntryType *peChatEntryType)
     * }
     */
    public static int SteamAPI_ISteamMatchmaking_GetLobbyChatEntry(MemorySegment ptr, long steamIDLobby, int iChatID, MemorySegment pSteamIDUser, MemorySegment pvData, int cubData, MemorySegment peChatEntryType) {
        var mh$ = SteamAPI_ISteamMatchmaking_GetLobbyChatEntry.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmaking_GetLobbyChatEntry", ptr, steamIDLobby, iChatID, pSteamIDUser, pvData, cubData, peChatEntryType);
            }
            return (int)mh$.invokeExact(ptr, steamIDLobby, iChatID, pSteamIDUser, pvData, cubData, peChatEntryType);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmaking_RequestLobbyData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamMatchmaking_RequestLobbyData"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMatchmaking_RequestLobbyData(ISteamMatchmaking ptr, uint64_steamid steamIDLobby)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmaking_RequestLobbyData$descriptor() {
        return SteamAPI_ISteamMatchmaking_RequestLobbyData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMatchmaking_RequestLobbyData(ISteamMatchmaking ptr, uint64_steamid steamIDLobby)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmaking_RequestLobbyData$handle() {
        return SteamAPI_ISteamMatchmaking_RequestLobbyData.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMatchmaking_RequestLobbyData(ISteamMatchmaking ptr, uint64_steamid steamIDLobby)
     * }
     */
    public static boolean SteamAPI_ISteamMatchmaking_RequestLobbyData(MemorySegment ptr, long steamIDLobby) {
        var mh$ = SteamAPI_ISteamMatchmaking_RequestLobbyData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmaking_RequestLobbyData", ptr, steamIDLobby);
            }
            return (boolean)mh$.invokeExact(ptr, steamIDLobby);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmaking_SetLobbyGameServer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_INT,
            SteamFlat.C_SHORT,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamMatchmaking_SetLobbyGameServer"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmaking_SetLobbyGameServer(ISteamMatchmaking ptr, uint64_steamid steamIDLobby, uint32 unGameServerIP, uint16 unGameServerPort, uint64_steamid steamID)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmaking_SetLobbyGameServer$descriptor() {
        return SteamAPI_ISteamMatchmaking_SetLobbyGameServer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmaking_SetLobbyGameServer(ISteamMatchmaking ptr, uint64_steamid steamIDLobby, uint32 unGameServerIP, uint16 unGameServerPort, uint64_steamid steamID)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmaking_SetLobbyGameServer$handle() {
        return SteamAPI_ISteamMatchmaking_SetLobbyGameServer.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmaking_SetLobbyGameServer(ISteamMatchmaking ptr, uint64_steamid steamIDLobby, uint32 unGameServerIP, uint16 unGameServerPort, uint64_steamid steamID)
     * }
     */
    public static void SteamAPI_ISteamMatchmaking_SetLobbyGameServer(MemorySegment ptr, long steamIDLobby, int unGameServerIP, short unGameServerPort, long steamID) {
        var mh$ = SteamAPI_ISteamMatchmaking_SetLobbyGameServer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmaking_SetLobbyGameServer", ptr, steamIDLobby, unGameServerIP, unGameServerPort, steamID);
            }
            mh$.invokeExact(ptr, steamIDLobby, unGameServerIP, unGameServerPort, steamID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmaking_GetLobbyGameServer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamMatchmaking_GetLobbyGameServer"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMatchmaking_GetLobbyGameServer(ISteamMatchmaking ptr, uint64_steamid steamIDLobby, uint32 *punGameServerIP, uint16 *punGameServerPort, CSteamID *psteamIDGameServer)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmaking_GetLobbyGameServer$descriptor() {
        return SteamAPI_ISteamMatchmaking_GetLobbyGameServer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMatchmaking_GetLobbyGameServer(ISteamMatchmaking ptr, uint64_steamid steamIDLobby, uint32 *punGameServerIP, uint16 *punGameServerPort, CSteamID *psteamIDGameServer)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmaking_GetLobbyGameServer$handle() {
        return SteamAPI_ISteamMatchmaking_GetLobbyGameServer.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMatchmaking_GetLobbyGameServer(ISteamMatchmaking ptr, uint64_steamid steamIDLobby, uint32 *punGameServerIP, uint16 *punGameServerPort, CSteamID *psteamIDGameServer)
     * }
     */
    public static boolean SteamAPI_ISteamMatchmaking_GetLobbyGameServer(MemorySegment ptr, long steamIDLobby, MemorySegment punGameServerIP, MemorySegment punGameServerPort, MemorySegment psteamIDGameServer) {
        var mh$ = SteamAPI_ISteamMatchmaking_GetLobbyGameServer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmaking_GetLobbyGameServer", ptr, steamIDLobby, punGameServerIP, punGameServerPort, psteamIDGameServer);
            }
            return (boolean)mh$.invokeExact(ptr, steamIDLobby, punGameServerIP, punGameServerPort, psteamIDGameServer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmaking_SetLobbyMemberLimit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamMatchmaking_SetLobbyMemberLimit"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMatchmaking_SetLobbyMemberLimit(ISteamMatchmaking ptr, uint64_steamid steamIDLobby, int cMaxMembers)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmaking_SetLobbyMemberLimit$descriptor() {
        return SteamAPI_ISteamMatchmaking_SetLobbyMemberLimit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMatchmaking_SetLobbyMemberLimit(ISteamMatchmaking ptr, uint64_steamid steamIDLobby, int cMaxMembers)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmaking_SetLobbyMemberLimit$handle() {
        return SteamAPI_ISteamMatchmaking_SetLobbyMemberLimit.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMatchmaking_SetLobbyMemberLimit(ISteamMatchmaking ptr, uint64_steamid steamIDLobby, int cMaxMembers)
     * }
     */
    public static boolean SteamAPI_ISteamMatchmaking_SetLobbyMemberLimit(MemorySegment ptr, long steamIDLobby, int cMaxMembers) {
        var mh$ = SteamAPI_ISteamMatchmaking_SetLobbyMemberLimit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmaking_SetLobbyMemberLimit", ptr, steamIDLobby, cMaxMembers);
            }
            return (boolean)mh$.invokeExact(ptr, steamIDLobby, cMaxMembers);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmaking_GetLobbyMemberLimit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamMatchmaking_GetLobbyMemberLimit"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamMatchmaking_GetLobbyMemberLimit(ISteamMatchmaking ptr, uint64_steamid steamIDLobby)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmaking_GetLobbyMemberLimit$descriptor() {
        return SteamAPI_ISteamMatchmaking_GetLobbyMemberLimit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamMatchmaking_GetLobbyMemberLimit(ISteamMatchmaking ptr, uint64_steamid steamIDLobby)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmaking_GetLobbyMemberLimit$handle() {
        return SteamAPI_ISteamMatchmaking_GetLobbyMemberLimit.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int SteamAPI_ISteamMatchmaking_GetLobbyMemberLimit(ISteamMatchmaking ptr, uint64_steamid steamIDLobby)
     * }
     */
    public static int SteamAPI_ISteamMatchmaking_GetLobbyMemberLimit(MemorySegment ptr, long steamIDLobby) {
        var mh$ = SteamAPI_ISteamMatchmaking_GetLobbyMemberLimit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmaking_GetLobbyMemberLimit", ptr, steamIDLobby);
            }
            return (int)mh$.invokeExact(ptr, steamIDLobby);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmaking_SetLobbyType {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamMatchmaking_SetLobbyType"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMatchmaking_SetLobbyType(ISteamMatchmaking ptr, uint64_steamid steamIDLobby, ELobbyType eLobbyType)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmaking_SetLobbyType$descriptor() {
        return SteamAPI_ISteamMatchmaking_SetLobbyType.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMatchmaking_SetLobbyType(ISteamMatchmaking ptr, uint64_steamid steamIDLobby, ELobbyType eLobbyType)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmaking_SetLobbyType$handle() {
        return SteamAPI_ISteamMatchmaking_SetLobbyType.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMatchmaking_SetLobbyType(ISteamMatchmaking ptr, uint64_steamid steamIDLobby, ELobbyType eLobbyType)
     * }
     */
    public static boolean SteamAPI_ISteamMatchmaking_SetLobbyType(MemorySegment ptr, long steamIDLobby, int eLobbyType) {
        var mh$ = SteamAPI_ISteamMatchmaking_SetLobbyType.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmaking_SetLobbyType", ptr, steamIDLobby, eLobbyType);
            }
            return (boolean)mh$.invokeExact(ptr, steamIDLobby, eLobbyType);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmaking_SetLobbyJoinable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamMatchmaking_SetLobbyJoinable"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMatchmaking_SetLobbyJoinable(ISteamMatchmaking ptr, uint64_steamid steamIDLobby, bool bLobbyJoinable)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmaking_SetLobbyJoinable$descriptor() {
        return SteamAPI_ISteamMatchmaking_SetLobbyJoinable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMatchmaking_SetLobbyJoinable(ISteamMatchmaking ptr, uint64_steamid steamIDLobby, bool bLobbyJoinable)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmaking_SetLobbyJoinable$handle() {
        return SteamAPI_ISteamMatchmaking_SetLobbyJoinable.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMatchmaking_SetLobbyJoinable(ISteamMatchmaking ptr, uint64_steamid steamIDLobby, bool bLobbyJoinable)
     * }
     */
    public static boolean SteamAPI_ISteamMatchmaking_SetLobbyJoinable(MemorySegment ptr, long steamIDLobby, boolean bLobbyJoinable) {
        var mh$ = SteamAPI_ISteamMatchmaking_SetLobbyJoinable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmaking_SetLobbyJoinable", ptr, steamIDLobby, bLobbyJoinable);
            }
            return (boolean)mh$.invokeExact(ptr, steamIDLobby, bLobbyJoinable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmaking_GetLobbyOwner {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamMatchmaking_GetLobbyOwner"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint64_steamid SteamAPI_ISteamMatchmaking_GetLobbyOwner(ISteamMatchmaking ptr, uint64_steamid steamIDLobby)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmaking_GetLobbyOwner$descriptor() {
        return SteamAPI_ISteamMatchmaking_GetLobbyOwner.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint64_steamid SteamAPI_ISteamMatchmaking_GetLobbyOwner(ISteamMatchmaking ptr, uint64_steamid steamIDLobby)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmaking_GetLobbyOwner$handle() {
        return SteamAPI_ISteamMatchmaking_GetLobbyOwner.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * uint64_steamid SteamAPI_ISteamMatchmaking_GetLobbyOwner(ISteamMatchmaking ptr, uint64_steamid steamIDLobby)
     * }
     */
    public static long SteamAPI_ISteamMatchmaking_GetLobbyOwner(MemorySegment ptr, long steamIDLobby) {
        var mh$ = SteamAPI_ISteamMatchmaking_GetLobbyOwner.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmaking_GetLobbyOwner", ptr, steamIDLobby);
            }
            return (long)mh$.invokeExact(ptr, steamIDLobby);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmaking_SetLobbyOwner {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamMatchmaking_SetLobbyOwner"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMatchmaking_SetLobbyOwner(ISteamMatchmaking ptr, uint64_steamid steamIDLobby, uint64_steamid steamIDNewOwner)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmaking_SetLobbyOwner$descriptor() {
        return SteamAPI_ISteamMatchmaking_SetLobbyOwner.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMatchmaking_SetLobbyOwner(ISteamMatchmaking ptr, uint64_steamid steamIDLobby, uint64_steamid steamIDNewOwner)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmaking_SetLobbyOwner$handle() {
        return SteamAPI_ISteamMatchmaking_SetLobbyOwner.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMatchmaking_SetLobbyOwner(ISteamMatchmaking ptr, uint64_steamid steamIDLobby, uint64_steamid steamIDNewOwner)
     * }
     */
    public static boolean SteamAPI_ISteamMatchmaking_SetLobbyOwner(MemorySegment ptr, long steamIDLobby, long steamIDNewOwner) {
        var mh$ = SteamAPI_ISteamMatchmaking_SetLobbyOwner.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmaking_SetLobbyOwner", ptr, steamIDLobby, steamIDNewOwner);
            }
            return (boolean)mh$.invokeExact(ptr, steamIDLobby, steamIDNewOwner);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmaking_SetLinkedLobby {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamMatchmaking_SetLinkedLobby"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMatchmaking_SetLinkedLobby(ISteamMatchmaking ptr, uint64_steamid steamIDLobby, uint64_steamid steamIDLobbyDependent)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmaking_SetLinkedLobby$descriptor() {
        return SteamAPI_ISteamMatchmaking_SetLinkedLobby.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMatchmaking_SetLinkedLobby(ISteamMatchmaking ptr, uint64_steamid steamIDLobby, uint64_steamid steamIDLobbyDependent)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmaking_SetLinkedLobby$handle() {
        return SteamAPI_ISteamMatchmaking_SetLinkedLobby.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMatchmaking_SetLinkedLobby(ISteamMatchmaking ptr, uint64_steamid steamIDLobby, uint64_steamid steamIDLobbyDependent)
     * }
     */
    public static boolean SteamAPI_ISteamMatchmaking_SetLinkedLobby(MemorySegment ptr, long steamIDLobby, long steamIDLobbyDependent) {
        var mh$ = SteamAPI_ISteamMatchmaking_SetLinkedLobby.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmaking_SetLinkedLobby", ptr, steamIDLobby, steamIDLobbyDependent);
            }
            return (boolean)mh$.invokeExact(ptr, steamIDLobby, steamIDLobbyDependent);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_SteamMatchmaking_v009 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_SteamMatchmaking_v009"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ISteamMatchmaking SteamAPI_SteamMatchmaking_v009()
     * }
     */
    public static FunctionDescriptor SteamAPI_SteamMatchmaking_v009$descriptor() {
        return SteamAPI_SteamMatchmaking_v009.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ISteamMatchmaking SteamAPI_SteamMatchmaking_v009()
     * }
     */
    public static MethodHandle SteamAPI_SteamMatchmaking_v009$handle() {
        return SteamAPI_SteamMatchmaking_v009.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ISteamMatchmaking SteamAPI_SteamMatchmaking_v009()
     * }
     */
    public static MemorySegment SteamAPI_SteamMatchmaking_v009() {
        var mh$ = SteamAPI_SteamMatchmaking_v009.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_SteamMatchmaking_v009");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmakingServerListResponse_ServerResponded {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamMatchmakingServerListResponse_ServerResponded"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmakingServerListResponse_ServerResponded(ISteamMatchmakingServerListResponse ptr, HServerListRequest hRequest, int iServer)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmakingServerListResponse_ServerResponded$descriptor() {
        return SteamAPI_ISteamMatchmakingServerListResponse_ServerResponded.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmakingServerListResponse_ServerResponded(ISteamMatchmakingServerListResponse ptr, HServerListRequest hRequest, int iServer)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmakingServerListResponse_ServerResponded$handle() {
        return SteamAPI_ISteamMatchmakingServerListResponse_ServerResponded.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmakingServerListResponse_ServerResponded(ISteamMatchmakingServerListResponse ptr, HServerListRequest hRequest, int iServer)
     * }
     */
    public static void SteamAPI_ISteamMatchmakingServerListResponse_ServerResponded(MemorySegment ptr, MemorySegment hRequest, int iServer) {
        var mh$ = SteamAPI_ISteamMatchmakingServerListResponse_ServerResponded.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmakingServerListResponse_ServerResponded", ptr, hRequest, iServer);
            }
            mh$.invokeExact(ptr, hRequest, iServer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmakingServerListResponse_ServerFailedToRespond {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamMatchmakingServerListResponse_ServerFailedToRespond"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmakingServerListResponse_ServerFailedToRespond(ISteamMatchmakingServerListResponse ptr, HServerListRequest hRequest, int iServer)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmakingServerListResponse_ServerFailedToRespond$descriptor() {
        return SteamAPI_ISteamMatchmakingServerListResponse_ServerFailedToRespond.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmakingServerListResponse_ServerFailedToRespond(ISteamMatchmakingServerListResponse ptr, HServerListRequest hRequest, int iServer)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmakingServerListResponse_ServerFailedToRespond$handle() {
        return SteamAPI_ISteamMatchmakingServerListResponse_ServerFailedToRespond.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmakingServerListResponse_ServerFailedToRespond(ISteamMatchmakingServerListResponse ptr, HServerListRequest hRequest, int iServer)
     * }
     */
    public static void SteamAPI_ISteamMatchmakingServerListResponse_ServerFailedToRespond(MemorySegment ptr, MemorySegment hRequest, int iServer) {
        var mh$ = SteamAPI_ISteamMatchmakingServerListResponse_ServerFailedToRespond.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmakingServerListResponse_ServerFailedToRespond", ptr, hRequest, iServer);
            }
            mh$.invokeExact(ptr, hRequest, iServer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmakingServerListResponse_RefreshComplete {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamMatchmakingServerListResponse_RefreshComplete"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmakingServerListResponse_RefreshComplete(ISteamMatchmakingServerListResponse ptr, HServerListRequest hRequest, EMatchMakingServerResponse response)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmakingServerListResponse_RefreshComplete$descriptor() {
        return SteamAPI_ISteamMatchmakingServerListResponse_RefreshComplete.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmakingServerListResponse_RefreshComplete(ISteamMatchmakingServerListResponse ptr, HServerListRequest hRequest, EMatchMakingServerResponse response)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmakingServerListResponse_RefreshComplete$handle() {
        return SteamAPI_ISteamMatchmakingServerListResponse_RefreshComplete.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmakingServerListResponse_RefreshComplete(ISteamMatchmakingServerListResponse ptr, HServerListRequest hRequest, EMatchMakingServerResponse response)
     * }
     */
    public static void SteamAPI_ISteamMatchmakingServerListResponse_RefreshComplete(MemorySegment ptr, MemorySegment hRequest, int response) {
        var mh$ = SteamAPI_ISteamMatchmakingServerListResponse_RefreshComplete.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmakingServerListResponse_RefreshComplete", ptr, hRequest, response);
            }
            mh$.invokeExact(ptr, hRequest, response);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmakingPingResponse_ServerResponded {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamMatchmakingPingResponse_ServerResponded"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmakingPingResponse_ServerResponded(ISteamMatchmakingPingResponse ptr, gameserveritem_t *server)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmakingPingResponse_ServerResponded$descriptor() {
        return SteamAPI_ISteamMatchmakingPingResponse_ServerResponded.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmakingPingResponse_ServerResponded(ISteamMatchmakingPingResponse ptr, gameserveritem_t *server)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmakingPingResponse_ServerResponded$handle() {
        return SteamAPI_ISteamMatchmakingPingResponse_ServerResponded.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmakingPingResponse_ServerResponded(ISteamMatchmakingPingResponse ptr, gameserveritem_t *server)
     * }
     */
    public static void SteamAPI_ISteamMatchmakingPingResponse_ServerResponded(MemorySegment ptr, MemorySegment server) {
        var mh$ = SteamAPI_ISteamMatchmakingPingResponse_ServerResponded.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmakingPingResponse_ServerResponded", ptr, server);
            }
            mh$.invokeExact(ptr, server);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmakingPingResponse_ServerFailedToRespond {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamMatchmakingPingResponse_ServerFailedToRespond"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmakingPingResponse_ServerFailedToRespond(ISteamMatchmakingPingResponse ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmakingPingResponse_ServerFailedToRespond$descriptor() {
        return SteamAPI_ISteamMatchmakingPingResponse_ServerFailedToRespond.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmakingPingResponse_ServerFailedToRespond(ISteamMatchmakingPingResponse ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmakingPingResponse_ServerFailedToRespond$handle() {
        return SteamAPI_ISteamMatchmakingPingResponse_ServerFailedToRespond.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmakingPingResponse_ServerFailedToRespond(ISteamMatchmakingPingResponse ptr)
     * }
     */
    public static void SteamAPI_ISteamMatchmakingPingResponse_ServerFailedToRespond(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamMatchmakingPingResponse_ServerFailedToRespond.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmakingPingResponse_ServerFailedToRespond", ptr);
            }
            mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmakingPlayersResponse_AddPlayerToList {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_FLOAT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamMatchmakingPlayersResponse_AddPlayerToList"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmakingPlayersResponse_AddPlayerToList(ISteamMatchmakingPlayersResponse ptr, const char *pchName, int nScore, float flTimePlayed)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmakingPlayersResponse_AddPlayerToList$descriptor() {
        return SteamAPI_ISteamMatchmakingPlayersResponse_AddPlayerToList.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmakingPlayersResponse_AddPlayerToList(ISteamMatchmakingPlayersResponse ptr, const char *pchName, int nScore, float flTimePlayed)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmakingPlayersResponse_AddPlayerToList$handle() {
        return SteamAPI_ISteamMatchmakingPlayersResponse_AddPlayerToList.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmakingPlayersResponse_AddPlayerToList(ISteamMatchmakingPlayersResponse ptr, const char *pchName, int nScore, float flTimePlayed)
     * }
     */
    public static void SteamAPI_ISteamMatchmakingPlayersResponse_AddPlayerToList(MemorySegment ptr, MemorySegment pchName, int nScore, float flTimePlayed) {
        var mh$ = SteamAPI_ISteamMatchmakingPlayersResponse_AddPlayerToList.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmakingPlayersResponse_AddPlayerToList", ptr, pchName, nScore, flTimePlayed);
            }
            mh$.invokeExact(ptr, pchName, nScore, flTimePlayed);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmakingPlayersResponse_PlayersFailedToRespond {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamMatchmakingPlayersResponse_PlayersFailedToRespond"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmakingPlayersResponse_PlayersFailedToRespond(ISteamMatchmakingPlayersResponse ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmakingPlayersResponse_PlayersFailedToRespond$descriptor() {
        return SteamAPI_ISteamMatchmakingPlayersResponse_PlayersFailedToRespond.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmakingPlayersResponse_PlayersFailedToRespond(ISteamMatchmakingPlayersResponse ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmakingPlayersResponse_PlayersFailedToRespond$handle() {
        return SteamAPI_ISteamMatchmakingPlayersResponse_PlayersFailedToRespond.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmakingPlayersResponse_PlayersFailedToRespond(ISteamMatchmakingPlayersResponse ptr)
     * }
     */
    public static void SteamAPI_ISteamMatchmakingPlayersResponse_PlayersFailedToRespond(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamMatchmakingPlayersResponse_PlayersFailedToRespond.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmakingPlayersResponse_PlayersFailedToRespond", ptr);
            }
            mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmakingPlayersResponse_PlayersRefreshComplete {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamMatchmakingPlayersResponse_PlayersRefreshComplete"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmakingPlayersResponse_PlayersRefreshComplete(ISteamMatchmakingPlayersResponse ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmakingPlayersResponse_PlayersRefreshComplete$descriptor() {
        return SteamAPI_ISteamMatchmakingPlayersResponse_PlayersRefreshComplete.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmakingPlayersResponse_PlayersRefreshComplete(ISteamMatchmakingPlayersResponse ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmakingPlayersResponse_PlayersRefreshComplete$handle() {
        return SteamAPI_ISteamMatchmakingPlayersResponse_PlayersRefreshComplete.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmakingPlayersResponse_PlayersRefreshComplete(ISteamMatchmakingPlayersResponse ptr)
     * }
     */
    public static void SteamAPI_ISteamMatchmakingPlayersResponse_PlayersRefreshComplete(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamMatchmakingPlayersResponse_PlayersRefreshComplete.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmakingPlayersResponse_PlayersRefreshComplete", ptr);
            }
            mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmakingRulesResponse_RulesResponded {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamMatchmakingRulesResponse_RulesResponded"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmakingRulesResponse_RulesResponded(ISteamMatchmakingRulesResponse ptr, const char *pchRule, const char *pchValue)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmakingRulesResponse_RulesResponded$descriptor() {
        return SteamAPI_ISteamMatchmakingRulesResponse_RulesResponded.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmakingRulesResponse_RulesResponded(ISteamMatchmakingRulesResponse ptr, const char *pchRule, const char *pchValue)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmakingRulesResponse_RulesResponded$handle() {
        return SteamAPI_ISteamMatchmakingRulesResponse_RulesResponded.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmakingRulesResponse_RulesResponded(ISteamMatchmakingRulesResponse ptr, const char *pchRule, const char *pchValue)
     * }
     */
    public static void SteamAPI_ISteamMatchmakingRulesResponse_RulesResponded(MemorySegment ptr, MemorySegment pchRule, MemorySegment pchValue) {
        var mh$ = SteamAPI_ISteamMatchmakingRulesResponse_RulesResponded.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmakingRulesResponse_RulesResponded", ptr, pchRule, pchValue);
            }
            mh$.invokeExact(ptr, pchRule, pchValue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmakingRulesResponse_RulesFailedToRespond {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamMatchmakingRulesResponse_RulesFailedToRespond"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmakingRulesResponse_RulesFailedToRespond(ISteamMatchmakingRulesResponse ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmakingRulesResponse_RulesFailedToRespond$descriptor() {
        return SteamAPI_ISteamMatchmakingRulesResponse_RulesFailedToRespond.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmakingRulesResponse_RulesFailedToRespond(ISteamMatchmakingRulesResponse ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmakingRulesResponse_RulesFailedToRespond$handle() {
        return SteamAPI_ISteamMatchmakingRulesResponse_RulesFailedToRespond.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmakingRulesResponse_RulesFailedToRespond(ISteamMatchmakingRulesResponse ptr)
     * }
     */
    public static void SteamAPI_ISteamMatchmakingRulesResponse_RulesFailedToRespond(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamMatchmakingRulesResponse_RulesFailedToRespond.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmakingRulesResponse_RulesFailedToRespond", ptr);
            }
            mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmakingRulesResponse_RulesRefreshComplete {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamMatchmakingRulesResponse_RulesRefreshComplete"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmakingRulesResponse_RulesRefreshComplete(ISteamMatchmakingRulesResponse ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmakingRulesResponse_RulesRefreshComplete$descriptor() {
        return SteamAPI_ISteamMatchmakingRulesResponse_RulesRefreshComplete.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmakingRulesResponse_RulesRefreshComplete(ISteamMatchmakingRulesResponse ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmakingRulesResponse_RulesRefreshComplete$handle() {
        return SteamAPI_ISteamMatchmakingRulesResponse_RulesRefreshComplete.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmakingRulesResponse_RulesRefreshComplete(ISteamMatchmakingRulesResponse ptr)
     * }
     */
    public static void SteamAPI_ISteamMatchmakingRulesResponse_RulesRefreshComplete(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamMatchmakingRulesResponse_RulesRefreshComplete.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmakingRulesResponse_RulesRefreshComplete", ptr);
            }
            mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmakingServers_RequestInternetServerList {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamMatchmakingServers_RequestInternetServerList"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestInternetServerList(ISteamMatchmakingServers ptr, AppId_t iApp, MatchMakingKeyValuePair_t **ppchFilters, uint32 nFilters, ISteamMatchmakingServerListResponse *pRequestServersResponse)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmakingServers_RequestInternetServerList$descriptor() {
        return SteamAPI_ISteamMatchmakingServers_RequestInternetServerList.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestInternetServerList(ISteamMatchmakingServers ptr, AppId_t iApp, MatchMakingKeyValuePair_t **ppchFilters, uint32 nFilters, ISteamMatchmakingServerListResponse *pRequestServersResponse)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmakingServers_RequestInternetServerList$handle() {
        return SteamAPI_ISteamMatchmakingServers_RequestInternetServerList.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestInternetServerList(ISteamMatchmakingServers ptr, AppId_t iApp, MatchMakingKeyValuePair_t **ppchFilters, uint32 nFilters, ISteamMatchmakingServerListResponse *pRequestServersResponse)
     * }
     */
    public static MemorySegment SteamAPI_ISteamMatchmakingServers_RequestInternetServerList(MemorySegment ptr, int iApp, MemorySegment ppchFilters, int nFilters, MemorySegment pRequestServersResponse) {
        var mh$ = SteamAPI_ISteamMatchmakingServers_RequestInternetServerList.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmakingServers_RequestInternetServerList", ptr, iApp, ppchFilters, nFilters, pRequestServersResponse);
            }
            return (MemorySegment)mh$.invokeExact(ptr, iApp, ppchFilters, nFilters, pRequestServersResponse);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmakingServers_RequestLANServerList {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamMatchmakingServers_RequestLANServerList"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestLANServerList(ISteamMatchmakingServers ptr, AppId_t iApp, ISteamMatchmakingServerListResponse *pRequestServersResponse)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmakingServers_RequestLANServerList$descriptor() {
        return SteamAPI_ISteamMatchmakingServers_RequestLANServerList.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestLANServerList(ISteamMatchmakingServers ptr, AppId_t iApp, ISteamMatchmakingServerListResponse *pRequestServersResponse)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmakingServers_RequestLANServerList$handle() {
        return SteamAPI_ISteamMatchmakingServers_RequestLANServerList.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestLANServerList(ISteamMatchmakingServers ptr, AppId_t iApp, ISteamMatchmakingServerListResponse *pRequestServersResponse)
     * }
     */
    public static MemorySegment SteamAPI_ISteamMatchmakingServers_RequestLANServerList(MemorySegment ptr, int iApp, MemorySegment pRequestServersResponse) {
        var mh$ = SteamAPI_ISteamMatchmakingServers_RequestLANServerList.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmakingServers_RequestLANServerList", ptr, iApp, pRequestServersResponse);
            }
            return (MemorySegment)mh$.invokeExact(ptr, iApp, pRequestServersResponse);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmakingServers_RequestFriendsServerList {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamMatchmakingServers_RequestFriendsServerList"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestFriendsServerList(ISteamMatchmakingServers ptr, AppId_t iApp, MatchMakingKeyValuePair_t **ppchFilters, uint32 nFilters, ISteamMatchmakingServerListResponse *pRequestServersResponse)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmakingServers_RequestFriendsServerList$descriptor() {
        return SteamAPI_ISteamMatchmakingServers_RequestFriendsServerList.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestFriendsServerList(ISteamMatchmakingServers ptr, AppId_t iApp, MatchMakingKeyValuePair_t **ppchFilters, uint32 nFilters, ISteamMatchmakingServerListResponse *pRequestServersResponse)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmakingServers_RequestFriendsServerList$handle() {
        return SteamAPI_ISteamMatchmakingServers_RequestFriendsServerList.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestFriendsServerList(ISteamMatchmakingServers ptr, AppId_t iApp, MatchMakingKeyValuePair_t **ppchFilters, uint32 nFilters, ISteamMatchmakingServerListResponse *pRequestServersResponse)
     * }
     */
    public static MemorySegment SteamAPI_ISteamMatchmakingServers_RequestFriendsServerList(MemorySegment ptr, int iApp, MemorySegment ppchFilters, int nFilters, MemorySegment pRequestServersResponse) {
        var mh$ = SteamAPI_ISteamMatchmakingServers_RequestFriendsServerList.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmakingServers_RequestFriendsServerList", ptr, iApp, ppchFilters, nFilters, pRequestServersResponse);
            }
            return (MemorySegment)mh$.invokeExact(ptr, iApp, ppchFilters, nFilters, pRequestServersResponse);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmakingServers_RequestFavoritesServerList {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamMatchmakingServers_RequestFavoritesServerList"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestFavoritesServerList(ISteamMatchmakingServers ptr, AppId_t iApp, MatchMakingKeyValuePair_t **ppchFilters, uint32 nFilters, ISteamMatchmakingServerListResponse *pRequestServersResponse)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmakingServers_RequestFavoritesServerList$descriptor() {
        return SteamAPI_ISteamMatchmakingServers_RequestFavoritesServerList.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestFavoritesServerList(ISteamMatchmakingServers ptr, AppId_t iApp, MatchMakingKeyValuePair_t **ppchFilters, uint32 nFilters, ISteamMatchmakingServerListResponse *pRequestServersResponse)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmakingServers_RequestFavoritesServerList$handle() {
        return SteamAPI_ISteamMatchmakingServers_RequestFavoritesServerList.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestFavoritesServerList(ISteamMatchmakingServers ptr, AppId_t iApp, MatchMakingKeyValuePair_t **ppchFilters, uint32 nFilters, ISteamMatchmakingServerListResponse *pRequestServersResponse)
     * }
     */
    public static MemorySegment SteamAPI_ISteamMatchmakingServers_RequestFavoritesServerList(MemorySegment ptr, int iApp, MemorySegment ppchFilters, int nFilters, MemorySegment pRequestServersResponse) {
        var mh$ = SteamAPI_ISteamMatchmakingServers_RequestFavoritesServerList.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmakingServers_RequestFavoritesServerList", ptr, iApp, ppchFilters, nFilters, pRequestServersResponse);
            }
            return (MemorySegment)mh$.invokeExact(ptr, iApp, ppchFilters, nFilters, pRequestServersResponse);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmakingServers_RequestHistoryServerList {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamMatchmakingServers_RequestHistoryServerList"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestHistoryServerList(ISteamMatchmakingServers ptr, AppId_t iApp, MatchMakingKeyValuePair_t **ppchFilters, uint32 nFilters, ISteamMatchmakingServerListResponse *pRequestServersResponse)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmakingServers_RequestHistoryServerList$descriptor() {
        return SteamAPI_ISteamMatchmakingServers_RequestHistoryServerList.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestHistoryServerList(ISteamMatchmakingServers ptr, AppId_t iApp, MatchMakingKeyValuePair_t **ppchFilters, uint32 nFilters, ISteamMatchmakingServerListResponse *pRequestServersResponse)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmakingServers_RequestHistoryServerList$handle() {
        return SteamAPI_ISteamMatchmakingServers_RequestHistoryServerList.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestHistoryServerList(ISteamMatchmakingServers ptr, AppId_t iApp, MatchMakingKeyValuePair_t **ppchFilters, uint32 nFilters, ISteamMatchmakingServerListResponse *pRequestServersResponse)
     * }
     */
    public static MemorySegment SteamAPI_ISteamMatchmakingServers_RequestHistoryServerList(MemorySegment ptr, int iApp, MemorySegment ppchFilters, int nFilters, MemorySegment pRequestServersResponse) {
        var mh$ = SteamAPI_ISteamMatchmakingServers_RequestHistoryServerList.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmakingServers_RequestHistoryServerList", ptr, iApp, ppchFilters, nFilters, pRequestServersResponse);
            }
            return (MemorySegment)mh$.invokeExact(ptr, iApp, ppchFilters, nFilters, pRequestServersResponse);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmakingServers_RequestSpectatorServerList {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamMatchmakingServers_RequestSpectatorServerList"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestSpectatorServerList(ISteamMatchmakingServers ptr, AppId_t iApp, MatchMakingKeyValuePair_t **ppchFilters, uint32 nFilters, ISteamMatchmakingServerListResponse *pRequestServersResponse)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmakingServers_RequestSpectatorServerList$descriptor() {
        return SteamAPI_ISteamMatchmakingServers_RequestSpectatorServerList.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestSpectatorServerList(ISteamMatchmakingServers ptr, AppId_t iApp, MatchMakingKeyValuePair_t **ppchFilters, uint32 nFilters, ISteamMatchmakingServerListResponse *pRequestServersResponse)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmakingServers_RequestSpectatorServerList$handle() {
        return SteamAPI_ISteamMatchmakingServers_RequestSpectatorServerList.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestSpectatorServerList(ISteamMatchmakingServers ptr, AppId_t iApp, MatchMakingKeyValuePair_t **ppchFilters, uint32 nFilters, ISteamMatchmakingServerListResponse *pRequestServersResponse)
     * }
     */
    public static MemorySegment SteamAPI_ISteamMatchmakingServers_RequestSpectatorServerList(MemorySegment ptr, int iApp, MemorySegment ppchFilters, int nFilters, MemorySegment pRequestServersResponse) {
        var mh$ = SteamAPI_ISteamMatchmakingServers_RequestSpectatorServerList.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmakingServers_RequestSpectatorServerList", ptr, iApp, ppchFilters, nFilters, pRequestServersResponse);
            }
            return (MemorySegment)mh$.invokeExact(ptr, iApp, ppchFilters, nFilters, pRequestServersResponse);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmakingServers_ReleaseRequest {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamMatchmakingServers_ReleaseRequest"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmakingServers_ReleaseRequest(ISteamMatchmakingServers ptr, HServerListRequest hServerListRequest)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmakingServers_ReleaseRequest$descriptor() {
        return SteamAPI_ISteamMatchmakingServers_ReleaseRequest.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmakingServers_ReleaseRequest(ISteamMatchmakingServers ptr, HServerListRequest hServerListRequest)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmakingServers_ReleaseRequest$handle() {
        return SteamAPI_ISteamMatchmakingServers_ReleaseRequest.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmakingServers_ReleaseRequest(ISteamMatchmakingServers ptr, HServerListRequest hServerListRequest)
     * }
     */
    public static void SteamAPI_ISteamMatchmakingServers_ReleaseRequest(MemorySegment ptr, MemorySegment hServerListRequest) {
        var mh$ = SteamAPI_ISteamMatchmakingServers_ReleaseRequest.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmakingServers_ReleaseRequest", ptr, hServerListRequest);
            }
            mh$.invokeExact(ptr, hServerListRequest);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmakingServers_GetServerDetails {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamMatchmakingServers_GetServerDetails"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * gameserveritem_t *SteamAPI_ISteamMatchmakingServers_GetServerDetails(ISteamMatchmakingServers ptr, HServerListRequest hRequest, int iServer)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmakingServers_GetServerDetails$descriptor() {
        return SteamAPI_ISteamMatchmakingServers_GetServerDetails.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * gameserveritem_t *SteamAPI_ISteamMatchmakingServers_GetServerDetails(ISteamMatchmakingServers ptr, HServerListRequest hRequest, int iServer)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmakingServers_GetServerDetails$handle() {
        return SteamAPI_ISteamMatchmakingServers_GetServerDetails.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * gameserveritem_t *SteamAPI_ISteamMatchmakingServers_GetServerDetails(ISteamMatchmakingServers ptr, HServerListRequest hRequest, int iServer)
     * }
     */
    public static MemorySegment SteamAPI_ISteamMatchmakingServers_GetServerDetails(MemorySegment ptr, MemorySegment hRequest, int iServer) {
        var mh$ = SteamAPI_ISteamMatchmakingServers_GetServerDetails.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmakingServers_GetServerDetails", ptr, hRequest, iServer);
            }
            return (MemorySegment)mh$.invokeExact(ptr, hRequest, iServer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmakingServers_CancelQuery {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamMatchmakingServers_CancelQuery"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmakingServers_CancelQuery(ISteamMatchmakingServers ptr, HServerListRequest hRequest)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmakingServers_CancelQuery$descriptor() {
        return SteamAPI_ISteamMatchmakingServers_CancelQuery.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmakingServers_CancelQuery(ISteamMatchmakingServers ptr, HServerListRequest hRequest)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmakingServers_CancelQuery$handle() {
        return SteamAPI_ISteamMatchmakingServers_CancelQuery.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmakingServers_CancelQuery(ISteamMatchmakingServers ptr, HServerListRequest hRequest)
     * }
     */
    public static void SteamAPI_ISteamMatchmakingServers_CancelQuery(MemorySegment ptr, MemorySegment hRequest) {
        var mh$ = SteamAPI_ISteamMatchmakingServers_CancelQuery.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmakingServers_CancelQuery", ptr, hRequest);
            }
            mh$.invokeExact(ptr, hRequest);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmakingServers_RefreshQuery {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamMatchmakingServers_RefreshQuery"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmakingServers_RefreshQuery(ISteamMatchmakingServers ptr, HServerListRequest hRequest)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmakingServers_RefreshQuery$descriptor() {
        return SteamAPI_ISteamMatchmakingServers_RefreshQuery.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmakingServers_RefreshQuery(ISteamMatchmakingServers ptr, HServerListRequest hRequest)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmakingServers_RefreshQuery$handle() {
        return SteamAPI_ISteamMatchmakingServers_RefreshQuery.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmakingServers_RefreshQuery(ISteamMatchmakingServers ptr, HServerListRequest hRequest)
     * }
     */
    public static void SteamAPI_ISteamMatchmakingServers_RefreshQuery(MemorySegment ptr, MemorySegment hRequest) {
        var mh$ = SteamAPI_ISteamMatchmakingServers_RefreshQuery.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmakingServers_RefreshQuery", ptr, hRequest);
            }
            mh$.invokeExact(ptr, hRequest);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmakingServers_IsRefreshing {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamMatchmakingServers_IsRefreshing"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMatchmakingServers_IsRefreshing(ISteamMatchmakingServers ptr, HServerListRequest hRequest)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmakingServers_IsRefreshing$descriptor() {
        return SteamAPI_ISteamMatchmakingServers_IsRefreshing.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMatchmakingServers_IsRefreshing(ISteamMatchmakingServers ptr, HServerListRequest hRequest)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmakingServers_IsRefreshing$handle() {
        return SteamAPI_ISteamMatchmakingServers_IsRefreshing.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMatchmakingServers_IsRefreshing(ISteamMatchmakingServers ptr, HServerListRequest hRequest)
     * }
     */
    public static boolean SteamAPI_ISteamMatchmakingServers_IsRefreshing(MemorySegment ptr, MemorySegment hRequest) {
        var mh$ = SteamAPI_ISteamMatchmakingServers_IsRefreshing.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmakingServers_IsRefreshing", ptr, hRequest);
            }
            return (boolean)mh$.invokeExact(ptr, hRequest);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmakingServers_GetServerCount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamMatchmakingServers_GetServerCount"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamMatchmakingServers_GetServerCount(ISteamMatchmakingServers ptr, HServerListRequest hRequest)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmakingServers_GetServerCount$descriptor() {
        return SteamAPI_ISteamMatchmakingServers_GetServerCount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamMatchmakingServers_GetServerCount(ISteamMatchmakingServers ptr, HServerListRequest hRequest)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmakingServers_GetServerCount$handle() {
        return SteamAPI_ISteamMatchmakingServers_GetServerCount.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int SteamAPI_ISteamMatchmakingServers_GetServerCount(ISteamMatchmakingServers ptr, HServerListRequest hRequest)
     * }
     */
    public static int SteamAPI_ISteamMatchmakingServers_GetServerCount(MemorySegment ptr, MemorySegment hRequest) {
        var mh$ = SteamAPI_ISteamMatchmakingServers_GetServerCount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmakingServers_GetServerCount", ptr, hRequest);
            }
            return (int)mh$.invokeExact(ptr, hRequest);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmakingServers_RefreshServer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamMatchmakingServers_RefreshServer"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmakingServers_RefreshServer(ISteamMatchmakingServers ptr, HServerListRequest hRequest, int iServer)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmakingServers_RefreshServer$descriptor() {
        return SteamAPI_ISteamMatchmakingServers_RefreshServer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmakingServers_RefreshServer(ISteamMatchmakingServers ptr, HServerListRequest hRequest, int iServer)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmakingServers_RefreshServer$handle() {
        return SteamAPI_ISteamMatchmakingServers_RefreshServer.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmakingServers_RefreshServer(ISteamMatchmakingServers ptr, HServerListRequest hRequest, int iServer)
     * }
     */
    public static void SteamAPI_ISteamMatchmakingServers_RefreshServer(MemorySegment ptr, MemorySegment hRequest, int iServer) {
        var mh$ = SteamAPI_ISteamMatchmakingServers_RefreshServer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmakingServers_RefreshServer", ptr, hRequest, iServer);
            }
            mh$.invokeExact(ptr, hRequest, iServer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmakingServers_PingServer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_SHORT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamMatchmakingServers_PingServer"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HServerQuery SteamAPI_ISteamMatchmakingServers_PingServer(ISteamMatchmakingServers ptr, uint32 unIP, uint16 usPort, ISteamMatchmakingPingResponse *pRequestServersResponse)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmakingServers_PingServer$descriptor() {
        return SteamAPI_ISteamMatchmakingServers_PingServer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HServerQuery SteamAPI_ISteamMatchmakingServers_PingServer(ISteamMatchmakingServers ptr, uint32 unIP, uint16 usPort, ISteamMatchmakingPingResponse *pRequestServersResponse)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmakingServers_PingServer$handle() {
        return SteamAPI_ISteamMatchmakingServers_PingServer.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HServerQuery SteamAPI_ISteamMatchmakingServers_PingServer(ISteamMatchmakingServers ptr, uint32 unIP, uint16 usPort, ISteamMatchmakingPingResponse *pRequestServersResponse)
     * }
     */
    public static int SteamAPI_ISteamMatchmakingServers_PingServer(MemorySegment ptr, int unIP, short usPort, MemorySegment pRequestServersResponse) {
        var mh$ = SteamAPI_ISteamMatchmakingServers_PingServer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmakingServers_PingServer", ptr, unIP, usPort, pRequestServersResponse);
            }
            return (int)mh$.invokeExact(ptr, unIP, usPort, pRequestServersResponse);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmakingServers_PlayerDetails {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_SHORT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamMatchmakingServers_PlayerDetails"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HServerQuery SteamAPI_ISteamMatchmakingServers_PlayerDetails(ISteamMatchmakingServers ptr, uint32 unIP, uint16 usPort, ISteamMatchmakingPlayersResponse *pRequestServersResponse)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmakingServers_PlayerDetails$descriptor() {
        return SteamAPI_ISteamMatchmakingServers_PlayerDetails.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HServerQuery SteamAPI_ISteamMatchmakingServers_PlayerDetails(ISteamMatchmakingServers ptr, uint32 unIP, uint16 usPort, ISteamMatchmakingPlayersResponse *pRequestServersResponse)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmakingServers_PlayerDetails$handle() {
        return SteamAPI_ISteamMatchmakingServers_PlayerDetails.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HServerQuery SteamAPI_ISteamMatchmakingServers_PlayerDetails(ISteamMatchmakingServers ptr, uint32 unIP, uint16 usPort, ISteamMatchmakingPlayersResponse *pRequestServersResponse)
     * }
     */
    public static int SteamAPI_ISteamMatchmakingServers_PlayerDetails(MemorySegment ptr, int unIP, short usPort, MemorySegment pRequestServersResponse) {
        var mh$ = SteamAPI_ISteamMatchmakingServers_PlayerDetails.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmakingServers_PlayerDetails", ptr, unIP, usPort, pRequestServersResponse);
            }
            return (int)mh$.invokeExact(ptr, unIP, usPort, pRequestServersResponse);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmakingServers_ServerRules {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_SHORT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamMatchmakingServers_ServerRules"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HServerQuery SteamAPI_ISteamMatchmakingServers_ServerRules(ISteamMatchmakingServers ptr, uint32 unIP, uint16 usPort, ISteamMatchmakingRulesResponse *pRequestServersResponse)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmakingServers_ServerRules$descriptor() {
        return SteamAPI_ISteamMatchmakingServers_ServerRules.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HServerQuery SteamAPI_ISteamMatchmakingServers_ServerRules(ISteamMatchmakingServers ptr, uint32 unIP, uint16 usPort, ISteamMatchmakingRulesResponse *pRequestServersResponse)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmakingServers_ServerRules$handle() {
        return SteamAPI_ISteamMatchmakingServers_ServerRules.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HServerQuery SteamAPI_ISteamMatchmakingServers_ServerRules(ISteamMatchmakingServers ptr, uint32 unIP, uint16 usPort, ISteamMatchmakingRulesResponse *pRequestServersResponse)
     * }
     */
    public static int SteamAPI_ISteamMatchmakingServers_ServerRules(MemorySegment ptr, int unIP, short usPort, MemorySegment pRequestServersResponse) {
        var mh$ = SteamAPI_ISteamMatchmakingServers_ServerRules.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmakingServers_ServerRules", ptr, unIP, usPort, pRequestServersResponse);
            }
            return (int)mh$.invokeExact(ptr, unIP, usPort, pRequestServersResponse);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmakingServers_CancelServerQuery {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamMatchmakingServers_CancelServerQuery"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmakingServers_CancelServerQuery(ISteamMatchmakingServers ptr, HServerQuery hServerQuery)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmakingServers_CancelServerQuery$descriptor() {
        return SteamAPI_ISteamMatchmakingServers_CancelServerQuery.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmakingServers_CancelServerQuery(ISteamMatchmakingServers ptr, HServerQuery hServerQuery)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmakingServers_CancelServerQuery$handle() {
        return SteamAPI_ISteamMatchmakingServers_CancelServerQuery.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmakingServers_CancelServerQuery(ISteamMatchmakingServers ptr, HServerQuery hServerQuery)
     * }
     */
    public static void SteamAPI_ISteamMatchmakingServers_CancelServerQuery(MemorySegment ptr, int hServerQuery) {
        var mh$ = SteamAPI_ISteamMatchmakingServers_CancelServerQuery.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmakingServers_CancelServerQuery", ptr, hServerQuery);
            }
            mh$.invokeExact(ptr, hServerQuery);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_SteamMatchmakingServers_v002 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_SteamMatchmakingServers_v002"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ISteamMatchmakingServers SteamAPI_SteamMatchmakingServers_v002()
     * }
     */
    public static FunctionDescriptor SteamAPI_SteamMatchmakingServers_v002$descriptor() {
        return SteamAPI_SteamMatchmakingServers_v002.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ISteamMatchmakingServers SteamAPI_SteamMatchmakingServers_v002()
     * }
     */
    public static MethodHandle SteamAPI_SteamMatchmakingServers_v002$handle() {
        return SteamAPI_SteamMatchmakingServers_v002.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ISteamMatchmakingServers SteamAPI_SteamMatchmakingServers_v002()
     * }
     */
    public static MemorySegment SteamAPI_SteamMatchmakingServers_v002() {
        var mh$ = SteamAPI_SteamMatchmakingServers_v002.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_SteamMatchmakingServers_v002");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameSearch_AddGameSearchParams {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamGameSearch_AddGameSearchParams"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * EGameSearchErrorCode_t SteamAPI_ISteamGameSearch_AddGameSearchParams(ISteamGameSearch ptr, const char *pchKeyToFind, const char *pchValuesToFind)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameSearch_AddGameSearchParams$descriptor() {
        return SteamAPI_ISteamGameSearch_AddGameSearchParams.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * EGameSearchErrorCode_t SteamAPI_ISteamGameSearch_AddGameSearchParams(ISteamGameSearch ptr, const char *pchKeyToFind, const char *pchValuesToFind)
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameSearch_AddGameSearchParams$handle() {
        return SteamAPI_ISteamGameSearch_AddGameSearchParams.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * EGameSearchErrorCode_t SteamAPI_ISteamGameSearch_AddGameSearchParams(ISteamGameSearch ptr, const char *pchKeyToFind, const char *pchValuesToFind)
     * }
     */
    public static int SteamAPI_ISteamGameSearch_AddGameSearchParams(MemorySegment ptr, MemorySegment pchKeyToFind, MemorySegment pchValuesToFind) {
        var mh$ = SteamAPI_ISteamGameSearch_AddGameSearchParams.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameSearch_AddGameSearchParams", ptr, pchKeyToFind, pchValuesToFind);
            }
            return (int)mh$.invokeExact(ptr, pchKeyToFind, pchValuesToFind);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameSearch_SearchForGameWithLobby {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_INT,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamGameSearch_SearchForGameWithLobby"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * EGameSearchErrorCode_t SteamAPI_ISteamGameSearch_SearchForGameWithLobby(ISteamGameSearch ptr, uint64_steamid steamIDLobby, int nPlayerMin, int nPlayerMax)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameSearch_SearchForGameWithLobby$descriptor() {
        return SteamAPI_ISteamGameSearch_SearchForGameWithLobby.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * EGameSearchErrorCode_t SteamAPI_ISteamGameSearch_SearchForGameWithLobby(ISteamGameSearch ptr, uint64_steamid steamIDLobby, int nPlayerMin, int nPlayerMax)
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameSearch_SearchForGameWithLobby$handle() {
        return SteamAPI_ISteamGameSearch_SearchForGameWithLobby.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * EGameSearchErrorCode_t SteamAPI_ISteamGameSearch_SearchForGameWithLobby(ISteamGameSearch ptr, uint64_steamid steamIDLobby, int nPlayerMin, int nPlayerMax)
     * }
     */
    public static int SteamAPI_ISteamGameSearch_SearchForGameWithLobby(MemorySegment ptr, long steamIDLobby, int nPlayerMin, int nPlayerMax) {
        var mh$ = SteamAPI_ISteamGameSearch_SearchForGameWithLobby.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameSearch_SearchForGameWithLobby", ptr, steamIDLobby, nPlayerMin, nPlayerMax);
            }
            return (int)mh$.invokeExact(ptr, steamIDLobby, nPlayerMin, nPlayerMax);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameSearch_SearchForGameSolo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamGameSearch_SearchForGameSolo"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * EGameSearchErrorCode_t SteamAPI_ISteamGameSearch_SearchForGameSolo(ISteamGameSearch ptr, int nPlayerMin, int nPlayerMax)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameSearch_SearchForGameSolo$descriptor() {
        return SteamAPI_ISteamGameSearch_SearchForGameSolo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * EGameSearchErrorCode_t SteamAPI_ISteamGameSearch_SearchForGameSolo(ISteamGameSearch ptr, int nPlayerMin, int nPlayerMax)
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameSearch_SearchForGameSolo$handle() {
        return SteamAPI_ISteamGameSearch_SearchForGameSolo.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * EGameSearchErrorCode_t SteamAPI_ISteamGameSearch_SearchForGameSolo(ISteamGameSearch ptr, int nPlayerMin, int nPlayerMax)
     * }
     */
    public static int SteamAPI_ISteamGameSearch_SearchForGameSolo(MemorySegment ptr, int nPlayerMin, int nPlayerMax) {
        var mh$ = SteamAPI_ISteamGameSearch_SearchForGameSolo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameSearch_SearchForGameSolo", ptr, nPlayerMin, nPlayerMax);
            }
            return (int)mh$.invokeExact(ptr, nPlayerMin, nPlayerMax);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameSearch_AcceptGame {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamGameSearch_AcceptGame"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * EGameSearchErrorCode_t SteamAPI_ISteamGameSearch_AcceptGame(ISteamGameSearch ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameSearch_AcceptGame$descriptor() {
        return SteamAPI_ISteamGameSearch_AcceptGame.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * EGameSearchErrorCode_t SteamAPI_ISteamGameSearch_AcceptGame(ISteamGameSearch ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameSearch_AcceptGame$handle() {
        return SteamAPI_ISteamGameSearch_AcceptGame.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * EGameSearchErrorCode_t SteamAPI_ISteamGameSearch_AcceptGame(ISteamGameSearch ptr)
     * }
     */
    public static int SteamAPI_ISteamGameSearch_AcceptGame(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamGameSearch_AcceptGame.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameSearch_AcceptGame", ptr);
            }
            return (int)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameSearch_DeclineGame {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamGameSearch_DeclineGame"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * EGameSearchErrorCode_t SteamAPI_ISteamGameSearch_DeclineGame(ISteamGameSearch ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameSearch_DeclineGame$descriptor() {
        return SteamAPI_ISteamGameSearch_DeclineGame.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * EGameSearchErrorCode_t SteamAPI_ISteamGameSearch_DeclineGame(ISteamGameSearch ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameSearch_DeclineGame$handle() {
        return SteamAPI_ISteamGameSearch_DeclineGame.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * EGameSearchErrorCode_t SteamAPI_ISteamGameSearch_DeclineGame(ISteamGameSearch ptr)
     * }
     */
    public static int SteamAPI_ISteamGameSearch_DeclineGame(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamGameSearch_DeclineGame.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameSearch_DeclineGame", ptr);
            }
            return (int)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameSearch_RetrieveConnectionDetails {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamGameSearch_RetrieveConnectionDetails"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * EGameSearchErrorCode_t SteamAPI_ISteamGameSearch_RetrieveConnectionDetails(ISteamGameSearch ptr, uint64_steamid steamIDHost, char *pchConnectionDetails, int cubConnectionDetails)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameSearch_RetrieveConnectionDetails$descriptor() {
        return SteamAPI_ISteamGameSearch_RetrieveConnectionDetails.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * EGameSearchErrorCode_t SteamAPI_ISteamGameSearch_RetrieveConnectionDetails(ISteamGameSearch ptr, uint64_steamid steamIDHost, char *pchConnectionDetails, int cubConnectionDetails)
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameSearch_RetrieveConnectionDetails$handle() {
        return SteamAPI_ISteamGameSearch_RetrieveConnectionDetails.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * EGameSearchErrorCode_t SteamAPI_ISteamGameSearch_RetrieveConnectionDetails(ISteamGameSearch ptr, uint64_steamid steamIDHost, char *pchConnectionDetails, int cubConnectionDetails)
     * }
     */
    public static int SteamAPI_ISteamGameSearch_RetrieveConnectionDetails(MemorySegment ptr, long steamIDHost, MemorySegment pchConnectionDetails, int cubConnectionDetails) {
        var mh$ = SteamAPI_ISteamGameSearch_RetrieveConnectionDetails.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameSearch_RetrieveConnectionDetails", ptr, steamIDHost, pchConnectionDetails, cubConnectionDetails);
            }
            return (int)mh$.invokeExact(ptr, steamIDHost, pchConnectionDetails, cubConnectionDetails);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameSearch_EndGameSearch {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamGameSearch_EndGameSearch"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * EGameSearchErrorCode_t SteamAPI_ISteamGameSearch_EndGameSearch(ISteamGameSearch ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameSearch_EndGameSearch$descriptor() {
        return SteamAPI_ISteamGameSearch_EndGameSearch.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * EGameSearchErrorCode_t SteamAPI_ISteamGameSearch_EndGameSearch(ISteamGameSearch ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameSearch_EndGameSearch$handle() {
        return SteamAPI_ISteamGameSearch_EndGameSearch.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * EGameSearchErrorCode_t SteamAPI_ISteamGameSearch_EndGameSearch(ISteamGameSearch ptr)
     * }
     */
    public static int SteamAPI_ISteamGameSearch_EndGameSearch(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamGameSearch_EndGameSearch.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameSearch_EndGameSearch", ptr);
            }
            return (int)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameSearch_SetGameHostParams {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamGameSearch_SetGameHostParams"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * EGameSearchErrorCode_t SteamAPI_ISteamGameSearch_SetGameHostParams(ISteamGameSearch ptr, const char *pchKey, const char *pchValue)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameSearch_SetGameHostParams$descriptor() {
        return SteamAPI_ISteamGameSearch_SetGameHostParams.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * EGameSearchErrorCode_t SteamAPI_ISteamGameSearch_SetGameHostParams(ISteamGameSearch ptr, const char *pchKey, const char *pchValue)
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameSearch_SetGameHostParams$handle() {
        return SteamAPI_ISteamGameSearch_SetGameHostParams.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * EGameSearchErrorCode_t SteamAPI_ISteamGameSearch_SetGameHostParams(ISteamGameSearch ptr, const char *pchKey, const char *pchValue)
     * }
     */
    public static int SteamAPI_ISteamGameSearch_SetGameHostParams(MemorySegment ptr, MemorySegment pchKey, MemorySegment pchValue) {
        var mh$ = SteamAPI_ISteamGameSearch_SetGameHostParams.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameSearch_SetGameHostParams", ptr, pchKey, pchValue);
            }
            return (int)mh$.invokeExact(ptr, pchKey, pchValue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameSearch_SetConnectionDetails {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamGameSearch_SetConnectionDetails"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * EGameSearchErrorCode_t SteamAPI_ISteamGameSearch_SetConnectionDetails(ISteamGameSearch ptr, const char *pchConnectionDetails, int cubConnectionDetails)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameSearch_SetConnectionDetails$descriptor() {
        return SteamAPI_ISteamGameSearch_SetConnectionDetails.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * EGameSearchErrorCode_t SteamAPI_ISteamGameSearch_SetConnectionDetails(ISteamGameSearch ptr, const char *pchConnectionDetails, int cubConnectionDetails)
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameSearch_SetConnectionDetails$handle() {
        return SteamAPI_ISteamGameSearch_SetConnectionDetails.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * EGameSearchErrorCode_t SteamAPI_ISteamGameSearch_SetConnectionDetails(ISteamGameSearch ptr, const char *pchConnectionDetails, int cubConnectionDetails)
     * }
     */
    public static int SteamAPI_ISteamGameSearch_SetConnectionDetails(MemorySegment ptr, MemorySegment pchConnectionDetails, int cubConnectionDetails) {
        var mh$ = SteamAPI_ISteamGameSearch_SetConnectionDetails.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameSearch_SetConnectionDetails", ptr, pchConnectionDetails, cubConnectionDetails);
            }
            return (int)mh$.invokeExact(ptr, pchConnectionDetails, cubConnectionDetails);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameSearch_RequestPlayersForGame {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_INT,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamGameSearch_RequestPlayersForGame"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * EGameSearchErrorCode_t SteamAPI_ISteamGameSearch_RequestPlayersForGame(ISteamGameSearch ptr, int nPlayerMin, int nPlayerMax, int nMaxTeamSize)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameSearch_RequestPlayersForGame$descriptor() {
        return SteamAPI_ISteamGameSearch_RequestPlayersForGame.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * EGameSearchErrorCode_t SteamAPI_ISteamGameSearch_RequestPlayersForGame(ISteamGameSearch ptr, int nPlayerMin, int nPlayerMax, int nMaxTeamSize)
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameSearch_RequestPlayersForGame$handle() {
        return SteamAPI_ISteamGameSearch_RequestPlayersForGame.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * EGameSearchErrorCode_t SteamAPI_ISteamGameSearch_RequestPlayersForGame(ISteamGameSearch ptr, int nPlayerMin, int nPlayerMax, int nMaxTeamSize)
     * }
     */
    public static int SteamAPI_ISteamGameSearch_RequestPlayersForGame(MemorySegment ptr, int nPlayerMin, int nPlayerMax, int nMaxTeamSize) {
        var mh$ = SteamAPI_ISteamGameSearch_RequestPlayersForGame.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameSearch_RequestPlayersForGame", ptr, nPlayerMin, nPlayerMax, nMaxTeamSize);
            }
            return (int)mh$.invokeExact(ptr, nPlayerMin, nPlayerMax, nMaxTeamSize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameSearch_HostConfirmGameStart {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamGameSearch_HostConfirmGameStart"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * EGameSearchErrorCode_t SteamAPI_ISteamGameSearch_HostConfirmGameStart(ISteamGameSearch ptr, uint64 ullUniqueGameID)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameSearch_HostConfirmGameStart$descriptor() {
        return SteamAPI_ISteamGameSearch_HostConfirmGameStart.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * EGameSearchErrorCode_t SteamAPI_ISteamGameSearch_HostConfirmGameStart(ISteamGameSearch ptr, uint64 ullUniqueGameID)
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameSearch_HostConfirmGameStart$handle() {
        return SteamAPI_ISteamGameSearch_HostConfirmGameStart.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * EGameSearchErrorCode_t SteamAPI_ISteamGameSearch_HostConfirmGameStart(ISteamGameSearch ptr, uint64 ullUniqueGameID)
     * }
     */
    public static int SteamAPI_ISteamGameSearch_HostConfirmGameStart(MemorySegment ptr, long ullUniqueGameID) {
        var mh$ = SteamAPI_ISteamGameSearch_HostConfirmGameStart.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameSearch_HostConfirmGameStart", ptr, ullUniqueGameID);
            }
            return (int)mh$.invokeExact(ptr, ullUniqueGameID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameSearch_CancelRequestPlayersForGame {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamGameSearch_CancelRequestPlayersForGame"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * EGameSearchErrorCode_t SteamAPI_ISteamGameSearch_CancelRequestPlayersForGame(ISteamGameSearch ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameSearch_CancelRequestPlayersForGame$descriptor() {
        return SteamAPI_ISteamGameSearch_CancelRequestPlayersForGame.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * EGameSearchErrorCode_t SteamAPI_ISteamGameSearch_CancelRequestPlayersForGame(ISteamGameSearch ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameSearch_CancelRequestPlayersForGame$handle() {
        return SteamAPI_ISteamGameSearch_CancelRequestPlayersForGame.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * EGameSearchErrorCode_t SteamAPI_ISteamGameSearch_CancelRequestPlayersForGame(ISteamGameSearch ptr)
     * }
     */
    public static int SteamAPI_ISteamGameSearch_CancelRequestPlayersForGame(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamGameSearch_CancelRequestPlayersForGame.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameSearch_CancelRequestPlayersForGame", ptr);
            }
            return (int)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameSearch_SubmitPlayerResult {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamGameSearch_SubmitPlayerResult"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * EGameSearchErrorCode_t SteamAPI_ISteamGameSearch_SubmitPlayerResult(ISteamGameSearch ptr, uint64 ullUniqueGameID, uint64_steamid steamIDPlayer, EPlayerResult_t EPlayerResult)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameSearch_SubmitPlayerResult$descriptor() {
        return SteamAPI_ISteamGameSearch_SubmitPlayerResult.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * EGameSearchErrorCode_t SteamAPI_ISteamGameSearch_SubmitPlayerResult(ISteamGameSearch ptr, uint64 ullUniqueGameID, uint64_steamid steamIDPlayer, EPlayerResult_t EPlayerResult)
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameSearch_SubmitPlayerResult$handle() {
        return SteamAPI_ISteamGameSearch_SubmitPlayerResult.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * EGameSearchErrorCode_t SteamAPI_ISteamGameSearch_SubmitPlayerResult(ISteamGameSearch ptr, uint64 ullUniqueGameID, uint64_steamid steamIDPlayer, EPlayerResult_t EPlayerResult)
     * }
     */
    public static int SteamAPI_ISteamGameSearch_SubmitPlayerResult(MemorySegment ptr, long ullUniqueGameID, long steamIDPlayer, int EPlayerResult) {
        var mh$ = SteamAPI_ISteamGameSearch_SubmitPlayerResult.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameSearch_SubmitPlayerResult", ptr, ullUniqueGameID, steamIDPlayer, EPlayerResult);
            }
            return (int)mh$.invokeExact(ptr, ullUniqueGameID, steamIDPlayer, EPlayerResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameSearch_EndGame {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamGameSearch_EndGame"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * EGameSearchErrorCode_t SteamAPI_ISteamGameSearch_EndGame(ISteamGameSearch ptr, uint64 ullUniqueGameID)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameSearch_EndGame$descriptor() {
        return SteamAPI_ISteamGameSearch_EndGame.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * EGameSearchErrorCode_t SteamAPI_ISteamGameSearch_EndGame(ISteamGameSearch ptr, uint64 ullUniqueGameID)
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameSearch_EndGame$handle() {
        return SteamAPI_ISteamGameSearch_EndGame.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * EGameSearchErrorCode_t SteamAPI_ISteamGameSearch_EndGame(ISteamGameSearch ptr, uint64 ullUniqueGameID)
     * }
     */
    public static int SteamAPI_ISteamGameSearch_EndGame(MemorySegment ptr, long ullUniqueGameID) {
        var mh$ = SteamAPI_ISteamGameSearch_EndGame.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameSearch_EndGame", ptr, ullUniqueGameID);
            }
            return (int)mh$.invokeExact(ptr, ullUniqueGameID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_SteamGameSearch_v001 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_SteamGameSearch_v001"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ISteamGameSearch SteamAPI_SteamGameSearch_v001()
     * }
     */
    public static FunctionDescriptor SteamAPI_SteamGameSearch_v001$descriptor() {
        return SteamAPI_SteamGameSearch_v001.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ISteamGameSearch SteamAPI_SteamGameSearch_v001()
     * }
     */
    public static MethodHandle SteamAPI_SteamGameSearch_v001$handle() {
        return SteamAPI_SteamGameSearch_v001.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ISteamGameSearch SteamAPI_SteamGameSearch_v001()
     * }
     */
    public static MemorySegment SteamAPI_SteamGameSearch_v001() {
        var mh$ = SteamAPI_SteamGameSearch_v001.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_SteamGameSearch_v001");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamParties_GetNumActiveBeacons {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamParties_GetNumActiveBeacons"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamParties_GetNumActiveBeacons(ISteamParties ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamParties_GetNumActiveBeacons$descriptor() {
        return SteamAPI_ISteamParties_GetNumActiveBeacons.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamParties_GetNumActiveBeacons(ISteamParties ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamParties_GetNumActiveBeacons$handle() {
        return SteamAPI_ISteamParties_GetNumActiveBeacons.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamParties_GetNumActiveBeacons(ISteamParties ptr)
     * }
     */
    public static int SteamAPI_ISteamParties_GetNumActiveBeacons(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamParties_GetNumActiveBeacons.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamParties_GetNumActiveBeacons", ptr);
            }
            return (int)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamParties_GetBeaconByIndex {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamParties_GetBeaconByIndex"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * PartyBeaconID_t SteamAPI_ISteamParties_GetBeaconByIndex(ISteamParties ptr, uint32 unIndex)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamParties_GetBeaconByIndex$descriptor() {
        return SteamAPI_ISteamParties_GetBeaconByIndex.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * PartyBeaconID_t SteamAPI_ISteamParties_GetBeaconByIndex(ISteamParties ptr, uint32 unIndex)
     * }
     */
    public static MethodHandle SteamAPI_ISteamParties_GetBeaconByIndex$handle() {
        return SteamAPI_ISteamParties_GetBeaconByIndex.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * PartyBeaconID_t SteamAPI_ISteamParties_GetBeaconByIndex(ISteamParties ptr, uint32 unIndex)
     * }
     */
    public static long SteamAPI_ISteamParties_GetBeaconByIndex(MemorySegment ptr, int unIndex) {
        var mh$ = SteamAPI_ISteamParties_GetBeaconByIndex.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamParties_GetBeaconByIndex", ptr, unIndex);
            }
            return (long)mh$.invokeExact(ptr, unIndex);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamParties_GetBeaconDetails {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamParties_GetBeaconDetails"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamParties_GetBeaconDetails(ISteamParties ptr, PartyBeaconID_t ulBeaconID, CSteamID *pSteamIDBeaconOwner, SteamPartyBeaconLocation_t *pLocation, char *pchMetadata, int cchMetadata)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamParties_GetBeaconDetails$descriptor() {
        return SteamAPI_ISteamParties_GetBeaconDetails.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamParties_GetBeaconDetails(ISteamParties ptr, PartyBeaconID_t ulBeaconID, CSteamID *pSteamIDBeaconOwner, SteamPartyBeaconLocation_t *pLocation, char *pchMetadata, int cchMetadata)
     * }
     */
    public static MethodHandle SteamAPI_ISteamParties_GetBeaconDetails$handle() {
        return SteamAPI_ISteamParties_GetBeaconDetails.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamParties_GetBeaconDetails(ISteamParties ptr, PartyBeaconID_t ulBeaconID, CSteamID *pSteamIDBeaconOwner, SteamPartyBeaconLocation_t *pLocation, char *pchMetadata, int cchMetadata)
     * }
     */
    public static boolean SteamAPI_ISteamParties_GetBeaconDetails(MemorySegment ptr, long ulBeaconID, MemorySegment pSteamIDBeaconOwner, MemorySegment pLocation, MemorySegment pchMetadata, int cchMetadata) {
        var mh$ = SteamAPI_ISteamParties_GetBeaconDetails.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamParties_GetBeaconDetails", ptr, ulBeaconID, pSteamIDBeaconOwner, pLocation, pchMetadata, cchMetadata);
            }
            return (boolean)mh$.invokeExact(ptr, ulBeaconID, pSteamIDBeaconOwner, pLocation, pchMetadata, cchMetadata);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamParties_JoinParty {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamParties_JoinParty"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamParties_JoinParty(ISteamParties ptr, PartyBeaconID_t ulBeaconID)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamParties_JoinParty$descriptor() {
        return SteamAPI_ISteamParties_JoinParty.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamParties_JoinParty(ISteamParties ptr, PartyBeaconID_t ulBeaconID)
     * }
     */
    public static MethodHandle SteamAPI_ISteamParties_JoinParty$handle() {
        return SteamAPI_ISteamParties_JoinParty.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamParties_JoinParty(ISteamParties ptr, PartyBeaconID_t ulBeaconID)
     * }
     */
    public static long SteamAPI_ISteamParties_JoinParty(MemorySegment ptr, long ulBeaconID) {
        var mh$ = SteamAPI_ISteamParties_JoinParty.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamParties_JoinParty", ptr, ulBeaconID);
            }
            return (long)mh$.invokeExact(ptr, ulBeaconID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamParties_GetNumAvailableBeaconLocations {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamParties_GetNumAvailableBeaconLocations"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamParties_GetNumAvailableBeaconLocations(ISteamParties ptr, uint32 *puNumLocations)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamParties_GetNumAvailableBeaconLocations$descriptor() {
        return SteamAPI_ISteamParties_GetNumAvailableBeaconLocations.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamParties_GetNumAvailableBeaconLocations(ISteamParties ptr, uint32 *puNumLocations)
     * }
     */
    public static MethodHandle SteamAPI_ISteamParties_GetNumAvailableBeaconLocations$handle() {
        return SteamAPI_ISteamParties_GetNumAvailableBeaconLocations.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamParties_GetNumAvailableBeaconLocations(ISteamParties ptr, uint32 *puNumLocations)
     * }
     */
    public static boolean SteamAPI_ISteamParties_GetNumAvailableBeaconLocations(MemorySegment ptr, MemorySegment puNumLocations) {
        var mh$ = SteamAPI_ISteamParties_GetNumAvailableBeaconLocations.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamParties_GetNumAvailableBeaconLocations", ptr, puNumLocations);
            }
            return (boolean)mh$.invokeExact(ptr, puNumLocations);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamParties_GetAvailableBeaconLocations {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamParties_GetAvailableBeaconLocations"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamParties_GetAvailableBeaconLocations(ISteamParties ptr, SteamPartyBeaconLocation_t *pLocationList, uint32 uMaxNumLocations)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamParties_GetAvailableBeaconLocations$descriptor() {
        return SteamAPI_ISteamParties_GetAvailableBeaconLocations.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamParties_GetAvailableBeaconLocations(ISteamParties ptr, SteamPartyBeaconLocation_t *pLocationList, uint32 uMaxNumLocations)
     * }
     */
    public static MethodHandle SteamAPI_ISteamParties_GetAvailableBeaconLocations$handle() {
        return SteamAPI_ISteamParties_GetAvailableBeaconLocations.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamParties_GetAvailableBeaconLocations(ISteamParties ptr, SteamPartyBeaconLocation_t *pLocationList, uint32 uMaxNumLocations)
     * }
     */
    public static boolean SteamAPI_ISteamParties_GetAvailableBeaconLocations(MemorySegment ptr, MemorySegment pLocationList, int uMaxNumLocations) {
        var mh$ = SteamAPI_ISteamParties_GetAvailableBeaconLocations.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamParties_GetAvailableBeaconLocations", ptr, pLocationList, uMaxNumLocations);
            }
            return (boolean)mh$.invokeExact(ptr, pLocationList, uMaxNumLocations);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamParties_CreateBeacon {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamParties_CreateBeacon"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamParties_CreateBeacon(ISteamParties ptr, uint32 unOpenSlots, SteamPartyBeaconLocation_t *pBeaconLocation, const char *pchConnectString, const char *pchMetadata)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamParties_CreateBeacon$descriptor() {
        return SteamAPI_ISteamParties_CreateBeacon.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamParties_CreateBeacon(ISteamParties ptr, uint32 unOpenSlots, SteamPartyBeaconLocation_t *pBeaconLocation, const char *pchConnectString, const char *pchMetadata)
     * }
     */
    public static MethodHandle SteamAPI_ISteamParties_CreateBeacon$handle() {
        return SteamAPI_ISteamParties_CreateBeacon.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamParties_CreateBeacon(ISteamParties ptr, uint32 unOpenSlots, SteamPartyBeaconLocation_t *pBeaconLocation, const char *pchConnectString, const char *pchMetadata)
     * }
     */
    public static long SteamAPI_ISteamParties_CreateBeacon(MemorySegment ptr, int unOpenSlots, MemorySegment pBeaconLocation, MemorySegment pchConnectString, MemorySegment pchMetadata) {
        var mh$ = SteamAPI_ISteamParties_CreateBeacon.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamParties_CreateBeacon", ptr, unOpenSlots, pBeaconLocation, pchConnectString, pchMetadata);
            }
            return (long)mh$.invokeExact(ptr, unOpenSlots, pBeaconLocation, pchConnectString, pchMetadata);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamParties_OnReservationCompleted {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamParties_OnReservationCompleted"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamParties_OnReservationCompleted(ISteamParties ptr, PartyBeaconID_t ulBeacon, uint64_steamid steamIDUser)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamParties_OnReservationCompleted$descriptor() {
        return SteamAPI_ISteamParties_OnReservationCompleted.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamParties_OnReservationCompleted(ISteamParties ptr, PartyBeaconID_t ulBeacon, uint64_steamid steamIDUser)
     * }
     */
    public static MethodHandle SteamAPI_ISteamParties_OnReservationCompleted$handle() {
        return SteamAPI_ISteamParties_OnReservationCompleted.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamParties_OnReservationCompleted(ISteamParties ptr, PartyBeaconID_t ulBeacon, uint64_steamid steamIDUser)
     * }
     */
    public static void SteamAPI_ISteamParties_OnReservationCompleted(MemorySegment ptr, long ulBeacon, long steamIDUser) {
        var mh$ = SteamAPI_ISteamParties_OnReservationCompleted.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamParties_OnReservationCompleted", ptr, ulBeacon, steamIDUser);
            }
            mh$.invokeExact(ptr, ulBeacon, steamIDUser);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamParties_CancelReservation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamParties_CancelReservation"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamParties_CancelReservation(ISteamParties ptr, PartyBeaconID_t ulBeacon, uint64_steamid steamIDUser)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamParties_CancelReservation$descriptor() {
        return SteamAPI_ISteamParties_CancelReservation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamParties_CancelReservation(ISteamParties ptr, PartyBeaconID_t ulBeacon, uint64_steamid steamIDUser)
     * }
     */
    public static MethodHandle SteamAPI_ISteamParties_CancelReservation$handle() {
        return SteamAPI_ISteamParties_CancelReservation.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamParties_CancelReservation(ISteamParties ptr, PartyBeaconID_t ulBeacon, uint64_steamid steamIDUser)
     * }
     */
    public static void SteamAPI_ISteamParties_CancelReservation(MemorySegment ptr, long ulBeacon, long steamIDUser) {
        var mh$ = SteamAPI_ISteamParties_CancelReservation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamParties_CancelReservation", ptr, ulBeacon, steamIDUser);
            }
            mh$.invokeExact(ptr, ulBeacon, steamIDUser);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamParties_ChangeNumOpenSlots {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamParties_ChangeNumOpenSlots"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamParties_ChangeNumOpenSlots(ISteamParties ptr, PartyBeaconID_t ulBeacon, uint32 unOpenSlots)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamParties_ChangeNumOpenSlots$descriptor() {
        return SteamAPI_ISteamParties_ChangeNumOpenSlots.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamParties_ChangeNumOpenSlots(ISteamParties ptr, PartyBeaconID_t ulBeacon, uint32 unOpenSlots)
     * }
     */
    public static MethodHandle SteamAPI_ISteamParties_ChangeNumOpenSlots$handle() {
        return SteamAPI_ISteamParties_ChangeNumOpenSlots.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamParties_ChangeNumOpenSlots(ISteamParties ptr, PartyBeaconID_t ulBeacon, uint32 unOpenSlots)
     * }
     */
    public static long SteamAPI_ISteamParties_ChangeNumOpenSlots(MemorySegment ptr, long ulBeacon, int unOpenSlots) {
        var mh$ = SteamAPI_ISteamParties_ChangeNumOpenSlots.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamParties_ChangeNumOpenSlots", ptr, ulBeacon, unOpenSlots);
            }
            return (long)mh$.invokeExact(ptr, ulBeacon, unOpenSlots);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamParties_DestroyBeacon {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamParties_DestroyBeacon"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamParties_DestroyBeacon(ISteamParties ptr, PartyBeaconID_t ulBeacon)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamParties_DestroyBeacon$descriptor() {
        return SteamAPI_ISteamParties_DestroyBeacon.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamParties_DestroyBeacon(ISteamParties ptr, PartyBeaconID_t ulBeacon)
     * }
     */
    public static MethodHandle SteamAPI_ISteamParties_DestroyBeacon$handle() {
        return SteamAPI_ISteamParties_DestroyBeacon.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamParties_DestroyBeacon(ISteamParties ptr, PartyBeaconID_t ulBeacon)
     * }
     */
    public static boolean SteamAPI_ISteamParties_DestroyBeacon(MemorySegment ptr, long ulBeacon) {
        var mh$ = SteamAPI_ISteamParties_DestroyBeacon.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamParties_DestroyBeacon", ptr, ulBeacon);
            }
            return (boolean)mh$.invokeExact(ptr, ulBeacon);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamParties_GetBeaconLocationData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamPartyBeaconLocation_t.layout(),
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamParties_GetBeaconLocationData"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamParties_GetBeaconLocationData(ISteamParties ptr, SteamPartyBeaconLocation_t BeaconLocation, ESteamPartyBeaconLocationData eData, char *pchDataStringOut, int cchDataStringOut)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamParties_GetBeaconLocationData$descriptor() {
        return SteamAPI_ISteamParties_GetBeaconLocationData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamParties_GetBeaconLocationData(ISteamParties ptr, SteamPartyBeaconLocation_t BeaconLocation, ESteamPartyBeaconLocationData eData, char *pchDataStringOut, int cchDataStringOut)
     * }
     */
    public static MethodHandle SteamAPI_ISteamParties_GetBeaconLocationData$handle() {
        return SteamAPI_ISteamParties_GetBeaconLocationData.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamParties_GetBeaconLocationData(ISteamParties ptr, SteamPartyBeaconLocation_t BeaconLocation, ESteamPartyBeaconLocationData eData, char *pchDataStringOut, int cchDataStringOut)
     * }
     */
    public static boolean SteamAPI_ISteamParties_GetBeaconLocationData(MemorySegment ptr, MemorySegment BeaconLocation, int eData, MemorySegment pchDataStringOut, int cchDataStringOut) {
        var mh$ = SteamAPI_ISteamParties_GetBeaconLocationData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamParties_GetBeaconLocationData", ptr, BeaconLocation, eData, pchDataStringOut, cchDataStringOut);
            }
            return (boolean)mh$.invokeExact(ptr, BeaconLocation, eData, pchDataStringOut, cchDataStringOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_SteamParties_v002 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_SteamParties_v002"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ISteamParties SteamAPI_SteamParties_v002()
     * }
     */
    public static FunctionDescriptor SteamAPI_SteamParties_v002$descriptor() {
        return SteamAPI_SteamParties_v002.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ISteamParties SteamAPI_SteamParties_v002()
     * }
     */
    public static MethodHandle SteamAPI_SteamParties_v002$handle() {
        return SteamAPI_SteamParties_v002.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ISteamParties SteamAPI_SteamParties_v002()
     * }
     */
    public static MemorySegment SteamAPI_SteamParties_v002() {
        var mh$ = SteamAPI_SteamParties_v002.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_SteamParties_v002");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemoteStorage_FileWrite {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamRemoteStorage_FileWrite"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_FileWrite(ISteamRemoteStorage ptr, const char *pchFile, const void *pvData, int32 cubData)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemoteStorage_FileWrite$descriptor() {
        return SteamAPI_ISteamRemoteStorage_FileWrite.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_FileWrite(ISteamRemoteStorage ptr, const char *pchFile, const void *pvData, int32 cubData)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemoteStorage_FileWrite$handle() {
        return SteamAPI_ISteamRemoteStorage_FileWrite.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_FileWrite(ISteamRemoteStorage ptr, const char *pchFile, const void *pvData, int32 cubData)
     * }
     */
    public static boolean SteamAPI_ISteamRemoteStorage_FileWrite(MemorySegment ptr, MemorySegment pchFile, MemorySegment pvData, int cubData) {
        var mh$ = SteamAPI_ISteamRemoteStorage_FileWrite.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemoteStorage_FileWrite", ptr, pchFile, pvData, cubData);
            }
            return (boolean)mh$.invokeExact(ptr, pchFile, pvData, cubData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemoteStorage_FileRead {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamRemoteStorage_FileRead"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int32 SteamAPI_ISteamRemoteStorage_FileRead(ISteamRemoteStorage ptr, const char *pchFile, void *pvData, int32 cubDataToRead)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemoteStorage_FileRead$descriptor() {
        return SteamAPI_ISteamRemoteStorage_FileRead.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int32 SteamAPI_ISteamRemoteStorage_FileRead(ISteamRemoteStorage ptr, const char *pchFile, void *pvData, int32 cubDataToRead)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemoteStorage_FileRead$handle() {
        return SteamAPI_ISteamRemoteStorage_FileRead.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int32 SteamAPI_ISteamRemoteStorage_FileRead(ISteamRemoteStorage ptr, const char *pchFile, void *pvData, int32 cubDataToRead)
     * }
     */
    public static int SteamAPI_ISteamRemoteStorage_FileRead(MemorySegment ptr, MemorySegment pchFile, MemorySegment pvData, int cubDataToRead) {
        var mh$ = SteamAPI_ISteamRemoteStorage_FileRead.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemoteStorage_FileRead", ptr, pchFile, pvData, cubDataToRead);
            }
            return (int)mh$.invokeExact(ptr, pchFile, pvData, cubDataToRead);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemoteStorage_FileWriteAsync {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamRemoteStorage_FileWriteAsync"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_FileWriteAsync(ISteamRemoteStorage ptr, const char *pchFile, const void *pvData, uint32 cubData)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemoteStorage_FileWriteAsync$descriptor() {
        return SteamAPI_ISteamRemoteStorage_FileWriteAsync.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_FileWriteAsync(ISteamRemoteStorage ptr, const char *pchFile, const void *pvData, uint32 cubData)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemoteStorage_FileWriteAsync$handle() {
        return SteamAPI_ISteamRemoteStorage_FileWriteAsync.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_FileWriteAsync(ISteamRemoteStorage ptr, const char *pchFile, const void *pvData, uint32 cubData)
     * }
     */
    public static long SteamAPI_ISteamRemoteStorage_FileWriteAsync(MemorySegment ptr, MemorySegment pchFile, MemorySegment pvData, int cubData) {
        var mh$ = SteamAPI_ISteamRemoteStorage_FileWriteAsync.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemoteStorage_FileWriteAsync", ptr, pchFile, pvData, cubData);
            }
            return (long)mh$.invokeExact(ptr, pchFile, pvData, cubData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemoteStorage_FileReadAsync {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamRemoteStorage_FileReadAsync"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_FileReadAsync(ISteamRemoteStorage ptr, const char *pchFile, uint32 nOffset, uint32 cubToRead)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemoteStorage_FileReadAsync$descriptor() {
        return SteamAPI_ISteamRemoteStorage_FileReadAsync.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_FileReadAsync(ISteamRemoteStorage ptr, const char *pchFile, uint32 nOffset, uint32 cubToRead)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemoteStorage_FileReadAsync$handle() {
        return SteamAPI_ISteamRemoteStorage_FileReadAsync.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_FileReadAsync(ISteamRemoteStorage ptr, const char *pchFile, uint32 nOffset, uint32 cubToRead)
     * }
     */
    public static long SteamAPI_ISteamRemoteStorage_FileReadAsync(MemorySegment ptr, MemorySegment pchFile, int nOffset, int cubToRead) {
        var mh$ = SteamAPI_ISteamRemoteStorage_FileReadAsync.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemoteStorage_FileReadAsync", ptr, pchFile, nOffset, cubToRead);
            }
            return (long)mh$.invokeExact(ptr, pchFile, nOffset, cubToRead);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemoteStorage_FileReadAsyncComplete {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamRemoteStorage_FileReadAsyncComplete"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_FileReadAsyncComplete(ISteamRemoteStorage ptr, SteamAPICall_t hReadCall, void *pvBuffer, uint32 cubToRead)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemoteStorage_FileReadAsyncComplete$descriptor() {
        return SteamAPI_ISteamRemoteStorage_FileReadAsyncComplete.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_FileReadAsyncComplete(ISteamRemoteStorage ptr, SteamAPICall_t hReadCall, void *pvBuffer, uint32 cubToRead)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemoteStorage_FileReadAsyncComplete$handle() {
        return SteamAPI_ISteamRemoteStorage_FileReadAsyncComplete.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_FileReadAsyncComplete(ISteamRemoteStorage ptr, SteamAPICall_t hReadCall, void *pvBuffer, uint32 cubToRead)
     * }
     */
    public static boolean SteamAPI_ISteamRemoteStorage_FileReadAsyncComplete(MemorySegment ptr, long hReadCall, MemorySegment pvBuffer, int cubToRead) {
        var mh$ = SteamAPI_ISteamRemoteStorage_FileReadAsyncComplete.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemoteStorage_FileReadAsyncComplete", ptr, hReadCall, pvBuffer, cubToRead);
            }
            return (boolean)mh$.invokeExact(ptr, hReadCall, pvBuffer, cubToRead);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemoteStorage_FileForget {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamRemoteStorage_FileForget"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_FileForget(ISteamRemoteStorage ptr, const char *pchFile)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemoteStorage_FileForget$descriptor() {
        return SteamAPI_ISteamRemoteStorage_FileForget.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_FileForget(ISteamRemoteStorage ptr, const char *pchFile)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemoteStorage_FileForget$handle() {
        return SteamAPI_ISteamRemoteStorage_FileForget.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_FileForget(ISteamRemoteStorage ptr, const char *pchFile)
     * }
     */
    public static boolean SteamAPI_ISteamRemoteStorage_FileForget(MemorySegment ptr, MemorySegment pchFile) {
        var mh$ = SteamAPI_ISteamRemoteStorage_FileForget.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemoteStorage_FileForget", ptr, pchFile);
            }
            return (boolean)mh$.invokeExact(ptr, pchFile);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemoteStorage_FileDelete {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamRemoteStorage_FileDelete"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_FileDelete(ISteamRemoteStorage ptr, const char *pchFile)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemoteStorage_FileDelete$descriptor() {
        return SteamAPI_ISteamRemoteStorage_FileDelete.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_FileDelete(ISteamRemoteStorage ptr, const char *pchFile)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemoteStorage_FileDelete$handle() {
        return SteamAPI_ISteamRemoteStorage_FileDelete.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_FileDelete(ISteamRemoteStorage ptr, const char *pchFile)
     * }
     */
    public static boolean SteamAPI_ISteamRemoteStorage_FileDelete(MemorySegment ptr, MemorySegment pchFile) {
        var mh$ = SteamAPI_ISteamRemoteStorage_FileDelete.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemoteStorage_FileDelete", ptr, pchFile);
            }
            return (boolean)mh$.invokeExact(ptr, pchFile);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemoteStorage_FileShare {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamRemoteStorage_FileShare"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_FileShare(ISteamRemoteStorage ptr, const char *pchFile)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemoteStorage_FileShare$descriptor() {
        return SteamAPI_ISteamRemoteStorage_FileShare.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_FileShare(ISteamRemoteStorage ptr, const char *pchFile)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemoteStorage_FileShare$handle() {
        return SteamAPI_ISteamRemoteStorage_FileShare.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_FileShare(ISteamRemoteStorage ptr, const char *pchFile)
     * }
     */
    public static long SteamAPI_ISteamRemoteStorage_FileShare(MemorySegment ptr, MemorySegment pchFile) {
        var mh$ = SteamAPI_ISteamRemoteStorage_FileShare.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemoteStorage_FileShare", ptr, pchFile);
            }
            return (long)mh$.invokeExact(ptr, pchFile);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemoteStorage_SetSyncPlatforms {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamRemoteStorage_SetSyncPlatforms"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_SetSyncPlatforms(ISteamRemoteStorage ptr, const char *pchFile, ERemoteStoragePlatform eRemoteStoragePlatform)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemoteStorage_SetSyncPlatforms$descriptor() {
        return SteamAPI_ISteamRemoteStorage_SetSyncPlatforms.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_SetSyncPlatforms(ISteamRemoteStorage ptr, const char *pchFile, ERemoteStoragePlatform eRemoteStoragePlatform)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemoteStorage_SetSyncPlatforms$handle() {
        return SteamAPI_ISteamRemoteStorage_SetSyncPlatforms.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_SetSyncPlatforms(ISteamRemoteStorage ptr, const char *pchFile, ERemoteStoragePlatform eRemoteStoragePlatform)
     * }
     */
    public static boolean SteamAPI_ISteamRemoteStorage_SetSyncPlatforms(MemorySegment ptr, MemorySegment pchFile, int eRemoteStoragePlatform) {
        var mh$ = SteamAPI_ISteamRemoteStorage_SetSyncPlatforms.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemoteStorage_SetSyncPlatforms", ptr, pchFile, eRemoteStoragePlatform);
            }
            return (boolean)mh$.invokeExact(ptr, pchFile, eRemoteStoragePlatform);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemoteStorage_FileWriteStreamOpen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamRemoteStorage_FileWriteStreamOpen"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * UGCFileWriteStreamHandle_t SteamAPI_ISteamRemoteStorage_FileWriteStreamOpen(ISteamRemoteStorage ptr, const char *pchFile)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemoteStorage_FileWriteStreamOpen$descriptor() {
        return SteamAPI_ISteamRemoteStorage_FileWriteStreamOpen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * UGCFileWriteStreamHandle_t SteamAPI_ISteamRemoteStorage_FileWriteStreamOpen(ISteamRemoteStorage ptr, const char *pchFile)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemoteStorage_FileWriteStreamOpen$handle() {
        return SteamAPI_ISteamRemoteStorage_FileWriteStreamOpen.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * UGCFileWriteStreamHandle_t SteamAPI_ISteamRemoteStorage_FileWriteStreamOpen(ISteamRemoteStorage ptr, const char *pchFile)
     * }
     */
    public static long SteamAPI_ISteamRemoteStorage_FileWriteStreamOpen(MemorySegment ptr, MemorySegment pchFile) {
        var mh$ = SteamAPI_ISteamRemoteStorage_FileWriteStreamOpen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemoteStorage_FileWriteStreamOpen", ptr, pchFile);
            }
            return (long)mh$.invokeExact(ptr, pchFile);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemoteStorage_FileWriteStreamWriteChunk {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamRemoteStorage_FileWriteStreamWriteChunk"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_FileWriteStreamWriteChunk(ISteamRemoteStorage ptr, UGCFileWriteStreamHandle_t writeHandle, const void *pvData, int32 cubData)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemoteStorage_FileWriteStreamWriteChunk$descriptor() {
        return SteamAPI_ISteamRemoteStorage_FileWriteStreamWriteChunk.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_FileWriteStreamWriteChunk(ISteamRemoteStorage ptr, UGCFileWriteStreamHandle_t writeHandle, const void *pvData, int32 cubData)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemoteStorage_FileWriteStreamWriteChunk$handle() {
        return SteamAPI_ISteamRemoteStorage_FileWriteStreamWriteChunk.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_FileWriteStreamWriteChunk(ISteamRemoteStorage ptr, UGCFileWriteStreamHandle_t writeHandle, const void *pvData, int32 cubData)
     * }
     */
    public static boolean SteamAPI_ISteamRemoteStorage_FileWriteStreamWriteChunk(MemorySegment ptr, long writeHandle, MemorySegment pvData, int cubData) {
        var mh$ = SteamAPI_ISteamRemoteStorage_FileWriteStreamWriteChunk.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemoteStorage_FileWriteStreamWriteChunk", ptr, writeHandle, pvData, cubData);
            }
            return (boolean)mh$.invokeExact(ptr, writeHandle, pvData, cubData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemoteStorage_FileWriteStreamClose {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamRemoteStorage_FileWriteStreamClose"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_FileWriteStreamClose(ISteamRemoteStorage ptr, UGCFileWriteStreamHandle_t writeHandle)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemoteStorage_FileWriteStreamClose$descriptor() {
        return SteamAPI_ISteamRemoteStorage_FileWriteStreamClose.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_FileWriteStreamClose(ISteamRemoteStorage ptr, UGCFileWriteStreamHandle_t writeHandle)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemoteStorage_FileWriteStreamClose$handle() {
        return SteamAPI_ISteamRemoteStorage_FileWriteStreamClose.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_FileWriteStreamClose(ISteamRemoteStorage ptr, UGCFileWriteStreamHandle_t writeHandle)
     * }
     */
    public static boolean SteamAPI_ISteamRemoteStorage_FileWriteStreamClose(MemorySegment ptr, long writeHandle) {
        var mh$ = SteamAPI_ISteamRemoteStorage_FileWriteStreamClose.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemoteStorage_FileWriteStreamClose", ptr, writeHandle);
            }
            return (boolean)mh$.invokeExact(ptr, writeHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemoteStorage_FileWriteStreamCancel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamRemoteStorage_FileWriteStreamCancel"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_FileWriteStreamCancel(ISteamRemoteStorage ptr, UGCFileWriteStreamHandle_t writeHandle)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemoteStorage_FileWriteStreamCancel$descriptor() {
        return SteamAPI_ISteamRemoteStorage_FileWriteStreamCancel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_FileWriteStreamCancel(ISteamRemoteStorage ptr, UGCFileWriteStreamHandle_t writeHandle)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemoteStorage_FileWriteStreamCancel$handle() {
        return SteamAPI_ISteamRemoteStorage_FileWriteStreamCancel.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_FileWriteStreamCancel(ISteamRemoteStorage ptr, UGCFileWriteStreamHandle_t writeHandle)
     * }
     */
    public static boolean SteamAPI_ISteamRemoteStorage_FileWriteStreamCancel(MemorySegment ptr, long writeHandle) {
        var mh$ = SteamAPI_ISteamRemoteStorage_FileWriteStreamCancel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemoteStorage_FileWriteStreamCancel", ptr, writeHandle);
            }
            return (boolean)mh$.invokeExact(ptr, writeHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemoteStorage_FileExists {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamRemoteStorage_FileExists"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_FileExists(ISteamRemoteStorage ptr, const char *pchFile)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemoteStorage_FileExists$descriptor() {
        return SteamAPI_ISteamRemoteStorage_FileExists.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_FileExists(ISteamRemoteStorage ptr, const char *pchFile)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemoteStorage_FileExists$handle() {
        return SteamAPI_ISteamRemoteStorage_FileExists.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_FileExists(ISteamRemoteStorage ptr, const char *pchFile)
     * }
     */
    public static boolean SteamAPI_ISteamRemoteStorage_FileExists(MemorySegment ptr, MemorySegment pchFile) {
        var mh$ = SteamAPI_ISteamRemoteStorage_FileExists.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemoteStorage_FileExists", ptr, pchFile);
            }
            return (boolean)mh$.invokeExact(ptr, pchFile);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemoteStorage_FilePersisted {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamRemoteStorage_FilePersisted"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_FilePersisted(ISteamRemoteStorage ptr, const char *pchFile)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemoteStorage_FilePersisted$descriptor() {
        return SteamAPI_ISteamRemoteStorage_FilePersisted.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_FilePersisted(ISteamRemoteStorage ptr, const char *pchFile)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemoteStorage_FilePersisted$handle() {
        return SteamAPI_ISteamRemoteStorage_FilePersisted.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_FilePersisted(ISteamRemoteStorage ptr, const char *pchFile)
     * }
     */
    public static boolean SteamAPI_ISteamRemoteStorage_FilePersisted(MemorySegment ptr, MemorySegment pchFile) {
        var mh$ = SteamAPI_ISteamRemoteStorage_FilePersisted.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemoteStorage_FilePersisted", ptr, pchFile);
            }
            return (boolean)mh$.invokeExact(ptr, pchFile);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemoteStorage_GetFileSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamRemoteStorage_GetFileSize"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int32 SteamAPI_ISteamRemoteStorage_GetFileSize(ISteamRemoteStorage ptr, const char *pchFile)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemoteStorage_GetFileSize$descriptor() {
        return SteamAPI_ISteamRemoteStorage_GetFileSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int32 SteamAPI_ISteamRemoteStorage_GetFileSize(ISteamRemoteStorage ptr, const char *pchFile)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemoteStorage_GetFileSize$handle() {
        return SteamAPI_ISteamRemoteStorage_GetFileSize.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int32 SteamAPI_ISteamRemoteStorage_GetFileSize(ISteamRemoteStorage ptr, const char *pchFile)
     * }
     */
    public static int SteamAPI_ISteamRemoteStorage_GetFileSize(MemorySegment ptr, MemorySegment pchFile) {
        var mh$ = SteamAPI_ISteamRemoteStorage_GetFileSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemoteStorage_GetFileSize", ptr, pchFile);
            }
            return (int)mh$.invokeExact(ptr, pchFile);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemoteStorage_GetFileTimestamp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamRemoteStorage_GetFileTimestamp"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int64 SteamAPI_ISteamRemoteStorage_GetFileTimestamp(ISteamRemoteStorage ptr, const char *pchFile)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemoteStorage_GetFileTimestamp$descriptor() {
        return SteamAPI_ISteamRemoteStorage_GetFileTimestamp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int64 SteamAPI_ISteamRemoteStorage_GetFileTimestamp(ISteamRemoteStorage ptr, const char *pchFile)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemoteStorage_GetFileTimestamp$handle() {
        return SteamAPI_ISteamRemoteStorage_GetFileTimestamp.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int64 SteamAPI_ISteamRemoteStorage_GetFileTimestamp(ISteamRemoteStorage ptr, const char *pchFile)
     * }
     */
    public static long SteamAPI_ISteamRemoteStorage_GetFileTimestamp(MemorySegment ptr, MemorySegment pchFile) {
        var mh$ = SteamAPI_ISteamRemoteStorage_GetFileTimestamp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemoteStorage_GetFileTimestamp", ptr, pchFile);
            }
            return (long)mh$.invokeExact(ptr, pchFile);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemoteStorage_GetSyncPlatforms {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamRemoteStorage_GetSyncPlatforms"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ERemoteStoragePlatform SteamAPI_ISteamRemoteStorage_GetSyncPlatforms(ISteamRemoteStorage ptr, const char *pchFile)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemoteStorage_GetSyncPlatforms$descriptor() {
        return SteamAPI_ISteamRemoteStorage_GetSyncPlatforms.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ERemoteStoragePlatform SteamAPI_ISteamRemoteStorage_GetSyncPlatforms(ISteamRemoteStorage ptr, const char *pchFile)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemoteStorage_GetSyncPlatforms$handle() {
        return SteamAPI_ISteamRemoteStorage_GetSyncPlatforms.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ERemoteStoragePlatform SteamAPI_ISteamRemoteStorage_GetSyncPlatforms(ISteamRemoteStorage ptr, const char *pchFile)
     * }
     */
    public static int SteamAPI_ISteamRemoteStorage_GetSyncPlatforms(MemorySegment ptr, MemorySegment pchFile) {
        var mh$ = SteamAPI_ISteamRemoteStorage_GetSyncPlatforms.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemoteStorage_GetSyncPlatforms", ptr, pchFile);
            }
            return (int)mh$.invokeExact(ptr, pchFile);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemoteStorage_GetFileCount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamRemoteStorage_GetFileCount"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int32 SteamAPI_ISteamRemoteStorage_GetFileCount(ISteamRemoteStorage ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemoteStorage_GetFileCount$descriptor() {
        return SteamAPI_ISteamRemoteStorage_GetFileCount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int32 SteamAPI_ISteamRemoteStorage_GetFileCount(ISteamRemoteStorage ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemoteStorage_GetFileCount$handle() {
        return SteamAPI_ISteamRemoteStorage_GetFileCount.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int32 SteamAPI_ISteamRemoteStorage_GetFileCount(ISteamRemoteStorage ptr)
     * }
     */
    public static int SteamAPI_ISteamRemoteStorage_GetFileCount(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamRemoteStorage_GetFileCount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemoteStorage_GetFileCount", ptr);
            }
            return (int)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemoteStorage_GetFileNameAndSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamRemoteStorage_GetFileNameAndSize"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamRemoteStorage_GetFileNameAndSize(ISteamRemoteStorage ptr, int iFile, int32 *pnFileSizeInBytes)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemoteStorage_GetFileNameAndSize$descriptor() {
        return SteamAPI_ISteamRemoteStorage_GetFileNameAndSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamRemoteStorage_GetFileNameAndSize(ISteamRemoteStorage ptr, int iFile, int32 *pnFileSizeInBytes)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemoteStorage_GetFileNameAndSize$handle() {
        return SteamAPI_ISteamRemoteStorage_GetFileNameAndSize.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamRemoteStorage_GetFileNameAndSize(ISteamRemoteStorage ptr, int iFile, int32 *pnFileSizeInBytes)
     * }
     */
    public static MemorySegment SteamAPI_ISteamRemoteStorage_GetFileNameAndSize(MemorySegment ptr, int iFile, MemorySegment pnFileSizeInBytes) {
        var mh$ = SteamAPI_ISteamRemoteStorage_GetFileNameAndSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemoteStorage_GetFileNameAndSize", ptr, iFile, pnFileSizeInBytes);
            }
            return (MemorySegment)mh$.invokeExact(ptr, iFile, pnFileSizeInBytes);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemoteStorage_GetQuota {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamRemoteStorage_GetQuota"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_GetQuota(ISteamRemoteStorage ptr, uint64 *pnTotalBytes, uint64 *puAvailableBytes)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemoteStorage_GetQuota$descriptor() {
        return SteamAPI_ISteamRemoteStorage_GetQuota.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_GetQuota(ISteamRemoteStorage ptr, uint64 *pnTotalBytes, uint64 *puAvailableBytes)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemoteStorage_GetQuota$handle() {
        return SteamAPI_ISteamRemoteStorage_GetQuota.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_GetQuota(ISteamRemoteStorage ptr, uint64 *pnTotalBytes, uint64 *puAvailableBytes)
     * }
     */
    public static boolean SteamAPI_ISteamRemoteStorage_GetQuota(MemorySegment ptr, MemorySegment pnTotalBytes, MemorySegment puAvailableBytes) {
        var mh$ = SteamAPI_ISteamRemoteStorage_GetQuota.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemoteStorage_GetQuota", ptr, pnTotalBytes, puAvailableBytes);
            }
            return (boolean)mh$.invokeExact(ptr, pnTotalBytes, puAvailableBytes);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemoteStorage_IsCloudEnabledForAccount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamRemoteStorage_IsCloudEnabledForAccount"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_IsCloudEnabledForAccount(ISteamRemoteStorage ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemoteStorage_IsCloudEnabledForAccount$descriptor() {
        return SteamAPI_ISteamRemoteStorage_IsCloudEnabledForAccount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_IsCloudEnabledForAccount(ISteamRemoteStorage ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemoteStorage_IsCloudEnabledForAccount$handle() {
        return SteamAPI_ISteamRemoteStorage_IsCloudEnabledForAccount.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_IsCloudEnabledForAccount(ISteamRemoteStorage ptr)
     * }
     */
    public static boolean SteamAPI_ISteamRemoteStorage_IsCloudEnabledForAccount(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamRemoteStorage_IsCloudEnabledForAccount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemoteStorage_IsCloudEnabledForAccount", ptr);
            }
            return (boolean)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemoteStorage_IsCloudEnabledForApp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamRemoteStorage_IsCloudEnabledForApp"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_IsCloudEnabledForApp(ISteamRemoteStorage ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemoteStorage_IsCloudEnabledForApp$descriptor() {
        return SteamAPI_ISteamRemoteStorage_IsCloudEnabledForApp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_IsCloudEnabledForApp(ISteamRemoteStorage ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemoteStorage_IsCloudEnabledForApp$handle() {
        return SteamAPI_ISteamRemoteStorage_IsCloudEnabledForApp.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_IsCloudEnabledForApp(ISteamRemoteStorage ptr)
     * }
     */
    public static boolean SteamAPI_ISteamRemoteStorage_IsCloudEnabledForApp(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamRemoteStorage_IsCloudEnabledForApp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemoteStorage_IsCloudEnabledForApp", ptr);
            }
            return (boolean)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemoteStorage_SetCloudEnabledForApp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamRemoteStorage_SetCloudEnabledForApp"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamRemoteStorage_SetCloudEnabledForApp(ISteamRemoteStorage ptr, bool bEnabled)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemoteStorage_SetCloudEnabledForApp$descriptor() {
        return SteamAPI_ISteamRemoteStorage_SetCloudEnabledForApp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamRemoteStorage_SetCloudEnabledForApp(ISteamRemoteStorage ptr, bool bEnabled)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemoteStorage_SetCloudEnabledForApp$handle() {
        return SteamAPI_ISteamRemoteStorage_SetCloudEnabledForApp.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamRemoteStorage_SetCloudEnabledForApp(ISteamRemoteStorage ptr, bool bEnabled)
     * }
     */
    public static void SteamAPI_ISteamRemoteStorage_SetCloudEnabledForApp(MemorySegment ptr, boolean bEnabled) {
        var mh$ = SteamAPI_ISteamRemoteStorage_SetCloudEnabledForApp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemoteStorage_SetCloudEnabledForApp", ptr, bEnabled);
            }
            mh$.invokeExact(ptr, bEnabled);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemoteStorage_UGCDownload {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamRemoteStorage_UGCDownload"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_UGCDownload(ISteamRemoteStorage ptr, UGCHandle_t hContent, uint32 unPriority)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemoteStorage_UGCDownload$descriptor() {
        return SteamAPI_ISteamRemoteStorage_UGCDownload.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_UGCDownload(ISteamRemoteStorage ptr, UGCHandle_t hContent, uint32 unPriority)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemoteStorage_UGCDownload$handle() {
        return SteamAPI_ISteamRemoteStorage_UGCDownload.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_UGCDownload(ISteamRemoteStorage ptr, UGCHandle_t hContent, uint32 unPriority)
     * }
     */
    public static long SteamAPI_ISteamRemoteStorage_UGCDownload(MemorySegment ptr, long hContent, int unPriority) {
        var mh$ = SteamAPI_ISteamRemoteStorage_UGCDownload.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemoteStorage_UGCDownload", ptr, hContent, unPriority);
            }
            return (long)mh$.invokeExact(ptr, hContent, unPriority);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemoteStorage_GetUGCDownloadProgress {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamRemoteStorage_GetUGCDownloadProgress"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_GetUGCDownloadProgress(ISteamRemoteStorage ptr, UGCHandle_t hContent, int32 *pnBytesDownloaded, int32 *pnBytesExpected)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemoteStorage_GetUGCDownloadProgress$descriptor() {
        return SteamAPI_ISteamRemoteStorage_GetUGCDownloadProgress.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_GetUGCDownloadProgress(ISteamRemoteStorage ptr, UGCHandle_t hContent, int32 *pnBytesDownloaded, int32 *pnBytesExpected)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemoteStorage_GetUGCDownloadProgress$handle() {
        return SteamAPI_ISteamRemoteStorage_GetUGCDownloadProgress.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_GetUGCDownloadProgress(ISteamRemoteStorage ptr, UGCHandle_t hContent, int32 *pnBytesDownloaded, int32 *pnBytesExpected)
     * }
     */
    public static boolean SteamAPI_ISteamRemoteStorage_GetUGCDownloadProgress(MemorySegment ptr, long hContent, MemorySegment pnBytesDownloaded, MemorySegment pnBytesExpected) {
        var mh$ = SteamAPI_ISteamRemoteStorage_GetUGCDownloadProgress.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemoteStorage_GetUGCDownloadProgress", ptr, hContent, pnBytesDownloaded, pnBytesExpected);
            }
            return (boolean)mh$.invokeExact(ptr, hContent, pnBytesDownloaded, pnBytesExpected);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemoteStorage_GetUGCDetails {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamRemoteStorage_GetUGCDetails"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_GetUGCDetails(ISteamRemoteStorage ptr, UGCHandle_t hContent, AppId_t *pnAppID, char **ppchName, int32 *pnFileSizeInBytes, CSteamID *pSteamIDOwner)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemoteStorage_GetUGCDetails$descriptor() {
        return SteamAPI_ISteamRemoteStorage_GetUGCDetails.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_GetUGCDetails(ISteamRemoteStorage ptr, UGCHandle_t hContent, AppId_t *pnAppID, char **ppchName, int32 *pnFileSizeInBytes, CSteamID *pSteamIDOwner)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemoteStorage_GetUGCDetails$handle() {
        return SteamAPI_ISteamRemoteStorage_GetUGCDetails.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_GetUGCDetails(ISteamRemoteStorage ptr, UGCHandle_t hContent, AppId_t *pnAppID, char **ppchName, int32 *pnFileSizeInBytes, CSteamID *pSteamIDOwner)
     * }
     */
    public static boolean SteamAPI_ISteamRemoteStorage_GetUGCDetails(MemorySegment ptr, long hContent, MemorySegment pnAppID, MemorySegment ppchName, MemorySegment pnFileSizeInBytes, MemorySegment pSteamIDOwner) {
        var mh$ = SteamAPI_ISteamRemoteStorage_GetUGCDetails.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemoteStorage_GetUGCDetails", ptr, hContent, pnAppID, ppchName, pnFileSizeInBytes, pSteamIDOwner);
            }
            return (boolean)mh$.invokeExact(ptr, hContent, pnAppID, ppchName, pnFileSizeInBytes, pSteamIDOwner);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemoteStorage_UGCRead {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_INT,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamRemoteStorage_UGCRead"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int32 SteamAPI_ISteamRemoteStorage_UGCRead(ISteamRemoteStorage ptr, UGCHandle_t hContent, void *pvData, int32 cubDataToRead, uint32 cOffset, EUGCReadAction eAction)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemoteStorage_UGCRead$descriptor() {
        return SteamAPI_ISteamRemoteStorage_UGCRead.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int32 SteamAPI_ISteamRemoteStorage_UGCRead(ISteamRemoteStorage ptr, UGCHandle_t hContent, void *pvData, int32 cubDataToRead, uint32 cOffset, EUGCReadAction eAction)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemoteStorage_UGCRead$handle() {
        return SteamAPI_ISteamRemoteStorage_UGCRead.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int32 SteamAPI_ISteamRemoteStorage_UGCRead(ISteamRemoteStorage ptr, UGCHandle_t hContent, void *pvData, int32 cubDataToRead, uint32 cOffset, EUGCReadAction eAction)
     * }
     */
    public static int SteamAPI_ISteamRemoteStorage_UGCRead(MemorySegment ptr, long hContent, MemorySegment pvData, int cubDataToRead, int cOffset, int eAction) {
        var mh$ = SteamAPI_ISteamRemoteStorage_UGCRead.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemoteStorage_UGCRead", ptr, hContent, pvData, cubDataToRead, cOffset, eAction);
            }
            return (int)mh$.invokeExact(ptr, hContent, pvData, cubDataToRead, cOffset, eAction);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemoteStorage_GetCachedUGCCount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamRemoteStorage_GetCachedUGCCount"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int32 SteamAPI_ISteamRemoteStorage_GetCachedUGCCount(ISteamRemoteStorage ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemoteStorage_GetCachedUGCCount$descriptor() {
        return SteamAPI_ISteamRemoteStorage_GetCachedUGCCount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int32 SteamAPI_ISteamRemoteStorage_GetCachedUGCCount(ISteamRemoteStorage ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemoteStorage_GetCachedUGCCount$handle() {
        return SteamAPI_ISteamRemoteStorage_GetCachedUGCCount.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int32 SteamAPI_ISteamRemoteStorage_GetCachedUGCCount(ISteamRemoteStorage ptr)
     * }
     */
    public static int SteamAPI_ISteamRemoteStorage_GetCachedUGCCount(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamRemoteStorage_GetCachedUGCCount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemoteStorage_GetCachedUGCCount", ptr);
            }
            return (int)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemoteStorage_GetCachedUGCHandle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamRemoteStorage_GetCachedUGCHandle"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * UGCHandle_t SteamAPI_ISteamRemoteStorage_GetCachedUGCHandle(ISteamRemoteStorage ptr, int32 iCachedContent)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemoteStorage_GetCachedUGCHandle$descriptor() {
        return SteamAPI_ISteamRemoteStorage_GetCachedUGCHandle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * UGCHandle_t SteamAPI_ISteamRemoteStorage_GetCachedUGCHandle(ISteamRemoteStorage ptr, int32 iCachedContent)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemoteStorage_GetCachedUGCHandle$handle() {
        return SteamAPI_ISteamRemoteStorage_GetCachedUGCHandle.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * UGCHandle_t SteamAPI_ISteamRemoteStorage_GetCachedUGCHandle(ISteamRemoteStorage ptr, int32 iCachedContent)
     * }
     */
    public static long SteamAPI_ISteamRemoteStorage_GetCachedUGCHandle(MemorySegment ptr, int iCachedContent) {
        var mh$ = SteamAPI_ISteamRemoteStorage_GetCachedUGCHandle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemoteStorage_GetCachedUGCHandle", ptr, iCachedContent);
            }
            return (long)mh$.invokeExact(ptr, iCachedContent);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemoteStorage_PublishWorkshopFile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamRemoteStorage_PublishWorkshopFile"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_PublishWorkshopFile(ISteamRemoteStorage ptr, const char *pchFile, const char *pchPreviewFile, AppId_t nConsumerAppId, const char *pchTitle, const char *pchDescription, ERemoteStoragePublishedFileVisibility eVisibility, SteamParamStringArray_t *pTags, EWorkshopFileType eWorkshopFileType)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemoteStorage_PublishWorkshopFile$descriptor() {
        return SteamAPI_ISteamRemoteStorage_PublishWorkshopFile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_PublishWorkshopFile(ISteamRemoteStorage ptr, const char *pchFile, const char *pchPreviewFile, AppId_t nConsumerAppId, const char *pchTitle, const char *pchDescription, ERemoteStoragePublishedFileVisibility eVisibility, SteamParamStringArray_t *pTags, EWorkshopFileType eWorkshopFileType)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemoteStorage_PublishWorkshopFile$handle() {
        return SteamAPI_ISteamRemoteStorage_PublishWorkshopFile.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_PublishWorkshopFile(ISteamRemoteStorage ptr, const char *pchFile, const char *pchPreviewFile, AppId_t nConsumerAppId, const char *pchTitle, const char *pchDescription, ERemoteStoragePublishedFileVisibility eVisibility, SteamParamStringArray_t *pTags, EWorkshopFileType eWorkshopFileType)
     * }
     */
    public static long SteamAPI_ISteamRemoteStorage_PublishWorkshopFile(MemorySegment ptr, MemorySegment pchFile, MemorySegment pchPreviewFile, int nConsumerAppId, MemorySegment pchTitle, MemorySegment pchDescription, int eVisibility, MemorySegment pTags, int eWorkshopFileType) {
        var mh$ = SteamAPI_ISteamRemoteStorage_PublishWorkshopFile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemoteStorage_PublishWorkshopFile", ptr, pchFile, pchPreviewFile, nConsumerAppId, pchTitle, pchDescription, eVisibility, pTags, eWorkshopFileType);
            }
            return (long)mh$.invokeExact(ptr, pchFile, pchPreviewFile, nConsumerAppId, pchTitle, pchDescription, eVisibility, pTags, eWorkshopFileType);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemoteStorage_CreatePublishedFileUpdateRequest {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamRemoteStorage_CreatePublishedFileUpdateRequest"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * PublishedFileUpdateHandle_t SteamAPI_ISteamRemoteStorage_CreatePublishedFileUpdateRequest(ISteamRemoteStorage ptr, PublishedFileId_t unPublishedFileId)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemoteStorage_CreatePublishedFileUpdateRequest$descriptor() {
        return SteamAPI_ISteamRemoteStorage_CreatePublishedFileUpdateRequest.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * PublishedFileUpdateHandle_t SteamAPI_ISteamRemoteStorage_CreatePublishedFileUpdateRequest(ISteamRemoteStorage ptr, PublishedFileId_t unPublishedFileId)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemoteStorage_CreatePublishedFileUpdateRequest$handle() {
        return SteamAPI_ISteamRemoteStorage_CreatePublishedFileUpdateRequest.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * PublishedFileUpdateHandle_t SteamAPI_ISteamRemoteStorage_CreatePublishedFileUpdateRequest(ISteamRemoteStorage ptr, PublishedFileId_t unPublishedFileId)
     * }
     */
    public static long SteamAPI_ISteamRemoteStorage_CreatePublishedFileUpdateRequest(MemorySegment ptr, long unPublishedFileId) {
        var mh$ = SteamAPI_ISteamRemoteStorage_CreatePublishedFileUpdateRequest.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemoteStorage_CreatePublishedFileUpdateRequest", ptr, unPublishedFileId);
            }
            return (long)mh$.invokeExact(ptr, unPublishedFileId);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemoteStorage_UpdatePublishedFileFile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamRemoteStorage_UpdatePublishedFileFile"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileFile(ISteamRemoteStorage ptr, PublishedFileUpdateHandle_t updateHandle, const char *pchFile)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemoteStorage_UpdatePublishedFileFile$descriptor() {
        return SteamAPI_ISteamRemoteStorage_UpdatePublishedFileFile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileFile(ISteamRemoteStorage ptr, PublishedFileUpdateHandle_t updateHandle, const char *pchFile)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemoteStorage_UpdatePublishedFileFile$handle() {
        return SteamAPI_ISteamRemoteStorage_UpdatePublishedFileFile.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileFile(ISteamRemoteStorage ptr, PublishedFileUpdateHandle_t updateHandle, const char *pchFile)
     * }
     */
    public static boolean SteamAPI_ISteamRemoteStorage_UpdatePublishedFileFile(MemorySegment ptr, long updateHandle, MemorySegment pchFile) {
        var mh$ = SteamAPI_ISteamRemoteStorage_UpdatePublishedFileFile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemoteStorage_UpdatePublishedFileFile", ptr, updateHandle, pchFile);
            }
            return (boolean)mh$.invokeExact(ptr, updateHandle, pchFile);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemoteStorage_UpdatePublishedFilePreviewFile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamRemoteStorage_UpdatePublishedFilePreviewFile"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFilePreviewFile(ISteamRemoteStorage ptr, PublishedFileUpdateHandle_t updateHandle, const char *pchPreviewFile)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemoteStorage_UpdatePublishedFilePreviewFile$descriptor() {
        return SteamAPI_ISteamRemoteStorage_UpdatePublishedFilePreviewFile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFilePreviewFile(ISteamRemoteStorage ptr, PublishedFileUpdateHandle_t updateHandle, const char *pchPreviewFile)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemoteStorage_UpdatePublishedFilePreviewFile$handle() {
        return SteamAPI_ISteamRemoteStorage_UpdatePublishedFilePreviewFile.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFilePreviewFile(ISteamRemoteStorage ptr, PublishedFileUpdateHandle_t updateHandle, const char *pchPreviewFile)
     * }
     */
    public static boolean SteamAPI_ISteamRemoteStorage_UpdatePublishedFilePreviewFile(MemorySegment ptr, long updateHandle, MemorySegment pchPreviewFile) {
        var mh$ = SteamAPI_ISteamRemoteStorage_UpdatePublishedFilePreviewFile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemoteStorage_UpdatePublishedFilePreviewFile", ptr, updateHandle, pchPreviewFile);
            }
            return (boolean)mh$.invokeExact(ptr, updateHandle, pchPreviewFile);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTitle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTitle"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTitle(ISteamRemoteStorage ptr, PublishedFileUpdateHandle_t updateHandle, const char *pchTitle)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTitle$descriptor() {
        return SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTitle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTitle(ISteamRemoteStorage ptr, PublishedFileUpdateHandle_t updateHandle, const char *pchTitle)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTitle$handle() {
        return SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTitle.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTitle(ISteamRemoteStorage ptr, PublishedFileUpdateHandle_t updateHandle, const char *pchTitle)
     * }
     */
    public static boolean SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTitle(MemorySegment ptr, long updateHandle, MemorySegment pchTitle) {
        var mh$ = SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTitle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTitle", ptr, updateHandle, pchTitle);
            }
            return (boolean)mh$.invokeExact(ptr, updateHandle, pchTitle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemoteStorage_UpdatePublishedFileDescription {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamRemoteStorage_UpdatePublishedFileDescription"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileDescription(ISteamRemoteStorage ptr, PublishedFileUpdateHandle_t updateHandle, const char *pchDescription)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemoteStorage_UpdatePublishedFileDescription$descriptor() {
        return SteamAPI_ISteamRemoteStorage_UpdatePublishedFileDescription.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileDescription(ISteamRemoteStorage ptr, PublishedFileUpdateHandle_t updateHandle, const char *pchDescription)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemoteStorage_UpdatePublishedFileDescription$handle() {
        return SteamAPI_ISteamRemoteStorage_UpdatePublishedFileDescription.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileDescription(ISteamRemoteStorage ptr, PublishedFileUpdateHandle_t updateHandle, const char *pchDescription)
     * }
     */
    public static boolean SteamAPI_ISteamRemoteStorage_UpdatePublishedFileDescription(MemorySegment ptr, long updateHandle, MemorySegment pchDescription) {
        var mh$ = SteamAPI_ISteamRemoteStorage_UpdatePublishedFileDescription.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemoteStorage_UpdatePublishedFileDescription", ptr, updateHandle, pchDescription);
            }
            return (boolean)mh$.invokeExact(ptr, updateHandle, pchDescription);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemoteStorage_UpdatePublishedFileVisibility {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamRemoteStorage_UpdatePublishedFileVisibility"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileVisibility(ISteamRemoteStorage ptr, PublishedFileUpdateHandle_t updateHandle, ERemoteStoragePublishedFileVisibility eVisibility)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemoteStorage_UpdatePublishedFileVisibility$descriptor() {
        return SteamAPI_ISteamRemoteStorage_UpdatePublishedFileVisibility.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileVisibility(ISteamRemoteStorage ptr, PublishedFileUpdateHandle_t updateHandle, ERemoteStoragePublishedFileVisibility eVisibility)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemoteStorage_UpdatePublishedFileVisibility$handle() {
        return SteamAPI_ISteamRemoteStorage_UpdatePublishedFileVisibility.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileVisibility(ISteamRemoteStorage ptr, PublishedFileUpdateHandle_t updateHandle, ERemoteStoragePublishedFileVisibility eVisibility)
     * }
     */
    public static boolean SteamAPI_ISteamRemoteStorage_UpdatePublishedFileVisibility(MemorySegment ptr, long updateHandle, int eVisibility) {
        var mh$ = SteamAPI_ISteamRemoteStorage_UpdatePublishedFileVisibility.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemoteStorage_UpdatePublishedFileVisibility", ptr, updateHandle, eVisibility);
            }
            return (boolean)mh$.invokeExact(ptr, updateHandle, eVisibility);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTags"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTags(ISteamRemoteStorage ptr, PublishedFileUpdateHandle_t updateHandle, SteamParamStringArray_t *pTags)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTags$descriptor() {
        return SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTags(ISteamRemoteStorage ptr, PublishedFileUpdateHandle_t updateHandle, SteamParamStringArray_t *pTags)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTags$handle() {
        return SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTags.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTags(ISteamRemoteStorage ptr, PublishedFileUpdateHandle_t updateHandle, SteamParamStringArray_t *pTags)
     * }
     */
    public static boolean SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTags(MemorySegment ptr, long updateHandle, MemorySegment pTags) {
        var mh$ = SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTags", ptr, updateHandle, pTags);
            }
            return (boolean)mh$.invokeExact(ptr, updateHandle, pTags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemoteStorage_CommitPublishedFileUpdate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamRemoteStorage_CommitPublishedFileUpdate"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_CommitPublishedFileUpdate(ISteamRemoteStorage ptr, PublishedFileUpdateHandle_t updateHandle)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemoteStorage_CommitPublishedFileUpdate$descriptor() {
        return SteamAPI_ISteamRemoteStorage_CommitPublishedFileUpdate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_CommitPublishedFileUpdate(ISteamRemoteStorage ptr, PublishedFileUpdateHandle_t updateHandle)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemoteStorage_CommitPublishedFileUpdate$handle() {
        return SteamAPI_ISteamRemoteStorage_CommitPublishedFileUpdate.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_CommitPublishedFileUpdate(ISteamRemoteStorage ptr, PublishedFileUpdateHandle_t updateHandle)
     * }
     */
    public static long SteamAPI_ISteamRemoteStorage_CommitPublishedFileUpdate(MemorySegment ptr, long updateHandle) {
        var mh$ = SteamAPI_ISteamRemoteStorage_CommitPublishedFileUpdate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemoteStorage_CommitPublishedFileUpdate", ptr, updateHandle);
            }
            return (long)mh$.invokeExact(ptr, updateHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemoteStorage_GetPublishedFileDetails {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamRemoteStorage_GetPublishedFileDetails"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_GetPublishedFileDetails(ISteamRemoteStorage ptr, PublishedFileId_t unPublishedFileId, uint32 unMaxSecondsOld)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemoteStorage_GetPublishedFileDetails$descriptor() {
        return SteamAPI_ISteamRemoteStorage_GetPublishedFileDetails.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_GetPublishedFileDetails(ISteamRemoteStorage ptr, PublishedFileId_t unPublishedFileId, uint32 unMaxSecondsOld)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemoteStorage_GetPublishedFileDetails$handle() {
        return SteamAPI_ISteamRemoteStorage_GetPublishedFileDetails.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_GetPublishedFileDetails(ISteamRemoteStorage ptr, PublishedFileId_t unPublishedFileId, uint32 unMaxSecondsOld)
     * }
     */
    public static long SteamAPI_ISteamRemoteStorage_GetPublishedFileDetails(MemorySegment ptr, long unPublishedFileId, int unMaxSecondsOld) {
        var mh$ = SteamAPI_ISteamRemoteStorage_GetPublishedFileDetails.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemoteStorage_GetPublishedFileDetails", ptr, unPublishedFileId, unMaxSecondsOld);
            }
            return (long)mh$.invokeExact(ptr, unPublishedFileId, unMaxSecondsOld);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemoteStorage_DeletePublishedFile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamRemoteStorage_DeletePublishedFile"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_DeletePublishedFile(ISteamRemoteStorage ptr, PublishedFileId_t unPublishedFileId)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemoteStorage_DeletePublishedFile$descriptor() {
        return SteamAPI_ISteamRemoteStorage_DeletePublishedFile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_DeletePublishedFile(ISteamRemoteStorage ptr, PublishedFileId_t unPublishedFileId)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemoteStorage_DeletePublishedFile$handle() {
        return SteamAPI_ISteamRemoteStorage_DeletePublishedFile.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_DeletePublishedFile(ISteamRemoteStorage ptr, PublishedFileId_t unPublishedFileId)
     * }
     */
    public static long SteamAPI_ISteamRemoteStorage_DeletePublishedFile(MemorySegment ptr, long unPublishedFileId) {
        var mh$ = SteamAPI_ISteamRemoteStorage_DeletePublishedFile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemoteStorage_DeletePublishedFile", ptr, unPublishedFileId);
            }
            return (long)mh$.invokeExact(ptr, unPublishedFileId);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemoteStorage_EnumerateUserPublishedFiles {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamRemoteStorage_EnumerateUserPublishedFiles"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumerateUserPublishedFiles(ISteamRemoteStorage ptr, uint32 unStartIndex)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemoteStorage_EnumerateUserPublishedFiles$descriptor() {
        return SteamAPI_ISteamRemoteStorage_EnumerateUserPublishedFiles.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumerateUserPublishedFiles(ISteamRemoteStorage ptr, uint32 unStartIndex)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemoteStorage_EnumerateUserPublishedFiles$handle() {
        return SteamAPI_ISteamRemoteStorage_EnumerateUserPublishedFiles.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumerateUserPublishedFiles(ISteamRemoteStorage ptr, uint32 unStartIndex)
     * }
     */
    public static long SteamAPI_ISteamRemoteStorage_EnumerateUserPublishedFiles(MemorySegment ptr, int unStartIndex) {
        var mh$ = SteamAPI_ISteamRemoteStorage_EnumerateUserPublishedFiles.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemoteStorage_EnumerateUserPublishedFiles", ptr, unStartIndex);
            }
            return (long)mh$.invokeExact(ptr, unStartIndex);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemoteStorage_SubscribePublishedFile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamRemoteStorage_SubscribePublishedFile"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_SubscribePublishedFile(ISteamRemoteStorage ptr, PublishedFileId_t unPublishedFileId)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemoteStorage_SubscribePublishedFile$descriptor() {
        return SteamAPI_ISteamRemoteStorage_SubscribePublishedFile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_SubscribePublishedFile(ISteamRemoteStorage ptr, PublishedFileId_t unPublishedFileId)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemoteStorage_SubscribePublishedFile$handle() {
        return SteamAPI_ISteamRemoteStorage_SubscribePublishedFile.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_SubscribePublishedFile(ISteamRemoteStorage ptr, PublishedFileId_t unPublishedFileId)
     * }
     */
    public static long SteamAPI_ISteamRemoteStorage_SubscribePublishedFile(MemorySegment ptr, long unPublishedFileId) {
        var mh$ = SteamAPI_ISteamRemoteStorage_SubscribePublishedFile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemoteStorage_SubscribePublishedFile", ptr, unPublishedFileId);
            }
            return (long)mh$.invokeExact(ptr, unPublishedFileId);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemoteStorage_EnumerateUserSubscribedFiles {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamRemoteStorage_EnumerateUserSubscribedFiles"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumerateUserSubscribedFiles(ISteamRemoteStorage ptr, uint32 unStartIndex)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemoteStorage_EnumerateUserSubscribedFiles$descriptor() {
        return SteamAPI_ISteamRemoteStorage_EnumerateUserSubscribedFiles.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumerateUserSubscribedFiles(ISteamRemoteStorage ptr, uint32 unStartIndex)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemoteStorage_EnumerateUserSubscribedFiles$handle() {
        return SteamAPI_ISteamRemoteStorage_EnumerateUserSubscribedFiles.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumerateUserSubscribedFiles(ISteamRemoteStorage ptr, uint32 unStartIndex)
     * }
     */
    public static long SteamAPI_ISteamRemoteStorage_EnumerateUserSubscribedFiles(MemorySegment ptr, int unStartIndex) {
        var mh$ = SteamAPI_ISteamRemoteStorage_EnumerateUserSubscribedFiles.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemoteStorage_EnumerateUserSubscribedFiles", ptr, unStartIndex);
            }
            return (long)mh$.invokeExact(ptr, unStartIndex);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemoteStorage_UnsubscribePublishedFile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamRemoteStorage_UnsubscribePublishedFile"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_UnsubscribePublishedFile(ISteamRemoteStorage ptr, PublishedFileId_t unPublishedFileId)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemoteStorage_UnsubscribePublishedFile$descriptor() {
        return SteamAPI_ISteamRemoteStorage_UnsubscribePublishedFile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_UnsubscribePublishedFile(ISteamRemoteStorage ptr, PublishedFileId_t unPublishedFileId)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemoteStorage_UnsubscribePublishedFile$handle() {
        return SteamAPI_ISteamRemoteStorage_UnsubscribePublishedFile.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_UnsubscribePublishedFile(ISteamRemoteStorage ptr, PublishedFileId_t unPublishedFileId)
     * }
     */
    public static long SteamAPI_ISteamRemoteStorage_UnsubscribePublishedFile(MemorySegment ptr, long unPublishedFileId) {
        var mh$ = SteamAPI_ISteamRemoteStorage_UnsubscribePublishedFile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemoteStorage_UnsubscribePublishedFile", ptr, unPublishedFileId);
            }
            return (long)mh$.invokeExact(ptr, unPublishedFileId);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemoteStorage_UpdatePublishedFileSetChangeDescription {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamRemoteStorage_UpdatePublishedFileSetChangeDescription"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileSetChangeDescription(ISteamRemoteStorage ptr, PublishedFileUpdateHandle_t updateHandle, const char *pchChangeDescription)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemoteStorage_UpdatePublishedFileSetChangeDescription$descriptor() {
        return SteamAPI_ISteamRemoteStorage_UpdatePublishedFileSetChangeDescription.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileSetChangeDescription(ISteamRemoteStorage ptr, PublishedFileUpdateHandle_t updateHandle, const char *pchChangeDescription)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemoteStorage_UpdatePublishedFileSetChangeDescription$handle() {
        return SteamAPI_ISteamRemoteStorage_UpdatePublishedFileSetChangeDescription.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileSetChangeDescription(ISteamRemoteStorage ptr, PublishedFileUpdateHandle_t updateHandle, const char *pchChangeDescription)
     * }
     */
    public static boolean SteamAPI_ISteamRemoteStorage_UpdatePublishedFileSetChangeDescription(MemorySegment ptr, long updateHandle, MemorySegment pchChangeDescription) {
        var mh$ = SteamAPI_ISteamRemoteStorage_UpdatePublishedFileSetChangeDescription.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemoteStorage_UpdatePublishedFileSetChangeDescription", ptr, updateHandle, pchChangeDescription);
            }
            return (boolean)mh$.invokeExact(ptr, updateHandle, pchChangeDescription);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemoteStorage_GetPublishedItemVoteDetails {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamRemoteStorage_GetPublishedItemVoteDetails"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_GetPublishedItemVoteDetails(ISteamRemoteStorage ptr, PublishedFileId_t unPublishedFileId)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemoteStorage_GetPublishedItemVoteDetails$descriptor() {
        return SteamAPI_ISteamRemoteStorage_GetPublishedItemVoteDetails.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_GetPublishedItemVoteDetails(ISteamRemoteStorage ptr, PublishedFileId_t unPublishedFileId)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemoteStorage_GetPublishedItemVoteDetails$handle() {
        return SteamAPI_ISteamRemoteStorage_GetPublishedItemVoteDetails.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_GetPublishedItemVoteDetails(ISteamRemoteStorage ptr, PublishedFileId_t unPublishedFileId)
     * }
     */
    public static long SteamAPI_ISteamRemoteStorage_GetPublishedItemVoteDetails(MemorySegment ptr, long unPublishedFileId) {
        var mh$ = SteamAPI_ISteamRemoteStorage_GetPublishedItemVoteDetails.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemoteStorage_GetPublishedItemVoteDetails", ptr, unPublishedFileId);
            }
            return (long)mh$.invokeExact(ptr, unPublishedFileId);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemoteStorage_UpdateUserPublishedItemVote {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamRemoteStorage_UpdateUserPublishedItemVote"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_UpdateUserPublishedItemVote(ISteamRemoteStorage ptr, PublishedFileId_t unPublishedFileId, bool bVoteUp)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemoteStorage_UpdateUserPublishedItemVote$descriptor() {
        return SteamAPI_ISteamRemoteStorage_UpdateUserPublishedItemVote.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_UpdateUserPublishedItemVote(ISteamRemoteStorage ptr, PublishedFileId_t unPublishedFileId, bool bVoteUp)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemoteStorage_UpdateUserPublishedItemVote$handle() {
        return SteamAPI_ISteamRemoteStorage_UpdateUserPublishedItemVote.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_UpdateUserPublishedItemVote(ISteamRemoteStorage ptr, PublishedFileId_t unPublishedFileId, bool bVoteUp)
     * }
     */
    public static long SteamAPI_ISteamRemoteStorage_UpdateUserPublishedItemVote(MemorySegment ptr, long unPublishedFileId, boolean bVoteUp) {
        var mh$ = SteamAPI_ISteamRemoteStorage_UpdateUserPublishedItemVote.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemoteStorage_UpdateUserPublishedItemVote", ptr, unPublishedFileId, bVoteUp);
            }
            return (long)mh$.invokeExact(ptr, unPublishedFileId, bVoteUp);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemoteStorage_GetUserPublishedItemVoteDetails {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamRemoteStorage_GetUserPublishedItemVoteDetails"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_GetUserPublishedItemVoteDetails(ISteamRemoteStorage ptr, PublishedFileId_t unPublishedFileId)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemoteStorage_GetUserPublishedItemVoteDetails$descriptor() {
        return SteamAPI_ISteamRemoteStorage_GetUserPublishedItemVoteDetails.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_GetUserPublishedItemVoteDetails(ISteamRemoteStorage ptr, PublishedFileId_t unPublishedFileId)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemoteStorage_GetUserPublishedItemVoteDetails$handle() {
        return SteamAPI_ISteamRemoteStorage_GetUserPublishedItemVoteDetails.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_GetUserPublishedItemVoteDetails(ISteamRemoteStorage ptr, PublishedFileId_t unPublishedFileId)
     * }
     */
    public static long SteamAPI_ISteamRemoteStorage_GetUserPublishedItemVoteDetails(MemorySegment ptr, long unPublishedFileId) {
        var mh$ = SteamAPI_ISteamRemoteStorage_GetUserPublishedItemVoteDetails.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemoteStorage_GetUserPublishedItemVoteDetails", ptr, unPublishedFileId);
            }
            return (long)mh$.invokeExact(ptr, unPublishedFileId);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemoteStorage_EnumerateUserSharedWorkshopFiles {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamRemoteStorage_EnumerateUserSharedWorkshopFiles"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumerateUserSharedWorkshopFiles(ISteamRemoteStorage ptr, uint64_steamid steamId, uint32 unStartIndex, SteamParamStringArray_t *pRequiredTags, SteamParamStringArray_t *pExcludedTags)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemoteStorage_EnumerateUserSharedWorkshopFiles$descriptor() {
        return SteamAPI_ISteamRemoteStorage_EnumerateUserSharedWorkshopFiles.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumerateUserSharedWorkshopFiles(ISteamRemoteStorage ptr, uint64_steamid steamId, uint32 unStartIndex, SteamParamStringArray_t *pRequiredTags, SteamParamStringArray_t *pExcludedTags)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemoteStorage_EnumerateUserSharedWorkshopFiles$handle() {
        return SteamAPI_ISteamRemoteStorage_EnumerateUserSharedWorkshopFiles.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumerateUserSharedWorkshopFiles(ISteamRemoteStorage ptr, uint64_steamid steamId, uint32 unStartIndex, SteamParamStringArray_t *pRequiredTags, SteamParamStringArray_t *pExcludedTags)
     * }
     */
    public static long SteamAPI_ISteamRemoteStorage_EnumerateUserSharedWorkshopFiles(MemorySegment ptr, long steamId, int unStartIndex, MemorySegment pRequiredTags, MemorySegment pExcludedTags) {
        var mh$ = SteamAPI_ISteamRemoteStorage_EnumerateUserSharedWorkshopFiles.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemoteStorage_EnumerateUserSharedWorkshopFiles", ptr, steamId, unStartIndex, pRequiredTags, pExcludedTags);
            }
            return (long)mh$.invokeExact(ptr, steamId, unStartIndex, pRequiredTags, pExcludedTags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemoteStorage_PublishVideo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamRemoteStorage_PublishVideo"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_PublishVideo(ISteamRemoteStorage ptr, EWorkshopVideoProvider eVideoProvider, const char *pchVideoAccount, const char *pchVideoIdentifier, const char *pchPreviewFile, AppId_t nConsumerAppId, const char *pchTitle, const char *pchDescription, ERemoteStoragePublishedFileVisibility eVisibility, SteamParamStringArray_t *pTags)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemoteStorage_PublishVideo$descriptor() {
        return SteamAPI_ISteamRemoteStorage_PublishVideo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_PublishVideo(ISteamRemoteStorage ptr, EWorkshopVideoProvider eVideoProvider, const char *pchVideoAccount, const char *pchVideoIdentifier, const char *pchPreviewFile, AppId_t nConsumerAppId, const char *pchTitle, const char *pchDescription, ERemoteStoragePublishedFileVisibility eVisibility, SteamParamStringArray_t *pTags)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemoteStorage_PublishVideo$handle() {
        return SteamAPI_ISteamRemoteStorage_PublishVideo.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_PublishVideo(ISteamRemoteStorage ptr, EWorkshopVideoProvider eVideoProvider, const char *pchVideoAccount, const char *pchVideoIdentifier, const char *pchPreviewFile, AppId_t nConsumerAppId, const char *pchTitle, const char *pchDescription, ERemoteStoragePublishedFileVisibility eVisibility, SteamParamStringArray_t *pTags)
     * }
     */
    public static long SteamAPI_ISteamRemoteStorage_PublishVideo(MemorySegment ptr, int eVideoProvider, MemorySegment pchVideoAccount, MemorySegment pchVideoIdentifier, MemorySegment pchPreviewFile, int nConsumerAppId, MemorySegment pchTitle, MemorySegment pchDescription, int eVisibility, MemorySegment pTags) {
        var mh$ = SteamAPI_ISteamRemoteStorage_PublishVideo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemoteStorage_PublishVideo", ptr, eVideoProvider, pchVideoAccount, pchVideoIdentifier, pchPreviewFile, nConsumerAppId, pchTitle, pchDescription, eVisibility, pTags);
            }
            return (long)mh$.invokeExact(ptr, eVideoProvider, pchVideoAccount, pchVideoIdentifier, pchPreviewFile, nConsumerAppId, pchTitle, pchDescription, eVisibility, pTags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemoteStorage_SetUserPublishedFileAction {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamRemoteStorage_SetUserPublishedFileAction"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_SetUserPublishedFileAction(ISteamRemoteStorage ptr, PublishedFileId_t unPublishedFileId, EWorkshopFileAction eAction)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemoteStorage_SetUserPublishedFileAction$descriptor() {
        return SteamAPI_ISteamRemoteStorage_SetUserPublishedFileAction.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_SetUserPublishedFileAction(ISteamRemoteStorage ptr, PublishedFileId_t unPublishedFileId, EWorkshopFileAction eAction)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemoteStorage_SetUserPublishedFileAction$handle() {
        return SteamAPI_ISteamRemoteStorage_SetUserPublishedFileAction.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_SetUserPublishedFileAction(ISteamRemoteStorage ptr, PublishedFileId_t unPublishedFileId, EWorkshopFileAction eAction)
     * }
     */
    public static long SteamAPI_ISteamRemoteStorage_SetUserPublishedFileAction(MemorySegment ptr, long unPublishedFileId, int eAction) {
        var mh$ = SteamAPI_ISteamRemoteStorage_SetUserPublishedFileAction.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemoteStorage_SetUserPublishedFileAction", ptr, unPublishedFileId, eAction);
            }
            return (long)mh$.invokeExact(ptr, unPublishedFileId, eAction);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemoteStorage_EnumeratePublishedFilesByUserAction {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamRemoteStorage_EnumeratePublishedFilesByUserAction"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumeratePublishedFilesByUserAction(ISteamRemoteStorage ptr, EWorkshopFileAction eAction, uint32 unStartIndex)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemoteStorage_EnumeratePublishedFilesByUserAction$descriptor() {
        return SteamAPI_ISteamRemoteStorage_EnumeratePublishedFilesByUserAction.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumeratePublishedFilesByUserAction(ISteamRemoteStorage ptr, EWorkshopFileAction eAction, uint32 unStartIndex)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemoteStorage_EnumeratePublishedFilesByUserAction$handle() {
        return SteamAPI_ISteamRemoteStorage_EnumeratePublishedFilesByUserAction.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumeratePublishedFilesByUserAction(ISteamRemoteStorage ptr, EWorkshopFileAction eAction, uint32 unStartIndex)
     * }
     */
    public static long SteamAPI_ISteamRemoteStorage_EnumeratePublishedFilesByUserAction(MemorySegment ptr, int eAction, int unStartIndex) {
        var mh$ = SteamAPI_ISteamRemoteStorage_EnumeratePublishedFilesByUserAction.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemoteStorage_EnumeratePublishedFilesByUserAction", ptr, eAction, unStartIndex);
            }
            return (long)mh$.invokeExact(ptr, eAction, unStartIndex);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemoteStorage_EnumeratePublishedWorkshopFiles {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_INT,
            SteamFlat.C_INT,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamRemoteStorage_EnumeratePublishedWorkshopFiles"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumeratePublishedWorkshopFiles(ISteamRemoteStorage ptr, EWorkshopEnumerationType eEnumerationType, uint32 unStartIndex, uint32 unCount, uint32 unDays, SteamParamStringArray_t *pTags, SteamParamStringArray_t *pUserTags)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemoteStorage_EnumeratePublishedWorkshopFiles$descriptor() {
        return SteamAPI_ISteamRemoteStorage_EnumeratePublishedWorkshopFiles.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumeratePublishedWorkshopFiles(ISteamRemoteStorage ptr, EWorkshopEnumerationType eEnumerationType, uint32 unStartIndex, uint32 unCount, uint32 unDays, SteamParamStringArray_t *pTags, SteamParamStringArray_t *pUserTags)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemoteStorage_EnumeratePublishedWorkshopFiles$handle() {
        return SteamAPI_ISteamRemoteStorage_EnumeratePublishedWorkshopFiles.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumeratePublishedWorkshopFiles(ISteamRemoteStorage ptr, EWorkshopEnumerationType eEnumerationType, uint32 unStartIndex, uint32 unCount, uint32 unDays, SteamParamStringArray_t *pTags, SteamParamStringArray_t *pUserTags)
     * }
     */
    public static long SteamAPI_ISteamRemoteStorage_EnumeratePublishedWorkshopFiles(MemorySegment ptr, int eEnumerationType, int unStartIndex, int unCount, int unDays, MemorySegment pTags, MemorySegment pUserTags) {
        var mh$ = SteamAPI_ISteamRemoteStorage_EnumeratePublishedWorkshopFiles.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemoteStorage_EnumeratePublishedWorkshopFiles", ptr, eEnumerationType, unStartIndex, unCount, unDays, pTags, pUserTags);
            }
            return (long)mh$.invokeExact(ptr, eEnumerationType, unStartIndex, unCount, unDays, pTags, pUserTags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemoteStorage_UGCDownloadToLocation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamRemoteStorage_UGCDownloadToLocation"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_UGCDownloadToLocation(ISteamRemoteStorage ptr, UGCHandle_t hContent, const char *pchLocation, uint32 unPriority)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemoteStorage_UGCDownloadToLocation$descriptor() {
        return SteamAPI_ISteamRemoteStorage_UGCDownloadToLocation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_UGCDownloadToLocation(ISteamRemoteStorage ptr, UGCHandle_t hContent, const char *pchLocation, uint32 unPriority)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemoteStorage_UGCDownloadToLocation$handle() {
        return SteamAPI_ISteamRemoteStorage_UGCDownloadToLocation.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_UGCDownloadToLocation(ISteamRemoteStorage ptr, UGCHandle_t hContent, const char *pchLocation, uint32 unPriority)
     * }
     */
    public static long SteamAPI_ISteamRemoteStorage_UGCDownloadToLocation(MemorySegment ptr, long hContent, MemorySegment pchLocation, int unPriority) {
        var mh$ = SteamAPI_ISteamRemoteStorage_UGCDownloadToLocation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemoteStorage_UGCDownloadToLocation", ptr, hContent, pchLocation, unPriority);
            }
            return (long)mh$.invokeExact(ptr, hContent, pchLocation, unPriority);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemoteStorage_GetLocalFileChangeCount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamRemoteStorage_GetLocalFileChangeCount"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int32 SteamAPI_ISteamRemoteStorage_GetLocalFileChangeCount(ISteamRemoteStorage ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemoteStorage_GetLocalFileChangeCount$descriptor() {
        return SteamAPI_ISteamRemoteStorage_GetLocalFileChangeCount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int32 SteamAPI_ISteamRemoteStorage_GetLocalFileChangeCount(ISteamRemoteStorage ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemoteStorage_GetLocalFileChangeCount$handle() {
        return SteamAPI_ISteamRemoteStorage_GetLocalFileChangeCount.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int32 SteamAPI_ISteamRemoteStorage_GetLocalFileChangeCount(ISteamRemoteStorage ptr)
     * }
     */
    public static int SteamAPI_ISteamRemoteStorage_GetLocalFileChangeCount(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamRemoteStorage_GetLocalFileChangeCount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemoteStorage_GetLocalFileChangeCount", ptr);
            }
            return (int)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemoteStorage_GetLocalFileChange {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamRemoteStorage_GetLocalFileChange"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamRemoteStorage_GetLocalFileChange(ISteamRemoteStorage ptr, int iFile, ERemoteStorageLocalFileChange *pEChangeType, ERemoteStorageFilePathType *pEFilePathType)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemoteStorage_GetLocalFileChange$descriptor() {
        return SteamAPI_ISteamRemoteStorage_GetLocalFileChange.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamRemoteStorage_GetLocalFileChange(ISteamRemoteStorage ptr, int iFile, ERemoteStorageLocalFileChange *pEChangeType, ERemoteStorageFilePathType *pEFilePathType)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemoteStorage_GetLocalFileChange$handle() {
        return SteamAPI_ISteamRemoteStorage_GetLocalFileChange.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamRemoteStorage_GetLocalFileChange(ISteamRemoteStorage ptr, int iFile, ERemoteStorageLocalFileChange *pEChangeType, ERemoteStorageFilePathType *pEFilePathType)
     * }
     */
    public static MemorySegment SteamAPI_ISteamRemoteStorage_GetLocalFileChange(MemorySegment ptr, int iFile, MemorySegment pEChangeType, MemorySegment pEFilePathType) {
        var mh$ = SteamAPI_ISteamRemoteStorage_GetLocalFileChange.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemoteStorage_GetLocalFileChange", ptr, iFile, pEChangeType, pEFilePathType);
            }
            return (MemorySegment)mh$.invokeExact(ptr, iFile, pEChangeType, pEFilePathType);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemoteStorage_BeginFileWriteBatch {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamRemoteStorage_BeginFileWriteBatch"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_BeginFileWriteBatch(ISteamRemoteStorage ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemoteStorage_BeginFileWriteBatch$descriptor() {
        return SteamAPI_ISteamRemoteStorage_BeginFileWriteBatch.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_BeginFileWriteBatch(ISteamRemoteStorage ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemoteStorage_BeginFileWriteBatch$handle() {
        return SteamAPI_ISteamRemoteStorage_BeginFileWriteBatch.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_BeginFileWriteBatch(ISteamRemoteStorage ptr)
     * }
     */
    public static boolean SteamAPI_ISteamRemoteStorage_BeginFileWriteBatch(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamRemoteStorage_BeginFileWriteBatch.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemoteStorage_BeginFileWriteBatch", ptr);
            }
            return (boolean)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemoteStorage_EndFileWriteBatch {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamRemoteStorage_EndFileWriteBatch"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_EndFileWriteBatch(ISteamRemoteStorage ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemoteStorage_EndFileWriteBatch$descriptor() {
        return SteamAPI_ISteamRemoteStorage_EndFileWriteBatch.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_EndFileWriteBatch(ISteamRemoteStorage ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemoteStorage_EndFileWriteBatch$handle() {
        return SteamAPI_ISteamRemoteStorage_EndFileWriteBatch.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_EndFileWriteBatch(ISteamRemoteStorage ptr)
     * }
     */
    public static boolean SteamAPI_ISteamRemoteStorage_EndFileWriteBatch(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamRemoteStorage_EndFileWriteBatch.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemoteStorage_EndFileWriteBatch", ptr);
            }
            return (boolean)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_SteamRemoteStorage_v016 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_SteamRemoteStorage_v016"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ISteamRemoteStorage SteamAPI_SteamRemoteStorage_v016()
     * }
     */
    public static FunctionDescriptor SteamAPI_SteamRemoteStorage_v016$descriptor() {
        return SteamAPI_SteamRemoteStorage_v016.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ISteamRemoteStorage SteamAPI_SteamRemoteStorage_v016()
     * }
     */
    public static MethodHandle SteamAPI_SteamRemoteStorage_v016$handle() {
        return SteamAPI_SteamRemoteStorage_v016.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ISteamRemoteStorage SteamAPI_SteamRemoteStorage_v016()
     * }
     */
    public static MemorySegment SteamAPI_SteamRemoteStorage_v016() {
        var mh$ = SteamAPI_SteamRemoteStorage_v016.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_SteamRemoteStorage_v016");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUserStats_RequestCurrentStats {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUserStats_RequestCurrentStats"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_RequestCurrentStats(ISteamUserStats ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUserStats_RequestCurrentStats$descriptor() {
        return SteamAPI_ISteamUserStats_RequestCurrentStats.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_RequestCurrentStats(ISteamUserStats ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUserStats_RequestCurrentStats$handle() {
        return SteamAPI_ISteamUserStats_RequestCurrentStats.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_RequestCurrentStats(ISteamUserStats ptr)
     * }
     */
    public static boolean SteamAPI_ISteamUserStats_RequestCurrentStats(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamUserStats_RequestCurrentStats.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUserStats_RequestCurrentStats", ptr);
            }
            return (boolean)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUserStats_GetStatInt32 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUserStats_GetStatInt32"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_GetStatInt32(ISteamUserStats ptr, const char *pchName, int32 *pData)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUserStats_GetStatInt32$descriptor() {
        return SteamAPI_ISteamUserStats_GetStatInt32.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_GetStatInt32(ISteamUserStats ptr, const char *pchName, int32 *pData)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUserStats_GetStatInt32$handle() {
        return SteamAPI_ISteamUserStats_GetStatInt32.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_GetStatInt32(ISteamUserStats ptr, const char *pchName, int32 *pData)
     * }
     */
    public static boolean SteamAPI_ISteamUserStats_GetStatInt32(MemorySegment ptr, MemorySegment pchName, MemorySegment pData) {
        var mh$ = SteamAPI_ISteamUserStats_GetStatInt32.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUserStats_GetStatInt32", ptr, pchName, pData);
            }
            return (boolean)mh$.invokeExact(ptr, pchName, pData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUserStats_GetStatFloat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUserStats_GetStatFloat"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_GetStatFloat(ISteamUserStats ptr, const char *pchName, float *pData)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUserStats_GetStatFloat$descriptor() {
        return SteamAPI_ISteamUserStats_GetStatFloat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_GetStatFloat(ISteamUserStats ptr, const char *pchName, float *pData)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUserStats_GetStatFloat$handle() {
        return SteamAPI_ISteamUserStats_GetStatFloat.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_GetStatFloat(ISteamUserStats ptr, const char *pchName, float *pData)
     * }
     */
    public static boolean SteamAPI_ISteamUserStats_GetStatFloat(MemorySegment ptr, MemorySegment pchName, MemorySegment pData) {
        var mh$ = SteamAPI_ISteamUserStats_GetStatFloat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUserStats_GetStatFloat", ptr, pchName, pData);
            }
            return (boolean)mh$.invokeExact(ptr, pchName, pData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUserStats_SetStatInt32 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUserStats_SetStatInt32"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_SetStatInt32(ISteamUserStats ptr, const char *pchName, int32 nData)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUserStats_SetStatInt32$descriptor() {
        return SteamAPI_ISteamUserStats_SetStatInt32.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_SetStatInt32(ISteamUserStats ptr, const char *pchName, int32 nData)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUserStats_SetStatInt32$handle() {
        return SteamAPI_ISteamUserStats_SetStatInt32.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_SetStatInt32(ISteamUserStats ptr, const char *pchName, int32 nData)
     * }
     */
    public static boolean SteamAPI_ISteamUserStats_SetStatInt32(MemorySegment ptr, MemorySegment pchName, int nData) {
        var mh$ = SteamAPI_ISteamUserStats_SetStatInt32.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUserStats_SetStatInt32", ptr, pchName, nData);
            }
            return (boolean)mh$.invokeExact(ptr, pchName, nData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUserStats_SetStatFloat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_FLOAT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUserStats_SetStatFloat"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_SetStatFloat(ISteamUserStats ptr, const char *pchName, float fData)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUserStats_SetStatFloat$descriptor() {
        return SteamAPI_ISteamUserStats_SetStatFloat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_SetStatFloat(ISteamUserStats ptr, const char *pchName, float fData)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUserStats_SetStatFloat$handle() {
        return SteamAPI_ISteamUserStats_SetStatFloat.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_SetStatFloat(ISteamUserStats ptr, const char *pchName, float fData)
     * }
     */
    public static boolean SteamAPI_ISteamUserStats_SetStatFloat(MemorySegment ptr, MemorySegment pchName, float fData) {
        var mh$ = SteamAPI_ISteamUserStats_SetStatFloat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUserStats_SetStatFloat", ptr, pchName, fData);
            }
            return (boolean)mh$.invokeExact(ptr, pchName, fData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUserStats_UpdateAvgRateStat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_FLOAT,
            SteamFlat.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUserStats_UpdateAvgRateStat"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_UpdateAvgRateStat(ISteamUserStats ptr, const char *pchName, float flCountThisSession, double dSessionLength)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUserStats_UpdateAvgRateStat$descriptor() {
        return SteamAPI_ISteamUserStats_UpdateAvgRateStat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_UpdateAvgRateStat(ISteamUserStats ptr, const char *pchName, float flCountThisSession, double dSessionLength)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUserStats_UpdateAvgRateStat$handle() {
        return SteamAPI_ISteamUserStats_UpdateAvgRateStat.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_UpdateAvgRateStat(ISteamUserStats ptr, const char *pchName, float flCountThisSession, double dSessionLength)
     * }
     */
    public static boolean SteamAPI_ISteamUserStats_UpdateAvgRateStat(MemorySegment ptr, MemorySegment pchName, float flCountThisSession, double dSessionLength) {
        var mh$ = SteamAPI_ISteamUserStats_UpdateAvgRateStat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUserStats_UpdateAvgRateStat", ptr, pchName, flCountThisSession, dSessionLength);
            }
            return (boolean)mh$.invokeExact(ptr, pchName, flCountThisSession, dSessionLength);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUserStats_GetAchievement {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUserStats_GetAchievement"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_GetAchievement(ISteamUserStats ptr, const char *pchName, bool *pbAchieved)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUserStats_GetAchievement$descriptor() {
        return SteamAPI_ISteamUserStats_GetAchievement.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_GetAchievement(ISteamUserStats ptr, const char *pchName, bool *pbAchieved)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUserStats_GetAchievement$handle() {
        return SteamAPI_ISteamUserStats_GetAchievement.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_GetAchievement(ISteamUserStats ptr, const char *pchName, bool *pbAchieved)
     * }
     */
    public static boolean SteamAPI_ISteamUserStats_GetAchievement(MemorySegment ptr, MemorySegment pchName, MemorySegment pbAchieved) {
        var mh$ = SteamAPI_ISteamUserStats_GetAchievement.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUserStats_GetAchievement", ptr, pchName, pbAchieved);
            }
            return (boolean)mh$.invokeExact(ptr, pchName, pbAchieved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUserStats_SetAchievement {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUserStats_SetAchievement"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_SetAchievement(ISteamUserStats ptr, const char *pchName)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUserStats_SetAchievement$descriptor() {
        return SteamAPI_ISteamUserStats_SetAchievement.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_SetAchievement(ISteamUserStats ptr, const char *pchName)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUserStats_SetAchievement$handle() {
        return SteamAPI_ISteamUserStats_SetAchievement.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_SetAchievement(ISteamUserStats ptr, const char *pchName)
     * }
     */
    public static boolean SteamAPI_ISteamUserStats_SetAchievement(MemorySegment ptr, MemorySegment pchName) {
        var mh$ = SteamAPI_ISteamUserStats_SetAchievement.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUserStats_SetAchievement", ptr, pchName);
            }
            return (boolean)mh$.invokeExact(ptr, pchName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUserStats_ClearAchievement {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUserStats_ClearAchievement"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_ClearAchievement(ISteamUserStats ptr, const char *pchName)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUserStats_ClearAchievement$descriptor() {
        return SteamAPI_ISteamUserStats_ClearAchievement.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_ClearAchievement(ISteamUserStats ptr, const char *pchName)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUserStats_ClearAchievement$handle() {
        return SteamAPI_ISteamUserStats_ClearAchievement.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_ClearAchievement(ISteamUserStats ptr, const char *pchName)
     * }
     */
    public static boolean SteamAPI_ISteamUserStats_ClearAchievement(MemorySegment ptr, MemorySegment pchName) {
        var mh$ = SteamAPI_ISteamUserStats_ClearAchievement.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUserStats_ClearAchievement", ptr, pchName);
            }
            return (boolean)mh$.invokeExact(ptr, pchName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUserStats_GetAchievementAndUnlockTime {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUserStats_GetAchievementAndUnlockTime"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_GetAchievementAndUnlockTime(ISteamUserStats ptr, const char *pchName, bool *pbAchieved, uint32 *punUnlockTime)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUserStats_GetAchievementAndUnlockTime$descriptor() {
        return SteamAPI_ISteamUserStats_GetAchievementAndUnlockTime.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_GetAchievementAndUnlockTime(ISteamUserStats ptr, const char *pchName, bool *pbAchieved, uint32 *punUnlockTime)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUserStats_GetAchievementAndUnlockTime$handle() {
        return SteamAPI_ISteamUserStats_GetAchievementAndUnlockTime.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_GetAchievementAndUnlockTime(ISteamUserStats ptr, const char *pchName, bool *pbAchieved, uint32 *punUnlockTime)
     * }
     */
    public static boolean SteamAPI_ISteamUserStats_GetAchievementAndUnlockTime(MemorySegment ptr, MemorySegment pchName, MemorySegment pbAchieved, MemorySegment punUnlockTime) {
        var mh$ = SteamAPI_ISteamUserStats_GetAchievementAndUnlockTime.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUserStats_GetAchievementAndUnlockTime", ptr, pchName, pbAchieved, punUnlockTime);
            }
            return (boolean)mh$.invokeExact(ptr, pchName, pbAchieved, punUnlockTime);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUserStats_StoreStats {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUserStats_StoreStats"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_StoreStats(ISteamUserStats ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUserStats_StoreStats$descriptor() {
        return SteamAPI_ISteamUserStats_StoreStats.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_StoreStats(ISteamUserStats ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUserStats_StoreStats$handle() {
        return SteamAPI_ISteamUserStats_StoreStats.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_StoreStats(ISteamUserStats ptr)
     * }
     */
    public static boolean SteamAPI_ISteamUserStats_StoreStats(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamUserStats_StoreStats.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUserStats_StoreStats", ptr);
            }
            return (boolean)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUserStats_GetAchievementIcon {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUserStats_GetAchievementIcon"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamUserStats_GetAchievementIcon(ISteamUserStats ptr, const char *pchName)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUserStats_GetAchievementIcon$descriptor() {
        return SteamAPI_ISteamUserStats_GetAchievementIcon.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamUserStats_GetAchievementIcon(ISteamUserStats ptr, const char *pchName)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUserStats_GetAchievementIcon$handle() {
        return SteamAPI_ISteamUserStats_GetAchievementIcon.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int SteamAPI_ISteamUserStats_GetAchievementIcon(ISteamUserStats ptr, const char *pchName)
     * }
     */
    public static int SteamAPI_ISteamUserStats_GetAchievementIcon(MemorySegment ptr, MemorySegment pchName) {
        var mh$ = SteamAPI_ISteamUserStats_GetAchievementIcon.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUserStats_GetAchievementIcon", ptr, pchName);
            }
            return (int)mh$.invokeExact(ptr, pchName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUserStats_GetAchievementDisplayAttribute {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUserStats_GetAchievementDisplayAttribute"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamUserStats_GetAchievementDisplayAttribute(ISteamUserStats ptr, const char *pchName, const char *pchKey)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUserStats_GetAchievementDisplayAttribute$descriptor() {
        return SteamAPI_ISteamUserStats_GetAchievementDisplayAttribute.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamUserStats_GetAchievementDisplayAttribute(ISteamUserStats ptr, const char *pchName, const char *pchKey)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUserStats_GetAchievementDisplayAttribute$handle() {
        return SteamAPI_ISteamUserStats_GetAchievementDisplayAttribute.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamUserStats_GetAchievementDisplayAttribute(ISteamUserStats ptr, const char *pchName, const char *pchKey)
     * }
     */
    public static MemorySegment SteamAPI_ISteamUserStats_GetAchievementDisplayAttribute(MemorySegment ptr, MemorySegment pchName, MemorySegment pchKey) {
        var mh$ = SteamAPI_ISteamUserStats_GetAchievementDisplayAttribute.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUserStats_GetAchievementDisplayAttribute", ptr, pchName, pchKey);
            }
            return (MemorySegment)mh$.invokeExact(ptr, pchName, pchKey);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUserStats_IndicateAchievementProgress {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUserStats_IndicateAchievementProgress"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_IndicateAchievementProgress(ISteamUserStats ptr, const char *pchName, uint32 nCurProgress, uint32 nMaxProgress)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUserStats_IndicateAchievementProgress$descriptor() {
        return SteamAPI_ISteamUserStats_IndicateAchievementProgress.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_IndicateAchievementProgress(ISteamUserStats ptr, const char *pchName, uint32 nCurProgress, uint32 nMaxProgress)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUserStats_IndicateAchievementProgress$handle() {
        return SteamAPI_ISteamUserStats_IndicateAchievementProgress.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_IndicateAchievementProgress(ISteamUserStats ptr, const char *pchName, uint32 nCurProgress, uint32 nMaxProgress)
     * }
     */
    public static boolean SteamAPI_ISteamUserStats_IndicateAchievementProgress(MemorySegment ptr, MemorySegment pchName, int nCurProgress, int nMaxProgress) {
        var mh$ = SteamAPI_ISteamUserStats_IndicateAchievementProgress.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUserStats_IndicateAchievementProgress", ptr, pchName, nCurProgress, nMaxProgress);
            }
            return (boolean)mh$.invokeExact(ptr, pchName, nCurProgress, nMaxProgress);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUserStats_GetNumAchievements {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUserStats_GetNumAchievements"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamUserStats_GetNumAchievements(ISteamUserStats ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUserStats_GetNumAchievements$descriptor() {
        return SteamAPI_ISteamUserStats_GetNumAchievements.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamUserStats_GetNumAchievements(ISteamUserStats ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUserStats_GetNumAchievements$handle() {
        return SteamAPI_ISteamUserStats_GetNumAchievements.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamUserStats_GetNumAchievements(ISteamUserStats ptr)
     * }
     */
    public static int SteamAPI_ISteamUserStats_GetNumAchievements(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamUserStats_GetNumAchievements.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUserStats_GetNumAchievements", ptr);
            }
            return (int)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUserStats_GetAchievementName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUserStats_GetAchievementName"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamUserStats_GetAchievementName(ISteamUserStats ptr, uint32 iAchievement)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUserStats_GetAchievementName$descriptor() {
        return SteamAPI_ISteamUserStats_GetAchievementName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamUserStats_GetAchievementName(ISteamUserStats ptr, uint32 iAchievement)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUserStats_GetAchievementName$handle() {
        return SteamAPI_ISteamUserStats_GetAchievementName.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamUserStats_GetAchievementName(ISteamUserStats ptr, uint32 iAchievement)
     * }
     */
    public static MemorySegment SteamAPI_ISteamUserStats_GetAchievementName(MemorySegment ptr, int iAchievement) {
        var mh$ = SteamAPI_ISteamUserStats_GetAchievementName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUserStats_GetAchievementName", ptr, iAchievement);
            }
            return (MemorySegment)mh$.invokeExact(ptr, iAchievement);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUserStats_RequestUserStats {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUserStats_RequestUserStats"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUserStats_RequestUserStats(ISteamUserStats ptr, uint64_steamid steamIDUser)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUserStats_RequestUserStats$descriptor() {
        return SteamAPI_ISteamUserStats_RequestUserStats.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUserStats_RequestUserStats(ISteamUserStats ptr, uint64_steamid steamIDUser)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUserStats_RequestUserStats$handle() {
        return SteamAPI_ISteamUserStats_RequestUserStats.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUserStats_RequestUserStats(ISteamUserStats ptr, uint64_steamid steamIDUser)
     * }
     */
    public static long SteamAPI_ISteamUserStats_RequestUserStats(MemorySegment ptr, long steamIDUser) {
        var mh$ = SteamAPI_ISteamUserStats_RequestUserStats.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUserStats_RequestUserStats", ptr, steamIDUser);
            }
            return (long)mh$.invokeExact(ptr, steamIDUser);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUserStats_GetUserStatInt32 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUserStats_GetUserStatInt32"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_GetUserStatInt32(ISteamUserStats ptr, uint64_steamid steamIDUser, const char *pchName, int32 *pData)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUserStats_GetUserStatInt32$descriptor() {
        return SteamAPI_ISteamUserStats_GetUserStatInt32.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_GetUserStatInt32(ISteamUserStats ptr, uint64_steamid steamIDUser, const char *pchName, int32 *pData)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUserStats_GetUserStatInt32$handle() {
        return SteamAPI_ISteamUserStats_GetUserStatInt32.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_GetUserStatInt32(ISteamUserStats ptr, uint64_steamid steamIDUser, const char *pchName, int32 *pData)
     * }
     */
    public static boolean SteamAPI_ISteamUserStats_GetUserStatInt32(MemorySegment ptr, long steamIDUser, MemorySegment pchName, MemorySegment pData) {
        var mh$ = SteamAPI_ISteamUserStats_GetUserStatInt32.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUserStats_GetUserStatInt32", ptr, steamIDUser, pchName, pData);
            }
            return (boolean)mh$.invokeExact(ptr, steamIDUser, pchName, pData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUserStats_GetUserStatFloat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUserStats_GetUserStatFloat"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_GetUserStatFloat(ISteamUserStats ptr, uint64_steamid steamIDUser, const char *pchName, float *pData)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUserStats_GetUserStatFloat$descriptor() {
        return SteamAPI_ISteamUserStats_GetUserStatFloat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_GetUserStatFloat(ISteamUserStats ptr, uint64_steamid steamIDUser, const char *pchName, float *pData)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUserStats_GetUserStatFloat$handle() {
        return SteamAPI_ISteamUserStats_GetUserStatFloat.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_GetUserStatFloat(ISteamUserStats ptr, uint64_steamid steamIDUser, const char *pchName, float *pData)
     * }
     */
    public static boolean SteamAPI_ISteamUserStats_GetUserStatFloat(MemorySegment ptr, long steamIDUser, MemorySegment pchName, MemorySegment pData) {
        var mh$ = SteamAPI_ISteamUserStats_GetUserStatFloat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUserStats_GetUserStatFloat", ptr, steamIDUser, pchName, pData);
            }
            return (boolean)mh$.invokeExact(ptr, steamIDUser, pchName, pData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUserStats_GetUserAchievement {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUserStats_GetUserAchievement"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_GetUserAchievement(ISteamUserStats ptr, uint64_steamid steamIDUser, const char *pchName, bool *pbAchieved)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUserStats_GetUserAchievement$descriptor() {
        return SteamAPI_ISteamUserStats_GetUserAchievement.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_GetUserAchievement(ISteamUserStats ptr, uint64_steamid steamIDUser, const char *pchName, bool *pbAchieved)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUserStats_GetUserAchievement$handle() {
        return SteamAPI_ISteamUserStats_GetUserAchievement.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_GetUserAchievement(ISteamUserStats ptr, uint64_steamid steamIDUser, const char *pchName, bool *pbAchieved)
     * }
     */
    public static boolean SteamAPI_ISteamUserStats_GetUserAchievement(MemorySegment ptr, long steamIDUser, MemorySegment pchName, MemorySegment pbAchieved) {
        var mh$ = SteamAPI_ISteamUserStats_GetUserAchievement.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUserStats_GetUserAchievement", ptr, steamIDUser, pchName, pbAchieved);
            }
            return (boolean)mh$.invokeExact(ptr, steamIDUser, pchName, pbAchieved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUserStats_GetUserAchievementAndUnlockTime {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUserStats_GetUserAchievementAndUnlockTime"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_GetUserAchievementAndUnlockTime(ISteamUserStats ptr, uint64_steamid steamIDUser, const char *pchName, bool *pbAchieved, uint32 *punUnlockTime)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUserStats_GetUserAchievementAndUnlockTime$descriptor() {
        return SteamAPI_ISteamUserStats_GetUserAchievementAndUnlockTime.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_GetUserAchievementAndUnlockTime(ISteamUserStats ptr, uint64_steamid steamIDUser, const char *pchName, bool *pbAchieved, uint32 *punUnlockTime)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUserStats_GetUserAchievementAndUnlockTime$handle() {
        return SteamAPI_ISteamUserStats_GetUserAchievementAndUnlockTime.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_GetUserAchievementAndUnlockTime(ISteamUserStats ptr, uint64_steamid steamIDUser, const char *pchName, bool *pbAchieved, uint32 *punUnlockTime)
     * }
     */
    public static boolean SteamAPI_ISteamUserStats_GetUserAchievementAndUnlockTime(MemorySegment ptr, long steamIDUser, MemorySegment pchName, MemorySegment pbAchieved, MemorySegment punUnlockTime) {
        var mh$ = SteamAPI_ISteamUserStats_GetUserAchievementAndUnlockTime.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUserStats_GetUserAchievementAndUnlockTime", ptr, steamIDUser, pchName, pbAchieved, punUnlockTime);
            }
            return (boolean)mh$.invokeExact(ptr, steamIDUser, pchName, pbAchieved, punUnlockTime);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUserStats_ResetAllStats {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUserStats_ResetAllStats"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_ResetAllStats(ISteamUserStats ptr, bool bAchievementsToo)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUserStats_ResetAllStats$descriptor() {
        return SteamAPI_ISteamUserStats_ResetAllStats.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_ResetAllStats(ISteamUserStats ptr, bool bAchievementsToo)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUserStats_ResetAllStats$handle() {
        return SteamAPI_ISteamUserStats_ResetAllStats.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_ResetAllStats(ISteamUserStats ptr, bool bAchievementsToo)
     * }
     */
    public static boolean SteamAPI_ISteamUserStats_ResetAllStats(MemorySegment ptr, boolean bAchievementsToo) {
        var mh$ = SteamAPI_ISteamUserStats_ResetAllStats.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUserStats_ResetAllStats", ptr, bAchievementsToo);
            }
            return (boolean)mh$.invokeExact(ptr, bAchievementsToo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUserStats_FindOrCreateLeaderboard {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUserStats_FindOrCreateLeaderboard"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUserStats_FindOrCreateLeaderboard(ISteamUserStats ptr, const char *pchLeaderboardName, ELeaderboardSortMethod eLeaderboardSortMethod, ELeaderboardDisplayType eLeaderboardDisplayType)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUserStats_FindOrCreateLeaderboard$descriptor() {
        return SteamAPI_ISteamUserStats_FindOrCreateLeaderboard.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUserStats_FindOrCreateLeaderboard(ISteamUserStats ptr, const char *pchLeaderboardName, ELeaderboardSortMethod eLeaderboardSortMethod, ELeaderboardDisplayType eLeaderboardDisplayType)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUserStats_FindOrCreateLeaderboard$handle() {
        return SteamAPI_ISteamUserStats_FindOrCreateLeaderboard.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUserStats_FindOrCreateLeaderboard(ISteamUserStats ptr, const char *pchLeaderboardName, ELeaderboardSortMethod eLeaderboardSortMethod, ELeaderboardDisplayType eLeaderboardDisplayType)
     * }
     */
    public static long SteamAPI_ISteamUserStats_FindOrCreateLeaderboard(MemorySegment ptr, MemorySegment pchLeaderboardName, int eLeaderboardSortMethod, int eLeaderboardDisplayType) {
        var mh$ = SteamAPI_ISteamUserStats_FindOrCreateLeaderboard.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUserStats_FindOrCreateLeaderboard", ptr, pchLeaderboardName, eLeaderboardSortMethod, eLeaderboardDisplayType);
            }
            return (long)mh$.invokeExact(ptr, pchLeaderboardName, eLeaderboardSortMethod, eLeaderboardDisplayType);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUserStats_FindLeaderboard {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUserStats_FindLeaderboard"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUserStats_FindLeaderboard(ISteamUserStats ptr, const char *pchLeaderboardName)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUserStats_FindLeaderboard$descriptor() {
        return SteamAPI_ISteamUserStats_FindLeaderboard.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUserStats_FindLeaderboard(ISteamUserStats ptr, const char *pchLeaderboardName)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUserStats_FindLeaderboard$handle() {
        return SteamAPI_ISteamUserStats_FindLeaderboard.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUserStats_FindLeaderboard(ISteamUserStats ptr, const char *pchLeaderboardName)
     * }
     */
    public static long SteamAPI_ISteamUserStats_FindLeaderboard(MemorySegment ptr, MemorySegment pchLeaderboardName) {
        var mh$ = SteamAPI_ISteamUserStats_FindLeaderboard.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUserStats_FindLeaderboard", ptr, pchLeaderboardName);
            }
            return (long)mh$.invokeExact(ptr, pchLeaderboardName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUserStats_GetLeaderboardName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUserStats_GetLeaderboardName"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamUserStats_GetLeaderboardName(ISteamUserStats ptr, SteamLeaderboard_t hSteamLeaderboard)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUserStats_GetLeaderboardName$descriptor() {
        return SteamAPI_ISteamUserStats_GetLeaderboardName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamUserStats_GetLeaderboardName(ISteamUserStats ptr, SteamLeaderboard_t hSteamLeaderboard)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUserStats_GetLeaderboardName$handle() {
        return SteamAPI_ISteamUserStats_GetLeaderboardName.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamUserStats_GetLeaderboardName(ISteamUserStats ptr, SteamLeaderboard_t hSteamLeaderboard)
     * }
     */
    public static MemorySegment SteamAPI_ISteamUserStats_GetLeaderboardName(MemorySegment ptr, long hSteamLeaderboard) {
        var mh$ = SteamAPI_ISteamUserStats_GetLeaderboardName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUserStats_GetLeaderboardName", ptr, hSteamLeaderboard);
            }
            return (MemorySegment)mh$.invokeExact(ptr, hSteamLeaderboard);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUserStats_GetLeaderboardEntryCount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUserStats_GetLeaderboardEntryCount"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamUserStats_GetLeaderboardEntryCount(ISteamUserStats ptr, SteamLeaderboard_t hSteamLeaderboard)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUserStats_GetLeaderboardEntryCount$descriptor() {
        return SteamAPI_ISteamUserStats_GetLeaderboardEntryCount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamUserStats_GetLeaderboardEntryCount(ISteamUserStats ptr, SteamLeaderboard_t hSteamLeaderboard)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUserStats_GetLeaderboardEntryCount$handle() {
        return SteamAPI_ISteamUserStats_GetLeaderboardEntryCount.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int SteamAPI_ISteamUserStats_GetLeaderboardEntryCount(ISteamUserStats ptr, SteamLeaderboard_t hSteamLeaderboard)
     * }
     */
    public static int SteamAPI_ISteamUserStats_GetLeaderboardEntryCount(MemorySegment ptr, long hSteamLeaderboard) {
        var mh$ = SteamAPI_ISteamUserStats_GetLeaderboardEntryCount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUserStats_GetLeaderboardEntryCount", ptr, hSteamLeaderboard);
            }
            return (int)mh$.invokeExact(ptr, hSteamLeaderboard);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUserStats_GetLeaderboardSortMethod {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUserStats_GetLeaderboardSortMethod"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ELeaderboardSortMethod SteamAPI_ISteamUserStats_GetLeaderboardSortMethod(ISteamUserStats ptr, SteamLeaderboard_t hSteamLeaderboard)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUserStats_GetLeaderboardSortMethod$descriptor() {
        return SteamAPI_ISteamUserStats_GetLeaderboardSortMethod.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ELeaderboardSortMethod SteamAPI_ISteamUserStats_GetLeaderboardSortMethod(ISteamUserStats ptr, SteamLeaderboard_t hSteamLeaderboard)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUserStats_GetLeaderboardSortMethod$handle() {
        return SteamAPI_ISteamUserStats_GetLeaderboardSortMethod.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ELeaderboardSortMethod SteamAPI_ISteamUserStats_GetLeaderboardSortMethod(ISteamUserStats ptr, SteamLeaderboard_t hSteamLeaderboard)
     * }
     */
    public static int SteamAPI_ISteamUserStats_GetLeaderboardSortMethod(MemorySegment ptr, long hSteamLeaderboard) {
        var mh$ = SteamAPI_ISteamUserStats_GetLeaderboardSortMethod.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUserStats_GetLeaderboardSortMethod", ptr, hSteamLeaderboard);
            }
            return (int)mh$.invokeExact(ptr, hSteamLeaderboard);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUserStats_GetLeaderboardDisplayType {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUserStats_GetLeaderboardDisplayType"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ELeaderboardDisplayType SteamAPI_ISteamUserStats_GetLeaderboardDisplayType(ISteamUserStats ptr, SteamLeaderboard_t hSteamLeaderboard)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUserStats_GetLeaderboardDisplayType$descriptor() {
        return SteamAPI_ISteamUserStats_GetLeaderboardDisplayType.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ELeaderboardDisplayType SteamAPI_ISteamUserStats_GetLeaderboardDisplayType(ISteamUserStats ptr, SteamLeaderboard_t hSteamLeaderboard)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUserStats_GetLeaderboardDisplayType$handle() {
        return SteamAPI_ISteamUserStats_GetLeaderboardDisplayType.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ELeaderboardDisplayType SteamAPI_ISteamUserStats_GetLeaderboardDisplayType(ISteamUserStats ptr, SteamLeaderboard_t hSteamLeaderboard)
     * }
     */
    public static int SteamAPI_ISteamUserStats_GetLeaderboardDisplayType(MemorySegment ptr, long hSteamLeaderboard) {
        var mh$ = SteamAPI_ISteamUserStats_GetLeaderboardDisplayType.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUserStats_GetLeaderboardDisplayType", ptr, hSteamLeaderboard);
            }
            return (int)mh$.invokeExact(ptr, hSteamLeaderboard);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUserStats_DownloadLeaderboardEntries {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_INT,
            SteamFlat.C_INT,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUserStats_DownloadLeaderboardEntries"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUserStats_DownloadLeaderboardEntries(ISteamUserStats ptr, SteamLeaderboard_t hSteamLeaderboard, ELeaderboardDataRequest eLeaderboardDataRequest, int nRangeStart, int nRangeEnd)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUserStats_DownloadLeaderboardEntries$descriptor() {
        return SteamAPI_ISteamUserStats_DownloadLeaderboardEntries.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUserStats_DownloadLeaderboardEntries(ISteamUserStats ptr, SteamLeaderboard_t hSteamLeaderboard, ELeaderboardDataRequest eLeaderboardDataRequest, int nRangeStart, int nRangeEnd)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUserStats_DownloadLeaderboardEntries$handle() {
        return SteamAPI_ISteamUserStats_DownloadLeaderboardEntries.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUserStats_DownloadLeaderboardEntries(ISteamUserStats ptr, SteamLeaderboard_t hSteamLeaderboard, ELeaderboardDataRequest eLeaderboardDataRequest, int nRangeStart, int nRangeEnd)
     * }
     */
    public static long SteamAPI_ISteamUserStats_DownloadLeaderboardEntries(MemorySegment ptr, long hSteamLeaderboard, int eLeaderboardDataRequest, int nRangeStart, int nRangeEnd) {
        var mh$ = SteamAPI_ISteamUserStats_DownloadLeaderboardEntries.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUserStats_DownloadLeaderboardEntries", ptr, hSteamLeaderboard, eLeaderboardDataRequest, nRangeStart, nRangeEnd);
            }
            return (long)mh$.invokeExact(ptr, hSteamLeaderboard, eLeaderboardDataRequest, nRangeStart, nRangeEnd);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUserStats_DownloadLeaderboardEntriesForUsers {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUserStats_DownloadLeaderboardEntriesForUsers"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUserStats_DownloadLeaderboardEntriesForUsers(ISteamUserStats ptr, SteamLeaderboard_t hSteamLeaderboard, CSteamID *prgUsers, int cUsers)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUserStats_DownloadLeaderboardEntriesForUsers$descriptor() {
        return SteamAPI_ISteamUserStats_DownloadLeaderboardEntriesForUsers.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUserStats_DownloadLeaderboardEntriesForUsers(ISteamUserStats ptr, SteamLeaderboard_t hSteamLeaderboard, CSteamID *prgUsers, int cUsers)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUserStats_DownloadLeaderboardEntriesForUsers$handle() {
        return SteamAPI_ISteamUserStats_DownloadLeaderboardEntriesForUsers.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUserStats_DownloadLeaderboardEntriesForUsers(ISteamUserStats ptr, SteamLeaderboard_t hSteamLeaderboard, CSteamID *prgUsers, int cUsers)
     * }
     */
    public static long SteamAPI_ISteamUserStats_DownloadLeaderboardEntriesForUsers(MemorySegment ptr, long hSteamLeaderboard, MemorySegment prgUsers, int cUsers) {
        var mh$ = SteamAPI_ISteamUserStats_DownloadLeaderboardEntriesForUsers.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUserStats_DownloadLeaderboardEntriesForUsers", ptr, hSteamLeaderboard, prgUsers, cUsers);
            }
            return (long)mh$.invokeExact(ptr, hSteamLeaderboard, prgUsers, cUsers);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUserStats_GetDownloadedLeaderboardEntry {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUserStats_GetDownloadedLeaderboardEntry"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_GetDownloadedLeaderboardEntry(ISteamUserStats ptr, SteamLeaderboardEntries_t hSteamLeaderboardEntries, int index, LeaderboardEntry_t *pLeaderboardEntry, int32 *pDetails, int cDetailsMax)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUserStats_GetDownloadedLeaderboardEntry$descriptor() {
        return SteamAPI_ISteamUserStats_GetDownloadedLeaderboardEntry.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_GetDownloadedLeaderboardEntry(ISteamUserStats ptr, SteamLeaderboardEntries_t hSteamLeaderboardEntries, int index, LeaderboardEntry_t *pLeaderboardEntry, int32 *pDetails, int cDetailsMax)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUserStats_GetDownloadedLeaderboardEntry$handle() {
        return SteamAPI_ISteamUserStats_GetDownloadedLeaderboardEntry.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_GetDownloadedLeaderboardEntry(ISteamUserStats ptr, SteamLeaderboardEntries_t hSteamLeaderboardEntries, int index, LeaderboardEntry_t *pLeaderboardEntry, int32 *pDetails, int cDetailsMax)
     * }
     */
    public static boolean SteamAPI_ISteamUserStats_GetDownloadedLeaderboardEntry(MemorySegment ptr, long hSteamLeaderboardEntries, int index, MemorySegment pLeaderboardEntry, MemorySegment pDetails, int cDetailsMax) {
        var mh$ = SteamAPI_ISteamUserStats_GetDownloadedLeaderboardEntry.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUserStats_GetDownloadedLeaderboardEntry", ptr, hSteamLeaderboardEntries, index, pLeaderboardEntry, pDetails, cDetailsMax);
            }
            return (boolean)mh$.invokeExact(ptr, hSteamLeaderboardEntries, index, pLeaderboardEntry, pDetails, cDetailsMax);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUserStats_UploadLeaderboardScore {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_INT,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUserStats_UploadLeaderboardScore"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUserStats_UploadLeaderboardScore(ISteamUserStats ptr, SteamLeaderboard_t hSteamLeaderboard, ELeaderboardUploadScoreMethod eLeaderboardUploadScoreMethod, int32 nScore, const int32 *pScoreDetails, int cScoreDetailsCount)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUserStats_UploadLeaderboardScore$descriptor() {
        return SteamAPI_ISteamUserStats_UploadLeaderboardScore.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUserStats_UploadLeaderboardScore(ISteamUserStats ptr, SteamLeaderboard_t hSteamLeaderboard, ELeaderboardUploadScoreMethod eLeaderboardUploadScoreMethod, int32 nScore, const int32 *pScoreDetails, int cScoreDetailsCount)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUserStats_UploadLeaderboardScore$handle() {
        return SteamAPI_ISteamUserStats_UploadLeaderboardScore.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUserStats_UploadLeaderboardScore(ISteamUserStats ptr, SteamLeaderboard_t hSteamLeaderboard, ELeaderboardUploadScoreMethod eLeaderboardUploadScoreMethod, int32 nScore, const int32 *pScoreDetails, int cScoreDetailsCount)
     * }
     */
    public static long SteamAPI_ISteamUserStats_UploadLeaderboardScore(MemorySegment ptr, long hSteamLeaderboard, int eLeaderboardUploadScoreMethod, int nScore, MemorySegment pScoreDetails, int cScoreDetailsCount) {
        var mh$ = SteamAPI_ISteamUserStats_UploadLeaderboardScore.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUserStats_UploadLeaderboardScore", ptr, hSteamLeaderboard, eLeaderboardUploadScoreMethod, nScore, pScoreDetails, cScoreDetailsCount);
            }
            return (long)mh$.invokeExact(ptr, hSteamLeaderboard, eLeaderboardUploadScoreMethod, nScore, pScoreDetails, cScoreDetailsCount);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUserStats_AttachLeaderboardUGC {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUserStats_AttachLeaderboardUGC"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUserStats_AttachLeaderboardUGC(ISteamUserStats ptr, SteamLeaderboard_t hSteamLeaderboard, UGCHandle_t hUGC)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUserStats_AttachLeaderboardUGC$descriptor() {
        return SteamAPI_ISteamUserStats_AttachLeaderboardUGC.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUserStats_AttachLeaderboardUGC(ISteamUserStats ptr, SteamLeaderboard_t hSteamLeaderboard, UGCHandle_t hUGC)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUserStats_AttachLeaderboardUGC$handle() {
        return SteamAPI_ISteamUserStats_AttachLeaderboardUGC.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUserStats_AttachLeaderboardUGC(ISteamUserStats ptr, SteamLeaderboard_t hSteamLeaderboard, UGCHandle_t hUGC)
     * }
     */
    public static long SteamAPI_ISteamUserStats_AttachLeaderboardUGC(MemorySegment ptr, long hSteamLeaderboard, long hUGC) {
        var mh$ = SteamAPI_ISteamUserStats_AttachLeaderboardUGC.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUserStats_AttachLeaderboardUGC", ptr, hSteamLeaderboard, hUGC);
            }
            return (long)mh$.invokeExact(ptr, hSteamLeaderboard, hUGC);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUserStats_GetNumberOfCurrentPlayers {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUserStats_GetNumberOfCurrentPlayers"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUserStats_GetNumberOfCurrentPlayers(ISteamUserStats ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUserStats_GetNumberOfCurrentPlayers$descriptor() {
        return SteamAPI_ISteamUserStats_GetNumberOfCurrentPlayers.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUserStats_GetNumberOfCurrentPlayers(ISteamUserStats ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUserStats_GetNumberOfCurrentPlayers$handle() {
        return SteamAPI_ISteamUserStats_GetNumberOfCurrentPlayers.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUserStats_GetNumberOfCurrentPlayers(ISteamUserStats ptr)
     * }
     */
    public static long SteamAPI_ISteamUserStats_GetNumberOfCurrentPlayers(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamUserStats_GetNumberOfCurrentPlayers.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUserStats_GetNumberOfCurrentPlayers", ptr);
            }
            return (long)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUserStats_RequestGlobalAchievementPercentages {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUserStats_RequestGlobalAchievementPercentages"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUserStats_RequestGlobalAchievementPercentages(ISteamUserStats ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUserStats_RequestGlobalAchievementPercentages$descriptor() {
        return SteamAPI_ISteamUserStats_RequestGlobalAchievementPercentages.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUserStats_RequestGlobalAchievementPercentages(ISteamUserStats ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUserStats_RequestGlobalAchievementPercentages$handle() {
        return SteamAPI_ISteamUserStats_RequestGlobalAchievementPercentages.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUserStats_RequestGlobalAchievementPercentages(ISteamUserStats ptr)
     * }
     */
    public static long SteamAPI_ISteamUserStats_RequestGlobalAchievementPercentages(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamUserStats_RequestGlobalAchievementPercentages.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUserStats_RequestGlobalAchievementPercentages", ptr);
            }
            return (long)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUserStats_GetMostAchievedAchievementInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUserStats_GetMostAchievedAchievementInfo"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamUserStats_GetMostAchievedAchievementInfo(ISteamUserStats ptr, char *pchName, uint32 unNameBufLen, float *pflPercent, bool *pbAchieved)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUserStats_GetMostAchievedAchievementInfo$descriptor() {
        return SteamAPI_ISteamUserStats_GetMostAchievedAchievementInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamUserStats_GetMostAchievedAchievementInfo(ISteamUserStats ptr, char *pchName, uint32 unNameBufLen, float *pflPercent, bool *pbAchieved)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUserStats_GetMostAchievedAchievementInfo$handle() {
        return SteamAPI_ISteamUserStats_GetMostAchievedAchievementInfo.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int SteamAPI_ISteamUserStats_GetMostAchievedAchievementInfo(ISteamUserStats ptr, char *pchName, uint32 unNameBufLen, float *pflPercent, bool *pbAchieved)
     * }
     */
    public static int SteamAPI_ISteamUserStats_GetMostAchievedAchievementInfo(MemorySegment ptr, MemorySegment pchName, int unNameBufLen, MemorySegment pflPercent, MemorySegment pbAchieved) {
        var mh$ = SteamAPI_ISteamUserStats_GetMostAchievedAchievementInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUserStats_GetMostAchievedAchievementInfo", ptr, pchName, unNameBufLen, pflPercent, pbAchieved);
            }
            return (int)mh$.invokeExact(ptr, pchName, unNameBufLen, pflPercent, pbAchieved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUserStats_GetNextMostAchievedAchievementInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUserStats_GetNextMostAchievedAchievementInfo"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamUserStats_GetNextMostAchievedAchievementInfo(ISteamUserStats ptr, int iIteratorPrevious, char *pchName, uint32 unNameBufLen, float *pflPercent, bool *pbAchieved)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUserStats_GetNextMostAchievedAchievementInfo$descriptor() {
        return SteamAPI_ISteamUserStats_GetNextMostAchievedAchievementInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamUserStats_GetNextMostAchievedAchievementInfo(ISteamUserStats ptr, int iIteratorPrevious, char *pchName, uint32 unNameBufLen, float *pflPercent, bool *pbAchieved)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUserStats_GetNextMostAchievedAchievementInfo$handle() {
        return SteamAPI_ISteamUserStats_GetNextMostAchievedAchievementInfo.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int SteamAPI_ISteamUserStats_GetNextMostAchievedAchievementInfo(ISteamUserStats ptr, int iIteratorPrevious, char *pchName, uint32 unNameBufLen, float *pflPercent, bool *pbAchieved)
     * }
     */
    public static int SteamAPI_ISteamUserStats_GetNextMostAchievedAchievementInfo(MemorySegment ptr, int iIteratorPrevious, MemorySegment pchName, int unNameBufLen, MemorySegment pflPercent, MemorySegment pbAchieved) {
        var mh$ = SteamAPI_ISteamUserStats_GetNextMostAchievedAchievementInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUserStats_GetNextMostAchievedAchievementInfo", ptr, iIteratorPrevious, pchName, unNameBufLen, pflPercent, pbAchieved);
            }
            return (int)mh$.invokeExact(ptr, iIteratorPrevious, pchName, unNameBufLen, pflPercent, pbAchieved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUserStats_GetAchievementAchievedPercent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUserStats_GetAchievementAchievedPercent"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_GetAchievementAchievedPercent(ISteamUserStats ptr, const char *pchName, float *pflPercent)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUserStats_GetAchievementAchievedPercent$descriptor() {
        return SteamAPI_ISteamUserStats_GetAchievementAchievedPercent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_GetAchievementAchievedPercent(ISteamUserStats ptr, const char *pchName, float *pflPercent)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUserStats_GetAchievementAchievedPercent$handle() {
        return SteamAPI_ISteamUserStats_GetAchievementAchievedPercent.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_GetAchievementAchievedPercent(ISteamUserStats ptr, const char *pchName, float *pflPercent)
     * }
     */
    public static boolean SteamAPI_ISteamUserStats_GetAchievementAchievedPercent(MemorySegment ptr, MemorySegment pchName, MemorySegment pflPercent) {
        var mh$ = SteamAPI_ISteamUserStats_GetAchievementAchievedPercent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUserStats_GetAchievementAchievedPercent", ptr, pchName, pflPercent);
            }
            return (boolean)mh$.invokeExact(ptr, pchName, pflPercent);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUserStats_RequestGlobalStats {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUserStats_RequestGlobalStats"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUserStats_RequestGlobalStats(ISteamUserStats ptr, int nHistoryDays)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUserStats_RequestGlobalStats$descriptor() {
        return SteamAPI_ISteamUserStats_RequestGlobalStats.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUserStats_RequestGlobalStats(ISteamUserStats ptr, int nHistoryDays)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUserStats_RequestGlobalStats$handle() {
        return SteamAPI_ISteamUserStats_RequestGlobalStats.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUserStats_RequestGlobalStats(ISteamUserStats ptr, int nHistoryDays)
     * }
     */
    public static long SteamAPI_ISteamUserStats_RequestGlobalStats(MemorySegment ptr, int nHistoryDays) {
        var mh$ = SteamAPI_ISteamUserStats_RequestGlobalStats.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUserStats_RequestGlobalStats", ptr, nHistoryDays);
            }
            return (long)mh$.invokeExact(ptr, nHistoryDays);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUserStats_GetGlobalStatInt64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUserStats_GetGlobalStatInt64"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_GetGlobalStatInt64(ISteamUserStats ptr, const char *pchStatName, int64 *pData)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUserStats_GetGlobalStatInt64$descriptor() {
        return SteamAPI_ISteamUserStats_GetGlobalStatInt64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_GetGlobalStatInt64(ISteamUserStats ptr, const char *pchStatName, int64 *pData)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUserStats_GetGlobalStatInt64$handle() {
        return SteamAPI_ISteamUserStats_GetGlobalStatInt64.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_GetGlobalStatInt64(ISteamUserStats ptr, const char *pchStatName, int64 *pData)
     * }
     */
    public static boolean SteamAPI_ISteamUserStats_GetGlobalStatInt64(MemorySegment ptr, MemorySegment pchStatName, MemorySegment pData) {
        var mh$ = SteamAPI_ISteamUserStats_GetGlobalStatInt64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUserStats_GetGlobalStatInt64", ptr, pchStatName, pData);
            }
            return (boolean)mh$.invokeExact(ptr, pchStatName, pData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUserStats_GetGlobalStatDouble {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUserStats_GetGlobalStatDouble"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_GetGlobalStatDouble(ISteamUserStats ptr, const char *pchStatName, double *pData)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUserStats_GetGlobalStatDouble$descriptor() {
        return SteamAPI_ISteamUserStats_GetGlobalStatDouble.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_GetGlobalStatDouble(ISteamUserStats ptr, const char *pchStatName, double *pData)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUserStats_GetGlobalStatDouble$handle() {
        return SteamAPI_ISteamUserStats_GetGlobalStatDouble.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_GetGlobalStatDouble(ISteamUserStats ptr, const char *pchStatName, double *pData)
     * }
     */
    public static boolean SteamAPI_ISteamUserStats_GetGlobalStatDouble(MemorySegment ptr, MemorySegment pchStatName, MemorySegment pData) {
        var mh$ = SteamAPI_ISteamUserStats_GetGlobalStatDouble.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUserStats_GetGlobalStatDouble", ptr, pchStatName, pData);
            }
            return (boolean)mh$.invokeExact(ptr, pchStatName, pData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUserStats_GetGlobalStatHistoryInt64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUserStats_GetGlobalStatHistoryInt64"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int32 SteamAPI_ISteamUserStats_GetGlobalStatHistoryInt64(ISteamUserStats ptr, const char *pchStatName, int64 *pData, uint32 cubData)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUserStats_GetGlobalStatHistoryInt64$descriptor() {
        return SteamAPI_ISteamUserStats_GetGlobalStatHistoryInt64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int32 SteamAPI_ISteamUserStats_GetGlobalStatHistoryInt64(ISteamUserStats ptr, const char *pchStatName, int64 *pData, uint32 cubData)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUserStats_GetGlobalStatHistoryInt64$handle() {
        return SteamAPI_ISteamUserStats_GetGlobalStatHistoryInt64.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int32 SteamAPI_ISteamUserStats_GetGlobalStatHistoryInt64(ISteamUserStats ptr, const char *pchStatName, int64 *pData, uint32 cubData)
     * }
     */
    public static int SteamAPI_ISteamUserStats_GetGlobalStatHistoryInt64(MemorySegment ptr, MemorySegment pchStatName, MemorySegment pData, int cubData) {
        var mh$ = SteamAPI_ISteamUserStats_GetGlobalStatHistoryInt64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUserStats_GetGlobalStatHistoryInt64", ptr, pchStatName, pData, cubData);
            }
            return (int)mh$.invokeExact(ptr, pchStatName, pData, cubData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUserStats_GetGlobalStatHistoryDouble {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUserStats_GetGlobalStatHistoryDouble"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int32 SteamAPI_ISteamUserStats_GetGlobalStatHistoryDouble(ISteamUserStats ptr, const char *pchStatName, double *pData, uint32 cubData)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUserStats_GetGlobalStatHistoryDouble$descriptor() {
        return SteamAPI_ISteamUserStats_GetGlobalStatHistoryDouble.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int32 SteamAPI_ISteamUserStats_GetGlobalStatHistoryDouble(ISteamUserStats ptr, const char *pchStatName, double *pData, uint32 cubData)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUserStats_GetGlobalStatHistoryDouble$handle() {
        return SteamAPI_ISteamUserStats_GetGlobalStatHistoryDouble.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int32 SteamAPI_ISteamUserStats_GetGlobalStatHistoryDouble(ISteamUserStats ptr, const char *pchStatName, double *pData, uint32 cubData)
     * }
     */
    public static int SteamAPI_ISteamUserStats_GetGlobalStatHistoryDouble(MemorySegment ptr, MemorySegment pchStatName, MemorySegment pData, int cubData) {
        var mh$ = SteamAPI_ISteamUserStats_GetGlobalStatHistoryDouble.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUserStats_GetGlobalStatHistoryDouble", ptr, pchStatName, pData, cubData);
            }
            return (int)mh$.invokeExact(ptr, pchStatName, pData, cubData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUserStats_GetAchievementProgressLimitsInt32 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUserStats_GetAchievementProgressLimitsInt32"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_GetAchievementProgressLimitsInt32(ISteamUserStats ptr, const char *pchName, int32 *pnMinProgress, int32 *pnMaxProgress)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUserStats_GetAchievementProgressLimitsInt32$descriptor() {
        return SteamAPI_ISteamUserStats_GetAchievementProgressLimitsInt32.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_GetAchievementProgressLimitsInt32(ISteamUserStats ptr, const char *pchName, int32 *pnMinProgress, int32 *pnMaxProgress)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUserStats_GetAchievementProgressLimitsInt32$handle() {
        return SteamAPI_ISteamUserStats_GetAchievementProgressLimitsInt32.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_GetAchievementProgressLimitsInt32(ISteamUserStats ptr, const char *pchName, int32 *pnMinProgress, int32 *pnMaxProgress)
     * }
     */
    public static boolean SteamAPI_ISteamUserStats_GetAchievementProgressLimitsInt32(MemorySegment ptr, MemorySegment pchName, MemorySegment pnMinProgress, MemorySegment pnMaxProgress) {
        var mh$ = SteamAPI_ISteamUserStats_GetAchievementProgressLimitsInt32.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUserStats_GetAchievementProgressLimitsInt32", ptr, pchName, pnMinProgress, pnMaxProgress);
            }
            return (boolean)mh$.invokeExact(ptr, pchName, pnMinProgress, pnMaxProgress);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUserStats_GetAchievementProgressLimitsFloat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUserStats_GetAchievementProgressLimitsFloat"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_GetAchievementProgressLimitsFloat(ISteamUserStats ptr, const char *pchName, float *pfMinProgress, float *pfMaxProgress)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUserStats_GetAchievementProgressLimitsFloat$descriptor() {
        return SteamAPI_ISteamUserStats_GetAchievementProgressLimitsFloat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_GetAchievementProgressLimitsFloat(ISteamUserStats ptr, const char *pchName, float *pfMinProgress, float *pfMaxProgress)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUserStats_GetAchievementProgressLimitsFloat$handle() {
        return SteamAPI_ISteamUserStats_GetAchievementProgressLimitsFloat.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_GetAchievementProgressLimitsFloat(ISteamUserStats ptr, const char *pchName, float *pfMinProgress, float *pfMaxProgress)
     * }
     */
    public static boolean SteamAPI_ISteamUserStats_GetAchievementProgressLimitsFloat(MemorySegment ptr, MemorySegment pchName, MemorySegment pfMinProgress, MemorySegment pfMaxProgress) {
        var mh$ = SteamAPI_ISteamUserStats_GetAchievementProgressLimitsFloat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUserStats_GetAchievementProgressLimitsFloat", ptr, pchName, pfMinProgress, pfMaxProgress);
            }
            return (boolean)mh$.invokeExact(ptr, pchName, pfMinProgress, pfMaxProgress);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_SteamUserStats_v012 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_SteamUserStats_v012"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ISteamUserStats SteamAPI_SteamUserStats_v012()
     * }
     */
    public static FunctionDescriptor SteamAPI_SteamUserStats_v012$descriptor() {
        return SteamAPI_SteamUserStats_v012.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ISteamUserStats SteamAPI_SteamUserStats_v012()
     * }
     */
    public static MethodHandle SteamAPI_SteamUserStats_v012$handle() {
        return SteamAPI_SteamUserStats_v012.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ISteamUserStats SteamAPI_SteamUserStats_v012()
     * }
     */
    public static MemorySegment SteamAPI_SteamUserStats_v012() {
        var mh$ = SteamAPI_SteamUserStats_v012.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_SteamUserStats_v012");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamApps_BIsSubscribed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamApps_BIsSubscribed"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamApps_BIsSubscribed(ISteamApps ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamApps_BIsSubscribed$descriptor() {
        return SteamAPI_ISteamApps_BIsSubscribed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamApps_BIsSubscribed(ISteamApps ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamApps_BIsSubscribed$handle() {
        return SteamAPI_ISteamApps_BIsSubscribed.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamApps_BIsSubscribed(ISteamApps ptr)
     * }
     */
    public static boolean SteamAPI_ISteamApps_BIsSubscribed(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamApps_BIsSubscribed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamApps_BIsSubscribed", ptr);
            }
            return (boolean)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamApps_BIsLowViolence {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamApps_BIsLowViolence"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamApps_BIsLowViolence(ISteamApps ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamApps_BIsLowViolence$descriptor() {
        return SteamAPI_ISteamApps_BIsLowViolence.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamApps_BIsLowViolence(ISteamApps ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamApps_BIsLowViolence$handle() {
        return SteamAPI_ISteamApps_BIsLowViolence.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamApps_BIsLowViolence(ISteamApps ptr)
     * }
     */
    public static boolean SteamAPI_ISteamApps_BIsLowViolence(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamApps_BIsLowViolence.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamApps_BIsLowViolence", ptr);
            }
            return (boolean)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamApps_BIsCybercafe {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamApps_BIsCybercafe"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamApps_BIsCybercafe(ISteamApps ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamApps_BIsCybercafe$descriptor() {
        return SteamAPI_ISteamApps_BIsCybercafe.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamApps_BIsCybercafe(ISteamApps ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamApps_BIsCybercafe$handle() {
        return SteamAPI_ISteamApps_BIsCybercafe.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamApps_BIsCybercafe(ISteamApps ptr)
     * }
     */
    public static boolean SteamAPI_ISteamApps_BIsCybercafe(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamApps_BIsCybercafe.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamApps_BIsCybercafe", ptr);
            }
            return (boolean)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamApps_BIsVACBanned {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamApps_BIsVACBanned"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamApps_BIsVACBanned(ISteamApps ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamApps_BIsVACBanned$descriptor() {
        return SteamAPI_ISteamApps_BIsVACBanned.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamApps_BIsVACBanned(ISteamApps ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamApps_BIsVACBanned$handle() {
        return SteamAPI_ISteamApps_BIsVACBanned.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamApps_BIsVACBanned(ISteamApps ptr)
     * }
     */
    public static boolean SteamAPI_ISteamApps_BIsVACBanned(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamApps_BIsVACBanned.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamApps_BIsVACBanned", ptr);
            }
            return (boolean)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamApps_GetCurrentGameLanguage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamApps_GetCurrentGameLanguage"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamApps_GetCurrentGameLanguage(ISteamApps ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamApps_GetCurrentGameLanguage$descriptor() {
        return SteamAPI_ISteamApps_GetCurrentGameLanguage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamApps_GetCurrentGameLanguage(ISteamApps ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamApps_GetCurrentGameLanguage$handle() {
        return SteamAPI_ISteamApps_GetCurrentGameLanguage.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamApps_GetCurrentGameLanguage(ISteamApps ptr)
     * }
     */
    public static MemorySegment SteamAPI_ISteamApps_GetCurrentGameLanguage(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamApps_GetCurrentGameLanguage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamApps_GetCurrentGameLanguage", ptr);
            }
            return (MemorySegment)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamApps_GetAvailableGameLanguages {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamApps_GetAvailableGameLanguages"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamApps_GetAvailableGameLanguages(ISteamApps ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamApps_GetAvailableGameLanguages$descriptor() {
        return SteamAPI_ISteamApps_GetAvailableGameLanguages.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamApps_GetAvailableGameLanguages(ISteamApps ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamApps_GetAvailableGameLanguages$handle() {
        return SteamAPI_ISteamApps_GetAvailableGameLanguages.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamApps_GetAvailableGameLanguages(ISteamApps ptr)
     * }
     */
    public static MemorySegment SteamAPI_ISteamApps_GetAvailableGameLanguages(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamApps_GetAvailableGameLanguages.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamApps_GetAvailableGameLanguages", ptr);
            }
            return (MemorySegment)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamApps_BIsSubscribedApp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamApps_BIsSubscribedApp"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamApps_BIsSubscribedApp(ISteamApps ptr, AppId_t appID)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamApps_BIsSubscribedApp$descriptor() {
        return SteamAPI_ISteamApps_BIsSubscribedApp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamApps_BIsSubscribedApp(ISteamApps ptr, AppId_t appID)
     * }
     */
    public static MethodHandle SteamAPI_ISteamApps_BIsSubscribedApp$handle() {
        return SteamAPI_ISteamApps_BIsSubscribedApp.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamApps_BIsSubscribedApp(ISteamApps ptr, AppId_t appID)
     * }
     */
    public static boolean SteamAPI_ISteamApps_BIsSubscribedApp(MemorySegment ptr, int appID) {
        var mh$ = SteamAPI_ISteamApps_BIsSubscribedApp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamApps_BIsSubscribedApp", ptr, appID);
            }
            return (boolean)mh$.invokeExact(ptr, appID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamApps_BIsDlcInstalled {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamApps_BIsDlcInstalled"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamApps_BIsDlcInstalled(ISteamApps ptr, AppId_t appID)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamApps_BIsDlcInstalled$descriptor() {
        return SteamAPI_ISteamApps_BIsDlcInstalled.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamApps_BIsDlcInstalled(ISteamApps ptr, AppId_t appID)
     * }
     */
    public static MethodHandle SteamAPI_ISteamApps_BIsDlcInstalled$handle() {
        return SteamAPI_ISteamApps_BIsDlcInstalled.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamApps_BIsDlcInstalled(ISteamApps ptr, AppId_t appID)
     * }
     */
    public static boolean SteamAPI_ISteamApps_BIsDlcInstalled(MemorySegment ptr, int appID) {
        var mh$ = SteamAPI_ISteamApps_BIsDlcInstalled.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamApps_BIsDlcInstalled", ptr, appID);
            }
            return (boolean)mh$.invokeExact(ptr, appID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamApps_GetEarliestPurchaseUnixTime {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamApps_GetEarliestPurchaseUnixTime"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamApps_GetEarliestPurchaseUnixTime(ISteamApps ptr, AppId_t nAppID)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamApps_GetEarliestPurchaseUnixTime$descriptor() {
        return SteamAPI_ISteamApps_GetEarliestPurchaseUnixTime.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamApps_GetEarliestPurchaseUnixTime(ISteamApps ptr, AppId_t nAppID)
     * }
     */
    public static MethodHandle SteamAPI_ISteamApps_GetEarliestPurchaseUnixTime$handle() {
        return SteamAPI_ISteamApps_GetEarliestPurchaseUnixTime.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamApps_GetEarliestPurchaseUnixTime(ISteamApps ptr, AppId_t nAppID)
     * }
     */
    public static int SteamAPI_ISteamApps_GetEarliestPurchaseUnixTime(MemorySegment ptr, int nAppID) {
        var mh$ = SteamAPI_ISteamApps_GetEarliestPurchaseUnixTime.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamApps_GetEarliestPurchaseUnixTime", ptr, nAppID);
            }
            return (int)mh$.invokeExact(ptr, nAppID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamApps_BIsSubscribedFromFreeWeekend {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamApps_BIsSubscribedFromFreeWeekend"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamApps_BIsSubscribedFromFreeWeekend(ISteamApps ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamApps_BIsSubscribedFromFreeWeekend$descriptor() {
        return SteamAPI_ISteamApps_BIsSubscribedFromFreeWeekend.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamApps_BIsSubscribedFromFreeWeekend(ISteamApps ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamApps_BIsSubscribedFromFreeWeekend$handle() {
        return SteamAPI_ISteamApps_BIsSubscribedFromFreeWeekend.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamApps_BIsSubscribedFromFreeWeekend(ISteamApps ptr)
     * }
     */
    public static boolean SteamAPI_ISteamApps_BIsSubscribedFromFreeWeekend(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamApps_BIsSubscribedFromFreeWeekend.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamApps_BIsSubscribedFromFreeWeekend", ptr);
            }
            return (boolean)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamApps_GetDLCCount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamApps_GetDLCCount"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamApps_GetDLCCount(ISteamApps ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamApps_GetDLCCount$descriptor() {
        return SteamAPI_ISteamApps_GetDLCCount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamApps_GetDLCCount(ISteamApps ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamApps_GetDLCCount$handle() {
        return SteamAPI_ISteamApps_GetDLCCount.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int SteamAPI_ISteamApps_GetDLCCount(ISteamApps ptr)
     * }
     */
    public static int SteamAPI_ISteamApps_GetDLCCount(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamApps_GetDLCCount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamApps_GetDLCCount", ptr);
            }
            return (int)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamApps_BGetDLCDataByIndex {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamApps_BGetDLCDataByIndex"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamApps_BGetDLCDataByIndex(ISteamApps ptr, int iDLC, AppId_t *pAppID, bool *pbAvailable, char *pchName, int cchNameBufferSize)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamApps_BGetDLCDataByIndex$descriptor() {
        return SteamAPI_ISteamApps_BGetDLCDataByIndex.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamApps_BGetDLCDataByIndex(ISteamApps ptr, int iDLC, AppId_t *pAppID, bool *pbAvailable, char *pchName, int cchNameBufferSize)
     * }
     */
    public static MethodHandle SteamAPI_ISteamApps_BGetDLCDataByIndex$handle() {
        return SteamAPI_ISteamApps_BGetDLCDataByIndex.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamApps_BGetDLCDataByIndex(ISteamApps ptr, int iDLC, AppId_t *pAppID, bool *pbAvailable, char *pchName, int cchNameBufferSize)
     * }
     */
    public static boolean SteamAPI_ISteamApps_BGetDLCDataByIndex(MemorySegment ptr, int iDLC, MemorySegment pAppID, MemorySegment pbAvailable, MemorySegment pchName, int cchNameBufferSize) {
        var mh$ = SteamAPI_ISteamApps_BGetDLCDataByIndex.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamApps_BGetDLCDataByIndex", ptr, iDLC, pAppID, pbAvailable, pchName, cchNameBufferSize);
            }
            return (boolean)mh$.invokeExact(ptr, iDLC, pAppID, pbAvailable, pchName, cchNameBufferSize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamApps_InstallDLC {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamApps_InstallDLC"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamApps_InstallDLC(ISteamApps ptr, AppId_t nAppID)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamApps_InstallDLC$descriptor() {
        return SteamAPI_ISteamApps_InstallDLC.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamApps_InstallDLC(ISteamApps ptr, AppId_t nAppID)
     * }
     */
    public static MethodHandle SteamAPI_ISteamApps_InstallDLC$handle() {
        return SteamAPI_ISteamApps_InstallDLC.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamApps_InstallDLC(ISteamApps ptr, AppId_t nAppID)
     * }
     */
    public static void SteamAPI_ISteamApps_InstallDLC(MemorySegment ptr, int nAppID) {
        var mh$ = SteamAPI_ISteamApps_InstallDLC.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamApps_InstallDLC", ptr, nAppID);
            }
            mh$.invokeExact(ptr, nAppID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamApps_UninstallDLC {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamApps_UninstallDLC"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamApps_UninstallDLC(ISteamApps ptr, AppId_t nAppID)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamApps_UninstallDLC$descriptor() {
        return SteamAPI_ISteamApps_UninstallDLC.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamApps_UninstallDLC(ISteamApps ptr, AppId_t nAppID)
     * }
     */
    public static MethodHandle SteamAPI_ISteamApps_UninstallDLC$handle() {
        return SteamAPI_ISteamApps_UninstallDLC.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamApps_UninstallDLC(ISteamApps ptr, AppId_t nAppID)
     * }
     */
    public static void SteamAPI_ISteamApps_UninstallDLC(MemorySegment ptr, int nAppID) {
        var mh$ = SteamAPI_ISteamApps_UninstallDLC.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamApps_UninstallDLC", ptr, nAppID);
            }
            mh$.invokeExact(ptr, nAppID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamApps_RequestAppProofOfPurchaseKey {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamApps_RequestAppProofOfPurchaseKey"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamApps_RequestAppProofOfPurchaseKey(ISteamApps ptr, AppId_t nAppID)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamApps_RequestAppProofOfPurchaseKey$descriptor() {
        return SteamAPI_ISteamApps_RequestAppProofOfPurchaseKey.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamApps_RequestAppProofOfPurchaseKey(ISteamApps ptr, AppId_t nAppID)
     * }
     */
    public static MethodHandle SteamAPI_ISteamApps_RequestAppProofOfPurchaseKey$handle() {
        return SteamAPI_ISteamApps_RequestAppProofOfPurchaseKey.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamApps_RequestAppProofOfPurchaseKey(ISteamApps ptr, AppId_t nAppID)
     * }
     */
    public static void SteamAPI_ISteamApps_RequestAppProofOfPurchaseKey(MemorySegment ptr, int nAppID) {
        var mh$ = SteamAPI_ISteamApps_RequestAppProofOfPurchaseKey.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamApps_RequestAppProofOfPurchaseKey", ptr, nAppID);
            }
            mh$.invokeExact(ptr, nAppID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamApps_GetCurrentBetaName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamApps_GetCurrentBetaName"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamApps_GetCurrentBetaName(ISteamApps ptr, char *pchName, int cchNameBufferSize)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamApps_GetCurrentBetaName$descriptor() {
        return SteamAPI_ISteamApps_GetCurrentBetaName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamApps_GetCurrentBetaName(ISteamApps ptr, char *pchName, int cchNameBufferSize)
     * }
     */
    public static MethodHandle SteamAPI_ISteamApps_GetCurrentBetaName$handle() {
        return SteamAPI_ISteamApps_GetCurrentBetaName.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamApps_GetCurrentBetaName(ISteamApps ptr, char *pchName, int cchNameBufferSize)
     * }
     */
    public static boolean SteamAPI_ISteamApps_GetCurrentBetaName(MemorySegment ptr, MemorySegment pchName, int cchNameBufferSize) {
        var mh$ = SteamAPI_ISteamApps_GetCurrentBetaName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamApps_GetCurrentBetaName", ptr, pchName, cchNameBufferSize);
            }
            return (boolean)mh$.invokeExact(ptr, pchName, cchNameBufferSize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamApps_MarkContentCorrupt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamApps_MarkContentCorrupt"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamApps_MarkContentCorrupt(ISteamApps ptr, bool bMissingFilesOnly)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamApps_MarkContentCorrupt$descriptor() {
        return SteamAPI_ISteamApps_MarkContentCorrupt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamApps_MarkContentCorrupt(ISteamApps ptr, bool bMissingFilesOnly)
     * }
     */
    public static MethodHandle SteamAPI_ISteamApps_MarkContentCorrupt$handle() {
        return SteamAPI_ISteamApps_MarkContentCorrupt.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamApps_MarkContentCorrupt(ISteamApps ptr, bool bMissingFilesOnly)
     * }
     */
    public static boolean SteamAPI_ISteamApps_MarkContentCorrupt(MemorySegment ptr, boolean bMissingFilesOnly) {
        var mh$ = SteamAPI_ISteamApps_MarkContentCorrupt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamApps_MarkContentCorrupt", ptr, bMissingFilesOnly);
            }
            return (boolean)mh$.invokeExact(ptr, bMissingFilesOnly);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamApps_GetInstalledDepots {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamApps_GetInstalledDepots"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamApps_GetInstalledDepots(ISteamApps ptr, AppId_t appID, DepotId_t *pvecDepots, uint32 cMaxDepots)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamApps_GetInstalledDepots$descriptor() {
        return SteamAPI_ISteamApps_GetInstalledDepots.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamApps_GetInstalledDepots(ISteamApps ptr, AppId_t appID, DepotId_t *pvecDepots, uint32 cMaxDepots)
     * }
     */
    public static MethodHandle SteamAPI_ISteamApps_GetInstalledDepots$handle() {
        return SteamAPI_ISteamApps_GetInstalledDepots.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamApps_GetInstalledDepots(ISteamApps ptr, AppId_t appID, DepotId_t *pvecDepots, uint32 cMaxDepots)
     * }
     */
    public static int SteamAPI_ISteamApps_GetInstalledDepots(MemorySegment ptr, int appID, MemorySegment pvecDepots, int cMaxDepots) {
        var mh$ = SteamAPI_ISteamApps_GetInstalledDepots.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamApps_GetInstalledDepots", ptr, appID, pvecDepots, cMaxDepots);
            }
            return (int)mh$.invokeExact(ptr, appID, pvecDepots, cMaxDepots);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamApps_GetAppInstallDir {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamApps_GetAppInstallDir"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamApps_GetAppInstallDir(ISteamApps ptr, AppId_t appID, char *pchFolder, uint32 cchFolderBufferSize)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamApps_GetAppInstallDir$descriptor() {
        return SteamAPI_ISteamApps_GetAppInstallDir.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamApps_GetAppInstallDir(ISteamApps ptr, AppId_t appID, char *pchFolder, uint32 cchFolderBufferSize)
     * }
     */
    public static MethodHandle SteamAPI_ISteamApps_GetAppInstallDir$handle() {
        return SteamAPI_ISteamApps_GetAppInstallDir.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamApps_GetAppInstallDir(ISteamApps ptr, AppId_t appID, char *pchFolder, uint32 cchFolderBufferSize)
     * }
     */
    public static int SteamAPI_ISteamApps_GetAppInstallDir(MemorySegment ptr, int appID, MemorySegment pchFolder, int cchFolderBufferSize) {
        var mh$ = SteamAPI_ISteamApps_GetAppInstallDir.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamApps_GetAppInstallDir", ptr, appID, pchFolder, cchFolderBufferSize);
            }
            return (int)mh$.invokeExact(ptr, appID, pchFolder, cchFolderBufferSize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamApps_BIsAppInstalled {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamApps_BIsAppInstalled"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamApps_BIsAppInstalled(ISteamApps ptr, AppId_t appID)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamApps_BIsAppInstalled$descriptor() {
        return SteamAPI_ISteamApps_BIsAppInstalled.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamApps_BIsAppInstalled(ISteamApps ptr, AppId_t appID)
     * }
     */
    public static MethodHandle SteamAPI_ISteamApps_BIsAppInstalled$handle() {
        return SteamAPI_ISteamApps_BIsAppInstalled.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamApps_BIsAppInstalled(ISteamApps ptr, AppId_t appID)
     * }
     */
    public static boolean SteamAPI_ISteamApps_BIsAppInstalled(MemorySegment ptr, int appID) {
        var mh$ = SteamAPI_ISteamApps_BIsAppInstalled.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamApps_BIsAppInstalled", ptr, appID);
            }
            return (boolean)mh$.invokeExact(ptr, appID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamApps_GetAppOwner {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamApps_GetAppOwner"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint64_steamid SteamAPI_ISteamApps_GetAppOwner(ISteamApps ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamApps_GetAppOwner$descriptor() {
        return SteamAPI_ISteamApps_GetAppOwner.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint64_steamid SteamAPI_ISteamApps_GetAppOwner(ISteamApps ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamApps_GetAppOwner$handle() {
        return SteamAPI_ISteamApps_GetAppOwner.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * uint64_steamid SteamAPI_ISteamApps_GetAppOwner(ISteamApps ptr)
     * }
     */
    public static long SteamAPI_ISteamApps_GetAppOwner(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamApps_GetAppOwner.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamApps_GetAppOwner", ptr);
            }
            return (long)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamApps_GetLaunchQueryParam {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamApps_GetLaunchQueryParam"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamApps_GetLaunchQueryParam(ISteamApps ptr, const char *pchKey)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamApps_GetLaunchQueryParam$descriptor() {
        return SteamAPI_ISteamApps_GetLaunchQueryParam.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamApps_GetLaunchQueryParam(ISteamApps ptr, const char *pchKey)
     * }
     */
    public static MethodHandle SteamAPI_ISteamApps_GetLaunchQueryParam$handle() {
        return SteamAPI_ISteamApps_GetLaunchQueryParam.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamApps_GetLaunchQueryParam(ISteamApps ptr, const char *pchKey)
     * }
     */
    public static MemorySegment SteamAPI_ISteamApps_GetLaunchQueryParam(MemorySegment ptr, MemorySegment pchKey) {
        var mh$ = SteamAPI_ISteamApps_GetLaunchQueryParam.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamApps_GetLaunchQueryParam", ptr, pchKey);
            }
            return (MemorySegment)mh$.invokeExact(ptr, pchKey);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamApps_GetDlcDownloadProgress {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamApps_GetDlcDownloadProgress"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamApps_GetDlcDownloadProgress(ISteamApps ptr, AppId_t nAppID, uint64 *punBytesDownloaded, uint64 *punBytesTotal)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamApps_GetDlcDownloadProgress$descriptor() {
        return SteamAPI_ISteamApps_GetDlcDownloadProgress.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamApps_GetDlcDownloadProgress(ISteamApps ptr, AppId_t nAppID, uint64 *punBytesDownloaded, uint64 *punBytesTotal)
     * }
     */
    public static MethodHandle SteamAPI_ISteamApps_GetDlcDownloadProgress$handle() {
        return SteamAPI_ISteamApps_GetDlcDownloadProgress.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamApps_GetDlcDownloadProgress(ISteamApps ptr, AppId_t nAppID, uint64 *punBytesDownloaded, uint64 *punBytesTotal)
     * }
     */
    public static boolean SteamAPI_ISteamApps_GetDlcDownloadProgress(MemorySegment ptr, int nAppID, MemorySegment punBytesDownloaded, MemorySegment punBytesTotal) {
        var mh$ = SteamAPI_ISteamApps_GetDlcDownloadProgress.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamApps_GetDlcDownloadProgress", ptr, nAppID, punBytesDownloaded, punBytesTotal);
            }
            return (boolean)mh$.invokeExact(ptr, nAppID, punBytesDownloaded, punBytesTotal);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamApps_GetAppBuildId {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamApps_GetAppBuildId"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamApps_GetAppBuildId(ISteamApps ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamApps_GetAppBuildId$descriptor() {
        return SteamAPI_ISteamApps_GetAppBuildId.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamApps_GetAppBuildId(ISteamApps ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamApps_GetAppBuildId$handle() {
        return SteamAPI_ISteamApps_GetAppBuildId.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int SteamAPI_ISteamApps_GetAppBuildId(ISteamApps ptr)
     * }
     */
    public static int SteamAPI_ISteamApps_GetAppBuildId(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamApps_GetAppBuildId.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamApps_GetAppBuildId", ptr);
            }
            return (int)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamApps_RequestAllProofOfPurchaseKeys {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamApps_RequestAllProofOfPurchaseKeys"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamApps_RequestAllProofOfPurchaseKeys(ISteamApps ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamApps_RequestAllProofOfPurchaseKeys$descriptor() {
        return SteamAPI_ISteamApps_RequestAllProofOfPurchaseKeys.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamApps_RequestAllProofOfPurchaseKeys(ISteamApps ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamApps_RequestAllProofOfPurchaseKeys$handle() {
        return SteamAPI_ISteamApps_RequestAllProofOfPurchaseKeys.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamApps_RequestAllProofOfPurchaseKeys(ISteamApps ptr)
     * }
     */
    public static void SteamAPI_ISteamApps_RequestAllProofOfPurchaseKeys(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamApps_RequestAllProofOfPurchaseKeys.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamApps_RequestAllProofOfPurchaseKeys", ptr);
            }
            mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamApps_GetFileDetails {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamApps_GetFileDetails"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamApps_GetFileDetails(ISteamApps ptr, const char *pszFileName)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamApps_GetFileDetails$descriptor() {
        return SteamAPI_ISteamApps_GetFileDetails.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamApps_GetFileDetails(ISteamApps ptr, const char *pszFileName)
     * }
     */
    public static MethodHandle SteamAPI_ISteamApps_GetFileDetails$handle() {
        return SteamAPI_ISteamApps_GetFileDetails.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamApps_GetFileDetails(ISteamApps ptr, const char *pszFileName)
     * }
     */
    public static long SteamAPI_ISteamApps_GetFileDetails(MemorySegment ptr, MemorySegment pszFileName) {
        var mh$ = SteamAPI_ISteamApps_GetFileDetails.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamApps_GetFileDetails", ptr, pszFileName);
            }
            return (long)mh$.invokeExact(ptr, pszFileName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamApps_GetLaunchCommandLine {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamApps_GetLaunchCommandLine"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamApps_GetLaunchCommandLine(ISteamApps ptr, char *pszCommandLine, int cubCommandLine)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamApps_GetLaunchCommandLine$descriptor() {
        return SteamAPI_ISteamApps_GetLaunchCommandLine.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamApps_GetLaunchCommandLine(ISteamApps ptr, char *pszCommandLine, int cubCommandLine)
     * }
     */
    public static MethodHandle SteamAPI_ISteamApps_GetLaunchCommandLine$handle() {
        return SteamAPI_ISteamApps_GetLaunchCommandLine.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int SteamAPI_ISteamApps_GetLaunchCommandLine(ISteamApps ptr, char *pszCommandLine, int cubCommandLine)
     * }
     */
    public static int SteamAPI_ISteamApps_GetLaunchCommandLine(MemorySegment ptr, MemorySegment pszCommandLine, int cubCommandLine) {
        var mh$ = SteamAPI_ISteamApps_GetLaunchCommandLine.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamApps_GetLaunchCommandLine", ptr, pszCommandLine, cubCommandLine);
            }
            return (int)mh$.invokeExact(ptr, pszCommandLine, cubCommandLine);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamApps_BIsSubscribedFromFamilySharing {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamApps_BIsSubscribedFromFamilySharing"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamApps_BIsSubscribedFromFamilySharing(ISteamApps ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamApps_BIsSubscribedFromFamilySharing$descriptor() {
        return SteamAPI_ISteamApps_BIsSubscribedFromFamilySharing.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamApps_BIsSubscribedFromFamilySharing(ISteamApps ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamApps_BIsSubscribedFromFamilySharing$handle() {
        return SteamAPI_ISteamApps_BIsSubscribedFromFamilySharing.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamApps_BIsSubscribedFromFamilySharing(ISteamApps ptr)
     * }
     */
    public static boolean SteamAPI_ISteamApps_BIsSubscribedFromFamilySharing(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamApps_BIsSubscribedFromFamilySharing.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamApps_BIsSubscribedFromFamilySharing", ptr);
            }
            return (boolean)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamApps_BIsTimedTrial {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamApps_BIsTimedTrial"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamApps_BIsTimedTrial(ISteamApps ptr, uint32 *punSecondsAllowed, uint32 *punSecondsPlayed)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamApps_BIsTimedTrial$descriptor() {
        return SteamAPI_ISteamApps_BIsTimedTrial.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamApps_BIsTimedTrial(ISteamApps ptr, uint32 *punSecondsAllowed, uint32 *punSecondsPlayed)
     * }
     */
    public static MethodHandle SteamAPI_ISteamApps_BIsTimedTrial$handle() {
        return SteamAPI_ISteamApps_BIsTimedTrial.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamApps_BIsTimedTrial(ISteamApps ptr, uint32 *punSecondsAllowed, uint32 *punSecondsPlayed)
     * }
     */
    public static boolean SteamAPI_ISteamApps_BIsTimedTrial(MemorySegment ptr, MemorySegment punSecondsAllowed, MemorySegment punSecondsPlayed) {
        var mh$ = SteamAPI_ISteamApps_BIsTimedTrial.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamApps_BIsTimedTrial", ptr, punSecondsAllowed, punSecondsPlayed);
            }
            return (boolean)mh$.invokeExact(ptr, punSecondsAllowed, punSecondsPlayed);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamApps_SetDlcContext {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamApps_SetDlcContext"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamApps_SetDlcContext(ISteamApps ptr, AppId_t nAppID)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamApps_SetDlcContext$descriptor() {
        return SteamAPI_ISteamApps_SetDlcContext.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamApps_SetDlcContext(ISteamApps ptr, AppId_t nAppID)
     * }
     */
    public static MethodHandle SteamAPI_ISteamApps_SetDlcContext$handle() {
        return SteamAPI_ISteamApps_SetDlcContext.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamApps_SetDlcContext(ISteamApps ptr, AppId_t nAppID)
     * }
     */
    public static boolean SteamAPI_ISteamApps_SetDlcContext(MemorySegment ptr, int nAppID) {
        var mh$ = SteamAPI_ISteamApps_SetDlcContext.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamApps_SetDlcContext", ptr, nAppID);
            }
            return (boolean)mh$.invokeExact(ptr, nAppID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_SteamApps_v008 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_SteamApps_v008"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ISteamApps SteamAPI_SteamApps_v008()
     * }
     */
    public static FunctionDescriptor SteamAPI_SteamApps_v008$descriptor() {
        return SteamAPI_SteamApps_v008.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ISteamApps SteamAPI_SteamApps_v008()
     * }
     */
    public static MethodHandle SteamAPI_SteamApps_v008$handle() {
        return SteamAPI_SteamApps_v008.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ISteamApps SteamAPI_SteamApps_v008()
     * }
     */
    public static MemorySegment SteamAPI_SteamApps_v008() {
        var mh$ = SteamAPI_SteamApps_v008.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_SteamApps_v008");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworking_SendP2PPacket {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_INT,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamNetworking_SendP2PPacket"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworking_SendP2PPacket(ISteamNetworking ptr, uint64_steamid steamIDRemote, const void *pubData, uint32 cubData, EP2PSend eP2PSendType, int nChannel)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworking_SendP2PPacket$descriptor() {
        return SteamAPI_ISteamNetworking_SendP2PPacket.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworking_SendP2PPacket(ISteamNetworking ptr, uint64_steamid steamIDRemote, const void *pubData, uint32 cubData, EP2PSend eP2PSendType, int nChannel)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworking_SendP2PPacket$handle() {
        return SteamAPI_ISteamNetworking_SendP2PPacket.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworking_SendP2PPacket(ISteamNetworking ptr, uint64_steamid steamIDRemote, const void *pubData, uint32 cubData, EP2PSend eP2PSendType, int nChannel)
     * }
     */
    public static boolean SteamAPI_ISteamNetworking_SendP2PPacket(MemorySegment ptr, long steamIDRemote, MemorySegment pubData, int cubData, int eP2PSendType, int nChannel) {
        var mh$ = SteamAPI_ISteamNetworking_SendP2PPacket.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworking_SendP2PPacket", ptr, steamIDRemote, pubData, cubData, eP2PSendType, nChannel);
            }
            return (boolean)mh$.invokeExact(ptr, steamIDRemote, pubData, cubData, eP2PSendType, nChannel);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworking_IsP2PPacketAvailable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamNetworking_IsP2PPacketAvailable"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworking_IsP2PPacketAvailable(ISteamNetworking ptr, uint32 *pcubMsgSize, int nChannel)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworking_IsP2PPacketAvailable$descriptor() {
        return SteamAPI_ISteamNetworking_IsP2PPacketAvailable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworking_IsP2PPacketAvailable(ISteamNetworking ptr, uint32 *pcubMsgSize, int nChannel)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworking_IsP2PPacketAvailable$handle() {
        return SteamAPI_ISteamNetworking_IsP2PPacketAvailable.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworking_IsP2PPacketAvailable(ISteamNetworking ptr, uint32 *pcubMsgSize, int nChannel)
     * }
     */
    public static boolean SteamAPI_ISteamNetworking_IsP2PPacketAvailable(MemorySegment ptr, MemorySegment pcubMsgSize, int nChannel) {
        var mh$ = SteamAPI_ISteamNetworking_IsP2PPacketAvailable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworking_IsP2PPacketAvailable", ptr, pcubMsgSize, nChannel);
            }
            return (boolean)mh$.invokeExact(ptr, pcubMsgSize, nChannel);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworking_ReadP2PPacket {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamNetworking_ReadP2PPacket"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworking_ReadP2PPacket(ISteamNetworking ptr, void *pubDest, uint32 cubDest, uint32 *pcubMsgSize, CSteamID *psteamIDRemote, int nChannel)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworking_ReadP2PPacket$descriptor() {
        return SteamAPI_ISteamNetworking_ReadP2PPacket.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworking_ReadP2PPacket(ISteamNetworking ptr, void *pubDest, uint32 cubDest, uint32 *pcubMsgSize, CSteamID *psteamIDRemote, int nChannel)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworking_ReadP2PPacket$handle() {
        return SteamAPI_ISteamNetworking_ReadP2PPacket.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworking_ReadP2PPacket(ISteamNetworking ptr, void *pubDest, uint32 cubDest, uint32 *pcubMsgSize, CSteamID *psteamIDRemote, int nChannel)
     * }
     */
    public static boolean SteamAPI_ISteamNetworking_ReadP2PPacket(MemorySegment ptr, MemorySegment pubDest, int cubDest, MemorySegment pcubMsgSize, MemorySegment psteamIDRemote, int nChannel) {
        var mh$ = SteamAPI_ISteamNetworking_ReadP2PPacket.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworking_ReadP2PPacket", ptr, pubDest, cubDest, pcubMsgSize, psteamIDRemote, nChannel);
            }
            return (boolean)mh$.invokeExact(ptr, pubDest, cubDest, pcubMsgSize, psteamIDRemote, nChannel);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworking_AcceptP2PSessionWithUser {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamNetworking_AcceptP2PSessionWithUser"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworking_AcceptP2PSessionWithUser(ISteamNetworking ptr, uint64_steamid steamIDRemote)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworking_AcceptP2PSessionWithUser$descriptor() {
        return SteamAPI_ISteamNetworking_AcceptP2PSessionWithUser.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworking_AcceptP2PSessionWithUser(ISteamNetworking ptr, uint64_steamid steamIDRemote)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworking_AcceptP2PSessionWithUser$handle() {
        return SteamAPI_ISteamNetworking_AcceptP2PSessionWithUser.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworking_AcceptP2PSessionWithUser(ISteamNetworking ptr, uint64_steamid steamIDRemote)
     * }
     */
    public static boolean SteamAPI_ISteamNetworking_AcceptP2PSessionWithUser(MemorySegment ptr, long steamIDRemote) {
        var mh$ = SteamAPI_ISteamNetworking_AcceptP2PSessionWithUser.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworking_AcceptP2PSessionWithUser", ptr, steamIDRemote);
            }
            return (boolean)mh$.invokeExact(ptr, steamIDRemote);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworking_CloseP2PSessionWithUser {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamNetworking_CloseP2PSessionWithUser"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworking_CloseP2PSessionWithUser(ISteamNetworking ptr, uint64_steamid steamIDRemote)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworking_CloseP2PSessionWithUser$descriptor() {
        return SteamAPI_ISteamNetworking_CloseP2PSessionWithUser.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworking_CloseP2PSessionWithUser(ISteamNetworking ptr, uint64_steamid steamIDRemote)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworking_CloseP2PSessionWithUser$handle() {
        return SteamAPI_ISteamNetworking_CloseP2PSessionWithUser.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworking_CloseP2PSessionWithUser(ISteamNetworking ptr, uint64_steamid steamIDRemote)
     * }
     */
    public static boolean SteamAPI_ISteamNetworking_CloseP2PSessionWithUser(MemorySegment ptr, long steamIDRemote) {
        var mh$ = SteamAPI_ISteamNetworking_CloseP2PSessionWithUser.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworking_CloseP2PSessionWithUser", ptr, steamIDRemote);
            }
            return (boolean)mh$.invokeExact(ptr, steamIDRemote);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworking_CloseP2PChannelWithUser {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamNetworking_CloseP2PChannelWithUser"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworking_CloseP2PChannelWithUser(ISteamNetworking ptr, uint64_steamid steamIDRemote, int nChannel)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworking_CloseP2PChannelWithUser$descriptor() {
        return SteamAPI_ISteamNetworking_CloseP2PChannelWithUser.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworking_CloseP2PChannelWithUser(ISteamNetworking ptr, uint64_steamid steamIDRemote, int nChannel)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworking_CloseP2PChannelWithUser$handle() {
        return SteamAPI_ISteamNetworking_CloseP2PChannelWithUser.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworking_CloseP2PChannelWithUser(ISteamNetworking ptr, uint64_steamid steamIDRemote, int nChannel)
     * }
     */
    public static boolean SteamAPI_ISteamNetworking_CloseP2PChannelWithUser(MemorySegment ptr, long steamIDRemote, int nChannel) {
        var mh$ = SteamAPI_ISteamNetworking_CloseP2PChannelWithUser.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworking_CloseP2PChannelWithUser", ptr, steamIDRemote, nChannel);
            }
            return (boolean)mh$.invokeExact(ptr, steamIDRemote, nChannel);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworking_GetP2PSessionState {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamNetworking_GetP2PSessionState"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworking_GetP2PSessionState(ISteamNetworking ptr, uint64_steamid steamIDRemote, P2PSessionState_t *pConnectionState)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworking_GetP2PSessionState$descriptor() {
        return SteamAPI_ISteamNetworking_GetP2PSessionState.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworking_GetP2PSessionState(ISteamNetworking ptr, uint64_steamid steamIDRemote, P2PSessionState_t *pConnectionState)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworking_GetP2PSessionState$handle() {
        return SteamAPI_ISteamNetworking_GetP2PSessionState.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworking_GetP2PSessionState(ISteamNetworking ptr, uint64_steamid steamIDRemote, P2PSessionState_t *pConnectionState)
     * }
     */
    public static boolean SteamAPI_ISteamNetworking_GetP2PSessionState(MemorySegment ptr, long steamIDRemote, MemorySegment pConnectionState) {
        var mh$ = SteamAPI_ISteamNetworking_GetP2PSessionState.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworking_GetP2PSessionState", ptr, steamIDRemote, pConnectionState);
            }
            return (boolean)mh$.invokeExact(ptr, steamIDRemote, pConnectionState);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworking_AllowP2PPacketRelay {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamNetworking_AllowP2PPacketRelay"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworking_AllowP2PPacketRelay(ISteamNetworking ptr, bool bAllow)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworking_AllowP2PPacketRelay$descriptor() {
        return SteamAPI_ISteamNetworking_AllowP2PPacketRelay.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworking_AllowP2PPacketRelay(ISteamNetworking ptr, bool bAllow)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworking_AllowP2PPacketRelay$handle() {
        return SteamAPI_ISteamNetworking_AllowP2PPacketRelay.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworking_AllowP2PPacketRelay(ISteamNetworking ptr, bool bAllow)
     * }
     */
    public static boolean SteamAPI_ISteamNetworking_AllowP2PPacketRelay(MemorySegment ptr, boolean bAllow) {
        var mh$ = SteamAPI_ISteamNetworking_AllowP2PPacketRelay.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworking_AllowP2PPacketRelay", ptr, bAllow);
            }
            return (boolean)mh$.invokeExact(ptr, bAllow);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworking_CreateListenSocket {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamIPAddress_t.layout(),
            SteamFlat.C_SHORT,
            SteamFlat.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamNetworking_CreateListenSocket"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SNetListenSocket_t SteamAPI_ISteamNetworking_CreateListenSocket(ISteamNetworking ptr, int nVirtualP2PPort, SteamIPAddress_t nIP, uint16 nPort, bool bAllowUseOfPacketRelay)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworking_CreateListenSocket$descriptor() {
        return SteamAPI_ISteamNetworking_CreateListenSocket.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SNetListenSocket_t SteamAPI_ISteamNetworking_CreateListenSocket(ISteamNetworking ptr, int nVirtualP2PPort, SteamIPAddress_t nIP, uint16 nPort, bool bAllowUseOfPacketRelay)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworking_CreateListenSocket$handle() {
        return SteamAPI_ISteamNetworking_CreateListenSocket.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SNetListenSocket_t SteamAPI_ISteamNetworking_CreateListenSocket(ISteamNetworking ptr, int nVirtualP2PPort, SteamIPAddress_t nIP, uint16 nPort, bool bAllowUseOfPacketRelay)
     * }
     */
    public static int SteamAPI_ISteamNetworking_CreateListenSocket(MemorySegment ptr, int nVirtualP2PPort, MemorySegment nIP, short nPort, boolean bAllowUseOfPacketRelay) {
        var mh$ = SteamAPI_ISteamNetworking_CreateListenSocket.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworking_CreateListenSocket", ptr, nVirtualP2PPort, nIP, nPort, bAllowUseOfPacketRelay);
            }
            return (int)mh$.invokeExact(ptr, nVirtualP2PPort, nIP, nPort, bAllowUseOfPacketRelay);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworking_CreateP2PConnectionSocket {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_INT,
            SteamFlat.C_INT,
            SteamFlat.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamNetworking_CreateP2PConnectionSocket"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SNetSocket_t SteamAPI_ISteamNetworking_CreateP2PConnectionSocket(ISteamNetworking ptr, uint64_steamid steamIDTarget, int nVirtualPort, int nTimeoutSec, bool bAllowUseOfPacketRelay)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworking_CreateP2PConnectionSocket$descriptor() {
        return SteamAPI_ISteamNetworking_CreateP2PConnectionSocket.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SNetSocket_t SteamAPI_ISteamNetworking_CreateP2PConnectionSocket(ISteamNetworking ptr, uint64_steamid steamIDTarget, int nVirtualPort, int nTimeoutSec, bool bAllowUseOfPacketRelay)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworking_CreateP2PConnectionSocket$handle() {
        return SteamAPI_ISteamNetworking_CreateP2PConnectionSocket.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SNetSocket_t SteamAPI_ISteamNetworking_CreateP2PConnectionSocket(ISteamNetworking ptr, uint64_steamid steamIDTarget, int nVirtualPort, int nTimeoutSec, bool bAllowUseOfPacketRelay)
     * }
     */
    public static int SteamAPI_ISteamNetworking_CreateP2PConnectionSocket(MemorySegment ptr, long steamIDTarget, int nVirtualPort, int nTimeoutSec, boolean bAllowUseOfPacketRelay) {
        var mh$ = SteamAPI_ISteamNetworking_CreateP2PConnectionSocket.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworking_CreateP2PConnectionSocket", ptr, steamIDTarget, nVirtualPort, nTimeoutSec, bAllowUseOfPacketRelay);
            }
            return (int)mh$.invokeExact(ptr, steamIDTarget, nVirtualPort, nTimeoutSec, bAllowUseOfPacketRelay);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworking_CreateConnectionSocket {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamIPAddress_t.layout(),
            SteamFlat.C_SHORT,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamNetworking_CreateConnectionSocket"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SNetSocket_t SteamAPI_ISteamNetworking_CreateConnectionSocket(ISteamNetworking ptr, SteamIPAddress_t nIP, uint16 nPort, int nTimeoutSec)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworking_CreateConnectionSocket$descriptor() {
        return SteamAPI_ISteamNetworking_CreateConnectionSocket.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SNetSocket_t SteamAPI_ISteamNetworking_CreateConnectionSocket(ISteamNetworking ptr, SteamIPAddress_t nIP, uint16 nPort, int nTimeoutSec)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworking_CreateConnectionSocket$handle() {
        return SteamAPI_ISteamNetworking_CreateConnectionSocket.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SNetSocket_t SteamAPI_ISteamNetworking_CreateConnectionSocket(ISteamNetworking ptr, SteamIPAddress_t nIP, uint16 nPort, int nTimeoutSec)
     * }
     */
    public static int SteamAPI_ISteamNetworking_CreateConnectionSocket(MemorySegment ptr, MemorySegment nIP, short nPort, int nTimeoutSec) {
        var mh$ = SteamAPI_ISteamNetworking_CreateConnectionSocket.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworking_CreateConnectionSocket", ptr, nIP, nPort, nTimeoutSec);
            }
            return (int)mh$.invokeExact(ptr, nIP, nPort, nTimeoutSec);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworking_DestroySocket {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamNetworking_DestroySocket"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworking_DestroySocket(ISteamNetworking ptr, SNetSocket_t hSocket, bool bNotifyRemoteEnd)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworking_DestroySocket$descriptor() {
        return SteamAPI_ISteamNetworking_DestroySocket.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworking_DestroySocket(ISteamNetworking ptr, SNetSocket_t hSocket, bool bNotifyRemoteEnd)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworking_DestroySocket$handle() {
        return SteamAPI_ISteamNetworking_DestroySocket.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworking_DestroySocket(ISteamNetworking ptr, SNetSocket_t hSocket, bool bNotifyRemoteEnd)
     * }
     */
    public static boolean SteamAPI_ISteamNetworking_DestroySocket(MemorySegment ptr, int hSocket, boolean bNotifyRemoteEnd) {
        var mh$ = SteamAPI_ISteamNetworking_DestroySocket.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworking_DestroySocket", ptr, hSocket, bNotifyRemoteEnd);
            }
            return (boolean)mh$.invokeExact(ptr, hSocket, bNotifyRemoteEnd);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworking_DestroyListenSocket {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamNetworking_DestroyListenSocket"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworking_DestroyListenSocket(ISteamNetworking ptr, SNetListenSocket_t hSocket, bool bNotifyRemoteEnd)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworking_DestroyListenSocket$descriptor() {
        return SteamAPI_ISteamNetworking_DestroyListenSocket.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworking_DestroyListenSocket(ISteamNetworking ptr, SNetListenSocket_t hSocket, bool bNotifyRemoteEnd)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworking_DestroyListenSocket$handle() {
        return SteamAPI_ISteamNetworking_DestroyListenSocket.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworking_DestroyListenSocket(ISteamNetworking ptr, SNetListenSocket_t hSocket, bool bNotifyRemoteEnd)
     * }
     */
    public static boolean SteamAPI_ISteamNetworking_DestroyListenSocket(MemorySegment ptr, int hSocket, boolean bNotifyRemoteEnd) {
        var mh$ = SteamAPI_ISteamNetworking_DestroyListenSocket.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworking_DestroyListenSocket", ptr, hSocket, bNotifyRemoteEnd);
            }
            return (boolean)mh$.invokeExact(ptr, hSocket, bNotifyRemoteEnd);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworking_SendDataOnSocket {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamNetworking_SendDataOnSocket"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworking_SendDataOnSocket(ISteamNetworking ptr, SNetSocket_t hSocket, void *pubData, uint32 cubData, bool bReliable)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworking_SendDataOnSocket$descriptor() {
        return SteamAPI_ISteamNetworking_SendDataOnSocket.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworking_SendDataOnSocket(ISteamNetworking ptr, SNetSocket_t hSocket, void *pubData, uint32 cubData, bool bReliable)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworking_SendDataOnSocket$handle() {
        return SteamAPI_ISteamNetworking_SendDataOnSocket.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworking_SendDataOnSocket(ISteamNetworking ptr, SNetSocket_t hSocket, void *pubData, uint32 cubData, bool bReliable)
     * }
     */
    public static boolean SteamAPI_ISteamNetworking_SendDataOnSocket(MemorySegment ptr, int hSocket, MemorySegment pubData, int cubData, boolean bReliable) {
        var mh$ = SteamAPI_ISteamNetworking_SendDataOnSocket.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworking_SendDataOnSocket", ptr, hSocket, pubData, cubData, bReliable);
            }
            return (boolean)mh$.invokeExact(ptr, hSocket, pubData, cubData, bReliable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworking_IsDataAvailableOnSocket {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamNetworking_IsDataAvailableOnSocket"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworking_IsDataAvailableOnSocket(ISteamNetworking ptr, SNetSocket_t hSocket, uint32 *pcubMsgSize)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworking_IsDataAvailableOnSocket$descriptor() {
        return SteamAPI_ISteamNetworking_IsDataAvailableOnSocket.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworking_IsDataAvailableOnSocket(ISteamNetworking ptr, SNetSocket_t hSocket, uint32 *pcubMsgSize)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworking_IsDataAvailableOnSocket$handle() {
        return SteamAPI_ISteamNetworking_IsDataAvailableOnSocket.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworking_IsDataAvailableOnSocket(ISteamNetworking ptr, SNetSocket_t hSocket, uint32 *pcubMsgSize)
     * }
     */
    public static boolean SteamAPI_ISteamNetworking_IsDataAvailableOnSocket(MemorySegment ptr, int hSocket, MemorySegment pcubMsgSize) {
        var mh$ = SteamAPI_ISteamNetworking_IsDataAvailableOnSocket.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworking_IsDataAvailableOnSocket", ptr, hSocket, pcubMsgSize);
            }
            return (boolean)mh$.invokeExact(ptr, hSocket, pcubMsgSize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworking_RetrieveDataFromSocket {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamNetworking_RetrieveDataFromSocket"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworking_RetrieveDataFromSocket(ISteamNetworking ptr, SNetSocket_t hSocket, void *pubDest, uint32 cubDest, uint32 *pcubMsgSize)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworking_RetrieveDataFromSocket$descriptor() {
        return SteamAPI_ISteamNetworking_RetrieveDataFromSocket.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworking_RetrieveDataFromSocket(ISteamNetworking ptr, SNetSocket_t hSocket, void *pubDest, uint32 cubDest, uint32 *pcubMsgSize)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworking_RetrieveDataFromSocket$handle() {
        return SteamAPI_ISteamNetworking_RetrieveDataFromSocket.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworking_RetrieveDataFromSocket(ISteamNetworking ptr, SNetSocket_t hSocket, void *pubDest, uint32 cubDest, uint32 *pcubMsgSize)
     * }
     */
    public static boolean SteamAPI_ISteamNetworking_RetrieveDataFromSocket(MemorySegment ptr, int hSocket, MemorySegment pubDest, int cubDest, MemorySegment pcubMsgSize) {
        var mh$ = SteamAPI_ISteamNetworking_RetrieveDataFromSocket.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworking_RetrieveDataFromSocket", ptr, hSocket, pubDest, cubDest, pcubMsgSize);
            }
            return (boolean)mh$.invokeExact(ptr, hSocket, pubDest, cubDest, pcubMsgSize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworking_IsDataAvailable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamNetworking_IsDataAvailable"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworking_IsDataAvailable(ISteamNetworking ptr, SNetListenSocket_t hListenSocket, uint32 *pcubMsgSize, SNetSocket_t *phSocket)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworking_IsDataAvailable$descriptor() {
        return SteamAPI_ISteamNetworking_IsDataAvailable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworking_IsDataAvailable(ISteamNetworking ptr, SNetListenSocket_t hListenSocket, uint32 *pcubMsgSize, SNetSocket_t *phSocket)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworking_IsDataAvailable$handle() {
        return SteamAPI_ISteamNetworking_IsDataAvailable.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworking_IsDataAvailable(ISteamNetworking ptr, SNetListenSocket_t hListenSocket, uint32 *pcubMsgSize, SNetSocket_t *phSocket)
     * }
     */
    public static boolean SteamAPI_ISteamNetworking_IsDataAvailable(MemorySegment ptr, int hListenSocket, MemorySegment pcubMsgSize, MemorySegment phSocket) {
        var mh$ = SteamAPI_ISteamNetworking_IsDataAvailable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworking_IsDataAvailable", ptr, hListenSocket, pcubMsgSize, phSocket);
            }
            return (boolean)mh$.invokeExact(ptr, hListenSocket, pcubMsgSize, phSocket);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworking_RetrieveData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamNetworking_RetrieveData"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworking_RetrieveData(ISteamNetworking ptr, SNetListenSocket_t hListenSocket, void *pubDest, uint32 cubDest, uint32 *pcubMsgSize, SNetSocket_t *phSocket)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworking_RetrieveData$descriptor() {
        return SteamAPI_ISteamNetworking_RetrieveData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworking_RetrieveData(ISteamNetworking ptr, SNetListenSocket_t hListenSocket, void *pubDest, uint32 cubDest, uint32 *pcubMsgSize, SNetSocket_t *phSocket)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworking_RetrieveData$handle() {
        return SteamAPI_ISteamNetworking_RetrieveData.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworking_RetrieveData(ISteamNetworking ptr, SNetListenSocket_t hListenSocket, void *pubDest, uint32 cubDest, uint32 *pcubMsgSize, SNetSocket_t *phSocket)
     * }
     */
    public static boolean SteamAPI_ISteamNetworking_RetrieveData(MemorySegment ptr, int hListenSocket, MemorySegment pubDest, int cubDest, MemorySegment pcubMsgSize, MemorySegment phSocket) {
        var mh$ = SteamAPI_ISteamNetworking_RetrieveData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworking_RetrieveData", ptr, hListenSocket, pubDest, cubDest, pcubMsgSize, phSocket);
            }
            return (boolean)mh$.invokeExact(ptr, hListenSocket, pubDest, cubDest, pcubMsgSize, phSocket);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworking_GetSocketInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamNetworking_GetSocketInfo"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworking_GetSocketInfo(ISteamNetworking ptr, SNetSocket_t hSocket, CSteamID *pSteamIDRemote, int *peSocketStatus, SteamIPAddress_t *punIPRemote, uint16 *punPortRemote)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworking_GetSocketInfo$descriptor() {
        return SteamAPI_ISteamNetworking_GetSocketInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworking_GetSocketInfo(ISteamNetworking ptr, SNetSocket_t hSocket, CSteamID *pSteamIDRemote, int *peSocketStatus, SteamIPAddress_t *punIPRemote, uint16 *punPortRemote)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworking_GetSocketInfo$handle() {
        return SteamAPI_ISteamNetworking_GetSocketInfo.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworking_GetSocketInfo(ISteamNetworking ptr, SNetSocket_t hSocket, CSteamID *pSteamIDRemote, int *peSocketStatus, SteamIPAddress_t *punIPRemote, uint16 *punPortRemote)
     * }
     */
    public static boolean SteamAPI_ISteamNetworking_GetSocketInfo(MemorySegment ptr, int hSocket, MemorySegment pSteamIDRemote, MemorySegment peSocketStatus, MemorySegment punIPRemote, MemorySegment punPortRemote) {
        var mh$ = SteamAPI_ISteamNetworking_GetSocketInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworking_GetSocketInfo", ptr, hSocket, pSteamIDRemote, peSocketStatus, punIPRemote, punPortRemote);
            }
            return (boolean)mh$.invokeExact(ptr, hSocket, pSteamIDRemote, peSocketStatus, punIPRemote, punPortRemote);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworking_GetListenSocketInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamNetworking_GetListenSocketInfo"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworking_GetListenSocketInfo(ISteamNetworking ptr, SNetListenSocket_t hListenSocket, SteamIPAddress_t *pnIP, uint16 *pnPort)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworking_GetListenSocketInfo$descriptor() {
        return SteamAPI_ISteamNetworking_GetListenSocketInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworking_GetListenSocketInfo(ISteamNetworking ptr, SNetListenSocket_t hListenSocket, SteamIPAddress_t *pnIP, uint16 *pnPort)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworking_GetListenSocketInfo$handle() {
        return SteamAPI_ISteamNetworking_GetListenSocketInfo.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworking_GetListenSocketInfo(ISteamNetworking ptr, SNetListenSocket_t hListenSocket, SteamIPAddress_t *pnIP, uint16 *pnPort)
     * }
     */
    public static boolean SteamAPI_ISteamNetworking_GetListenSocketInfo(MemorySegment ptr, int hListenSocket, MemorySegment pnIP, MemorySegment pnPort) {
        var mh$ = SteamAPI_ISteamNetworking_GetListenSocketInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworking_GetListenSocketInfo", ptr, hListenSocket, pnIP, pnPort);
            }
            return (boolean)mh$.invokeExact(ptr, hListenSocket, pnIP, pnPort);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworking_GetSocketConnectionType {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamNetworking_GetSocketConnectionType"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ESNetSocketConnectionType SteamAPI_ISteamNetworking_GetSocketConnectionType(ISteamNetworking ptr, SNetSocket_t hSocket)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworking_GetSocketConnectionType$descriptor() {
        return SteamAPI_ISteamNetworking_GetSocketConnectionType.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ESNetSocketConnectionType SteamAPI_ISteamNetworking_GetSocketConnectionType(ISteamNetworking ptr, SNetSocket_t hSocket)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworking_GetSocketConnectionType$handle() {
        return SteamAPI_ISteamNetworking_GetSocketConnectionType.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ESNetSocketConnectionType SteamAPI_ISteamNetworking_GetSocketConnectionType(ISteamNetworking ptr, SNetSocket_t hSocket)
     * }
     */
    public static int SteamAPI_ISteamNetworking_GetSocketConnectionType(MemorySegment ptr, int hSocket) {
        var mh$ = SteamAPI_ISteamNetworking_GetSocketConnectionType.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworking_GetSocketConnectionType", ptr, hSocket);
            }
            return (int)mh$.invokeExact(ptr, hSocket);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworking_GetMaxPacketSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamNetworking_GetMaxPacketSize"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamNetworking_GetMaxPacketSize(ISteamNetworking ptr, SNetSocket_t hSocket)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworking_GetMaxPacketSize$descriptor() {
        return SteamAPI_ISteamNetworking_GetMaxPacketSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamNetworking_GetMaxPacketSize(ISteamNetworking ptr, SNetSocket_t hSocket)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworking_GetMaxPacketSize$handle() {
        return SteamAPI_ISteamNetworking_GetMaxPacketSize.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int SteamAPI_ISteamNetworking_GetMaxPacketSize(ISteamNetworking ptr, SNetSocket_t hSocket)
     * }
     */
    public static int SteamAPI_ISteamNetworking_GetMaxPacketSize(MemorySegment ptr, int hSocket) {
        var mh$ = SteamAPI_ISteamNetworking_GetMaxPacketSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworking_GetMaxPacketSize", ptr, hSocket);
            }
            return (int)mh$.invokeExact(ptr, hSocket);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_SteamNetworking_v006 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_SteamNetworking_v006"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ISteamNetworking SteamAPI_SteamNetworking_v006()
     * }
     */
    public static FunctionDescriptor SteamAPI_SteamNetworking_v006$descriptor() {
        return SteamAPI_SteamNetworking_v006.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ISteamNetworking SteamAPI_SteamNetworking_v006()
     * }
     */
    public static MethodHandle SteamAPI_SteamNetworking_v006$handle() {
        return SteamAPI_SteamNetworking_v006.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ISteamNetworking SteamAPI_SteamNetworking_v006()
     * }
     */
    public static MemorySegment SteamAPI_SteamNetworking_v006() {
        var mh$ = SteamAPI_SteamNetworking_v006.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_SteamNetworking_v006");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_SteamGameServerNetworking_v006 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_SteamGameServerNetworking_v006"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ISteamNetworking SteamAPI_SteamGameServerNetworking_v006()
     * }
     */
    public static FunctionDescriptor SteamAPI_SteamGameServerNetworking_v006$descriptor() {
        return SteamAPI_SteamGameServerNetworking_v006.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ISteamNetworking SteamAPI_SteamGameServerNetworking_v006()
     * }
     */
    public static MethodHandle SteamAPI_SteamGameServerNetworking_v006$handle() {
        return SteamAPI_SteamGameServerNetworking_v006.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ISteamNetworking SteamAPI_SteamGameServerNetworking_v006()
     * }
     */
    public static MemorySegment SteamAPI_SteamGameServerNetworking_v006() {
        var mh$ = SteamAPI_SteamGameServerNetworking_v006.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_SteamGameServerNetworking_v006");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamScreenshots_WriteScreenshot {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_INT,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamScreenshots_WriteScreenshot"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ScreenshotHandle SteamAPI_ISteamScreenshots_WriteScreenshot(ISteamScreenshots ptr, void *pubRGB, uint32 cubRGB, int nWidth, int nHeight)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamScreenshots_WriteScreenshot$descriptor() {
        return SteamAPI_ISteamScreenshots_WriteScreenshot.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ScreenshotHandle SteamAPI_ISteamScreenshots_WriteScreenshot(ISteamScreenshots ptr, void *pubRGB, uint32 cubRGB, int nWidth, int nHeight)
     * }
     */
    public static MethodHandle SteamAPI_ISteamScreenshots_WriteScreenshot$handle() {
        return SteamAPI_ISteamScreenshots_WriteScreenshot.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ScreenshotHandle SteamAPI_ISteamScreenshots_WriteScreenshot(ISteamScreenshots ptr, void *pubRGB, uint32 cubRGB, int nWidth, int nHeight)
     * }
     */
    public static int SteamAPI_ISteamScreenshots_WriteScreenshot(MemorySegment ptr, MemorySegment pubRGB, int cubRGB, int nWidth, int nHeight) {
        var mh$ = SteamAPI_ISteamScreenshots_WriteScreenshot.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamScreenshots_WriteScreenshot", ptr, pubRGB, cubRGB, nWidth, nHeight);
            }
            return (int)mh$.invokeExact(ptr, pubRGB, cubRGB, nWidth, nHeight);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamScreenshots_AddScreenshotToLibrary {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamScreenshots_AddScreenshotToLibrary"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ScreenshotHandle SteamAPI_ISteamScreenshots_AddScreenshotToLibrary(ISteamScreenshots ptr, const char *pchFilename, const char *pchThumbnailFilename, int nWidth, int nHeight)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamScreenshots_AddScreenshotToLibrary$descriptor() {
        return SteamAPI_ISteamScreenshots_AddScreenshotToLibrary.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ScreenshotHandle SteamAPI_ISteamScreenshots_AddScreenshotToLibrary(ISteamScreenshots ptr, const char *pchFilename, const char *pchThumbnailFilename, int nWidth, int nHeight)
     * }
     */
    public static MethodHandle SteamAPI_ISteamScreenshots_AddScreenshotToLibrary$handle() {
        return SteamAPI_ISteamScreenshots_AddScreenshotToLibrary.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ScreenshotHandle SteamAPI_ISteamScreenshots_AddScreenshotToLibrary(ISteamScreenshots ptr, const char *pchFilename, const char *pchThumbnailFilename, int nWidth, int nHeight)
     * }
     */
    public static int SteamAPI_ISteamScreenshots_AddScreenshotToLibrary(MemorySegment ptr, MemorySegment pchFilename, MemorySegment pchThumbnailFilename, int nWidth, int nHeight) {
        var mh$ = SteamAPI_ISteamScreenshots_AddScreenshotToLibrary.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamScreenshots_AddScreenshotToLibrary", ptr, pchFilename, pchThumbnailFilename, nWidth, nHeight);
            }
            return (int)mh$.invokeExact(ptr, pchFilename, pchThumbnailFilename, nWidth, nHeight);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamScreenshots_TriggerScreenshot {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamScreenshots_TriggerScreenshot"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamScreenshots_TriggerScreenshot(ISteamScreenshots ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamScreenshots_TriggerScreenshot$descriptor() {
        return SteamAPI_ISteamScreenshots_TriggerScreenshot.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamScreenshots_TriggerScreenshot(ISteamScreenshots ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamScreenshots_TriggerScreenshot$handle() {
        return SteamAPI_ISteamScreenshots_TriggerScreenshot.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamScreenshots_TriggerScreenshot(ISteamScreenshots ptr)
     * }
     */
    public static void SteamAPI_ISteamScreenshots_TriggerScreenshot(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamScreenshots_TriggerScreenshot.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamScreenshots_TriggerScreenshot", ptr);
            }
            mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamScreenshots_HookScreenshots {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamScreenshots_HookScreenshots"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamScreenshots_HookScreenshots(ISteamScreenshots ptr, bool bHook)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamScreenshots_HookScreenshots$descriptor() {
        return SteamAPI_ISteamScreenshots_HookScreenshots.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamScreenshots_HookScreenshots(ISteamScreenshots ptr, bool bHook)
     * }
     */
    public static MethodHandle SteamAPI_ISteamScreenshots_HookScreenshots$handle() {
        return SteamAPI_ISteamScreenshots_HookScreenshots.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamScreenshots_HookScreenshots(ISteamScreenshots ptr, bool bHook)
     * }
     */
    public static void SteamAPI_ISteamScreenshots_HookScreenshots(MemorySegment ptr, boolean bHook) {
        var mh$ = SteamAPI_ISteamScreenshots_HookScreenshots.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamScreenshots_HookScreenshots", ptr, bHook);
            }
            mh$.invokeExact(ptr, bHook);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamScreenshots_SetLocation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamScreenshots_SetLocation"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamScreenshots_SetLocation(ISteamScreenshots ptr, ScreenshotHandle hScreenshot, const char *pchLocation)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamScreenshots_SetLocation$descriptor() {
        return SteamAPI_ISteamScreenshots_SetLocation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamScreenshots_SetLocation(ISteamScreenshots ptr, ScreenshotHandle hScreenshot, const char *pchLocation)
     * }
     */
    public static MethodHandle SteamAPI_ISteamScreenshots_SetLocation$handle() {
        return SteamAPI_ISteamScreenshots_SetLocation.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamScreenshots_SetLocation(ISteamScreenshots ptr, ScreenshotHandle hScreenshot, const char *pchLocation)
     * }
     */
    public static boolean SteamAPI_ISteamScreenshots_SetLocation(MemorySegment ptr, int hScreenshot, MemorySegment pchLocation) {
        var mh$ = SteamAPI_ISteamScreenshots_SetLocation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamScreenshots_SetLocation", ptr, hScreenshot, pchLocation);
            }
            return (boolean)mh$.invokeExact(ptr, hScreenshot, pchLocation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamScreenshots_TagUser {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamScreenshots_TagUser"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamScreenshots_TagUser(ISteamScreenshots ptr, ScreenshotHandle hScreenshot, uint64_steamid steamID)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamScreenshots_TagUser$descriptor() {
        return SteamAPI_ISteamScreenshots_TagUser.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamScreenshots_TagUser(ISteamScreenshots ptr, ScreenshotHandle hScreenshot, uint64_steamid steamID)
     * }
     */
    public static MethodHandle SteamAPI_ISteamScreenshots_TagUser$handle() {
        return SteamAPI_ISteamScreenshots_TagUser.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamScreenshots_TagUser(ISteamScreenshots ptr, ScreenshotHandle hScreenshot, uint64_steamid steamID)
     * }
     */
    public static boolean SteamAPI_ISteamScreenshots_TagUser(MemorySegment ptr, int hScreenshot, long steamID) {
        var mh$ = SteamAPI_ISteamScreenshots_TagUser.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamScreenshots_TagUser", ptr, hScreenshot, steamID);
            }
            return (boolean)mh$.invokeExact(ptr, hScreenshot, steamID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamScreenshots_TagPublishedFile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamScreenshots_TagPublishedFile"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamScreenshots_TagPublishedFile(ISteamScreenshots ptr, ScreenshotHandle hScreenshot, PublishedFileId_t unPublishedFileID)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamScreenshots_TagPublishedFile$descriptor() {
        return SteamAPI_ISteamScreenshots_TagPublishedFile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamScreenshots_TagPublishedFile(ISteamScreenshots ptr, ScreenshotHandle hScreenshot, PublishedFileId_t unPublishedFileID)
     * }
     */
    public static MethodHandle SteamAPI_ISteamScreenshots_TagPublishedFile$handle() {
        return SteamAPI_ISteamScreenshots_TagPublishedFile.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamScreenshots_TagPublishedFile(ISteamScreenshots ptr, ScreenshotHandle hScreenshot, PublishedFileId_t unPublishedFileID)
     * }
     */
    public static boolean SteamAPI_ISteamScreenshots_TagPublishedFile(MemorySegment ptr, int hScreenshot, long unPublishedFileID) {
        var mh$ = SteamAPI_ISteamScreenshots_TagPublishedFile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamScreenshots_TagPublishedFile", ptr, hScreenshot, unPublishedFileID);
            }
            return (boolean)mh$.invokeExact(ptr, hScreenshot, unPublishedFileID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamScreenshots_IsScreenshotsHooked {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamScreenshots_IsScreenshotsHooked"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamScreenshots_IsScreenshotsHooked(ISteamScreenshots ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamScreenshots_IsScreenshotsHooked$descriptor() {
        return SteamAPI_ISteamScreenshots_IsScreenshotsHooked.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamScreenshots_IsScreenshotsHooked(ISteamScreenshots ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamScreenshots_IsScreenshotsHooked$handle() {
        return SteamAPI_ISteamScreenshots_IsScreenshotsHooked.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamScreenshots_IsScreenshotsHooked(ISteamScreenshots ptr)
     * }
     */
    public static boolean SteamAPI_ISteamScreenshots_IsScreenshotsHooked(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamScreenshots_IsScreenshotsHooked.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamScreenshots_IsScreenshotsHooked", ptr);
            }
            return (boolean)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamScreenshots_AddVRScreenshotToLibrary {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamScreenshots_AddVRScreenshotToLibrary"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ScreenshotHandle SteamAPI_ISteamScreenshots_AddVRScreenshotToLibrary(ISteamScreenshots ptr, EVRScreenshotType eType, const char *pchFilename, const char *pchVRFilename)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamScreenshots_AddVRScreenshotToLibrary$descriptor() {
        return SteamAPI_ISteamScreenshots_AddVRScreenshotToLibrary.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ScreenshotHandle SteamAPI_ISteamScreenshots_AddVRScreenshotToLibrary(ISteamScreenshots ptr, EVRScreenshotType eType, const char *pchFilename, const char *pchVRFilename)
     * }
     */
    public static MethodHandle SteamAPI_ISteamScreenshots_AddVRScreenshotToLibrary$handle() {
        return SteamAPI_ISteamScreenshots_AddVRScreenshotToLibrary.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ScreenshotHandle SteamAPI_ISteamScreenshots_AddVRScreenshotToLibrary(ISteamScreenshots ptr, EVRScreenshotType eType, const char *pchFilename, const char *pchVRFilename)
     * }
     */
    public static int SteamAPI_ISteamScreenshots_AddVRScreenshotToLibrary(MemorySegment ptr, int eType, MemorySegment pchFilename, MemorySegment pchVRFilename) {
        var mh$ = SteamAPI_ISteamScreenshots_AddVRScreenshotToLibrary.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamScreenshots_AddVRScreenshotToLibrary", ptr, eType, pchFilename, pchVRFilename);
            }
            return (int)mh$.invokeExact(ptr, eType, pchFilename, pchVRFilename);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_SteamScreenshots_v003 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_SteamScreenshots_v003"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ISteamScreenshots SteamAPI_SteamScreenshots_v003()
     * }
     */
    public static FunctionDescriptor SteamAPI_SteamScreenshots_v003$descriptor() {
        return SteamAPI_SteamScreenshots_v003.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ISteamScreenshots SteamAPI_SteamScreenshots_v003()
     * }
     */
    public static MethodHandle SteamAPI_SteamScreenshots_v003$handle() {
        return SteamAPI_SteamScreenshots_v003.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ISteamScreenshots SteamAPI_SteamScreenshots_v003()
     * }
     */
    public static MemorySegment SteamAPI_SteamScreenshots_v003() {
        var mh$ = SteamAPI_SteamScreenshots_v003.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_SteamScreenshots_v003");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMusic_BIsEnabled {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamMusic_BIsEnabled"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusic_BIsEnabled(ISteamMusic ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMusic_BIsEnabled$descriptor() {
        return SteamAPI_ISteamMusic_BIsEnabled.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusic_BIsEnabled(ISteamMusic ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMusic_BIsEnabled$handle() {
        return SteamAPI_ISteamMusic_BIsEnabled.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusic_BIsEnabled(ISteamMusic ptr)
     * }
     */
    public static boolean SteamAPI_ISteamMusic_BIsEnabled(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamMusic_BIsEnabled.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMusic_BIsEnabled", ptr);
            }
            return (boolean)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMusic_BIsPlaying {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamMusic_BIsPlaying"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusic_BIsPlaying(ISteamMusic ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMusic_BIsPlaying$descriptor() {
        return SteamAPI_ISteamMusic_BIsPlaying.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusic_BIsPlaying(ISteamMusic ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMusic_BIsPlaying$handle() {
        return SteamAPI_ISteamMusic_BIsPlaying.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusic_BIsPlaying(ISteamMusic ptr)
     * }
     */
    public static boolean SteamAPI_ISteamMusic_BIsPlaying(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamMusic_BIsPlaying.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMusic_BIsPlaying", ptr);
            }
            return (boolean)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMusic_GetPlaybackStatus {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamMusic_GetPlaybackStatus"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * AudioPlayback_Status SteamAPI_ISteamMusic_GetPlaybackStatus(ISteamMusic ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMusic_GetPlaybackStatus$descriptor() {
        return SteamAPI_ISteamMusic_GetPlaybackStatus.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * AudioPlayback_Status SteamAPI_ISteamMusic_GetPlaybackStatus(ISteamMusic ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMusic_GetPlaybackStatus$handle() {
        return SteamAPI_ISteamMusic_GetPlaybackStatus.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * AudioPlayback_Status SteamAPI_ISteamMusic_GetPlaybackStatus(ISteamMusic ptr)
     * }
     */
    public static int SteamAPI_ISteamMusic_GetPlaybackStatus(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamMusic_GetPlaybackStatus.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMusic_GetPlaybackStatus", ptr);
            }
            return (int)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMusic_Play {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamMusic_Play"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMusic_Play(ISteamMusic ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMusic_Play$descriptor() {
        return SteamAPI_ISteamMusic_Play.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMusic_Play(ISteamMusic ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMusic_Play$handle() {
        return SteamAPI_ISteamMusic_Play.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamMusic_Play(ISteamMusic ptr)
     * }
     */
    public static void SteamAPI_ISteamMusic_Play(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamMusic_Play.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMusic_Play", ptr);
            }
            mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMusic_Pause {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamMusic_Pause"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMusic_Pause(ISteamMusic ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMusic_Pause$descriptor() {
        return SteamAPI_ISteamMusic_Pause.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMusic_Pause(ISteamMusic ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMusic_Pause$handle() {
        return SteamAPI_ISteamMusic_Pause.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamMusic_Pause(ISteamMusic ptr)
     * }
     */
    public static void SteamAPI_ISteamMusic_Pause(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamMusic_Pause.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMusic_Pause", ptr);
            }
            mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMusic_PlayPrevious {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamMusic_PlayPrevious"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMusic_PlayPrevious(ISteamMusic ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMusic_PlayPrevious$descriptor() {
        return SteamAPI_ISteamMusic_PlayPrevious.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMusic_PlayPrevious(ISteamMusic ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMusic_PlayPrevious$handle() {
        return SteamAPI_ISteamMusic_PlayPrevious.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamMusic_PlayPrevious(ISteamMusic ptr)
     * }
     */
    public static void SteamAPI_ISteamMusic_PlayPrevious(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamMusic_PlayPrevious.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMusic_PlayPrevious", ptr);
            }
            mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMusic_PlayNext {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamMusic_PlayNext"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMusic_PlayNext(ISteamMusic ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMusic_PlayNext$descriptor() {
        return SteamAPI_ISteamMusic_PlayNext.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMusic_PlayNext(ISteamMusic ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMusic_PlayNext$handle() {
        return SteamAPI_ISteamMusic_PlayNext.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamMusic_PlayNext(ISteamMusic ptr)
     * }
     */
    public static void SteamAPI_ISteamMusic_PlayNext(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamMusic_PlayNext.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMusic_PlayNext", ptr);
            }
            mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMusic_SetVolume {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_FLOAT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamMusic_SetVolume"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMusic_SetVolume(ISteamMusic ptr, float flVolume)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMusic_SetVolume$descriptor() {
        return SteamAPI_ISteamMusic_SetVolume.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMusic_SetVolume(ISteamMusic ptr, float flVolume)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMusic_SetVolume$handle() {
        return SteamAPI_ISteamMusic_SetVolume.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamMusic_SetVolume(ISteamMusic ptr, float flVolume)
     * }
     */
    public static void SteamAPI_ISteamMusic_SetVolume(MemorySegment ptr, float flVolume) {
        var mh$ = SteamAPI_ISteamMusic_SetVolume.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMusic_SetVolume", ptr, flVolume);
            }
            mh$.invokeExact(ptr, flVolume);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMusic_GetVolume {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_FLOAT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamMusic_GetVolume"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * float SteamAPI_ISteamMusic_GetVolume(ISteamMusic ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMusic_GetVolume$descriptor() {
        return SteamAPI_ISteamMusic_GetVolume.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * float SteamAPI_ISteamMusic_GetVolume(ISteamMusic ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMusic_GetVolume$handle() {
        return SteamAPI_ISteamMusic_GetVolume.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * float SteamAPI_ISteamMusic_GetVolume(ISteamMusic ptr)
     * }
     */
    public static float SteamAPI_ISteamMusic_GetVolume(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamMusic_GetVolume.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMusic_GetVolume", ptr);
            }
            return (float)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_SteamMusic_v001 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_SteamMusic_v001"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ISteamMusic SteamAPI_SteamMusic_v001()
     * }
     */
    public static FunctionDescriptor SteamAPI_SteamMusic_v001$descriptor() {
        return SteamAPI_SteamMusic_v001.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ISteamMusic SteamAPI_SteamMusic_v001()
     * }
     */
    public static MethodHandle SteamAPI_SteamMusic_v001$handle() {
        return SteamAPI_SteamMusic_v001.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ISteamMusic SteamAPI_SteamMusic_v001()
     * }
     */
    public static MemorySegment SteamAPI_SteamMusic_v001() {
        var mh$ = SteamAPI_SteamMusic_v001.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_SteamMusic_v001");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMusicRemote_RegisterSteamMusicRemote {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamMusicRemote_RegisterSteamMusicRemote"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_RegisterSteamMusicRemote(ISteamMusicRemote ptr, const char *pchName)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMusicRemote_RegisterSteamMusicRemote$descriptor() {
        return SteamAPI_ISteamMusicRemote_RegisterSteamMusicRemote.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_RegisterSteamMusicRemote(ISteamMusicRemote ptr, const char *pchName)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMusicRemote_RegisterSteamMusicRemote$handle() {
        return SteamAPI_ISteamMusicRemote_RegisterSteamMusicRemote.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_RegisterSteamMusicRemote(ISteamMusicRemote ptr, const char *pchName)
     * }
     */
    public static boolean SteamAPI_ISteamMusicRemote_RegisterSteamMusicRemote(MemorySegment ptr, MemorySegment pchName) {
        var mh$ = SteamAPI_ISteamMusicRemote_RegisterSteamMusicRemote.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMusicRemote_RegisterSteamMusicRemote", ptr, pchName);
            }
            return (boolean)mh$.invokeExact(ptr, pchName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMusicRemote_DeregisterSteamMusicRemote {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamMusicRemote_DeregisterSteamMusicRemote"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_DeregisterSteamMusicRemote(ISteamMusicRemote ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMusicRemote_DeregisterSteamMusicRemote$descriptor() {
        return SteamAPI_ISteamMusicRemote_DeregisterSteamMusicRemote.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_DeregisterSteamMusicRemote(ISteamMusicRemote ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMusicRemote_DeregisterSteamMusicRemote$handle() {
        return SteamAPI_ISteamMusicRemote_DeregisterSteamMusicRemote.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_DeregisterSteamMusicRemote(ISteamMusicRemote ptr)
     * }
     */
    public static boolean SteamAPI_ISteamMusicRemote_DeregisterSteamMusicRemote(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamMusicRemote_DeregisterSteamMusicRemote.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMusicRemote_DeregisterSteamMusicRemote", ptr);
            }
            return (boolean)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMusicRemote_BIsCurrentMusicRemote {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamMusicRemote_BIsCurrentMusicRemote"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_BIsCurrentMusicRemote(ISteamMusicRemote ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMusicRemote_BIsCurrentMusicRemote$descriptor() {
        return SteamAPI_ISteamMusicRemote_BIsCurrentMusicRemote.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_BIsCurrentMusicRemote(ISteamMusicRemote ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMusicRemote_BIsCurrentMusicRemote$handle() {
        return SteamAPI_ISteamMusicRemote_BIsCurrentMusicRemote.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_BIsCurrentMusicRemote(ISteamMusicRemote ptr)
     * }
     */
    public static boolean SteamAPI_ISteamMusicRemote_BIsCurrentMusicRemote(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamMusicRemote_BIsCurrentMusicRemote.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMusicRemote_BIsCurrentMusicRemote", ptr);
            }
            return (boolean)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMusicRemote_BActivationSuccess {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamMusicRemote_BActivationSuccess"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_BActivationSuccess(ISteamMusicRemote ptr, bool bValue)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMusicRemote_BActivationSuccess$descriptor() {
        return SteamAPI_ISteamMusicRemote_BActivationSuccess.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_BActivationSuccess(ISteamMusicRemote ptr, bool bValue)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMusicRemote_BActivationSuccess$handle() {
        return SteamAPI_ISteamMusicRemote_BActivationSuccess.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_BActivationSuccess(ISteamMusicRemote ptr, bool bValue)
     * }
     */
    public static boolean SteamAPI_ISteamMusicRemote_BActivationSuccess(MemorySegment ptr, boolean bValue) {
        var mh$ = SteamAPI_ISteamMusicRemote_BActivationSuccess.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMusicRemote_BActivationSuccess", ptr, bValue);
            }
            return (boolean)mh$.invokeExact(ptr, bValue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMusicRemote_SetDisplayName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamMusicRemote_SetDisplayName"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_SetDisplayName(ISteamMusicRemote ptr, const char *pchDisplayName)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMusicRemote_SetDisplayName$descriptor() {
        return SteamAPI_ISteamMusicRemote_SetDisplayName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_SetDisplayName(ISteamMusicRemote ptr, const char *pchDisplayName)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMusicRemote_SetDisplayName$handle() {
        return SteamAPI_ISteamMusicRemote_SetDisplayName.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_SetDisplayName(ISteamMusicRemote ptr, const char *pchDisplayName)
     * }
     */
    public static boolean SteamAPI_ISteamMusicRemote_SetDisplayName(MemorySegment ptr, MemorySegment pchDisplayName) {
        var mh$ = SteamAPI_ISteamMusicRemote_SetDisplayName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMusicRemote_SetDisplayName", ptr, pchDisplayName);
            }
            return (boolean)mh$.invokeExact(ptr, pchDisplayName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMusicRemote_SetPNGIcon_64x64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamMusicRemote_SetPNGIcon_64x64"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_SetPNGIcon_64x64(ISteamMusicRemote ptr, void *pvBuffer, uint32 cbBufferLength)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMusicRemote_SetPNGIcon_64x64$descriptor() {
        return SteamAPI_ISteamMusicRemote_SetPNGIcon_64x64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_SetPNGIcon_64x64(ISteamMusicRemote ptr, void *pvBuffer, uint32 cbBufferLength)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMusicRemote_SetPNGIcon_64x64$handle() {
        return SteamAPI_ISteamMusicRemote_SetPNGIcon_64x64.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_SetPNGIcon_64x64(ISteamMusicRemote ptr, void *pvBuffer, uint32 cbBufferLength)
     * }
     */
    public static boolean SteamAPI_ISteamMusicRemote_SetPNGIcon_64x64(MemorySegment ptr, MemorySegment pvBuffer, int cbBufferLength) {
        var mh$ = SteamAPI_ISteamMusicRemote_SetPNGIcon_64x64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMusicRemote_SetPNGIcon_64x64", ptr, pvBuffer, cbBufferLength);
            }
            return (boolean)mh$.invokeExact(ptr, pvBuffer, cbBufferLength);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMusicRemote_EnablePlayPrevious {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamMusicRemote_EnablePlayPrevious"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_EnablePlayPrevious(ISteamMusicRemote ptr, bool bValue)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMusicRemote_EnablePlayPrevious$descriptor() {
        return SteamAPI_ISteamMusicRemote_EnablePlayPrevious.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_EnablePlayPrevious(ISteamMusicRemote ptr, bool bValue)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMusicRemote_EnablePlayPrevious$handle() {
        return SteamAPI_ISteamMusicRemote_EnablePlayPrevious.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_EnablePlayPrevious(ISteamMusicRemote ptr, bool bValue)
     * }
     */
    public static boolean SteamAPI_ISteamMusicRemote_EnablePlayPrevious(MemorySegment ptr, boolean bValue) {
        var mh$ = SteamAPI_ISteamMusicRemote_EnablePlayPrevious.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMusicRemote_EnablePlayPrevious", ptr, bValue);
            }
            return (boolean)mh$.invokeExact(ptr, bValue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMusicRemote_EnablePlayNext {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamMusicRemote_EnablePlayNext"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_EnablePlayNext(ISteamMusicRemote ptr, bool bValue)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMusicRemote_EnablePlayNext$descriptor() {
        return SteamAPI_ISteamMusicRemote_EnablePlayNext.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_EnablePlayNext(ISteamMusicRemote ptr, bool bValue)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMusicRemote_EnablePlayNext$handle() {
        return SteamAPI_ISteamMusicRemote_EnablePlayNext.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_EnablePlayNext(ISteamMusicRemote ptr, bool bValue)
     * }
     */
    public static boolean SteamAPI_ISteamMusicRemote_EnablePlayNext(MemorySegment ptr, boolean bValue) {
        var mh$ = SteamAPI_ISteamMusicRemote_EnablePlayNext.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMusicRemote_EnablePlayNext", ptr, bValue);
            }
            return (boolean)mh$.invokeExact(ptr, bValue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMusicRemote_EnableShuffled {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamMusicRemote_EnableShuffled"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_EnableShuffled(ISteamMusicRemote ptr, bool bValue)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMusicRemote_EnableShuffled$descriptor() {
        return SteamAPI_ISteamMusicRemote_EnableShuffled.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_EnableShuffled(ISteamMusicRemote ptr, bool bValue)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMusicRemote_EnableShuffled$handle() {
        return SteamAPI_ISteamMusicRemote_EnableShuffled.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_EnableShuffled(ISteamMusicRemote ptr, bool bValue)
     * }
     */
    public static boolean SteamAPI_ISteamMusicRemote_EnableShuffled(MemorySegment ptr, boolean bValue) {
        var mh$ = SteamAPI_ISteamMusicRemote_EnableShuffled.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMusicRemote_EnableShuffled", ptr, bValue);
            }
            return (boolean)mh$.invokeExact(ptr, bValue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMusicRemote_EnableLooped {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamMusicRemote_EnableLooped"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_EnableLooped(ISteamMusicRemote ptr, bool bValue)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMusicRemote_EnableLooped$descriptor() {
        return SteamAPI_ISteamMusicRemote_EnableLooped.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_EnableLooped(ISteamMusicRemote ptr, bool bValue)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMusicRemote_EnableLooped$handle() {
        return SteamAPI_ISteamMusicRemote_EnableLooped.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_EnableLooped(ISteamMusicRemote ptr, bool bValue)
     * }
     */
    public static boolean SteamAPI_ISteamMusicRemote_EnableLooped(MemorySegment ptr, boolean bValue) {
        var mh$ = SteamAPI_ISteamMusicRemote_EnableLooped.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMusicRemote_EnableLooped", ptr, bValue);
            }
            return (boolean)mh$.invokeExact(ptr, bValue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMusicRemote_EnableQueue {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamMusicRemote_EnableQueue"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_EnableQueue(ISteamMusicRemote ptr, bool bValue)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMusicRemote_EnableQueue$descriptor() {
        return SteamAPI_ISteamMusicRemote_EnableQueue.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_EnableQueue(ISteamMusicRemote ptr, bool bValue)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMusicRemote_EnableQueue$handle() {
        return SteamAPI_ISteamMusicRemote_EnableQueue.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_EnableQueue(ISteamMusicRemote ptr, bool bValue)
     * }
     */
    public static boolean SteamAPI_ISteamMusicRemote_EnableQueue(MemorySegment ptr, boolean bValue) {
        var mh$ = SteamAPI_ISteamMusicRemote_EnableQueue.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMusicRemote_EnableQueue", ptr, bValue);
            }
            return (boolean)mh$.invokeExact(ptr, bValue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMusicRemote_EnablePlaylists {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamMusicRemote_EnablePlaylists"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_EnablePlaylists(ISteamMusicRemote ptr, bool bValue)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMusicRemote_EnablePlaylists$descriptor() {
        return SteamAPI_ISteamMusicRemote_EnablePlaylists.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_EnablePlaylists(ISteamMusicRemote ptr, bool bValue)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMusicRemote_EnablePlaylists$handle() {
        return SteamAPI_ISteamMusicRemote_EnablePlaylists.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_EnablePlaylists(ISteamMusicRemote ptr, bool bValue)
     * }
     */
    public static boolean SteamAPI_ISteamMusicRemote_EnablePlaylists(MemorySegment ptr, boolean bValue) {
        var mh$ = SteamAPI_ISteamMusicRemote_EnablePlaylists.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMusicRemote_EnablePlaylists", ptr, bValue);
            }
            return (boolean)mh$.invokeExact(ptr, bValue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMusicRemote_UpdatePlaybackStatus {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamMusicRemote_UpdatePlaybackStatus"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_UpdatePlaybackStatus(ISteamMusicRemote ptr, AudioPlayback_Status nStatus)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMusicRemote_UpdatePlaybackStatus$descriptor() {
        return SteamAPI_ISteamMusicRemote_UpdatePlaybackStatus.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_UpdatePlaybackStatus(ISteamMusicRemote ptr, AudioPlayback_Status nStatus)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMusicRemote_UpdatePlaybackStatus$handle() {
        return SteamAPI_ISteamMusicRemote_UpdatePlaybackStatus.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_UpdatePlaybackStatus(ISteamMusicRemote ptr, AudioPlayback_Status nStatus)
     * }
     */
    public static boolean SteamAPI_ISteamMusicRemote_UpdatePlaybackStatus(MemorySegment ptr, int nStatus) {
        var mh$ = SteamAPI_ISteamMusicRemote_UpdatePlaybackStatus.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMusicRemote_UpdatePlaybackStatus", ptr, nStatus);
            }
            return (boolean)mh$.invokeExact(ptr, nStatus);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMusicRemote_UpdateShuffled {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamMusicRemote_UpdateShuffled"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_UpdateShuffled(ISteamMusicRemote ptr, bool bValue)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMusicRemote_UpdateShuffled$descriptor() {
        return SteamAPI_ISteamMusicRemote_UpdateShuffled.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_UpdateShuffled(ISteamMusicRemote ptr, bool bValue)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMusicRemote_UpdateShuffled$handle() {
        return SteamAPI_ISteamMusicRemote_UpdateShuffled.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_UpdateShuffled(ISteamMusicRemote ptr, bool bValue)
     * }
     */
    public static boolean SteamAPI_ISteamMusicRemote_UpdateShuffled(MemorySegment ptr, boolean bValue) {
        var mh$ = SteamAPI_ISteamMusicRemote_UpdateShuffled.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMusicRemote_UpdateShuffled", ptr, bValue);
            }
            return (boolean)mh$.invokeExact(ptr, bValue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMusicRemote_UpdateLooped {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamMusicRemote_UpdateLooped"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_UpdateLooped(ISteamMusicRemote ptr, bool bValue)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMusicRemote_UpdateLooped$descriptor() {
        return SteamAPI_ISteamMusicRemote_UpdateLooped.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_UpdateLooped(ISteamMusicRemote ptr, bool bValue)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMusicRemote_UpdateLooped$handle() {
        return SteamAPI_ISteamMusicRemote_UpdateLooped.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_UpdateLooped(ISteamMusicRemote ptr, bool bValue)
     * }
     */
    public static boolean SteamAPI_ISteamMusicRemote_UpdateLooped(MemorySegment ptr, boolean bValue) {
        var mh$ = SteamAPI_ISteamMusicRemote_UpdateLooped.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMusicRemote_UpdateLooped", ptr, bValue);
            }
            return (boolean)mh$.invokeExact(ptr, bValue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMusicRemote_UpdateVolume {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_FLOAT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamMusicRemote_UpdateVolume"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_UpdateVolume(ISteamMusicRemote ptr, float flValue)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMusicRemote_UpdateVolume$descriptor() {
        return SteamAPI_ISteamMusicRemote_UpdateVolume.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_UpdateVolume(ISteamMusicRemote ptr, float flValue)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMusicRemote_UpdateVolume$handle() {
        return SteamAPI_ISteamMusicRemote_UpdateVolume.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_UpdateVolume(ISteamMusicRemote ptr, float flValue)
     * }
     */
    public static boolean SteamAPI_ISteamMusicRemote_UpdateVolume(MemorySegment ptr, float flValue) {
        var mh$ = SteamAPI_ISteamMusicRemote_UpdateVolume.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMusicRemote_UpdateVolume", ptr, flValue);
            }
            return (boolean)mh$.invokeExact(ptr, flValue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMusicRemote_CurrentEntryWillChange {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamMusicRemote_CurrentEntryWillChange"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_CurrentEntryWillChange(ISteamMusicRemote ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMusicRemote_CurrentEntryWillChange$descriptor() {
        return SteamAPI_ISteamMusicRemote_CurrentEntryWillChange.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_CurrentEntryWillChange(ISteamMusicRemote ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMusicRemote_CurrentEntryWillChange$handle() {
        return SteamAPI_ISteamMusicRemote_CurrentEntryWillChange.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_CurrentEntryWillChange(ISteamMusicRemote ptr)
     * }
     */
    public static boolean SteamAPI_ISteamMusicRemote_CurrentEntryWillChange(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamMusicRemote_CurrentEntryWillChange.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMusicRemote_CurrentEntryWillChange", ptr);
            }
            return (boolean)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMusicRemote_CurrentEntryIsAvailable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamMusicRemote_CurrentEntryIsAvailable"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_CurrentEntryIsAvailable(ISteamMusicRemote ptr, bool bAvailable)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMusicRemote_CurrentEntryIsAvailable$descriptor() {
        return SteamAPI_ISteamMusicRemote_CurrentEntryIsAvailable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_CurrentEntryIsAvailable(ISteamMusicRemote ptr, bool bAvailable)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMusicRemote_CurrentEntryIsAvailable$handle() {
        return SteamAPI_ISteamMusicRemote_CurrentEntryIsAvailable.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_CurrentEntryIsAvailable(ISteamMusicRemote ptr, bool bAvailable)
     * }
     */
    public static boolean SteamAPI_ISteamMusicRemote_CurrentEntryIsAvailable(MemorySegment ptr, boolean bAvailable) {
        var mh$ = SteamAPI_ISteamMusicRemote_CurrentEntryIsAvailable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMusicRemote_CurrentEntryIsAvailable", ptr, bAvailable);
            }
            return (boolean)mh$.invokeExact(ptr, bAvailable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMusicRemote_UpdateCurrentEntryText {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamMusicRemote_UpdateCurrentEntryText"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_UpdateCurrentEntryText(ISteamMusicRemote ptr, const char *pchText)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMusicRemote_UpdateCurrentEntryText$descriptor() {
        return SteamAPI_ISteamMusicRemote_UpdateCurrentEntryText.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_UpdateCurrentEntryText(ISteamMusicRemote ptr, const char *pchText)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMusicRemote_UpdateCurrentEntryText$handle() {
        return SteamAPI_ISteamMusicRemote_UpdateCurrentEntryText.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_UpdateCurrentEntryText(ISteamMusicRemote ptr, const char *pchText)
     * }
     */
    public static boolean SteamAPI_ISteamMusicRemote_UpdateCurrentEntryText(MemorySegment ptr, MemorySegment pchText) {
        var mh$ = SteamAPI_ISteamMusicRemote_UpdateCurrentEntryText.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMusicRemote_UpdateCurrentEntryText", ptr, pchText);
            }
            return (boolean)mh$.invokeExact(ptr, pchText);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMusicRemote_UpdateCurrentEntryElapsedSeconds {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamMusicRemote_UpdateCurrentEntryElapsedSeconds"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_UpdateCurrentEntryElapsedSeconds(ISteamMusicRemote ptr, int nValue)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMusicRemote_UpdateCurrentEntryElapsedSeconds$descriptor() {
        return SteamAPI_ISteamMusicRemote_UpdateCurrentEntryElapsedSeconds.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_UpdateCurrentEntryElapsedSeconds(ISteamMusicRemote ptr, int nValue)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMusicRemote_UpdateCurrentEntryElapsedSeconds$handle() {
        return SteamAPI_ISteamMusicRemote_UpdateCurrentEntryElapsedSeconds.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_UpdateCurrentEntryElapsedSeconds(ISteamMusicRemote ptr, int nValue)
     * }
     */
    public static boolean SteamAPI_ISteamMusicRemote_UpdateCurrentEntryElapsedSeconds(MemorySegment ptr, int nValue) {
        var mh$ = SteamAPI_ISteamMusicRemote_UpdateCurrentEntryElapsedSeconds.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMusicRemote_UpdateCurrentEntryElapsedSeconds", ptr, nValue);
            }
            return (boolean)mh$.invokeExact(ptr, nValue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMusicRemote_UpdateCurrentEntryCoverArt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamMusicRemote_UpdateCurrentEntryCoverArt"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_UpdateCurrentEntryCoverArt(ISteamMusicRemote ptr, void *pvBuffer, uint32 cbBufferLength)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMusicRemote_UpdateCurrentEntryCoverArt$descriptor() {
        return SteamAPI_ISteamMusicRemote_UpdateCurrentEntryCoverArt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_UpdateCurrentEntryCoverArt(ISteamMusicRemote ptr, void *pvBuffer, uint32 cbBufferLength)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMusicRemote_UpdateCurrentEntryCoverArt$handle() {
        return SteamAPI_ISteamMusicRemote_UpdateCurrentEntryCoverArt.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_UpdateCurrentEntryCoverArt(ISteamMusicRemote ptr, void *pvBuffer, uint32 cbBufferLength)
     * }
     */
    public static boolean SteamAPI_ISteamMusicRemote_UpdateCurrentEntryCoverArt(MemorySegment ptr, MemorySegment pvBuffer, int cbBufferLength) {
        var mh$ = SteamAPI_ISteamMusicRemote_UpdateCurrentEntryCoverArt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMusicRemote_UpdateCurrentEntryCoverArt", ptr, pvBuffer, cbBufferLength);
            }
            return (boolean)mh$.invokeExact(ptr, pvBuffer, cbBufferLength);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMusicRemote_CurrentEntryDidChange {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamMusicRemote_CurrentEntryDidChange"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_CurrentEntryDidChange(ISteamMusicRemote ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMusicRemote_CurrentEntryDidChange$descriptor() {
        return SteamAPI_ISteamMusicRemote_CurrentEntryDidChange.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_CurrentEntryDidChange(ISteamMusicRemote ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMusicRemote_CurrentEntryDidChange$handle() {
        return SteamAPI_ISteamMusicRemote_CurrentEntryDidChange.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_CurrentEntryDidChange(ISteamMusicRemote ptr)
     * }
     */
    public static boolean SteamAPI_ISteamMusicRemote_CurrentEntryDidChange(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamMusicRemote_CurrentEntryDidChange.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMusicRemote_CurrentEntryDidChange", ptr);
            }
            return (boolean)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMusicRemote_QueueWillChange {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamMusicRemote_QueueWillChange"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_QueueWillChange(ISteamMusicRemote ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMusicRemote_QueueWillChange$descriptor() {
        return SteamAPI_ISteamMusicRemote_QueueWillChange.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_QueueWillChange(ISteamMusicRemote ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMusicRemote_QueueWillChange$handle() {
        return SteamAPI_ISteamMusicRemote_QueueWillChange.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_QueueWillChange(ISteamMusicRemote ptr)
     * }
     */
    public static boolean SteamAPI_ISteamMusicRemote_QueueWillChange(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamMusicRemote_QueueWillChange.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMusicRemote_QueueWillChange", ptr);
            }
            return (boolean)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMusicRemote_ResetQueueEntries {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamMusicRemote_ResetQueueEntries"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_ResetQueueEntries(ISteamMusicRemote ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMusicRemote_ResetQueueEntries$descriptor() {
        return SteamAPI_ISteamMusicRemote_ResetQueueEntries.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_ResetQueueEntries(ISteamMusicRemote ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMusicRemote_ResetQueueEntries$handle() {
        return SteamAPI_ISteamMusicRemote_ResetQueueEntries.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_ResetQueueEntries(ISteamMusicRemote ptr)
     * }
     */
    public static boolean SteamAPI_ISteamMusicRemote_ResetQueueEntries(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamMusicRemote_ResetQueueEntries.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMusicRemote_ResetQueueEntries", ptr);
            }
            return (boolean)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMusicRemote_SetQueueEntry {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamMusicRemote_SetQueueEntry"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_SetQueueEntry(ISteamMusicRemote ptr, int nID, int nPosition, const char *pchEntryText)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMusicRemote_SetQueueEntry$descriptor() {
        return SteamAPI_ISteamMusicRemote_SetQueueEntry.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_SetQueueEntry(ISteamMusicRemote ptr, int nID, int nPosition, const char *pchEntryText)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMusicRemote_SetQueueEntry$handle() {
        return SteamAPI_ISteamMusicRemote_SetQueueEntry.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_SetQueueEntry(ISteamMusicRemote ptr, int nID, int nPosition, const char *pchEntryText)
     * }
     */
    public static boolean SteamAPI_ISteamMusicRemote_SetQueueEntry(MemorySegment ptr, int nID, int nPosition, MemorySegment pchEntryText) {
        var mh$ = SteamAPI_ISteamMusicRemote_SetQueueEntry.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMusicRemote_SetQueueEntry", ptr, nID, nPosition, pchEntryText);
            }
            return (boolean)mh$.invokeExact(ptr, nID, nPosition, pchEntryText);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMusicRemote_SetCurrentQueueEntry {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamMusicRemote_SetCurrentQueueEntry"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_SetCurrentQueueEntry(ISteamMusicRemote ptr, int nID)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMusicRemote_SetCurrentQueueEntry$descriptor() {
        return SteamAPI_ISteamMusicRemote_SetCurrentQueueEntry.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_SetCurrentQueueEntry(ISteamMusicRemote ptr, int nID)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMusicRemote_SetCurrentQueueEntry$handle() {
        return SteamAPI_ISteamMusicRemote_SetCurrentQueueEntry.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_SetCurrentQueueEntry(ISteamMusicRemote ptr, int nID)
     * }
     */
    public static boolean SteamAPI_ISteamMusicRemote_SetCurrentQueueEntry(MemorySegment ptr, int nID) {
        var mh$ = SteamAPI_ISteamMusicRemote_SetCurrentQueueEntry.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMusicRemote_SetCurrentQueueEntry", ptr, nID);
            }
            return (boolean)mh$.invokeExact(ptr, nID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMusicRemote_QueueDidChange {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamMusicRemote_QueueDidChange"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_QueueDidChange(ISteamMusicRemote ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMusicRemote_QueueDidChange$descriptor() {
        return SteamAPI_ISteamMusicRemote_QueueDidChange.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_QueueDidChange(ISteamMusicRemote ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMusicRemote_QueueDidChange$handle() {
        return SteamAPI_ISteamMusicRemote_QueueDidChange.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_QueueDidChange(ISteamMusicRemote ptr)
     * }
     */
    public static boolean SteamAPI_ISteamMusicRemote_QueueDidChange(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamMusicRemote_QueueDidChange.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMusicRemote_QueueDidChange", ptr);
            }
            return (boolean)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMusicRemote_PlaylistWillChange {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamMusicRemote_PlaylistWillChange"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_PlaylistWillChange(ISteamMusicRemote ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMusicRemote_PlaylistWillChange$descriptor() {
        return SteamAPI_ISteamMusicRemote_PlaylistWillChange.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_PlaylistWillChange(ISteamMusicRemote ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMusicRemote_PlaylistWillChange$handle() {
        return SteamAPI_ISteamMusicRemote_PlaylistWillChange.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_PlaylistWillChange(ISteamMusicRemote ptr)
     * }
     */
    public static boolean SteamAPI_ISteamMusicRemote_PlaylistWillChange(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamMusicRemote_PlaylistWillChange.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMusicRemote_PlaylistWillChange", ptr);
            }
            return (boolean)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMusicRemote_ResetPlaylistEntries {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamMusicRemote_ResetPlaylistEntries"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_ResetPlaylistEntries(ISteamMusicRemote ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMusicRemote_ResetPlaylistEntries$descriptor() {
        return SteamAPI_ISteamMusicRemote_ResetPlaylistEntries.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_ResetPlaylistEntries(ISteamMusicRemote ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMusicRemote_ResetPlaylistEntries$handle() {
        return SteamAPI_ISteamMusicRemote_ResetPlaylistEntries.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_ResetPlaylistEntries(ISteamMusicRemote ptr)
     * }
     */
    public static boolean SteamAPI_ISteamMusicRemote_ResetPlaylistEntries(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamMusicRemote_ResetPlaylistEntries.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMusicRemote_ResetPlaylistEntries", ptr);
            }
            return (boolean)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMusicRemote_SetPlaylistEntry {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamMusicRemote_SetPlaylistEntry"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_SetPlaylistEntry(ISteamMusicRemote ptr, int nID, int nPosition, const char *pchEntryText)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMusicRemote_SetPlaylistEntry$descriptor() {
        return SteamAPI_ISteamMusicRemote_SetPlaylistEntry.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_SetPlaylistEntry(ISteamMusicRemote ptr, int nID, int nPosition, const char *pchEntryText)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMusicRemote_SetPlaylistEntry$handle() {
        return SteamAPI_ISteamMusicRemote_SetPlaylistEntry.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_SetPlaylistEntry(ISteamMusicRemote ptr, int nID, int nPosition, const char *pchEntryText)
     * }
     */
    public static boolean SteamAPI_ISteamMusicRemote_SetPlaylistEntry(MemorySegment ptr, int nID, int nPosition, MemorySegment pchEntryText) {
        var mh$ = SteamAPI_ISteamMusicRemote_SetPlaylistEntry.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMusicRemote_SetPlaylistEntry", ptr, nID, nPosition, pchEntryText);
            }
            return (boolean)mh$.invokeExact(ptr, nID, nPosition, pchEntryText);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMusicRemote_SetCurrentPlaylistEntry {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamMusicRemote_SetCurrentPlaylistEntry"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_SetCurrentPlaylistEntry(ISteamMusicRemote ptr, int nID)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMusicRemote_SetCurrentPlaylistEntry$descriptor() {
        return SteamAPI_ISteamMusicRemote_SetCurrentPlaylistEntry.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_SetCurrentPlaylistEntry(ISteamMusicRemote ptr, int nID)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMusicRemote_SetCurrentPlaylistEntry$handle() {
        return SteamAPI_ISteamMusicRemote_SetCurrentPlaylistEntry.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_SetCurrentPlaylistEntry(ISteamMusicRemote ptr, int nID)
     * }
     */
    public static boolean SteamAPI_ISteamMusicRemote_SetCurrentPlaylistEntry(MemorySegment ptr, int nID) {
        var mh$ = SteamAPI_ISteamMusicRemote_SetCurrentPlaylistEntry.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMusicRemote_SetCurrentPlaylistEntry", ptr, nID);
            }
            return (boolean)mh$.invokeExact(ptr, nID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMusicRemote_PlaylistDidChange {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamMusicRemote_PlaylistDidChange"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_PlaylistDidChange(ISteamMusicRemote ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMusicRemote_PlaylistDidChange$descriptor() {
        return SteamAPI_ISteamMusicRemote_PlaylistDidChange.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_PlaylistDidChange(ISteamMusicRemote ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMusicRemote_PlaylistDidChange$handle() {
        return SteamAPI_ISteamMusicRemote_PlaylistDidChange.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_PlaylistDidChange(ISteamMusicRemote ptr)
     * }
     */
    public static boolean SteamAPI_ISteamMusicRemote_PlaylistDidChange(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamMusicRemote_PlaylistDidChange.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMusicRemote_PlaylistDidChange", ptr);
            }
            return (boolean)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_SteamMusicRemote_v001 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_SteamMusicRemote_v001"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ISteamMusicRemote SteamAPI_SteamMusicRemote_v001()
     * }
     */
    public static FunctionDescriptor SteamAPI_SteamMusicRemote_v001$descriptor() {
        return SteamAPI_SteamMusicRemote_v001.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ISteamMusicRemote SteamAPI_SteamMusicRemote_v001()
     * }
     */
    public static MethodHandle SteamAPI_SteamMusicRemote_v001$handle() {
        return SteamAPI_SteamMusicRemote_v001.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ISteamMusicRemote SteamAPI_SteamMusicRemote_v001()
     * }
     */
    public static MemorySegment SteamAPI_SteamMusicRemote_v001() {
        var mh$ = SteamAPI_SteamMusicRemote_v001.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_SteamMusicRemote_v001");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTTP_CreateHTTPRequest {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamHTTP_CreateHTTPRequest"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HTTPRequestHandle SteamAPI_ISteamHTTP_CreateHTTPRequest(ISteamHTTP ptr, EHTTPMethod eHTTPRequestMethod, const char *pchAbsoluteURL)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTTP_CreateHTTPRequest$descriptor() {
        return SteamAPI_ISteamHTTP_CreateHTTPRequest.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HTTPRequestHandle SteamAPI_ISteamHTTP_CreateHTTPRequest(ISteamHTTP ptr, EHTTPMethod eHTTPRequestMethod, const char *pchAbsoluteURL)
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTTP_CreateHTTPRequest$handle() {
        return SteamAPI_ISteamHTTP_CreateHTTPRequest.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HTTPRequestHandle SteamAPI_ISteamHTTP_CreateHTTPRequest(ISteamHTTP ptr, EHTTPMethod eHTTPRequestMethod, const char *pchAbsoluteURL)
     * }
     */
    public static int SteamAPI_ISteamHTTP_CreateHTTPRequest(MemorySegment ptr, int eHTTPRequestMethod, MemorySegment pchAbsoluteURL) {
        var mh$ = SteamAPI_ISteamHTTP_CreateHTTPRequest.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTTP_CreateHTTPRequest", ptr, eHTTPRequestMethod, pchAbsoluteURL);
            }
            return (int)mh$.invokeExact(ptr, eHTTPRequestMethod, pchAbsoluteURL);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTTP_SetHTTPRequestContextValue {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamHTTP_SetHTTPRequestContextValue"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_SetHTTPRequestContextValue(ISteamHTTP ptr, HTTPRequestHandle hRequest, uint64 ulContextValue)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTTP_SetHTTPRequestContextValue$descriptor() {
        return SteamAPI_ISteamHTTP_SetHTTPRequestContextValue.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_SetHTTPRequestContextValue(ISteamHTTP ptr, HTTPRequestHandle hRequest, uint64 ulContextValue)
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTTP_SetHTTPRequestContextValue$handle() {
        return SteamAPI_ISteamHTTP_SetHTTPRequestContextValue.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_SetHTTPRequestContextValue(ISteamHTTP ptr, HTTPRequestHandle hRequest, uint64 ulContextValue)
     * }
     */
    public static boolean SteamAPI_ISteamHTTP_SetHTTPRequestContextValue(MemorySegment ptr, int hRequest, long ulContextValue) {
        var mh$ = SteamAPI_ISteamHTTP_SetHTTPRequestContextValue.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTTP_SetHTTPRequestContextValue", ptr, hRequest, ulContextValue);
            }
            return (boolean)mh$.invokeExact(ptr, hRequest, ulContextValue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTTP_SetHTTPRequestNetworkActivityTimeout {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamHTTP_SetHTTPRequestNetworkActivityTimeout"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_SetHTTPRequestNetworkActivityTimeout(ISteamHTTP ptr, HTTPRequestHandle hRequest, uint32 unTimeoutSeconds)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTTP_SetHTTPRequestNetworkActivityTimeout$descriptor() {
        return SteamAPI_ISteamHTTP_SetHTTPRequestNetworkActivityTimeout.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_SetHTTPRequestNetworkActivityTimeout(ISteamHTTP ptr, HTTPRequestHandle hRequest, uint32 unTimeoutSeconds)
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTTP_SetHTTPRequestNetworkActivityTimeout$handle() {
        return SteamAPI_ISteamHTTP_SetHTTPRequestNetworkActivityTimeout.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_SetHTTPRequestNetworkActivityTimeout(ISteamHTTP ptr, HTTPRequestHandle hRequest, uint32 unTimeoutSeconds)
     * }
     */
    public static boolean SteamAPI_ISteamHTTP_SetHTTPRequestNetworkActivityTimeout(MemorySegment ptr, int hRequest, int unTimeoutSeconds) {
        var mh$ = SteamAPI_ISteamHTTP_SetHTTPRequestNetworkActivityTimeout.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTTP_SetHTTPRequestNetworkActivityTimeout", ptr, hRequest, unTimeoutSeconds);
            }
            return (boolean)mh$.invokeExact(ptr, hRequest, unTimeoutSeconds);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTTP_SetHTTPRequestHeaderValue {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamHTTP_SetHTTPRequestHeaderValue"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_SetHTTPRequestHeaderValue(ISteamHTTP ptr, HTTPRequestHandle hRequest, const char *pchHeaderName, const char *pchHeaderValue)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTTP_SetHTTPRequestHeaderValue$descriptor() {
        return SteamAPI_ISteamHTTP_SetHTTPRequestHeaderValue.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_SetHTTPRequestHeaderValue(ISteamHTTP ptr, HTTPRequestHandle hRequest, const char *pchHeaderName, const char *pchHeaderValue)
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTTP_SetHTTPRequestHeaderValue$handle() {
        return SteamAPI_ISteamHTTP_SetHTTPRequestHeaderValue.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_SetHTTPRequestHeaderValue(ISteamHTTP ptr, HTTPRequestHandle hRequest, const char *pchHeaderName, const char *pchHeaderValue)
     * }
     */
    public static boolean SteamAPI_ISteamHTTP_SetHTTPRequestHeaderValue(MemorySegment ptr, int hRequest, MemorySegment pchHeaderName, MemorySegment pchHeaderValue) {
        var mh$ = SteamAPI_ISteamHTTP_SetHTTPRequestHeaderValue.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTTP_SetHTTPRequestHeaderValue", ptr, hRequest, pchHeaderName, pchHeaderValue);
            }
            return (boolean)mh$.invokeExact(ptr, hRequest, pchHeaderName, pchHeaderValue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTTP_SetHTTPRequestGetOrPostParameter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamHTTP_SetHTTPRequestGetOrPostParameter"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_SetHTTPRequestGetOrPostParameter(ISteamHTTP ptr, HTTPRequestHandle hRequest, const char *pchParamName, const char *pchParamValue)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTTP_SetHTTPRequestGetOrPostParameter$descriptor() {
        return SteamAPI_ISteamHTTP_SetHTTPRequestGetOrPostParameter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_SetHTTPRequestGetOrPostParameter(ISteamHTTP ptr, HTTPRequestHandle hRequest, const char *pchParamName, const char *pchParamValue)
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTTP_SetHTTPRequestGetOrPostParameter$handle() {
        return SteamAPI_ISteamHTTP_SetHTTPRequestGetOrPostParameter.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_SetHTTPRequestGetOrPostParameter(ISteamHTTP ptr, HTTPRequestHandle hRequest, const char *pchParamName, const char *pchParamValue)
     * }
     */
    public static boolean SteamAPI_ISteamHTTP_SetHTTPRequestGetOrPostParameter(MemorySegment ptr, int hRequest, MemorySegment pchParamName, MemorySegment pchParamValue) {
        var mh$ = SteamAPI_ISteamHTTP_SetHTTPRequestGetOrPostParameter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTTP_SetHTTPRequestGetOrPostParameter", ptr, hRequest, pchParamName, pchParamValue);
            }
            return (boolean)mh$.invokeExact(ptr, hRequest, pchParamName, pchParamValue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTTP_SendHTTPRequest {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamHTTP_SendHTTPRequest"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_SendHTTPRequest(ISteamHTTP ptr, HTTPRequestHandle hRequest, SteamAPICall_t *pCallHandle)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTTP_SendHTTPRequest$descriptor() {
        return SteamAPI_ISteamHTTP_SendHTTPRequest.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_SendHTTPRequest(ISteamHTTP ptr, HTTPRequestHandle hRequest, SteamAPICall_t *pCallHandle)
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTTP_SendHTTPRequest$handle() {
        return SteamAPI_ISteamHTTP_SendHTTPRequest.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_SendHTTPRequest(ISteamHTTP ptr, HTTPRequestHandle hRequest, SteamAPICall_t *pCallHandle)
     * }
     */
    public static boolean SteamAPI_ISteamHTTP_SendHTTPRequest(MemorySegment ptr, int hRequest, MemorySegment pCallHandle) {
        var mh$ = SteamAPI_ISteamHTTP_SendHTTPRequest.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTTP_SendHTTPRequest", ptr, hRequest, pCallHandle);
            }
            return (boolean)mh$.invokeExact(ptr, hRequest, pCallHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTTP_SendHTTPRequestAndStreamResponse {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamHTTP_SendHTTPRequestAndStreamResponse"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_SendHTTPRequestAndStreamResponse(ISteamHTTP ptr, HTTPRequestHandle hRequest, SteamAPICall_t *pCallHandle)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTTP_SendHTTPRequestAndStreamResponse$descriptor() {
        return SteamAPI_ISteamHTTP_SendHTTPRequestAndStreamResponse.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_SendHTTPRequestAndStreamResponse(ISteamHTTP ptr, HTTPRequestHandle hRequest, SteamAPICall_t *pCallHandle)
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTTP_SendHTTPRequestAndStreamResponse$handle() {
        return SteamAPI_ISteamHTTP_SendHTTPRequestAndStreamResponse.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_SendHTTPRequestAndStreamResponse(ISteamHTTP ptr, HTTPRequestHandle hRequest, SteamAPICall_t *pCallHandle)
     * }
     */
    public static boolean SteamAPI_ISteamHTTP_SendHTTPRequestAndStreamResponse(MemorySegment ptr, int hRequest, MemorySegment pCallHandle) {
        var mh$ = SteamAPI_ISteamHTTP_SendHTTPRequestAndStreamResponse.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTTP_SendHTTPRequestAndStreamResponse", ptr, hRequest, pCallHandle);
            }
            return (boolean)mh$.invokeExact(ptr, hRequest, pCallHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTTP_DeferHTTPRequest {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamHTTP_DeferHTTPRequest"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_DeferHTTPRequest(ISteamHTTP ptr, HTTPRequestHandle hRequest)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTTP_DeferHTTPRequest$descriptor() {
        return SteamAPI_ISteamHTTP_DeferHTTPRequest.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_DeferHTTPRequest(ISteamHTTP ptr, HTTPRequestHandle hRequest)
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTTP_DeferHTTPRequest$handle() {
        return SteamAPI_ISteamHTTP_DeferHTTPRequest.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_DeferHTTPRequest(ISteamHTTP ptr, HTTPRequestHandle hRequest)
     * }
     */
    public static boolean SteamAPI_ISteamHTTP_DeferHTTPRequest(MemorySegment ptr, int hRequest) {
        var mh$ = SteamAPI_ISteamHTTP_DeferHTTPRequest.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTTP_DeferHTTPRequest", ptr, hRequest);
            }
            return (boolean)mh$.invokeExact(ptr, hRequest);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTTP_PrioritizeHTTPRequest {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamHTTP_PrioritizeHTTPRequest"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_PrioritizeHTTPRequest(ISteamHTTP ptr, HTTPRequestHandle hRequest)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTTP_PrioritizeHTTPRequest$descriptor() {
        return SteamAPI_ISteamHTTP_PrioritizeHTTPRequest.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_PrioritizeHTTPRequest(ISteamHTTP ptr, HTTPRequestHandle hRequest)
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTTP_PrioritizeHTTPRequest$handle() {
        return SteamAPI_ISteamHTTP_PrioritizeHTTPRequest.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_PrioritizeHTTPRequest(ISteamHTTP ptr, HTTPRequestHandle hRequest)
     * }
     */
    public static boolean SteamAPI_ISteamHTTP_PrioritizeHTTPRequest(MemorySegment ptr, int hRequest) {
        var mh$ = SteamAPI_ISteamHTTP_PrioritizeHTTPRequest.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTTP_PrioritizeHTTPRequest", ptr, hRequest);
            }
            return (boolean)mh$.invokeExact(ptr, hRequest);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTTP_GetHTTPResponseHeaderSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamHTTP_GetHTTPResponseHeaderSize"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_GetHTTPResponseHeaderSize(ISteamHTTP ptr, HTTPRequestHandle hRequest, const char *pchHeaderName, uint32 *unResponseHeaderSize)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTTP_GetHTTPResponseHeaderSize$descriptor() {
        return SteamAPI_ISteamHTTP_GetHTTPResponseHeaderSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_GetHTTPResponseHeaderSize(ISteamHTTP ptr, HTTPRequestHandle hRequest, const char *pchHeaderName, uint32 *unResponseHeaderSize)
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTTP_GetHTTPResponseHeaderSize$handle() {
        return SteamAPI_ISteamHTTP_GetHTTPResponseHeaderSize.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_GetHTTPResponseHeaderSize(ISteamHTTP ptr, HTTPRequestHandle hRequest, const char *pchHeaderName, uint32 *unResponseHeaderSize)
     * }
     */
    public static boolean SteamAPI_ISteamHTTP_GetHTTPResponseHeaderSize(MemorySegment ptr, int hRequest, MemorySegment pchHeaderName, MemorySegment unResponseHeaderSize) {
        var mh$ = SteamAPI_ISteamHTTP_GetHTTPResponseHeaderSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTTP_GetHTTPResponseHeaderSize", ptr, hRequest, pchHeaderName, unResponseHeaderSize);
            }
            return (boolean)mh$.invokeExact(ptr, hRequest, pchHeaderName, unResponseHeaderSize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTTP_GetHTTPResponseHeaderValue {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamHTTP_GetHTTPResponseHeaderValue"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_GetHTTPResponseHeaderValue(ISteamHTTP ptr, HTTPRequestHandle hRequest, const char *pchHeaderName, uint8 *pHeaderValueBuffer, uint32 unBufferSize)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTTP_GetHTTPResponseHeaderValue$descriptor() {
        return SteamAPI_ISteamHTTP_GetHTTPResponseHeaderValue.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_GetHTTPResponseHeaderValue(ISteamHTTP ptr, HTTPRequestHandle hRequest, const char *pchHeaderName, uint8 *pHeaderValueBuffer, uint32 unBufferSize)
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTTP_GetHTTPResponseHeaderValue$handle() {
        return SteamAPI_ISteamHTTP_GetHTTPResponseHeaderValue.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_GetHTTPResponseHeaderValue(ISteamHTTP ptr, HTTPRequestHandle hRequest, const char *pchHeaderName, uint8 *pHeaderValueBuffer, uint32 unBufferSize)
     * }
     */
    public static boolean SteamAPI_ISteamHTTP_GetHTTPResponseHeaderValue(MemorySegment ptr, int hRequest, MemorySegment pchHeaderName, MemorySegment pHeaderValueBuffer, int unBufferSize) {
        var mh$ = SteamAPI_ISteamHTTP_GetHTTPResponseHeaderValue.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTTP_GetHTTPResponseHeaderValue", ptr, hRequest, pchHeaderName, pHeaderValueBuffer, unBufferSize);
            }
            return (boolean)mh$.invokeExact(ptr, hRequest, pchHeaderName, pHeaderValueBuffer, unBufferSize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTTP_GetHTTPResponseBodySize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamHTTP_GetHTTPResponseBodySize"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_GetHTTPResponseBodySize(ISteamHTTP ptr, HTTPRequestHandle hRequest, uint32 *unBodySize)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTTP_GetHTTPResponseBodySize$descriptor() {
        return SteamAPI_ISteamHTTP_GetHTTPResponseBodySize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_GetHTTPResponseBodySize(ISteamHTTP ptr, HTTPRequestHandle hRequest, uint32 *unBodySize)
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTTP_GetHTTPResponseBodySize$handle() {
        return SteamAPI_ISteamHTTP_GetHTTPResponseBodySize.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_GetHTTPResponseBodySize(ISteamHTTP ptr, HTTPRequestHandle hRequest, uint32 *unBodySize)
     * }
     */
    public static boolean SteamAPI_ISteamHTTP_GetHTTPResponseBodySize(MemorySegment ptr, int hRequest, MemorySegment unBodySize) {
        var mh$ = SteamAPI_ISteamHTTP_GetHTTPResponseBodySize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTTP_GetHTTPResponseBodySize", ptr, hRequest, unBodySize);
            }
            return (boolean)mh$.invokeExact(ptr, hRequest, unBodySize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTTP_GetHTTPResponseBodyData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamHTTP_GetHTTPResponseBodyData"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_GetHTTPResponseBodyData(ISteamHTTP ptr, HTTPRequestHandle hRequest, uint8 *pBodyDataBuffer, uint32 unBufferSize)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTTP_GetHTTPResponseBodyData$descriptor() {
        return SteamAPI_ISteamHTTP_GetHTTPResponseBodyData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_GetHTTPResponseBodyData(ISteamHTTP ptr, HTTPRequestHandle hRequest, uint8 *pBodyDataBuffer, uint32 unBufferSize)
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTTP_GetHTTPResponseBodyData$handle() {
        return SteamAPI_ISteamHTTP_GetHTTPResponseBodyData.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_GetHTTPResponseBodyData(ISteamHTTP ptr, HTTPRequestHandle hRequest, uint8 *pBodyDataBuffer, uint32 unBufferSize)
     * }
     */
    public static boolean SteamAPI_ISteamHTTP_GetHTTPResponseBodyData(MemorySegment ptr, int hRequest, MemorySegment pBodyDataBuffer, int unBufferSize) {
        var mh$ = SteamAPI_ISteamHTTP_GetHTTPResponseBodyData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTTP_GetHTTPResponseBodyData", ptr, hRequest, pBodyDataBuffer, unBufferSize);
            }
            return (boolean)mh$.invokeExact(ptr, hRequest, pBodyDataBuffer, unBufferSize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTTP_GetHTTPStreamingResponseBodyData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamHTTP_GetHTTPStreamingResponseBodyData"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_GetHTTPStreamingResponseBodyData(ISteamHTTP ptr, HTTPRequestHandle hRequest, uint32 cOffset, uint8 *pBodyDataBuffer, uint32 unBufferSize)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTTP_GetHTTPStreamingResponseBodyData$descriptor() {
        return SteamAPI_ISteamHTTP_GetHTTPStreamingResponseBodyData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_GetHTTPStreamingResponseBodyData(ISteamHTTP ptr, HTTPRequestHandle hRequest, uint32 cOffset, uint8 *pBodyDataBuffer, uint32 unBufferSize)
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTTP_GetHTTPStreamingResponseBodyData$handle() {
        return SteamAPI_ISteamHTTP_GetHTTPStreamingResponseBodyData.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_GetHTTPStreamingResponseBodyData(ISteamHTTP ptr, HTTPRequestHandle hRequest, uint32 cOffset, uint8 *pBodyDataBuffer, uint32 unBufferSize)
     * }
     */
    public static boolean SteamAPI_ISteamHTTP_GetHTTPStreamingResponseBodyData(MemorySegment ptr, int hRequest, int cOffset, MemorySegment pBodyDataBuffer, int unBufferSize) {
        var mh$ = SteamAPI_ISteamHTTP_GetHTTPStreamingResponseBodyData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTTP_GetHTTPStreamingResponseBodyData", ptr, hRequest, cOffset, pBodyDataBuffer, unBufferSize);
            }
            return (boolean)mh$.invokeExact(ptr, hRequest, cOffset, pBodyDataBuffer, unBufferSize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTTP_ReleaseHTTPRequest {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamHTTP_ReleaseHTTPRequest"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_ReleaseHTTPRequest(ISteamHTTP ptr, HTTPRequestHandle hRequest)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTTP_ReleaseHTTPRequest$descriptor() {
        return SteamAPI_ISteamHTTP_ReleaseHTTPRequest.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_ReleaseHTTPRequest(ISteamHTTP ptr, HTTPRequestHandle hRequest)
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTTP_ReleaseHTTPRequest$handle() {
        return SteamAPI_ISteamHTTP_ReleaseHTTPRequest.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_ReleaseHTTPRequest(ISteamHTTP ptr, HTTPRequestHandle hRequest)
     * }
     */
    public static boolean SteamAPI_ISteamHTTP_ReleaseHTTPRequest(MemorySegment ptr, int hRequest) {
        var mh$ = SteamAPI_ISteamHTTP_ReleaseHTTPRequest.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTTP_ReleaseHTTPRequest", ptr, hRequest);
            }
            return (boolean)mh$.invokeExact(ptr, hRequest);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTTP_GetHTTPDownloadProgressPct {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamHTTP_GetHTTPDownloadProgressPct"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_GetHTTPDownloadProgressPct(ISteamHTTP ptr, HTTPRequestHandle hRequest, float *pflPercentOut)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTTP_GetHTTPDownloadProgressPct$descriptor() {
        return SteamAPI_ISteamHTTP_GetHTTPDownloadProgressPct.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_GetHTTPDownloadProgressPct(ISteamHTTP ptr, HTTPRequestHandle hRequest, float *pflPercentOut)
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTTP_GetHTTPDownloadProgressPct$handle() {
        return SteamAPI_ISteamHTTP_GetHTTPDownloadProgressPct.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_GetHTTPDownloadProgressPct(ISteamHTTP ptr, HTTPRequestHandle hRequest, float *pflPercentOut)
     * }
     */
    public static boolean SteamAPI_ISteamHTTP_GetHTTPDownloadProgressPct(MemorySegment ptr, int hRequest, MemorySegment pflPercentOut) {
        var mh$ = SteamAPI_ISteamHTTP_GetHTTPDownloadProgressPct.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTTP_GetHTTPDownloadProgressPct", ptr, hRequest, pflPercentOut);
            }
            return (boolean)mh$.invokeExact(ptr, hRequest, pflPercentOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTTP_SetHTTPRequestRawPostBody {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamHTTP_SetHTTPRequestRawPostBody"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_SetHTTPRequestRawPostBody(ISteamHTTP ptr, HTTPRequestHandle hRequest, const char *pchContentType, uint8 *pubBody, uint32 unBodyLen)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTTP_SetHTTPRequestRawPostBody$descriptor() {
        return SteamAPI_ISteamHTTP_SetHTTPRequestRawPostBody.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_SetHTTPRequestRawPostBody(ISteamHTTP ptr, HTTPRequestHandle hRequest, const char *pchContentType, uint8 *pubBody, uint32 unBodyLen)
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTTP_SetHTTPRequestRawPostBody$handle() {
        return SteamAPI_ISteamHTTP_SetHTTPRequestRawPostBody.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_SetHTTPRequestRawPostBody(ISteamHTTP ptr, HTTPRequestHandle hRequest, const char *pchContentType, uint8 *pubBody, uint32 unBodyLen)
     * }
     */
    public static boolean SteamAPI_ISteamHTTP_SetHTTPRequestRawPostBody(MemorySegment ptr, int hRequest, MemorySegment pchContentType, MemorySegment pubBody, int unBodyLen) {
        var mh$ = SteamAPI_ISteamHTTP_SetHTTPRequestRawPostBody.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTTP_SetHTTPRequestRawPostBody", ptr, hRequest, pchContentType, pubBody, unBodyLen);
            }
            return (boolean)mh$.invokeExact(ptr, hRequest, pchContentType, pubBody, unBodyLen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTTP_CreateCookieContainer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamHTTP_CreateCookieContainer"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HTTPCookieContainerHandle SteamAPI_ISteamHTTP_CreateCookieContainer(ISteamHTTP ptr, bool bAllowResponsesToModify)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTTP_CreateCookieContainer$descriptor() {
        return SteamAPI_ISteamHTTP_CreateCookieContainer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HTTPCookieContainerHandle SteamAPI_ISteamHTTP_CreateCookieContainer(ISteamHTTP ptr, bool bAllowResponsesToModify)
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTTP_CreateCookieContainer$handle() {
        return SteamAPI_ISteamHTTP_CreateCookieContainer.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HTTPCookieContainerHandle SteamAPI_ISteamHTTP_CreateCookieContainer(ISteamHTTP ptr, bool bAllowResponsesToModify)
     * }
     */
    public static int SteamAPI_ISteamHTTP_CreateCookieContainer(MemorySegment ptr, boolean bAllowResponsesToModify) {
        var mh$ = SteamAPI_ISteamHTTP_CreateCookieContainer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTTP_CreateCookieContainer", ptr, bAllowResponsesToModify);
            }
            return (int)mh$.invokeExact(ptr, bAllowResponsesToModify);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTTP_ReleaseCookieContainer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamHTTP_ReleaseCookieContainer"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_ReleaseCookieContainer(ISteamHTTP ptr, HTTPCookieContainerHandle hCookieContainer)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTTP_ReleaseCookieContainer$descriptor() {
        return SteamAPI_ISteamHTTP_ReleaseCookieContainer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_ReleaseCookieContainer(ISteamHTTP ptr, HTTPCookieContainerHandle hCookieContainer)
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTTP_ReleaseCookieContainer$handle() {
        return SteamAPI_ISteamHTTP_ReleaseCookieContainer.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_ReleaseCookieContainer(ISteamHTTP ptr, HTTPCookieContainerHandle hCookieContainer)
     * }
     */
    public static boolean SteamAPI_ISteamHTTP_ReleaseCookieContainer(MemorySegment ptr, int hCookieContainer) {
        var mh$ = SteamAPI_ISteamHTTP_ReleaseCookieContainer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTTP_ReleaseCookieContainer", ptr, hCookieContainer);
            }
            return (boolean)mh$.invokeExact(ptr, hCookieContainer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTTP_SetCookie {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamHTTP_SetCookie"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_SetCookie(ISteamHTTP ptr, HTTPCookieContainerHandle hCookieContainer, const char *pchHost, const char *pchUrl, const char *pchCookie)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTTP_SetCookie$descriptor() {
        return SteamAPI_ISteamHTTP_SetCookie.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_SetCookie(ISteamHTTP ptr, HTTPCookieContainerHandle hCookieContainer, const char *pchHost, const char *pchUrl, const char *pchCookie)
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTTP_SetCookie$handle() {
        return SteamAPI_ISteamHTTP_SetCookie.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_SetCookie(ISteamHTTP ptr, HTTPCookieContainerHandle hCookieContainer, const char *pchHost, const char *pchUrl, const char *pchCookie)
     * }
     */
    public static boolean SteamAPI_ISteamHTTP_SetCookie(MemorySegment ptr, int hCookieContainer, MemorySegment pchHost, MemorySegment pchUrl, MemorySegment pchCookie) {
        var mh$ = SteamAPI_ISteamHTTP_SetCookie.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTTP_SetCookie", ptr, hCookieContainer, pchHost, pchUrl, pchCookie);
            }
            return (boolean)mh$.invokeExact(ptr, hCookieContainer, pchHost, pchUrl, pchCookie);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTTP_SetHTTPRequestCookieContainer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamHTTP_SetHTTPRequestCookieContainer"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_SetHTTPRequestCookieContainer(ISteamHTTP ptr, HTTPRequestHandle hRequest, HTTPCookieContainerHandle hCookieContainer)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTTP_SetHTTPRequestCookieContainer$descriptor() {
        return SteamAPI_ISteamHTTP_SetHTTPRequestCookieContainer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_SetHTTPRequestCookieContainer(ISteamHTTP ptr, HTTPRequestHandle hRequest, HTTPCookieContainerHandle hCookieContainer)
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTTP_SetHTTPRequestCookieContainer$handle() {
        return SteamAPI_ISteamHTTP_SetHTTPRequestCookieContainer.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_SetHTTPRequestCookieContainer(ISteamHTTP ptr, HTTPRequestHandle hRequest, HTTPCookieContainerHandle hCookieContainer)
     * }
     */
    public static boolean SteamAPI_ISteamHTTP_SetHTTPRequestCookieContainer(MemorySegment ptr, int hRequest, int hCookieContainer) {
        var mh$ = SteamAPI_ISteamHTTP_SetHTTPRequestCookieContainer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTTP_SetHTTPRequestCookieContainer", ptr, hRequest, hCookieContainer);
            }
            return (boolean)mh$.invokeExact(ptr, hRequest, hCookieContainer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTTP_SetHTTPRequestUserAgentInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamHTTP_SetHTTPRequestUserAgentInfo"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_SetHTTPRequestUserAgentInfo(ISteamHTTP ptr, HTTPRequestHandle hRequest, const char *pchUserAgentInfo)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTTP_SetHTTPRequestUserAgentInfo$descriptor() {
        return SteamAPI_ISteamHTTP_SetHTTPRequestUserAgentInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_SetHTTPRequestUserAgentInfo(ISteamHTTP ptr, HTTPRequestHandle hRequest, const char *pchUserAgentInfo)
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTTP_SetHTTPRequestUserAgentInfo$handle() {
        return SteamAPI_ISteamHTTP_SetHTTPRequestUserAgentInfo.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_SetHTTPRequestUserAgentInfo(ISteamHTTP ptr, HTTPRequestHandle hRequest, const char *pchUserAgentInfo)
     * }
     */
    public static boolean SteamAPI_ISteamHTTP_SetHTTPRequestUserAgentInfo(MemorySegment ptr, int hRequest, MemorySegment pchUserAgentInfo) {
        var mh$ = SteamAPI_ISteamHTTP_SetHTTPRequestUserAgentInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTTP_SetHTTPRequestUserAgentInfo", ptr, hRequest, pchUserAgentInfo);
            }
            return (boolean)mh$.invokeExact(ptr, hRequest, pchUserAgentInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTTP_SetHTTPRequestRequiresVerifiedCertificate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamHTTP_SetHTTPRequestRequiresVerifiedCertificate"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_SetHTTPRequestRequiresVerifiedCertificate(ISteamHTTP ptr, HTTPRequestHandle hRequest, bool bRequireVerifiedCertificate)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTTP_SetHTTPRequestRequiresVerifiedCertificate$descriptor() {
        return SteamAPI_ISteamHTTP_SetHTTPRequestRequiresVerifiedCertificate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_SetHTTPRequestRequiresVerifiedCertificate(ISteamHTTP ptr, HTTPRequestHandle hRequest, bool bRequireVerifiedCertificate)
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTTP_SetHTTPRequestRequiresVerifiedCertificate$handle() {
        return SteamAPI_ISteamHTTP_SetHTTPRequestRequiresVerifiedCertificate.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_SetHTTPRequestRequiresVerifiedCertificate(ISteamHTTP ptr, HTTPRequestHandle hRequest, bool bRequireVerifiedCertificate)
     * }
     */
    public static boolean SteamAPI_ISteamHTTP_SetHTTPRequestRequiresVerifiedCertificate(MemorySegment ptr, int hRequest, boolean bRequireVerifiedCertificate) {
        var mh$ = SteamAPI_ISteamHTTP_SetHTTPRequestRequiresVerifiedCertificate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTTP_SetHTTPRequestRequiresVerifiedCertificate", ptr, hRequest, bRequireVerifiedCertificate);
            }
            return (boolean)mh$.invokeExact(ptr, hRequest, bRequireVerifiedCertificate);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTTP_SetHTTPRequestAbsoluteTimeoutMS {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamHTTP_SetHTTPRequestAbsoluteTimeoutMS"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_SetHTTPRequestAbsoluteTimeoutMS(ISteamHTTP ptr, HTTPRequestHandle hRequest, uint32 unMilliseconds)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTTP_SetHTTPRequestAbsoluteTimeoutMS$descriptor() {
        return SteamAPI_ISteamHTTP_SetHTTPRequestAbsoluteTimeoutMS.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_SetHTTPRequestAbsoluteTimeoutMS(ISteamHTTP ptr, HTTPRequestHandle hRequest, uint32 unMilliseconds)
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTTP_SetHTTPRequestAbsoluteTimeoutMS$handle() {
        return SteamAPI_ISteamHTTP_SetHTTPRequestAbsoluteTimeoutMS.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_SetHTTPRequestAbsoluteTimeoutMS(ISteamHTTP ptr, HTTPRequestHandle hRequest, uint32 unMilliseconds)
     * }
     */
    public static boolean SteamAPI_ISteamHTTP_SetHTTPRequestAbsoluteTimeoutMS(MemorySegment ptr, int hRequest, int unMilliseconds) {
        var mh$ = SteamAPI_ISteamHTTP_SetHTTPRequestAbsoluteTimeoutMS.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTTP_SetHTTPRequestAbsoluteTimeoutMS", ptr, hRequest, unMilliseconds);
            }
            return (boolean)mh$.invokeExact(ptr, hRequest, unMilliseconds);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTTP_GetHTTPRequestWasTimedOut {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamHTTP_GetHTTPRequestWasTimedOut"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_GetHTTPRequestWasTimedOut(ISteamHTTP ptr, HTTPRequestHandle hRequest, bool *pbWasTimedOut)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTTP_GetHTTPRequestWasTimedOut$descriptor() {
        return SteamAPI_ISteamHTTP_GetHTTPRequestWasTimedOut.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_GetHTTPRequestWasTimedOut(ISteamHTTP ptr, HTTPRequestHandle hRequest, bool *pbWasTimedOut)
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTTP_GetHTTPRequestWasTimedOut$handle() {
        return SteamAPI_ISteamHTTP_GetHTTPRequestWasTimedOut.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_GetHTTPRequestWasTimedOut(ISteamHTTP ptr, HTTPRequestHandle hRequest, bool *pbWasTimedOut)
     * }
     */
    public static boolean SteamAPI_ISteamHTTP_GetHTTPRequestWasTimedOut(MemorySegment ptr, int hRequest, MemorySegment pbWasTimedOut) {
        var mh$ = SteamAPI_ISteamHTTP_GetHTTPRequestWasTimedOut.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTTP_GetHTTPRequestWasTimedOut", ptr, hRequest, pbWasTimedOut);
            }
            return (boolean)mh$.invokeExact(ptr, hRequest, pbWasTimedOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_SteamHTTP_v003 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_SteamHTTP_v003"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ISteamHTTP SteamAPI_SteamHTTP_v003()
     * }
     */
    public static FunctionDescriptor SteamAPI_SteamHTTP_v003$descriptor() {
        return SteamAPI_SteamHTTP_v003.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ISteamHTTP SteamAPI_SteamHTTP_v003()
     * }
     */
    public static MethodHandle SteamAPI_SteamHTTP_v003$handle() {
        return SteamAPI_SteamHTTP_v003.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ISteamHTTP SteamAPI_SteamHTTP_v003()
     * }
     */
    public static MemorySegment SteamAPI_SteamHTTP_v003() {
        var mh$ = SteamAPI_SteamHTTP_v003.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_SteamHTTP_v003");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_SteamGameServerHTTP_v003 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_SteamGameServerHTTP_v003"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ISteamHTTP SteamAPI_SteamGameServerHTTP_v003()
     * }
     */
    public static FunctionDescriptor SteamAPI_SteamGameServerHTTP_v003$descriptor() {
        return SteamAPI_SteamGameServerHTTP_v003.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ISteamHTTP SteamAPI_SteamGameServerHTTP_v003()
     * }
     */
    public static MethodHandle SteamAPI_SteamGameServerHTTP_v003$handle() {
        return SteamAPI_SteamGameServerHTTP_v003.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ISteamHTTP SteamAPI_SteamGameServerHTTP_v003()
     * }
     */
    public static MemorySegment SteamAPI_SteamGameServerHTTP_v003() {
        var mh$ = SteamAPI_SteamGameServerHTTP_v003.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_SteamGameServerHTTP_v003");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInput_Init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamInput_Init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInput_Init(ISteamInput ptr, bool bExplicitlyCallRunFrame)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInput_Init$descriptor() {
        return SteamAPI_ISteamInput_Init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInput_Init(ISteamInput ptr, bool bExplicitlyCallRunFrame)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInput_Init$handle() {
        return SteamAPI_ISteamInput_Init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInput_Init(ISteamInput ptr, bool bExplicitlyCallRunFrame)
     * }
     */
    public static boolean SteamAPI_ISteamInput_Init(MemorySegment ptr, boolean bExplicitlyCallRunFrame) {
        var mh$ = SteamAPI_ISteamInput_Init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInput_Init", ptr, bExplicitlyCallRunFrame);
            }
            return (boolean)mh$.invokeExact(ptr, bExplicitlyCallRunFrame);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInput_Shutdown {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamInput_Shutdown"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInput_Shutdown(ISteamInput ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInput_Shutdown$descriptor() {
        return SteamAPI_ISteamInput_Shutdown.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInput_Shutdown(ISteamInput ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInput_Shutdown$handle() {
        return SteamAPI_ISteamInput_Shutdown.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInput_Shutdown(ISteamInput ptr)
     * }
     */
    public static boolean SteamAPI_ISteamInput_Shutdown(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamInput_Shutdown.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInput_Shutdown", ptr);
            }
            return (boolean)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInput_SetInputActionManifestFilePath {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamInput_SetInputActionManifestFilePath"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInput_SetInputActionManifestFilePath(ISteamInput ptr, const char *pchInputActionManifestAbsolutePath)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInput_SetInputActionManifestFilePath$descriptor() {
        return SteamAPI_ISteamInput_SetInputActionManifestFilePath.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInput_SetInputActionManifestFilePath(ISteamInput ptr, const char *pchInputActionManifestAbsolutePath)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInput_SetInputActionManifestFilePath$handle() {
        return SteamAPI_ISteamInput_SetInputActionManifestFilePath.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInput_SetInputActionManifestFilePath(ISteamInput ptr, const char *pchInputActionManifestAbsolutePath)
     * }
     */
    public static boolean SteamAPI_ISteamInput_SetInputActionManifestFilePath(MemorySegment ptr, MemorySegment pchInputActionManifestAbsolutePath) {
        var mh$ = SteamAPI_ISteamInput_SetInputActionManifestFilePath.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInput_SetInputActionManifestFilePath", ptr, pchInputActionManifestAbsolutePath);
            }
            return (boolean)mh$.invokeExact(ptr, pchInputActionManifestAbsolutePath);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInput_RunFrame {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamInput_RunFrame"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamInput_RunFrame(ISteamInput ptr, bool bReservedValue)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInput_RunFrame$descriptor() {
        return SteamAPI_ISteamInput_RunFrame.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamInput_RunFrame(ISteamInput ptr, bool bReservedValue)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInput_RunFrame$handle() {
        return SteamAPI_ISteamInput_RunFrame.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamInput_RunFrame(ISteamInput ptr, bool bReservedValue)
     * }
     */
    public static void SteamAPI_ISteamInput_RunFrame(MemorySegment ptr, boolean bReservedValue) {
        var mh$ = SteamAPI_ISteamInput_RunFrame.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInput_RunFrame", ptr, bReservedValue);
            }
            mh$.invokeExact(ptr, bReservedValue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInput_BWaitForData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_BOOL,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamInput_BWaitForData"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInput_BWaitForData(ISteamInput ptr, bool bWaitForever, uint32 unTimeout)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInput_BWaitForData$descriptor() {
        return SteamAPI_ISteamInput_BWaitForData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInput_BWaitForData(ISteamInput ptr, bool bWaitForever, uint32 unTimeout)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInput_BWaitForData$handle() {
        return SteamAPI_ISteamInput_BWaitForData.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInput_BWaitForData(ISteamInput ptr, bool bWaitForever, uint32 unTimeout)
     * }
     */
    public static boolean SteamAPI_ISteamInput_BWaitForData(MemorySegment ptr, boolean bWaitForever, int unTimeout) {
        var mh$ = SteamAPI_ISteamInput_BWaitForData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInput_BWaitForData", ptr, bWaitForever, unTimeout);
            }
            return (boolean)mh$.invokeExact(ptr, bWaitForever, unTimeout);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInput_BNewDataAvailable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamInput_BNewDataAvailable"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInput_BNewDataAvailable(ISteamInput ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInput_BNewDataAvailable$descriptor() {
        return SteamAPI_ISteamInput_BNewDataAvailable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInput_BNewDataAvailable(ISteamInput ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInput_BNewDataAvailable$handle() {
        return SteamAPI_ISteamInput_BNewDataAvailable.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInput_BNewDataAvailable(ISteamInput ptr)
     * }
     */
    public static boolean SteamAPI_ISteamInput_BNewDataAvailable(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamInput_BNewDataAvailable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInput_BNewDataAvailable", ptr);
            }
            return (boolean)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInput_GetConnectedControllers {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamInput_GetConnectedControllers"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamInput_GetConnectedControllers(ISteamInput ptr, InputHandle_t *handlesOut)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInput_GetConnectedControllers$descriptor() {
        return SteamAPI_ISteamInput_GetConnectedControllers.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamInput_GetConnectedControllers(ISteamInput ptr, InputHandle_t *handlesOut)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInput_GetConnectedControllers$handle() {
        return SteamAPI_ISteamInput_GetConnectedControllers.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int SteamAPI_ISteamInput_GetConnectedControllers(ISteamInput ptr, InputHandle_t *handlesOut)
     * }
     */
    public static int SteamAPI_ISteamInput_GetConnectedControllers(MemorySegment ptr, MemorySegment handlesOut) {
        var mh$ = SteamAPI_ISteamInput_GetConnectedControllers.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInput_GetConnectedControllers", ptr, handlesOut);
            }
            return (int)mh$.invokeExact(ptr, handlesOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInput_EnableDeviceCallbacks {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamInput_EnableDeviceCallbacks"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamInput_EnableDeviceCallbacks(ISteamInput ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInput_EnableDeviceCallbacks$descriptor() {
        return SteamAPI_ISteamInput_EnableDeviceCallbacks.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamInput_EnableDeviceCallbacks(ISteamInput ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInput_EnableDeviceCallbacks$handle() {
        return SteamAPI_ISteamInput_EnableDeviceCallbacks.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamInput_EnableDeviceCallbacks(ISteamInput ptr)
     * }
     */
    public static void SteamAPI_ISteamInput_EnableDeviceCallbacks(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamInput_EnableDeviceCallbacks.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInput_EnableDeviceCallbacks", ptr);
            }
            mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInput_EnableActionEventCallbacks {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamInput_EnableActionEventCallbacks"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamInput_EnableActionEventCallbacks(ISteamInput ptr, SteamInputActionEventCallbackPointer pCallback)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInput_EnableActionEventCallbacks$descriptor() {
        return SteamAPI_ISteamInput_EnableActionEventCallbacks.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamInput_EnableActionEventCallbacks(ISteamInput ptr, SteamInputActionEventCallbackPointer pCallback)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInput_EnableActionEventCallbacks$handle() {
        return SteamAPI_ISteamInput_EnableActionEventCallbacks.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamInput_EnableActionEventCallbacks(ISteamInput ptr, SteamInputActionEventCallbackPointer pCallback)
     * }
     */
    public static void SteamAPI_ISteamInput_EnableActionEventCallbacks(MemorySegment ptr, MemorySegment pCallback) {
        var mh$ = SteamAPI_ISteamInput_EnableActionEventCallbacks.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInput_EnableActionEventCallbacks", ptr, pCallback);
            }
            mh$.invokeExact(ptr, pCallback);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInput_GetActionSetHandle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamInput_GetActionSetHandle"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * InputActionSetHandle_t SteamAPI_ISteamInput_GetActionSetHandle(ISteamInput ptr, const char *pszActionSetName)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInput_GetActionSetHandle$descriptor() {
        return SteamAPI_ISteamInput_GetActionSetHandle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * InputActionSetHandle_t SteamAPI_ISteamInput_GetActionSetHandle(ISteamInput ptr, const char *pszActionSetName)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInput_GetActionSetHandle$handle() {
        return SteamAPI_ISteamInput_GetActionSetHandle.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * InputActionSetHandle_t SteamAPI_ISteamInput_GetActionSetHandle(ISteamInput ptr, const char *pszActionSetName)
     * }
     */
    public static long SteamAPI_ISteamInput_GetActionSetHandle(MemorySegment ptr, MemorySegment pszActionSetName) {
        var mh$ = SteamAPI_ISteamInput_GetActionSetHandle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInput_GetActionSetHandle", ptr, pszActionSetName);
            }
            return (long)mh$.invokeExact(ptr, pszActionSetName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInput_ActivateActionSet {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamInput_ActivateActionSet"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamInput_ActivateActionSet(ISteamInput ptr, InputHandle_t inputHandle, InputActionSetHandle_t actionSetHandle)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInput_ActivateActionSet$descriptor() {
        return SteamAPI_ISteamInput_ActivateActionSet.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamInput_ActivateActionSet(ISteamInput ptr, InputHandle_t inputHandle, InputActionSetHandle_t actionSetHandle)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInput_ActivateActionSet$handle() {
        return SteamAPI_ISteamInput_ActivateActionSet.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamInput_ActivateActionSet(ISteamInput ptr, InputHandle_t inputHandle, InputActionSetHandle_t actionSetHandle)
     * }
     */
    public static void SteamAPI_ISteamInput_ActivateActionSet(MemorySegment ptr, long inputHandle, long actionSetHandle) {
        var mh$ = SteamAPI_ISteamInput_ActivateActionSet.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInput_ActivateActionSet", ptr, inputHandle, actionSetHandle);
            }
            mh$.invokeExact(ptr, inputHandle, actionSetHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInput_GetCurrentActionSet {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamInput_GetCurrentActionSet"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * InputActionSetHandle_t SteamAPI_ISteamInput_GetCurrentActionSet(ISteamInput ptr, InputHandle_t inputHandle)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInput_GetCurrentActionSet$descriptor() {
        return SteamAPI_ISteamInput_GetCurrentActionSet.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * InputActionSetHandle_t SteamAPI_ISteamInput_GetCurrentActionSet(ISteamInput ptr, InputHandle_t inputHandle)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInput_GetCurrentActionSet$handle() {
        return SteamAPI_ISteamInput_GetCurrentActionSet.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * InputActionSetHandle_t SteamAPI_ISteamInput_GetCurrentActionSet(ISteamInput ptr, InputHandle_t inputHandle)
     * }
     */
    public static long SteamAPI_ISteamInput_GetCurrentActionSet(MemorySegment ptr, long inputHandle) {
        var mh$ = SteamAPI_ISteamInput_GetCurrentActionSet.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInput_GetCurrentActionSet", ptr, inputHandle);
            }
            return (long)mh$.invokeExact(ptr, inputHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInput_ActivateActionSetLayer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamInput_ActivateActionSetLayer"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamInput_ActivateActionSetLayer(ISteamInput ptr, InputHandle_t inputHandle, InputActionSetHandle_t actionSetLayerHandle)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInput_ActivateActionSetLayer$descriptor() {
        return SteamAPI_ISteamInput_ActivateActionSetLayer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamInput_ActivateActionSetLayer(ISteamInput ptr, InputHandle_t inputHandle, InputActionSetHandle_t actionSetLayerHandle)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInput_ActivateActionSetLayer$handle() {
        return SteamAPI_ISteamInput_ActivateActionSetLayer.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamInput_ActivateActionSetLayer(ISteamInput ptr, InputHandle_t inputHandle, InputActionSetHandle_t actionSetLayerHandle)
     * }
     */
    public static void SteamAPI_ISteamInput_ActivateActionSetLayer(MemorySegment ptr, long inputHandle, long actionSetLayerHandle) {
        var mh$ = SteamAPI_ISteamInput_ActivateActionSetLayer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInput_ActivateActionSetLayer", ptr, inputHandle, actionSetLayerHandle);
            }
            mh$.invokeExact(ptr, inputHandle, actionSetLayerHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInput_DeactivateActionSetLayer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamInput_DeactivateActionSetLayer"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamInput_DeactivateActionSetLayer(ISteamInput ptr, InputHandle_t inputHandle, InputActionSetHandle_t actionSetLayerHandle)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInput_DeactivateActionSetLayer$descriptor() {
        return SteamAPI_ISteamInput_DeactivateActionSetLayer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamInput_DeactivateActionSetLayer(ISteamInput ptr, InputHandle_t inputHandle, InputActionSetHandle_t actionSetLayerHandle)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInput_DeactivateActionSetLayer$handle() {
        return SteamAPI_ISteamInput_DeactivateActionSetLayer.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamInput_DeactivateActionSetLayer(ISteamInput ptr, InputHandle_t inputHandle, InputActionSetHandle_t actionSetLayerHandle)
     * }
     */
    public static void SteamAPI_ISteamInput_DeactivateActionSetLayer(MemorySegment ptr, long inputHandle, long actionSetLayerHandle) {
        var mh$ = SteamAPI_ISteamInput_DeactivateActionSetLayer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInput_DeactivateActionSetLayer", ptr, inputHandle, actionSetLayerHandle);
            }
            mh$.invokeExact(ptr, inputHandle, actionSetLayerHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInput_DeactivateAllActionSetLayers {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamInput_DeactivateAllActionSetLayers"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamInput_DeactivateAllActionSetLayers(ISteamInput ptr, InputHandle_t inputHandle)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInput_DeactivateAllActionSetLayers$descriptor() {
        return SteamAPI_ISteamInput_DeactivateAllActionSetLayers.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamInput_DeactivateAllActionSetLayers(ISteamInput ptr, InputHandle_t inputHandle)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInput_DeactivateAllActionSetLayers$handle() {
        return SteamAPI_ISteamInput_DeactivateAllActionSetLayers.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamInput_DeactivateAllActionSetLayers(ISteamInput ptr, InputHandle_t inputHandle)
     * }
     */
    public static void SteamAPI_ISteamInput_DeactivateAllActionSetLayers(MemorySegment ptr, long inputHandle) {
        var mh$ = SteamAPI_ISteamInput_DeactivateAllActionSetLayers.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInput_DeactivateAllActionSetLayers", ptr, inputHandle);
            }
            mh$.invokeExact(ptr, inputHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInput_GetActiveActionSetLayers {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamInput_GetActiveActionSetLayers"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamInput_GetActiveActionSetLayers(ISteamInput ptr, InputHandle_t inputHandle, InputActionSetHandle_t *handlesOut)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInput_GetActiveActionSetLayers$descriptor() {
        return SteamAPI_ISteamInput_GetActiveActionSetLayers.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamInput_GetActiveActionSetLayers(ISteamInput ptr, InputHandle_t inputHandle, InputActionSetHandle_t *handlesOut)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInput_GetActiveActionSetLayers$handle() {
        return SteamAPI_ISteamInput_GetActiveActionSetLayers.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int SteamAPI_ISteamInput_GetActiveActionSetLayers(ISteamInput ptr, InputHandle_t inputHandle, InputActionSetHandle_t *handlesOut)
     * }
     */
    public static int SteamAPI_ISteamInput_GetActiveActionSetLayers(MemorySegment ptr, long inputHandle, MemorySegment handlesOut) {
        var mh$ = SteamAPI_ISteamInput_GetActiveActionSetLayers.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInput_GetActiveActionSetLayers", ptr, inputHandle, handlesOut);
            }
            return (int)mh$.invokeExact(ptr, inputHandle, handlesOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInput_GetDigitalActionHandle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamInput_GetDigitalActionHandle"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * InputDigitalActionHandle_t SteamAPI_ISteamInput_GetDigitalActionHandle(ISteamInput ptr, const char *pszActionName)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInput_GetDigitalActionHandle$descriptor() {
        return SteamAPI_ISteamInput_GetDigitalActionHandle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * InputDigitalActionHandle_t SteamAPI_ISteamInput_GetDigitalActionHandle(ISteamInput ptr, const char *pszActionName)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInput_GetDigitalActionHandle$handle() {
        return SteamAPI_ISteamInput_GetDigitalActionHandle.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * InputDigitalActionHandle_t SteamAPI_ISteamInput_GetDigitalActionHandle(ISteamInput ptr, const char *pszActionName)
     * }
     */
    public static long SteamAPI_ISteamInput_GetDigitalActionHandle(MemorySegment ptr, MemorySegment pszActionName) {
        var mh$ = SteamAPI_ISteamInput_GetDigitalActionHandle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInput_GetDigitalActionHandle", ptr, pszActionName);
            }
            return (long)mh$.invokeExact(ptr, pszActionName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInput_GetDigitalActionData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            InputDigitalActionData_t.layout(),
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamInput_GetDigitalActionData"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * InputDigitalActionData_t SteamAPI_ISteamInput_GetDigitalActionData(ISteamInput ptr, InputHandle_t inputHandle, InputDigitalActionHandle_t digitalActionHandle)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInput_GetDigitalActionData$descriptor() {
        return SteamAPI_ISteamInput_GetDigitalActionData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * InputDigitalActionData_t SteamAPI_ISteamInput_GetDigitalActionData(ISteamInput ptr, InputHandle_t inputHandle, InputDigitalActionHandle_t digitalActionHandle)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInput_GetDigitalActionData$handle() {
        return SteamAPI_ISteamInput_GetDigitalActionData.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * InputDigitalActionData_t SteamAPI_ISteamInput_GetDigitalActionData(ISteamInput ptr, InputHandle_t inputHandle, InputDigitalActionHandle_t digitalActionHandle)
     * }
     */
    public static MemorySegment SteamAPI_ISteamInput_GetDigitalActionData(SegmentAllocator allocator, MemorySegment ptr, long inputHandle, long digitalActionHandle) {
        var mh$ = SteamAPI_ISteamInput_GetDigitalActionData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInput_GetDigitalActionData", allocator, ptr, inputHandle, digitalActionHandle);
            }
            return (MemorySegment)mh$.invokeExact(allocator, ptr, inputHandle, digitalActionHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInput_GetDigitalActionOrigins {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamInput_GetDigitalActionOrigins"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamInput_GetDigitalActionOrigins(ISteamInput ptr, InputHandle_t inputHandle, InputActionSetHandle_t actionSetHandle, InputDigitalActionHandle_t digitalActionHandle, EInputActionOrigin *originsOut)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInput_GetDigitalActionOrigins$descriptor() {
        return SteamAPI_ISteamInput_GetDigitalActionOrigins.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamInput_GetDigitalActionOrigins(ISteamInput ptr, InputHandle_t inputHandle, InputActionSetHandle_t actionSetHandle, InputDigitalActionHandle_t digitalActionHandle, EInputActionOrigin *originsOut)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInput_GetDigitalActionOrigins$handle() {
        return SteamAPI_ISteamInput_GetDigitalActionOrigins.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int SteamAPI_ISteamInput_GetDigitalActionOrigins(ISteamInput ptr, InputHandle_t inputHandle, InputActionSetHandle_t actionSetHandle, InputDigitalActionHandle_t digitalActionHandle, EInputActionOrigin *originsOut)
     * }
     */
    public static int SteamAPI_ISteamInput_GetDigitalActionOrigins(MemorySegment ptr, long inputHandle, long actionSetHandle, long digitalActionHandle, MemorySegment originsOut) {
        var mh$ = SteamAPI_ISteamInput_GetDigitalActionOrigins.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInput_GetDigitalActionOrigins", ptr, inputHandle, actionSetHandle, digitalActionHandle, originsOut);
            }
            return (int)mh$.invokeExact(ptr, inputHandle, actionSetHandle, digitalActionHandle, originsOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInput_GetStringForDigitalActionName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamInput_GetStringForDigitalActionName"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamInput_GetStringForDigitalActionName(ISteamInput ptr, InputDigitalActionHandle_t eActionHandle)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInput_GetStringForDigitalActionName$descriptor() {
        return SteamAPI_ISteamInput_GetStringForDigitalActionName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamInput_GetStringForDigitalActionName(ISteamInput ptr, InputDigitalActionHandle_t eActionHandle)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInput_GetStringForDigitalActionName$handle() {
        return SteamAPI_ISteamInput_GetStringForDigitalActionName.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamInput_GetStringForDigitalActionName(ISteamInput ptr, InputDigitalActionHandle_t eActionHandle)
     * }
     */
    public static MemorySegment SteamAPI_ISteamInput_GetStringForDigitalActionName(MemorySegment ptr, long eActionHandle) {
        var mh$ = SteamAPI_ISteamInput_GetStringForDigitalActionName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInput_GetStringForDigitalActionName", ptr, eActionHandle);
            }
            return (MemorySegment)mh$.invokeExact(ptr, eActionHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInput_GetAnalogActionHandle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamInput_GetAnalogActionHandle"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * InputAnalogActionHandle_t SteamAPI_ISteamInput_GetAnalogActionHandle(ISteamInput ptr, const char *pszActionName)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInput_GetAnalogActionHandle$descriptor() {
        return SteamAPI_ISteamInput_GetAnalogActionHandle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * InputAnalogActionHandle_t SteamAPI_ISteamInput_GetAnalogActionHandle(ISteamInput ptr, const char *pszActionName)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInput_GetAnalogActionHandle$handle() {
        return SteamAPI_ISteamInput_GetAnalogActionHandle.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * InputAnalogActionHandle_t SteamAPI_ISteamInput_GetAnalogActionHandle(ISteamInput ptr, const char *pszActionName)
     * }
     */
    public static long SteamAPI_ISteamInput_GetAnalogActionHandle(MemorySegment ptr, MemorySegment pszActionName) {
        var mh$ = SteamAPI_ISteamInput_GetAnalogActionHandle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInput_GetAnalogActionHandle", ptr, pszActionName);
            }
            return (long)mh$.invokeExact(ptr, pszActionName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInput_GetAnalogActionData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            InputAnalogActionData_t.layout(),
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamInput_GetAnalogActionData"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * InputAnalogActionData_t SteamAPI_ISteamInput_GetAnalogActionData(ISteamInput ptr, InputHandle_t inputHandle, InputAnalogActionHandle_t analogActionHandle)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInput_GetAnalogActionData$descriptor() {
        return SteamAPI_ISteamInput_GetAnalogActionData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * InputAnalogActionData_t SteamAPI_ISteamInput_GetAnalogActionData(ISteamInput ptr, InputHandle_t inputHandle, InputAnalogActionHandle_t analogActionHandle)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInput_GetAnalogActionData$handle() {
        return SteamAPI_ISteamInput_GetAnalogActionData.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * InputAnalogActionData_t SteamAPI_ISteamInput_GetAnalogActionData(ISteamInput ptr, InputHandle_t inputHandle, InputAnalogActionHandle_t analogActionHandle)
     * }
     */
    public static MemorySegment SteamAPI_ISteamInput_GetAnalogActionData(SegmentAllocator allocator, MemorySegment ptr, long inputHandle, long analogActionHandle) {
        var mh$ = SteamAPI_ISteamInput_GetAnalogActionData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInput_GetAnalogActionData", allocator, ptr, inputHandle, analogActionHandle);
            }
            return (MemorySegment)mh$.invokeExact(allocator, ptr, inputHandle, analogActionHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInput_GetAnalogActionOrigins {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamInput_GetAnalogActionOrigins"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamInput_GetAnalogActionOrigins(ISteamInput ptr, InputHandle_t inputHandle, InputActionSetHandle_t actionSetHandle, InputAnalogActionHandle_t analogActionHandle, EInputActionOrigin *originsOut)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInput_GetAnalogActionOrigins$descriptor() {
        return SteamAPI_ISteamInput_GetAnalogActionOrigins.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamInput_GetAnalogActionOrigins(ISteamInput ptr, InputHandle_t inputHandle, InputActionSetHandle_t actionSetHandle, InputAnalogActionHandle_t analogActionHandle, EInputActionOrigin *originsOut)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInput_GetAnalogActionOrigins$handle() {
        return SteamAPI_ISteamInput_GetAnalogActionOrigins.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int SteamAPI_ISteamInput_GetAnalogActionOrigins(ISteamInput ptr, InputHandle_t inputHandle, InputActionSetHandle_t actionSetHandle, InputAnalogActionHandle_t analogActionHandle, EInputActionOrigin *originsOut)
     * }
     */
    public static int SteamAPI_ISteamInput_GetAnalogActionOrigins(MemorySegment ptr, long inputHandle, long actionSetHandle, long analogActionHandle, MemorySegment originsOut) {
        var mh$ = SteamAPI_ISteamInput_GetAnalogActionOrigins.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInput_GetAnalogActionOrigins", ptr, inputHandle, actionSetHandle, analogActionHandle, originsOut);
            }
            return (int)mh$.invokeExact(ptr, inputHandle, actionSetHandle, analogActionHandle, originsOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInput_GetGlyphPNGForActionOrigin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_INT,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamInput_GetGlyphPNGForActionOrigin"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamInput_GetGlyphPNGForActionOrigin(ISteamInput ptr, EInputActionOrigin eOrigin, ESteamInputGlyphSize eSize, uint32 unFlags)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInput_GetGlyphPNGForActionOrigin$descriptor() {
        return SteamAPI_ISteamInput_GetGlyphPNGForActionOrigin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamInput_GetGlyphPNGForActionOrigin(ISteamInput ptr, EInputActionOrigin eOrigin, ESteamInputGlyphSize eSize, uint32 unFlags)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInput_GetGlyphPNGForActionOrigin$handle() {
        return SteamAPI_ISteamInput_GetGlyphPNGForActionOrigin.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamInput_GetGlyphPNGForActionOrigin(ISteamInput ptr, EInputActionOrigin eOrigin, ESteamInputGlyphSize eSize, uint32 unFlags)
     * }
     */
    public static MemorySegment SteamAPI_ISteamInput_GetGlyphPNGForActionOrigin(MemorySegment ptr, int eOrigin, int eSize, int unFlags) {
        var mh$ = SteamAPI_ISteamInput_GetGlyphPNGForActionOrigin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInput_GetGlyphPNGForActionOrigin", ptr, eOrigin, eSize, unFlags);
            }
            return (MemorySegment)mh$.invokeExact(ptr, eOrigin, eSize, unFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInput_GetGlyphSVGForActionOrigin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamInput_GetGlyphSVGForActionOrigin"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamInput_GetGlyphSVGForActionOrigin(ISteamInput ptr, EInputActionOrigin eOrigin, uint32 unFlags)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInput_GetGlyphSVGForActionOrigin$descriptor() {
        return SteamAPI_ISteamInput_GetGlyphSVGForActionOrigin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamInput_GetGlyphSVGForActionOrigin(ISteamInput ptr, EInputActionOrigin eOrigin, uint32 unFlags)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInput_GetGlyphSVGForActionOrigin$handle() {
        return SteamAPI_ISteamInput_GetGlyphSVGForActionOrigin.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamInput_GetGlyphSVGForActionOrigin(ISteamInput ptr, EInputActionOrigin eOrigin, uint32 unFlags)
     * }
     */
    public static MemorySegment SteamAPI_ISteamInput_GetGlyphSVGForActionOrigin(MemorySegment ptr, int eOrigin, int unFlags) {
        var mh$ = SteamAPI_ISteamInput_GetGlyphSVGForActionOrigin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInput_GetGlyphSVGForActionOrigin", ptr, eOrigin, unFlags);
            }
            return (MemorySegment)mh$.invokeExact(ptr, eOrigin, unFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInput_GetGlyphForActionOrigin_Legacy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamInput_GetGlyphForActionOrigin_Legacy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamInput_GetGlyphForActionOrigin_Legacy(ISteamInput ptr, EInputActionOrigin eOrigin)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInput_GetGlyphForActionOrigin_Legacy$descriptor() {
        return SteamAPI_ISteamInput_GetGlyphForActionOrigin_Legacy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamInput_GetGlyphForActionOrigin_Legacy(ISteamInput ptr, EInputActionOrigin eOrigin)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInput_GetGlyphForActionOrigin_Legacy$handle() {
        return SteamAPI_ISteamInput_GetGlyphForActionOrigin_Legacy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamInput_GetGlyphForActionOrigin_Legacy(ISteamInput ptr, EInputActionOrigin eOrigin)
     * }
     */
    public static MemorySegment SteamAPI_ISteamInput_GetGlyphForActionOrigin_Legacy(MemorySegment ptr, int eOrigin) {
        var mh$ = SteamAPI_ISteamInput_GetGlyphForActionOrigin_Legacy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInput_GetGlyphForActionOrigin_Legacy", ptr, eOrigin);
            }
            return (MemorySegment)mh$.invokeExact(ptr, eOrigin);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInput_GetStringForActionOrigin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamInput_GetStringForActionOrigin"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamInput_GetStringForActionOrigin(ISteamInput ptr, EInputActionOrigin eOrigin)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInput_GetStringForActionOrigin$descriptor() {
        return SteamAPI_ISteamInput_GetStringForActionOrigin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamInput_GetStringForActionOrigin(ISteamInput ptr, EInputActionOrigin eOrigin)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInput_GetStringForActionOrigin$handle() {
        return SteamAPI_ISteamInput_GetStringForActionOrigin.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamInput_GetStringForActionOrigin(ISteamInput ptr, EInputActionOrigin eOrigin)
     * }
     */
    public static MemorySegment SteamAPI_ISteamInput_GetStringForActionOrigin(MemorySegment ptr, int eOrigin) {
        var mh$ = SteamAPI_ISteamInput_GetStringForActionOrigin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInput_GetStringForActionOrigin", ptr, eOrigin);
            }
            return (MemorySegment)mh$.invokeExact(ptr, eOrigin);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInput_GetStringForAnalogActionName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamInput_GetStringForAnalogActionName"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamInput_GetStringForAnalogActionName(ISteamInput ptr, InputAnalogActionHandle_t eActionHandle)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInput_GetStringForAnalogActionName$descriptor() {
        return SteamAPI_ISteamInput_GetStringForAnalogActionName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamInput_GetStringForAnalogActionName(ISteamInput ptr, InputAnalogActionHandle_t eActionHandle)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInput_GetStringForAnalogActionName$handle() {
        return SteamAPI_ISteamInput_GetStringForAnalogActionName.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamInput_GetStringForAnalogActionName(ISteamInput ptr, InputAnalogActionHandle_t eActionHandle)
     * }
     */
    public static MemorySegment SteamAPI_ISteamInput_GetStringForAnalogActionName(MemorySegment ptr, long eActionHandle) {
        var mh$ = SteamAPI_ISteamInput_GetStringForAnalogActionName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInput_GetStringForAnalogActionName", ptr, eActionHandle);
            }
            return (MemorySegment)mh$.invokeExact(ptr, eActionHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInput_StopAnalogActionMomentum {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamInput_StopAnalogActionMomentum"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamInput_StopAnalogActionMomentum(ISteamInput ptr, InputHandle_t inputHandle, InputAnalogActionHandle_t eAction)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInput_StopAnalogActionMomentum$descriptor() {
        return SteamAPI_ISteamInput_StopAnalogActionMomentum.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamInput_StopAnalogActionMomentum(ISteamInput ptr, InputHandle_t inputHandle, InputAnalogActionHandle_t eAction)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInput_StopAnalogActionMomentum$handle() {
        return SteamAPI_ISteamInput_StopAnalogActionMomentum.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamInput_StopAnalogActionMomentum(ISteamInput ptr, InputHandle_t inputHandle, InputAnalogActionHandle_t eAction)
     * }
     */
    public static void SteamAPI_ISteamInput_StopAnalogActionMomentum(MemorySegment ptr, long inputHandle, long eAction) {
        var mh$ = SteamAPI_ISteamInput_StopAnalogActionMomentum.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInput_StopAnalogActionMomentum", ptr, inputHandle, eAction);
            }
            mh$.invokeExact(ptr, inputHandle, eAction);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInput_GetMotionData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            InputMotionData_t.layout(),
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamInput_GetMotionData"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * InputMotionData_t SteamAPI_ISteamInput_GetMotionData(ISteamInput ptr, InputHandle_t inputHandle)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInput_GetMotionData$descriptor() {
        return SteamAPI_ISteamInput_GetMotionData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * InputMotionData_t SteamAPI_ISteamInput_GetMotionData(ISteamInput ptr, InputHandle_t inputHandle)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInput_GetMotionData$handle() {
        return SteamAPI_ISteamInput_GetMotionData.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * InputMotionData_t SteamAPI_ISteamInput_GetMotionData(ISteamInput ptr, InputHandle_t inputHandle)
     * }
     */
    public static MemorySegment SteamAPI_ISteamInput_GetMotionData(SegmentAllocator allocator, MemorySegment ptr, long inputHandle) {
        var mh$ = SteamAPI_ISteamInput_GetMotionData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInput_GetMotionData", allocator, ptr, inputHandle);
            }
            return (MemorySegment)mh$.invokeExact(allocator, ptr, inputHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInput_TriggerVibration {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_SHORT,
            SteamFlat.C_SHORT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamInput_TriggerVibration"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamInput_TriggerVibration(ISteamInput ptr, InputHandle_t inputHandle, unsigned short usLeftSpeed, unsigned short usRightSpeed)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInput_TriggerVibration$descriptor() {
        return SteamAPI_ISteamInput_TriggerVibration.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamInput_TriggerVibration(ISteamInput ptr, InputHandle_t inputHandle, unsigned short usLeftSpeed, unsigned short usRightSpeed)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInput_TriggerVibration$handle() {
        return SteamAPI_ISteamInput_TriggerVibration.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamInput_TriggerVibration(ISteamInput ptr, InputHandle_t inputHandle, unsigned short usLeftSpeed, unsigned short usRightSpeed)
     * }
     */
    public static void SteamAPI_ISteamInput_TriggerVibration(MemorySegment ptr, long inputHandle, short usLeftSpeed, short usRightSpeed) {
        var mh$ = SteamAPI_ISteamInput_TriggerVibration.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInput_TriggerVibration", ptr, inputHandle, usLeftSpeed, usRightSpeed);
            }
            mh$.invokeExact(ptr, inputHandle, usLeftSpeed, usRightSpeed);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInput_TriggerVibrationExtended {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_SHORT,
            SteamFlat.C_SHORT,
            SteamFlat.C_SHORT,
            SteamFlat.C_SHORT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamInput_TriggerVibrationExtended"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamInput_TriggerVibrationExtended(ISteamInput ptr, InputHandle_t inputHandle, unsigned short usLeftSpeed, unsigned short usRightSpeed, unsigned short usLeftTriggerSpeed, unsigned short usRightTriggerSpeed)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInput_TriggerVibrationExtended$descriptor() {
        return SteamAPI_ISteamInput_TriggerVibrationExtended.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamInput_TriggerVibrationExtended(ISteamInput ptr, InputHandle_t inputHandle, unsigned short usLeftSpeed, unsigned short usRightSpeed, unsigned short usLeftTriggerSpeed, unsigned short usRightTriggerSpeed)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInput_TriggerVibrationExtended$handle() {
        return SteamAPI_ISteamInput_TriggerVibrationExtended.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamInput_TriggerVibrationExtended(ISteamInput ptr, InputHandle_t inputHandle, unsigned short usLeftSpeed, unsigned short usRightSpeed, unsigned short usLeftTriggerSpeed, unsigned short usRightTriggerSpeed)
     * }
     */
    public static void SteamAPI_ISteamInput_TriggerVibrationExtended(MemorySegment ptr, long inputHandle, short usLeftSpeed, short usRightSpeed, short usLeftTriggerSpeed, short usRightTriggerSpeed) {
        var mh$ = SteamAPI_ISteamInput_TriggerVibrationExtended.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInput_TriggerVibrationExtended", ptr, inputHandle, usLeftSpeed, usRightSpeed, usLeftTriggerSpeed, usRightTriggerSpeed);
            }
            mh$.invokeExact(ptr, inputHandle, usLeftSpeed, usRightSpeed, usLeftTriggerSpeed, usRightTriggerSpeed);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInput_TriggerSimpleHapticEvent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_INT,
            SteamFlat.C_CHAR,
            SteamFlat.C_CHAR,
            SteamFlat.C_CHAR,
            SteamFlat.C_CHAR
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamInput_TriggerSimpleHapticEvent"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamInput_TriggerSimpleHapticEvent(ISteamInput ptr, InputHandle_t inputHandle, EControllerHapticLocation eHapticLocation, uint8 nIntensity, char nGainDB, uint8 nOtherIntensity, char nOtherGainDB)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInput_TriggerSimpleHapticEvent$descriptor() {
        return SteamAPI_ISteamInput_TriggerSimpleHapticEvent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamInput_TriggerSimpleHapticEvent(ISteamInput ptr, InputHandle_t inputHandle, EControllerHapticLocation eHapticLocation, uint8 nIntensity, char nGainDB, uint8 nOtherIntensity, char nOtherGainDB)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInput_TriggerSimpleHapticEvent$handle() {
        return SteamAPI_ISteamInput_TriggerSimpleHapticEvent.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamInput_TriggerSimpleHapticEvent(ISteamInput ptr, InputHandle_t inputHandle, EControllerHapticLocation eHapticLocation, uint8 nIntensity, char nGainDB, uint8 nOtherIntensity, char nOtherGainDB)
     * }
     */
    public static void SteamAPI_ISteamInput_TriggerSimpleHapticEvent(MemorySegment ptr, long inputHandle, int eHapticLocation, byte nIntensity, byte nGainDB, byte nOtherIntensity, byte nOtherGainDB) {
        var mh$ = SteamAPI_ISteamInput_TriggerSimpleHapticEvent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInput_TriggerSimpleHapticEvent", ptr, inputHandle, eHapticLocation, nIntensity, nGainDB, nOtherIntensity, nOtherGainDB);
            }
            mh$.invokeExact(ptr, inputHandle, eHapticLocation, nIntensity, nGainDB, nOtherIntensity, nOtherGainDB);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInput_SetLEDColor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_CHAR,
            SteamFlat.C_CHAR,
            SteamFlat.C_CHAR,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamInput_SetLEDColor"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamInput_SetLEDColor(ISteamInput ptr, InputHandle_t inputHandle, uint8 nColorR, uint8 nColorG, uint8 nColorB, unsigned int nFlags)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInput_SetLEDColor$descriptor() {
        return SteamAPI_ISteamInput_SetLEDColor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamInput_SetLEDColor(ISteamInput ptr, InputHandle_t inputHandle, uint8 nColorR, uint8 nColorG, uint8 nColorB, unsigned int nFlags)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInput_SetLEDColor$handle() {
        return SteamAPI_ISteamInput_SetLEDColor.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamInput_SetLEDColor(ISteamInput ptr, InputHandle_t inputHandle, uint8 nColorR, uint8 nColorG, uint8 nColorB, unsigned int nFlags)
     * }
     */
    public static void SteamAPI_ISteamInput_SetLEDColor(MemorySegment ptr, long inputHandle, byte nColorR, byte nColorG, byte nColorB, int nFlags) {
        var mh$ = SteamAPI_ISteamInput_SetLEDColor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInput_SetLEDColor", ptr, inputHandle, nColorR, nColorG, nColorB, nFlags);
            }
            mh$.invokeExact(ptr, inputHandle, nColorR, nColorG, nColorB, nFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInput_Legacy_TriggerHapticPulse {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_INT,
            SteamFlat.C_SHORT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamInput_Legacy_TriggerHapticPulse"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamInput_Legacy_TriggerHapticPulse(ISteamInput ptr, InputHandle_t inputHandle, ESteamControllerPad eTargetPad, unsigned short usDurationMicroSec)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInput_Legacy_TriggerHapticPulse$descriptor() {
        return SteamAPI_ISteamInput_Legacy_TriggerHapticPulse.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamInput_Legacy_TriggerHapticPulse(ISteamInput ptr, InputHandle_t inputHandle, ESteamControllerPad eTargetPad, unsigned short usDurationMicroSec)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInput_Legacy_TriggerHapticPulse$handle() {
        return SteamAPI_ISteamInput_Legacy_TriggerHapticPulse.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamInput_Legacy_TriggerHapticPulse(ISteamInput ptr, InputHandle_t inputHandle, ESteamControllerPad eTargetPad, unsigned short usDurationMicroSec)
     * }
     */
    public static void SteamAPI_ISteamInput_Legacy_TriggerHapticPulse(MemorySegment ptr, long inputHandle, int eTargetPad, short usDurationMicroSec) {
        var mh$ = SteamAPI_ISteamInput_Legacy_TriggerHapticPulse.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInput_Legacy_TriggerHapticPulse", ptr, inputHandle, eTargetPad, usDurationMicroSec);
            }
            mh$.invokeExact(ptr, inputHandle, eTargetPad, usDurationMicroSec);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInput_Legacy_TriggerRepeatedHapticPulse {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_INT,
            SteamFlat.C_SHORT,
            SteamFlat.C_SHORT,
            SteamFlat.C_SHORT,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamInput_Legacy_TriggerRepeatedHapticPulse"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamInput_Legacy_TriggerRepeatedHapticPulse(ISteamInput ptr, InputHandle_t inputHandle, ESteamControllerPad eTargetPad, unsigned short usDurationMicroSec, unsigned short usOffMicroSec, unsigned short unRepeat, unsigned int nFlags)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInput_Legacy_TriggerRepeatedHapticPulse$descriptor() {
        return SteamAPI_ISteamInput_Legacy_TriggerRepeatedHapticPulse.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamInput_Legacy_TriggerRepeatedHapticPulse(ISteamInput ptr, InputHandle_t inputHandle, ESteamControllerPad eTargetPad, unsigned short usDurationMicroSec, unsigned short usOffMicroSec, unsigned short unRepeat, unsigned int nFlags)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInput_Legacy_TriggerRepeatedHapticPulse$handle() {
        return SteamAPI_ISteamInput_Legacy_TriggerRepeatedHapticPulse.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamInput_Legacy_TriggerRepeatedHapticPulse(ISteamInput ptr, InputHandle_t inputHandle, ESteamControllerPad eTargetPad, unsigned short usDurationMicroSec, unsigned short usOffMicroSec, unsigned short unRepeat, unsigned int nFlags)
     * }
     */
    public static void SteamAPI_ISteamInput_Legacy_TriggerRepeatedHapticPulse(MemorySegment ptr, long inputHandle, int eTargetPad, short usDurationMicroSec, short usOffMicroSec, short unRepeat, int nFlags) {
        var mh$ = SteamAPI_ISteamInput_Legacy_TriggerRepeatedHapticPulse.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInput_Legacy_TriggerRepeatedHapticPulse", ptr, inputHandle, eTargetPad, usDurationMicroSec, usOffMicroSec, unRepeat, nFlags);
            }
            mh$.invokeExact(ptr, inputHandle, eTargetPad, usDurationMicroSec, usOffMicroSec, unRepeat, nFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInput_ShowBindingPanel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamInput_ShowBindingPanel"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInput_ShowBindingPanel(ISteamInput ptr, InputHandle_t inputHandle)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInput_ShowBindingPanel$descriptor() {
        return SteamAPI_ISteamInput_ShowBindingPanel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInput_ShowBindingPanel(ISteamInput ptr, InputHandle_t inputHandle)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInput_ShowBindingPanel$handle() {
        return SteamAPI_ISteamInput_ShowBindingPanel.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInput_ShowBindingPanel(ISteamInput ptr, InputHandle_t inputHandle)
     * }
     */
    public static boolean SteamAPI_ISteamInput_ShowBindingPanel(MemorySegment ptr, long inputHandle) {
        var mh$ = SteamAPI_ISteamInput_ShowBindingPanel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInput_ShowBindingPanel", ptr, inputHandle);
            }
            return (boolean)mh$.invokeExact(ptr, inputHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInput_GetInputTypeForHandle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamInput_GetInputTypeForHandle"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ESteamInputType SteamAPI_ISteamInput_GetInputTypeForHandle(ISteamInput ptr, InputHandle_t inputHandle)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInput_GetInputTypeForHandle$descriptor() {
        return SteamAPI_ISteamInput_GetInputTypeForHandle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ESteamInputType SteamAPI_ISteamInput_GetInputTypeForHandle(ISteamInput ptr, InputHandle_t inputHandle)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInput_GetInputTypeForHandle$handle() {
        return SteamAPI_ISteamInput_GetInputTypeForHandle.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ESteamInputType SteamAPI_ISteamInput_GetInputTypeForHandle(ISteamInput ptr, InputHandle_t inputHandle)
     * }
     */
    public static int SteamAPI_ISteamInput_GetInputTypeForHandle(MemorySegment ptr, long inputHandle) {
        var mh$ = SteamAPI_ISteamInput_GetInputTypeForHandle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInput_GetInputTypeForHandle", ptr, inputHandle);
            }
            return (int)mh$.invokeExact(ptr, inputHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInput_GetControllerForGamepadIndex {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamInput_GetControllerForGamepadIndex"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * InputHandle_t SteamAPI_ISteamInput_GetControllerForGamepadIndex(ISteamInput ptr, int nIndex)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInput_GetControllerForGamepadIndex$descriptor() {
        return SteamAPI_ISteamInput_GetControllerForGamepadIndex.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * InputHandle_t SteamAPI_ISteamInput_GetControllerForGamepadIndex(ISteamInput ptr, int nIndex)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInput_GetControllerForGamepadIndex$handle() {
        return SteamAPI_ISteamInput_GetControllerForGamepadIndex.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * InputHandle_t SteamAPI_ISteamInput_GetControllerForGamepadIndex(ISteamInput ptr, int nIndex)
     * }
     */
    public static long SteamAPI_ISteamInput_GetControllerForGamepadIndex(MemorySegment ptr, int nIndex) {
        var mh$ = SteamAPI_ISteamInput_GetControllerForGamepadIndex.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInput_GetControllerForGamepadIndex", ptr, nIndex);
            }
            return (long)mh$.invokeExact(ptr, nIndex);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInput_GetGamepadIndexForController {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamInput_GetGamepadIndexForController"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamInput_GetGamepadIndexForController(ISteamInput ptr, InputHandle_t ulinputHandle)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInput_GetGamepadIndexForController$descriptor() {
        return SteamAPI_ISteamInput_GetGamepadIndexForController.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamInput_GetGamepadIndexForController(ISteamInput ptr, InputHandle_t ulinputHandle)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInput_GetGamepadIndexForController$handle() {
        return SteamAPI_ISteamInput_GetGamepadIndexForController.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int SteamAPI_ISteamInput_GetGamepadIndexForController(ISteamInput ptr, InputHandle_t ulinputHandle)
     * }
     */
    public static int SteamAPI_ISteamInput_GetGamepadIndexForController(MemorySegment ptr, long ulinputHandle) {
        var mh$ = SteamAPI_ISteamInput_GetGamepadIndexForController.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInput_GetGamepadIndexForController", ptr, ulinputHandle);
            }
            return (int)mh$.invokeExact(ptr, ulinputHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInput_GetStringForXboxOrigin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamInput_GetStringForXboxOrigin"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamInput_GetStringForXboxOrigin(ISteamInput ptr, EXboxOrigin eOrigin)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInput_GetStringForXboxOrigin$descriptor() {
        return SteamAPI_ISteamInput_GetStringForXboxOrigin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamInput_GetStringForXboxOrigin(ISteamInput ptr, EXboxOrigin eOrigin)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInput_GetStringForXboxOrigin$handle() {
        return SteamAPI_ISteamInput_GetStringForXboxOrigin.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamInput_GetStringForXboxOrigin(ISteamInput ptr, EXboxOrigin eOrigin)
     * }
     */
    public static MemorySegment SteamAPI_ISteamInput_GetStringForXboxOrigin(MemorySegment ptr, int eOrigin) {
        var mh$ = SteamAPI_ISteamInput_GetStringForXboxOrigin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInput_GetStringForXboxOrigin", ptr, eOrigin);
            }
            return (MemorySegment)mh$.invokeExact(ptr, eOrigin);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInput_GetGlyphForXboxOrigin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamInput_GetGlyphForXboxOrigin"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamInput_GetGlyphForXboxOrigin(ISteamInput ptr, EXboxOrigin eOrigin)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInput_GetGlyphForXboxOrigin$descriptor() {
        return SteamAPI_ISteamInput_GetGlyphForXboxOrigin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamInput_GetGlyphForXboxOrigin(ISteamInput ptr, EXboxOrigin eOrigin)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInput_GetGlyphForXboxOrigin$handle() {
        return SteamAPI_ISteamInput_GetGlyphForXboxOrigin.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamInput_GetGlyphForXboxOrigin(ISteamInput ptr, EXboxOrigin eOrigin)
     * }
     */
    public static MemorySegment SteamAPI_ISteamInput_GetGlyphForXboxOrigin(MemorySegment ptr, int eOrigin) {
        var mh$ = SteamAPI_ISteamInput_GetGlyphForXboxOrigin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInput_GetGlyphForXboxOrigin", ptr, eOrigin);
            }
            return (MemorySegment)mh$.invokeExact(ptr, eOrigin);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInput_GetActionOriginFromXboxOrigin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamInput_GetActionOriginFromXboxOrigin"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * EInputActionOrigin SteamAPI_ISteamInput_GetActionOriginFromXboxOrigin(ISteamInput ptr, InputHandle_t inputHandle, EXboxOrigin eOrigin)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInput_GetActionOriginFromXboxOrigin$descriptor() {
        return SteamAPI_ISteamInput_GetActionOriginFromXboxOrigin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * EInputActionOrigin SteamAPI_ISteamInput_GetActionOriginFromXboxOrigin(ISteamInput ptr, InputHandle_t inputHandle, EXboxOrigin eOrigin)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInput_GetActionOriginFromXboxOrigin$handle() {
        return SteamAPI_ISteamInput_GetActionOriginFromXboxOrigin.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * EInputActionOrigin SteamAPI_ISteamInput_GetActionOriginFromXboxOrigin(ISteamInput ptr, InputHandle_t inputHandle, EXboxOrigin eOrigin)
     * }
     */
    public static int SteamAPI_ISteamInput_GetActionOriginFromXboxOrigin(MemorySegment ptr, long inputHandle, int eOrigin) {
        var mh$ = SteamAPI_ISteamInput_GetActionOriginFromXboxOrigin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInput_GetActionOriginFromXboxOrigin", ptr, inputHandle, eOrigin);
            }
            return (int)mh$.invokeExact(ptr, inputHandle, eOrigin);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInput_TranslateActionOrigin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamInput_TranslateActionOrigin"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * EInputActionOrigin SteamAPI_ISteamInput_TranslateActionOrigin(ISteamInput ptr, ESteamInputType eDestinationInputType, EInputActionOrigin eSourceOrigin)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInput_TranslateActionOrigin$descriptor() {
        return SteamAPI_ISteamInput_TranslateActionOrigin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * EInputActionOrigin SteamAPI_ISteamInput_TranslateActionOrigin(ISteamInput ptr, ESteamInputType eDestinationInputType, EInputActionOrigin eSourceOrigin)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInput_TranslateActionOrigin$handle() {
        return SteamAPI_ISteamInput_TranslateActionOrigin.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * EInputActionOrigin SteamAPI_ISteamInput_TranslateActionOrigin(ISteamInput ptr, ESteamInputType eDestinationInputType, EInputActionOrigin eSourceOrigin)
     * }
     */
    public static int SteamAPI_ISteamInput_TranslateActionOrigin(MemorySegment ptr, int eDestinationInputType, int eSourceOrigin) {
        var mh$ = SteamAPI_ISteamInput_TranslateActionOrigin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInput_TranslateActionOrigin", ptr, eDestinationInputType, eSourceOrigin);
            }
            return (int)mh$.invokeExact(ptr, eDestinationInputType, eSourceOrigin);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInput_GetDeviceBindingRevision {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamInput_GetDeviceBindingRevision"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInput_GetDeviceBindingRevision(ISteamInput ptr, InputHandle_t inputHandle, int *pMajor, int *pMinor)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInput_GetDeviceBindingRevision$descriptor() {
        return SteamAPI_ISteamInput_GetDeviceBindingRevision.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInput_GetDeviceBindingRevision(ISteamInput ptr, InputHandle_t inputHandle, int *pMajor, int *pMinor)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInput_GetDeviceBindingRevision$handle() {
        return SteamAPI_ISteamInput_GetDeviceBindingRevision.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInput_GetDeviceBindingRevision(ISteamInput ptr, InputHandle_t inputHandle, int *pMajor, int *pMinor)
     * }
     */
    public static boolean SteamAPI_ISteamInput_GetDeviceBindingRevision(MemorySegment ptr, long inputHandle, MemorySegment pMajor, MemorySegment pMinor) {
        var mh$ = SteamAPI_ISteamInput_GetDeviceBindingRevision.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInput_GetDeviceBindingRevision", ptr, inputHandle, pMajor, pMinor);
            }
            return (boolean)mh$.invokeExact(ptr, inputHandle, pMajor, pMinor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInput_GetRemotePlaySessionID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamInput_GetRemotePlaySessionID"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamInput_GetRemotePlaySessionID(ISteamInput ptr, InputHandle_t inputHandle)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInput_GetRemotePlaySessionID$descriptor() {
        return SteamAPI_ISteamInput_GetRemotePlaySessionID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamInput_GetRemotePlaySessionID(ISteamInput ptr, InputHandle_t inputHandle)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInput_GetRemotePlaySessionID$handle() {
        return SteamAPI_ISteamInput_GetRemotePlaySessionID.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamInput_GetRemotePlaySessionID(ISteamInput ptr, InputHandle_t inputHandle)
     * }
     */
    public static int SteamAPI_ISteamInput_GetRemotePlaySessionID(MemorySegment ptr, long inputHandle) {
        var mh$ = SteamAPI_ISteamInput_GetRemotePlaySessionID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInput_GetRemotePlaySessionID", ptr, inputHandle);
            }
            return (int)mh$.invokeExact(ptr, inputHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInput_GetSessionInputConfigurationSettings {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_SHORT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamInput_GetSessionInputConfigurationSettings"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint16 SteamAPI_ISteamInput_GetSessionInputConfigurationSettings(ISteamInput ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInput_GetSessionInputConfigurationSettings$descriptor() {
        return SteamAPI_ISteamInput_GetSessionInputConfigurationSettings.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint16 SteamAPI_ISteamInput_GetSessionInputConfigurationSettings(ISteamInput ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInput_GetSessionInputConfigurationSettings$handle() {
        return SteamAPI_ISteamInput_GetSessionInputConfigurationSettings.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * uint16 SteamAPI_ISteamInput_GetSessionInputConfigurationSettings(ISteamInput ptr)
     * }
     */
    public static short SteamAPI_ISteamInput_GetSessionInputConfigurationSettings(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamInput_GetSessionInputConfigurationSettings.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInput_GetSessionInputConfigurationSettings", ptr);
            }
            return (short)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_SteamInput_v006 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_SteamInput_v006"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ISteamInput SteamAPI_SteamInput_v006()
     * }
     */
    public static FunctionDescriptor SteamAPI_SteamInput_v006$descriptor() {
        return SteamAPI_SteamInput_v006.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ISteamInput SteamAPI_SteamInput_v006()
     * }
     */
    public static MethodHandle SteamAPI_SteamInput_v006$handle() {
        return SteamAPI_SteamInput_v006.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ISteamInput SteamAPI_SteamInput_v006()
     * }
     */
    public static MemorySegment SteamAPI_SteamInput_v006() {
        var mh$ = SteamAPI_SteamInput_v006.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_SteamInput_v006");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamController_Init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamController_Init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamController_Init(ISteamController ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamController_Init$descriptor() {
        return SteamAPI_ISteamController_Init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamController_Init(ISteamController ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamController_Init$handle() {
        return SteamAPI_ISteamController_Init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamController_Init(ISteamController ptr)
     * }
     */
    public static boolean SteamAPI_ISteamController_Init(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamController_Init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamController_Init", ptr);
            }
            return (boolean)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamController_Shutdown {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamController_Shutdown"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamController_Shutdown(ISteamController ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamController_Shutdown$descriptor() {
        return SteamAPI_ISteamController_Shutdown.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamController_Shutdown(ISteamController ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamController_Shutdown$handle() {
        return SteamAPI_ISteamController_Shutdown.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamController_Shutdown(ISteamController ptr)
     * }
     */
    public static boolean SteamAPI_ISteamController_Shutdown(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamController_Shutdown.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamController_Shutdown", ptr);
            }
            return (boolean)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamController_RunFrame {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamController_RunFrame"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamController_RunFrame(ISteamController ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamController_RunFrame$descriptor() {
        return SteamAPI_ISteamController_RunFrame.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamController_RunFrame(ISteamController ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamController_RunFrame$handle() {
        return SteamAPI_ISteamController_RunFrame.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamController_RunFrame(ISteamController ptr)
     * }
     */
    public static void SteamAPI_ISteamController_RunFrame(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamController_RunFrame.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamController_RunFrame", ptr);
            }
            mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamController_GetConnectedControllers {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamController_GetConnectedControllers"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamController_GetConnectedControllers(ISteamController ptr, ControllerHandle_t *handlesOut)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamController_GetConnectedControllers$descriptor() {
        return SteamAPI_ISteamController_GetConnectedControllers.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamController_GetConnectedControllers(ISteamController ptr, ControllerHandle_t *handlesOut)
     * }
     */
    public static MethodHandle SteamAPI_ISteamController_GetConnectedControllers$handle() {
        return SteamAPI_ISteamController_GetConnectedControllers.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int SteamAPI_ISteamController_GetConnectedControllers(ISteamController ptr, ControllerHandle_t *handlesOut)
     * }
     */
    public static int SteamAPI_ISteamController_GetConnectedControllers(MemorySegment ptr, MemorySegment handlesOut) {
        var mh$ = SteamAPI_ISteamController_GetConnectedControllers.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamController_GetConnectedControllers", ptr, handlesOut);
            }
            return (int)mh$.invokeExact(ptr, handlesOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamController_GetActionSetHandle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamController_GetActionSetHandle"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ControllerActionSetHandle_t SteamAPI_ISteamController_GetActionSetHandle(ISteamController ptr, const char *pszActionSetName)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamController_GetActionSetHandle$descriptor() {
        return SteamAPI_ISteamController_GetActionSetHandle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ControllerActionSetHandle_t SteamAPI_ISteamController_GetActionSetHandle(ISteamController ptr, const char *pszActionSetName)
     * }
     */
    public static MethodHandle SteamAPI_ISteamController_GetActionSetHandle$handle() {
        return SteamAPI_ISteamController_GetActionSetHandle.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ControllerActionSetHandle_t SteamAPI_ISteamController_GetActionSetHandle(ISteamController ptr, const char *pszActionSetName)
     * }
     */
    public static long SteamAPI_ISteamController_GetActionSetHandle(MemorySegment ptr, MemorySegment pszActionSetName) {
        var mh$ = SteamAPI_ISteamController_GetActionSetHandle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamController_GetActionSetHandle", ptr, pszActionSetName);
            }
            return (long)mh$.invokeExact(ptr, pszActionSetName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamController_ActivateActionSet {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamController_ActivateActionSet"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamController_ActivateActionSet(ISteamController ptr, ControllerHandle_t controllerHandle, ControllerActionSetHandle_t actionSetHandle)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamController_ActivateActionSet$descriptor() {
        return SteamAPI_ISteamController_ActivateActionSet.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamController_ActivateActionSet(ISteamController ptr, ControllerHandle_t controllerHandle, ControllerActionSetHandle_t actionSetHandle)
     * }
     */
    public static MethodHandle SteamAPI_ISteamController_ActivateActionSet$handle() {
        return SteamAPI_ISteamController_ActivateActionSet.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamController_ActivateActionSet(ISteamController ptr, ControllerHandle_t controllerHandle, ControllerActionSetHandle_t actionSetHandle)
     * }
     */
    public static void SteamAPI_ISteamController_ActivateActionSet(MemorySegment ptr, long controllerHandle, long actionSetHandle) {
        var mh$ = SteamAPI_ISteamController_ActivateActionSet.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamController_ActivateActionSet", ptr, controllerHandle, actionSetHandle);
            }
            mh$.invokeExact(ptr, controllerHandle, actionSetHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamController_GetCurrentActionSet {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamController_GetCurrentActionSet"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ControllerActionSetHandle_t SteamAPI_ISteamController_GetCurrentActionSet(ISteamController ptr, ControllerHandle_t controllerHandle)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamController_GetCurrentActionSet$descriptor() {
        return SteamAPI_ISteamController_GetCurrentActionSet.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ControllerActionSetHandle_t SteamAPI_ISteamController_GetCurrentActionSet(ISteamController ptr, ControllerHandle_t controllerHandle)
     * }
     */
    public static MethodHandle SteamAPI_ISteamController_GetCurrentActionSet$handle() {
        return SteamAPI_ISteamController_GetCurrentActionSet.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ControllerActionSetHandle_t SteamAPI_ISteamController_GetCurrentActionSet(ISteamController ptr, ControllerHandle_t controllerHandle)
     * }
     */
    public static long SteamAPI_ISteamController_GetCurrentActionSet(MemorySegment ptr, long controllerHandle) {
        var mh$ = SteamAPI_ISteamController_GetCurrentActionSet.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamController_GetCurrentActionSet", ptr, controllerHandle);
            }
            return (long)mh$.invokeExact(ptr, controllerHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamController_ActivateActionSetLayer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamController_ActivateActionSetLayer"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamController_ActivateActionSetLayer(ISteamController ptr, ControllerHandle_t controllerHandle, ControllerActionSetHandle_t actionSetLayerHandle)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamController_ActivateActionSetLayer$descriptor() {
        return SteamAPI_ISteamController_ActivateActionSetLayer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamController_ActivateActionSetLayer(ISteamController ptr, ControllerHandle_t controllerHandle, ControllerActionSetHandle_t actionSetLayerHandle)
     * }
     */
    public static MethodHandle SteamAPI_ISteamController_ActivateActionSetLayer$handle() {
        return SteamAPI_ISteamController_ActivateActionSetLayer.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamController_ActivateActionSetLayer(ISteamController ptr, ControllerHandle_t controllerHandle, ControllerActionSetHandle_t actionSetLayerHandle)
     * }
     */
    public static void SteamAPI_ISteamController_ActivateActionSetLayer(MemorySegment ptr, long controllerHandle, long actionSetLayerHandle) {
        var mh$ = SteamAPI_ISteamController_ActivateActionSetLayer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamController_ActivateActionSetLayer", ptr, controllerHandle, actionSetLayerHandle);
            }
            mh$.invokeExact(ptr, controllerHandle, actionSetLayerHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamController_DeactivateActionSetLayer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamController_DeactivateActionSetLayer"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamController_DeactivateActionSetLayer(ISteamController ptr, ControllerHandle_t controllerHandle, ControllerActionSetHandle_t actionSetLayerHandle)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamController_DeactivateActionSetLayer$descriptor() {
        return SteamAPI_ISteamController_DeactivateActionSetLayer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamController_DeactivateActionSetLayer(ISteamController ptr, ControllerHandle_t controllerHandle, ControllerActionSetHandle_t actionSetLayerHandle)
     * }
     */
    public static MethodHandle SteamAPI_ISteamController_DeactivateActionSetLayer$handle() {
        return SteamAPI_ISteamController_DeactivateActionSetLayer.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamController_DeactivateActionSetLayer(ISteamController ptr, ControllerHandle_t controllerHandle, ControllerActionSetHandle_t actionSetLayerHandle)
     * }
     */
    public static void SteamAPI_ISteamController_DeactivateActionSetLayer(MemorySegment ptr, long controllerHandle, long actionSetLayerHandle) {
        var mh$ = SteamAPI_ISteamController_DeactivateActionSetLayer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamController_DeactivateActionSetLayer", ptr, controllerHandle, actionSetLayerHandle);
            }
            mh$.invokeExact(ptr, controllerHandle, actionSetLayerHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamController_DeactivateAllActionSetLayers {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamController_DeactivateAllActionSetLayers"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamController_DeactivateAllActionSetLayers(ISteamController ptr, ControllerHandle_t controllerHandle)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamController_DeactivateAllActionSetLayers$descriptor() {
        return SteamAPI_ISteamController_DeactivateAllActionSetLayers.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamController_DeactivateAllActionSetLayers(ISteamController ptr, ControllerHandle_t controllerHandle)
     * }
     */
    public static MethodHandle SteamAPI_ISteamController_DeactivateAllActionSetLayers$handle() {
        return SteamAPI_ISteamController_DeactivateAllActionSetLayers.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamController_DeactivateAllActionSetLayers(ISteamController ptr, ControllerHandle_t controllerHandle)
     * }
     */
    public static void SteamAPI_ISteamController_DeactivateAllActionSetLayers(MemorySegment ptr, long controllerHandle) {
        var mh$ = SteamAPI_ISteamController_DeactivateAllActionSetLayers.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamController_DeactivateAllActionSetLayers", ptr, controllerHandle);
            }
            mh$.invokeExact(ptr, controllerHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamController_GetActiveActionSetLayers {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamController_GetActiveActionSetLayers"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamController_GetActiveActionSetLayers(ISteamController ptr, ControllerHandle_t controllerHandle, ControllerActionSetHandle_t *handlesOut)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamController_GetActiveActionSetLayers$descriptor() {
        return SteamAPI_ISteamController_GetActiveActionSetLayers.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamController_GetActiveActionSetLayers(ISteamController ptr, ControllerHandle_t controllerHandle, ControllerActionSetHandle_t *handlesOut)
     * }
     */
    public static MethodHandle SteamAPI_ISteamController_GetActiveActionSetLayers$handle() {
        return SteamAPI_ISteamController_GetActiveActionSetLayers.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int SteamAPI_ISteamController_GetActiveActionSetLayers(ISteamController ptr, ControllerHandle_t controllerHandle, ControllerActionSetHandle_t *handlesOut)
     * }
     */
    public static int SteamAPI_ISteamController_GetActiveActionSetLayers(MemorySegment ptr, long controllerHandle, MemorySegment handlesOut) {
        var mh$ = SteamAPI_ISteamController_GetActiveActionSetLayers.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamController_GetActiveActionSetLayers", ptr, controllerHandle, handlesOut);
            }
            return (int)mh$.invokeExact(ptr, controllerHandle, handlesOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamController_GetDigitalActionHandle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamController_GetDigitalActionHandle"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ControllerDigitalActionHandle_t SteamAPI_ISteamController_GetDigitalActionHandle(ISteamController ptr, const char *pszActionName)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamController_GetDigitalActionHandle$descriptor() {
        return SteamAPI_ISteamController_GetDigitalActionHandle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ControllerDigitalActionHandle_t SteamAPI_ISteamController_GetDigitalActionHandle(ISteamController ptr, const char *pszActionName)
     * }
     */
    public static MethodHandle SteamAPI_ISteamController_GetDigitalActionHandle$handle() {
        return SteamAPI_ISteamController_GetDigitalActionHandle.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ControllerDigitalActionHandle_t SteamAPI_ISteamController_GetDigitalActionHandle(ISteamController ptr, const char *pszActionName)
     * }
     */
    public static long SteamAPI_ISteamController_GetDigitalActionHandle(MemorySegment ptr, MemorySegment pszActionName) {
        var mh$ = SteamAPI_ISteamController_GetDigitalActionHandle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamController_GetDigitalActionHandle", ptr, pszActionName);
            }
            return (long)mh$.invokeExact(ptr, pszActionName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamController_GetDigitalActionData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            InputDigitalActionData_t.layout(),
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamController_GetDigitalActionData"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * InputDigitalActionData_t SteamAPI_ISteamController_GetDigitalActionData(ISteamController ptr, ControllerHandle_t controllerHandle, ControllerDigitalActionHandle_t digitalActionHandle)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamController_GetDigitalActionData$descriptor() {
        return SteamAPI_ISteamController_GetDigitalActionData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * InputDigitalActionData_t SteamAPI_ISteamController_GetDigitalActionData(ISteamController ptr, ControllerHandle_t controllerHandle, ControllerDigitalActionHandle_t digitalActionHandle)
     * }
     */
    public static MethodHandle SteamAPI_ISteamController_GetDigitalActionData$handle() {
        return SteamAPI_ISteamController_GetDigitalActionData.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * InputDigitalActionData_t SteamAPI_ISteamController_GetDigitalActionData(ISteamController ptr, ControllerHandle_t controllerHandle, ControllerDigitalActionHandle_t digitalActionHandle)
     * }
     */
    public static MemorySegment SteamAPI_ISteamController_GetDigitalActionData(SegmentAllocator allocator, MemorySegment ptr, long controllerHandle, long digitalActionHandle) {
        var mh$ = SteamAPI_ISteamController_GetDigitalActionData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamController_GetDigitalActionData", allocator, ptr, controllerHandle, digitalActionHandle);
            }
            return (MemorySegment)mh$.invokeExact(allocator, ptr, controllerHandle, digitalActionHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamController_GetDigitalActionOrigins {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamController_GetDigitalActionOrigins"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamController_GetDigitalActionOrigins(ISteamController ptr, ControllerHandle_t controllerHandle, ControllerActionSetHandle_t actionSetHandle, ControllerDigitalActionHandle_t digitalActionHandle, EControllerActionOrigin *originsOut)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamController_GetDigitalActionOrigins$descriptor() {
        return SteamAPI_ISteamController_GetDigitalActionOrigins.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamController_GetDigitalActionOrigins(ISteamController ptr, ControllerHandle_t controllerHandle, ControllerActionSetHandle_t actionSetHandle, ControllerDigitalActionHandle_t digitalActionHandle, EControllerActionOrigin *originsOut)
     * }
     */
    public static MethodHandle SteamAPI_ISteamController_GetDigitalActionOrigins$handle() {
        return SteamAPI_ISteamController_GetDigitalActionOrigins.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int SteamAPI_ISteamController_GetDigitalActionOrigins(ISteamController ptr, ControllerHandle_t controllerHandle, ControllerActionSetHandle_t actionSetHandle, ControllerDigitalActionHandle_t digitalActionHandle, EControllerActionOrigin *originsOut)
     * }
     */
    public static int SteamAPI_ISteamController_GetDigitalActionOrigins(MemorySegment ptr, long controllerHandle, long actionSetHandle, long digitalActionHandle, MemorySegment originsOut) {
        var mh$ = SteamAPI_ISteamController_GetDigitalActionOrigins.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamController_GetDigitalActionOrigins", ptr, controllerHandle, actionSetHandle, digitalActionHandle, originsOut);
            }
            return (int)mh$.invokeExact(ptr, controllerHandle, actionSetHandle, digitalActionHandle, originsOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamController_GetAnalogActionHandle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamController_GetAnalogActionHandle"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ControllerAnalogActionHandle_t SteamAPI_ISteamController_GetAnalogActionHandle(ISteamController ptr, const char *pszActionName)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamController_GetAnalogActionHandle$descriptor() {
        return SteamAPI_ISteamController_GetAnalogActionHandle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ControllerAnalogActionHandle_t SteamAPI_ISteamController_GetAnalogActionHandle(ISteamController ptr, const char *pszActionName)
     * }
     */
    public static MethodHandle SteamAPI_ISteamController_GetAnalogActionHandle$handle() {
        return SteamAPI_ISteamController_GetAnalogActionHandle.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ControllerAnalogActionHandle_t SteamAPI_ISteamController_GetAnalogActionHandle(ISteamController ptr, const char *pszActionName)
     * }
     */
    public static long SteamAPI_ISteamController_GetAnalogActionHandle(MemorySegment ptr, MemorySegment pszActionName) {
        var mh$ = SteamAPI_ISteamController_GetAnalogActionHandle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamController_GetAnalogActionHandle", ptr, pszActionName);
            }
            return (long)mh$.invokeExact(ptr, pszActionName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamController_GetAnalogActionData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            InputAnalogActionData_t.layout(),
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamController_GetAnalogActionData"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * InputAnalogActionData_t SteamAPI_ISteamController_GetAnalogActionData(ISteamController ptr, ControllerHandle_t controllerHandle, ControllerAnalogActionHandle_t analogActionHandle)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamController_GetAnalogActionData$descriptor() {
        return SteamAPI_ISteamController_GetAnalogActionData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * InputAnalogActionData_t SteamAPI_ISteamController_GetAnalogActionData(ISteamController ptr, ControllerHandle_t controllerHandle, ControllerAnalogActionHandle_t analogActionHandle)
     * }
     */
    public static MethodHandle SteamAPI_ISteamController_GetAnalogActionData$handle() {
        return SteamAPI_ISteamController_GetAnalogActionData.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * InputAnalogActionData_t SteamAPI_ISteamController_GetAnalogActionData(ISteamController ptr, ControllerHandle_t controllerHandle, ControllerAnalogActionHandle_t analogActionHandle)
     * }
     */
    public static MemorySegment SteamAPI_ISteamController_GetAnalogActionData(SegmentAllocator allocator, MemorySegment ptr, long controllerHandle, long analogActionHandle) {
        var mh$ = SteamAPI_ISteamController_GetAnalogActionData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamController_GetAnalogActionData", allocator, ptr, controllerHandle, analogActionHandle);
            }
            return (MemorySegment)mh$.invokeExact(allocator, ptr, controllerHandle, analogActionHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamController_GetAnalogActionOrigins {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamController_GetAnalogActionOrigins"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamController_GetAnalogActionOrigins(ISteamController ptr, ControllerHandle_t controllerHandle, ControllerActionSetHandle_t actionSetHandle, ControllerAnalogActionHandle_t analogActionHandle, EControllerActionOrigin *originsOut)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamController_GetAnalogActionOrigins$descriptor() {
        return SteamAPI_ISteamController_GetAnalogActionOrigins.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamController_GetAnalogActionOrigins(ISteamController ptr, ControllerHandle_t controllerHandle, ControllerActionSetHandle_t actionSetHandle, ControllerAnalogActionHandle_t analogActionHandle, EControllerActionOrigin *originsOut)
     * }
     */
    public static MethodHandle SteamAPI_ISteamController_GetAnalogActionOrigins$handle() {
        return SteamAPI_ISteamController_GetAnalogActionOrigins.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int SteamAPI_ISteamController_GetAnalogActionOrigins(ISteamController ptr, ControllerHandle_t controllerHandle, ControllerActionSetHandle_t actionSetHandle, ControllerAnalogActionHandle_t analogActionHandle, EControllerActionOrigin *originsOut)
     * }
     */
    public static int SteamAPI_ISteamController_GetAnalogActionOrigins(MemorySegment ptr, long controllerHandle, long actionSetHandle, long analogActionHandle, MemorySegment originsOut) {
        var mh$ = SteamAPI_ISteamController_GetAnalogActionOrigins.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamController_GetAnalogActionOrigins", ptr, controllerHandle, actionSetHandle, analogActionHandle, originsOut);
            }
            return (int)mh$.invokeExact(ptr, controllerHandle, actionSetHandle, analogActionHandle, originsOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamController_GetGlyphForActionOrigin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamController_GetGlyphForActionOrigin"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamController_GetGlyphForActionOrigin(ISteamController ptr, EControllerActionOrigin eOrigin)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamController_GetGlyphForActionOrigin$descriptor() {
        return SteamAPI_ISteamController_GetGlyphForActionOrigin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamController_GetGlyphForActionOrigin(ISteamController ptr, EControllerActionOrigin eOrigin)
     * }
     */
    public static MethodHandle SteamAPI_ISteamController_GetGlyphForActionOrigin$handle() {
        return SteamAPI_ISteamController_GetGlyphForActionOrigin.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamController_GetGlyphForActionOrigin(ISteamController ptr, EControllerActionOrigin eOrigin)
     * }
     */
    public static MemorySegment SteamAPI_ISteamController_GetGlyphForActionOrigin(MemorySegment ptr, int eOrigin) {
        var mh$ = SteamAPI_ISteamController_GetGlyphForActionOrigin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamController_GetGlyphForActionOrigin", ptr, eOrigin);
            }
            return (MemorySegment)mh$.invokeExact(ptr, eOrigin);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamController_GetStringForActionOrigin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamController_GetStringForActionOrigin"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamController_GetStringForActionOrigin(ISteamController ptr, EControllerActionOrigin eOrigin)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamController_GetStringForActionOrigin$descriptor() {
        return SteamAPI_ISteamController_GetStringForActionOrigin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamController_GetStringForActionOrigin(ISteamController ptr, EControllerActionOrigin eOrigin)
     * }
     */
    public static MethodHandle SteamAPI_ISteamController_GetStringForActionOrigin$handle() {
        return SteamAPI_ISteamController_GetStringForActionOrigin.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamController_GetStringForActionOrigin(ISteamController ptr, EControllerActionOrigin eOrigin)
     * }
     */
    public static MemorySegment SteamAPI_ISteamController_GetStringForActionOrigin(MemorySegment ptr, int eOrigin) {
        var mh$ = SteamAPI_ISteamController_GetStringForActionOrigin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamController_GetStringForActionOrigin", ptr, eOrigin);
            }
            return (MemorySegment)mh$.invokeExact(ptr, eOrigin);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamController_StopAnalogActionMomentum {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamController_StopAnalogActionMomentum"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamController_StopAnalogActionMomentum(ISteamController ptr, ControllerHandle_t controllerHandle, ControllerAnalogActionHandle_t eAction)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamController_StopAnalogActionMomentum$descriptor() {
        return SteamAPI_ISteamController_StopAnalogActionMomentum.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamController_StopAnalogActionMomentum(ISteamController ptr, ControllerHandle_t controllerHandle, ControllerAnalogActionHandle_t eAction)
     * }
     */
    public static MethodHandle SteamAPI_ISteamController_StopAnalogActionMomentum$handle() {
        return SteamAPI_ISteamController_StopAnalogActionMomentum.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamController_StopAnalogActionMomentum(ISteamController ptr, ControllerHandle_t controllerHandle, ControllerAnalogActionHandle_t eAction)
     * }
     */
    public static void SteamAPI_ISteamController_StopAnalogActionMomentum(MemorySegment ptr, long controllerHandle, long eAction) {
        var mh$ = SteamAPI_ISteamController_StopAnalogActionMomentum.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamController_StopAnalogActionMomentum", ptr, controllerHandle, eAction);
            }
            mh$.invokeExact(ptr, controllerHandle, eAction);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamController_GetMotionData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            InputMotionData_t.layout(),
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamController_GetMotionData"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * InputMotionData_t SteamAPI_ISteamController_GetMotionData(ISteamController ptr, ControllerHandle_t controllerHandle)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamController_GetMotionData$descriptor() {
        return SteamAPI_ISteamController_GetMotionData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * InputMotionData_t SteamAPI_ISteamController_GetMotionData(ISteamController ptr, ControllerHandle_t controllerHandle)
     * }
     */
    public static MethodHandle SteamAPI_ISteamController_GetMotionData$handle() {
        return SteamAPI_ISteamController_GetMotionData.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * InputMotionData_t SteamAPI_ISteamController_GetMotionData(ISteamController ptr, ControllerHandle_t controllerHandle)
     * }
     */
    public static MemorySegment SteamAPI_ISteamController_GetMotionData(SegmentAllocator allocator, MemorySegment ptr, long controllerHandle) {
        var mh$ = SteamAPI_ISteamController_GetMotionData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamController_GetMotionData", allocator, ptr, controllerHandle);
            }
            return (MemorySegment)mh$.invokeExact(allocator, ptr, controllerHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamController_TriggerHapticPulse {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_INT,
            SteamFlat.C_SHORT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamController_TriggerHapticPulse"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamController_TriggerHapticPulse(ISteamController ptr, ControllerHandle_t controllerHandle, ESteamControllerPad eTargetPad, unsigned short usDurationMicroSec)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamController_TriggerHapticPulse$descriptor() {
        return SteamAPI_ISteamController_TriggerHapticPulse.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamController_TriggerHapticPulse(ISteamController ptr, ControllerHandle_t controllerHandle, ESteamControllerPad eTargetPad, unsigned short usDurationMicroSec)
     * }
     */
    public static MethodHandle SteamAPI_ISteamController_TriggerHapticPulse$handle() {
        return SteamAPI_ISteamController_TriggerHapticPulse.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamController_TriggerHapticPulse(ISteamController ptr, ControllerHandle_t controllerHandle, ESteamControllerPad eTargetPad, unsigned short usDurationMicroSec)
     * }
     */
    public static void SteamAPI_ISteamController_TriggerHapticPulse(MemorySegment ptr, long controllerHandle, int eTargetPad, short usDurationMicroSec) {
        var mh$ = SteamAPI_ISteamController_TriggerHapticPulse.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamController_TriggerHapticPulse", ptr, controllerHandle, eTargetPad, usDurationMicroSec);
            }
            mh$.invokeExact(ptr, controllerHandle, eTargetPad, usDurationMicroSec);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamController_TriggerRepeatedHapticPulse {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_INT,
            SteamFlat.C_SHORT,
            SteamFlat.C_SHORT,
            SteamFlat.C_SHORT,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamController_TriggerRepeatedHapticPulse"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamController_TriggerRepeatedHapticPulse(ISteamController ptr, ControllerHandle_t controllerHandle, ESteamControllerPad eTargetPad, unsigned short usDurationMicroSec, unsigned short usOffMicroSec, unsigned short unRepeat, unsigned int nFlags)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamController_TriggerRepeatedHapticPulse$descriptor() {
        return SteamAPI_ISteamController_TriggerRepeatedHapticPulse.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamController_TriggerRepeatedHapticPulse(ISteamController ptr, ControllerHandle_t controllerHandle, ESteamControllerPad eTargetPad, unsigned short usDurationMicroSec, unsigned short usOffMicroSec, unsigned short unRepeat, unsigned int nFlags)
     * }
     */
    public static MethodHandle SteamAPI_ISteamController_TriggerRepeatedHapticPulse$handle() {
        return SteamAPI_ISteamController_TriggerRepeatedHapticPulse.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamController_TriggerRepeatedHapticPulse(ISteamController ptr, ControllerHandle_t controllerHandle, ESteamControllerPad eTargetPad, unsigned short usDurationMicroSec, unsigned short usOffMicroSec, unsigned short unRepeat, unsigned int nFlags)
     * }
     */
    public static void SteamAPI_ISteamController_TriggerRepeatedHapticPulse(MemorySegment ptr, long controllerHandle, int eTargetPad, short usDurationMicroSec, short usOffMicroSec, short unRepeat, int nFlags) {
        var mh$ = SteamAPI_ISteamController_TriggerRepeatedHapticPulse.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamController_TriggerRepeatedHapticPulse", ptr, controllerHandle, eTargetPad, usDurationMicroSec, usOffMicroSec, unRepeat, nFlags);
            }
            mh$.invokeExact(ptr, controllerHandle, eTargetPad, usDurationMicroSec, usOffMicroSec, unRepeat, nFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamController_TriggerVibration {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_SHORT,
            SteamFlat.C_SHORT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamController_TriggerVibration"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamController_TriggerVibration(ISteamController ptr, ControllerHandle_t controllerHandle, unsigned short usLeftSpeed, unsigned short usRightSpeed)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamController_TriggerVibration$descriptor() {
        return SteamAPI_ISteamController_TriggerVibration.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamController_TriggerVibration(ISteamController ptr, ControllerHandle_t controllerHandle, unsigned short usLeftSpeed, unsigned short usRightSpeed)
     * }
     */
    public static MethodHandle SteamAPI_ISteamController_TriggerVibration$handle() {
        return SteamAPI_ISteamController_TriggerVibration.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamController_TriggerVibration(ISteamController ptr, ControllerHandle_t controllerHandle, unsigned short usLeftSpeed, unsigned short usRightSpeed)
     * }
     */
    public static void SteamAPI_ISteamController_TriggerVibration(MemorySegment ptr, long controllerHandle, short usLeftSpeed, short usRightSpeed) {
        var mh$ = SteamAPI_ISteamController_TriggerVibration.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamController_TriggerVibration", ptr, controllerHandle, usLeftSpeed, usRightSpeed);
            }
            mh$.invokeExact(ptr, controllerHandle, usLeftSpeed, usRightSpeed);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamController_SetLEDColor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_CHAR,
            SteamFlat.C_CHAR,
            SteamFlat.C_CHAR,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamController_SetLEDColor"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamController_SetLEDColor(ISteamController ptr, ControllerHandle_t controllerHandle, uint8 nColorR, uint8 nColorG, uint8 nColorB, unsigned int nFlags)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamController_SetLEDColor$descriptor() {
        return SteamAPI_ISteamController_SetLEDColor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamController_SetLEDColor(ISteamController ptr, ControllerHandle_t controllerHandle, uint8 nColorR, uint8 nColorG, uint8 nColorB, unsigned int nFlags)
     * }
     */
    public static MethodHandle SteamAPI_ISteamController_SetLEDColor$handle() {
        return SteamAPI_ISteamController_SetLEDColor.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamController_SetLEDColor(ISteamController ptr, ControllerHandle_t controllerHandle, uint8 nColorR, uint8 nColorG, uint8 nColorB, unsigned int nFlags)
     * }
     */
    public static void SteamAPI_ISteamController_SetLEDColor(MemorySegment ptr, long controllerHandle, byte nColorR, byte nColorG, byte nColorB, int nFlags) {
        var mh$ = SteamAPI_ISteamController_SetLEDColor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamController_SetLEDColor", ptr, controllerHandle, nColorR, nColorG, nColorB, nFlags);
            }
            mh$.invokeExact(ptr, controllerHandle, nColorR, nColorG, nColorB, nFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamController_ShowBindingPanel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamController_ShowBindingPanel"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamController_ShowBindingPanel(ISteamController ptr, ControllerHandle_t controllerHandle)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamController_ShowBindingPanel$descriptor() {
        return SteamAPI_ISteamController_ShowBindingPanel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamController_ShowBindingPanel(ISteamController ptr, ControllerHandle_t controllerHandle)
     * }
     */
    public static MethodHandle SteamAPI_ISteamController_ShowBindingPanel$handle() {
        return SteamAPI_ISteamController_ShowBindingPanel.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamController_ShowBindingPanel(ISteamController ptr, ControllerHandle_t controllerHandle)
     * }
     */
    public static boolean SteamAPI_ISteamController_ShowBindingPanel(MemorySegment ptr, long controllerHandle) {
        var mh$ = SteamAPI_ISteamController_ShowBindingPanel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamController_ShowBindingPanel", ptr, controllerHandle);
            }
            return (boolean)mh$.invokeExact(ptr, controllerHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamController_GetInputTypeForHandle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamController_GetInputTypeForHandle"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ESteamInputType SteamAPI_ISteamController_GetInputTypeForHandle(ISteamController ptr, ControllerHandle_t controllerHandle)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamController_GetInputTypeForHandle$descriptor() {
        return SteamAPI_ISteamController_GetInputTypeForHandle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ESteamInputType SteamAPI_ISteamController_GetInputTypeForHandle(ISteamController ptr, ControllerHandle_t controllerHandle)
     * }
     */
    public static MethodHandle SteamAPI_ISteamController_GetInputTypeForHandle$handle() {
        return SteamAPI_ISteamController_GetInputTypeForHandle.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ESteamInputType SteamAPI_ISteamController_GetInputTypeForHandle(ISteamController ptr, ControllerHandle_t controllerHandle)
     * }
     */
    public static int SteamAPI_ISteamController_GetInputTypeForHandle(MemorySegment ptr, long controllerHandle) {
        var mh$ = SteamAPI_ISteamController_GetInputTypeForHandle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamController_GetInputTypeForHandle", ptr, controllerHandle);
            }
            return (int)mh$.invokeExact(ptr, controllerHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamController_GetControllerForGamepadIndex {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamController_GetControllerForGamepadIndex"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ControllerHandle_t SteamAPI_ISteamController_GetControllerForGamepadIndex(ISteamController ptr, int nIndex)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamController_GetControllerForGamepadIndex$descriptor() {
        return SteamAPI_ISteamController_GetControllerForGamepadIndex.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ControllerHandle_t SteamAPI_ISteamController_GetControllerForGamepadIndex(ISteamController ptr, int nIndex)
     * }
     */
    public static MethodHandle SteamAPI_ISteamController_GetControllerForGamepadIndex$handle() {
        return SteamAPI_ISteamController_GetControllerForGamepadIndex.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ControllerHandle_t SteamAPI_ISteamController_GetControllerForGamepadIndex(ISteamController ptr, int nIndex)
     * }
     */
    public static long SteamAPI_ISteamController_GetControllerForGamepadIndex(MemorySegment ptr, int nIndex) {
        var mh$ = SteamAPI_ISteamController_GetControllerForGamepadIndex.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamController_GetControllerForGamepadIndex", ptr, nIndex);
            }
            return (long)mh$.invokeExact(ptr, nIndex);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamController_GetGamepadIndexForController {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamController_GetGamepadIndexForController"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamController_GetGamepadIndexForController(ISteamController ptr, ControllerHandle_t ulControllerHandle)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamController_GetGamepadIndexForController$descriptor() {
        return SteamAPI_ISteamController_GetGamepadIndexForController.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamController_GetGamepadIndexForController(ISteamController ptr, ControllerHandle_t ulControllerHandle)
     * }
     */
    public static MethodHandle SteamAPI_ISteamController_GetGamepadIndexForController$handle() {
        return SteamAPI_ISteamController_GetGamepadIndexForController.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int SteamAPI_ISteamController_GetGamepadIndexForController(ISteamController ptr, ControllerHandle_t ulControllerHandle)
     * }
     */
    public static int SteamAPI_ISteamController_GetGamepadIndexForController(MemorySegment ptr, long ulControllerHandle) {
        var mh$ = SteamAPI_ISteamController_GetGamepadIndexForController.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamController_GetGamepadIndexForController", ptr, ulControllerHandle);
            }
            return (int)mh$.invokeExact(ptr, ulControllerHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamController_GetStringForXboxOrigin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamController_GetStringForXboxOrigin"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamController_GetStringForXboxOrigin(ISteamController ptr, EXboxOrigin eOrigin)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamController_GetStringForXboxOrigin$descriptor() {
        return SteamAPI_ISteamController_GetStringForXboxOrigin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamController_GetStringForXboxOrigin(ISteamController ptr, EXboxOrigin eOrigin)
     * }
     */
    public static MethodHandle SteamAPI_ISteamController_GetStringForXboxOrigin$handle() {
        return SteamAPI_ISteamController_GetStringForXboxOrigin.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamController_GetStringForXboxOrigin(ISteamController ptr, EXboxOrigin eOrigin)
     * }
     */
    public static MemorySegment SteamAPI_ISteamController_GetStringForXboxOrigin(MemorySegment ptr, int eOrigin) {
        var mh$ = SteamAPI_ISteamController_GetStringForXboxOrigin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamController_GetStringForXboxOrigin", ptr, eOrigin);
            }
            return (MemorySegment)mh$.invokeExact(ptr, eOrigin);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamController_GetGlyphForXboxOrigin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamController_GetGlyphForXboxOrigin"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamController_GetGlyphForXboxOrigin(ISteamController ptr, EXboxOrigin eOrigin)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamController_GetGlyphForXboxOrigin$descriptor() {
        return SteamAPI_ISteamController_GetGlyphForXboxOrigin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamController_GetGlyphForXboxOrigin(ISteamController ptr, EXboxOrigin eOrigin)
     * }
     */
    public static MethodHandle SteamAPI_ISteamController_GetGlyphForXboxOrigin$handle() {
        return SteamAPI_ISteamController_GetGlyphForXboxOrigin.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamController_GetGlyphForXboxOrigin(ISteamController ptr, EXboxOrigin eOrigin)
     * }
     */
    public static MemorySegment SteamAPI_ISteamController_GetGlyphForXboxOrigin(MemorySegment ptr, int eOrigin) {
        var mh$ = SteamAPI_ISteamController_GetGlyphForXboxOrigin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamController_GetGlyphForXboxOrigin", ptr, eOrigin);
            }
            return (MemorySegment)mh$.invokeExact(ptr, eOrigin);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamController_GetActionOriginFromXboxOrigin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamController_GetActionOriginFromXboxOrigin"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * EControllerActionOrigin SteamAPI_ISteamController_GetActionOriginFromXboxOrigin(ISteamController ptr, ControllerHandle_t controllerHandle, EXboxOrigin eOrigin)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamController_GetActionOriginFromXboxOrigin$descriptor() {
        return SteamAPI_ISteamController_GetActionOriginFromXboxOrigin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * EControllerActionOrigin SteamAPI_ISteamController_GetActionOriginFromXboxOrigin(ISteamController ptr, ControllerHandle_t controllerHandle, EXboxOrigin eOrigin)
     * }
     */
    public static MethodHandle SteamAPI_ISteamController_GetActionOriginFromXboxOrigin$handle() {
        return SteamAPI_ISteamController_GetActionOriginFromXboxOrigin.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * EControllerActionOrigin SteamAPI_ISteamController_GetActionOriginFromXboxOrigin(ISteamController ptr, ControllerHandle_t controllerHandle, EXboxOrigin eOrigin)
     * }
     */
    public static int SteamAPI_ISteamController_GetActionOriginFromXboxOrigin(MemorySegment ptr, long controllerHandle, int eOrigin) {
        var mh$ = SteamAPI_ISteamController_GetActionOriginFromXboxOrigin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamController_GetActionOriginFromXboxOrigin", ptr, controllerHandle, eOrigin);
            }
            return (int)mh$.invokeExact(ptr, controllerHandle, eOrigin);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamController_TranslateActionOrigin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamController_TranslateActionOrigin"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * EControllerActionOrigin SteamAPI_ISteamController_TranslateActionOrigin(ISteamController ptr, ESteamInputType eDestinationInputType, EControllerActionOrigin eSourceOrigin)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamController_TranslateActionOrigin$descriptor() {
        return SteamAPI_ISteamController_TranslateActionOrigin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * EControllerActionOrigin SteamAPI_ISteamController_TranslateActionOrigin(ISteamController ptr, ESteamInputType eDestinationInputType, EControllerActionOrigin eSourceOrigin)
     * }
     */
    public static MethodHandle SteamAPI_ISteamController_TranslateActionOrigin$handle() {
        return SteamAPI_ISteamController_TranslateActionOrigin.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * EControllerActionOrigin SteamAPI_ISteamController_TranslateActionOrigin(ISteamController ptr, ESteamInputType eDestinationInputType, EControllerActionOrigin eSourceOrigin)
     * }
     */
    public static int SteamAPI_ISteamController_TranslateActionOrigin(MemorySegment ptr, int eDestinationInputType, int eSourceOrigin) {
        var mh$ = SteamAPI_ISteamController_TranslateActionOrigin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamController_TranslateActionOrigin", ptr, eDestinationInputType, eSourceOrigin);
            }
            return (int)mh$.invokeExact(ptr, eDestinationInputType, eSourceOrigin);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamController_GetControllerBindingRevision {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamController_GetControllerBindingRevision"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamController_GetControllerBindingRevision(ISteamController ptr, ControllerHandle_t controllerHandle, int *pMajor, int *pMinor)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamController_GetControllerBindingRevision$descriptor() {
        return SteamAPI_ISteamController_GetControllerBindingRevision.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamController_GetControllerBindingRevision(ISteamController ptr, ControllerHandle_t controllerHandle, int *pMajor, int *pMinor)
     * }
     */
    public static MethodHandle SteamAPI_ISteamController_GetControllerBindingRevision$handle() {
        return SteamAPI_ISteamController_GetControllerBindingRevision.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamController_GetControllerBindingRevision(ISteamController ptr, ControllerHandle_t controllerHandle, int *pMajor, int *pMinor)
     * }
     */
    public static boolean SteamAPI_ISteamController_GetControllerBindingRevision(MemorySegment ptr, long controllerHandle, MemorySegment pMajor, MemorySegment pMinor) {
        var mh$ = SteamAPI_ISteamController_GetControllerBindingRevision.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamController_GetControllerBindingRevision", ptr, controllerHandle, pMajor, pMinor);
            }
            return (boolean)mh$.invokeExact(ptr, controllerHandle, pMajor, pMinor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_SteamController_v008 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_SteamController_v008"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ISteamController SteamAPI_SteamController_v008()
     * }
     */
    public static FunctionDescriptor SteamAPI_SteamController_v008$descriptor() {
        return SteamAPI_SteamController_v008.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ISteamController SteamAPI_SteamController_v008()
     * }
     */
    public static MethodHandle SteamAPI_SteamController_v008$handle() {
        return SteamAPI_SteamController_v008.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ISteamController SteamAPI_SteamController_v008()
     * }
     */
    public static MemorySegment SteamAPI_SteamController_v008() {
        var mh$ = SteamAPI_SteamController_v008.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_SteamController_v008");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_CreateQueryUserUGCRequest {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_INT,
            SteamFlat.C_INT,
            SteamFlat.C_INT,
            SteamFlat.C_INT,
            SteamFlat.C_INT,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUGC_CreateQueryUserUGCRequest"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * UGCQueryHandle_t SteamAPI_ISteamUGC_CreateQueryUserUGCRequest(ISteamUGC ptr, AccountID_t unAccountID, EUserUGCList eListType, EUGCMatchingUGCType eMatchingUGCType, EUserUGCListSortOrder eSortOrder, AppId_t nCreatorAppID, AppId_t nConsumerAppID, uint32 unPage)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_CreateQueryUserUGCRequest$descriptor() {
        return SteamAPI_ISteamUGC_CreateQueryUserUGCRequest.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * UGCQueryHandle_t SteamAPI_ISteamUGC_CreateQueryUserUGCRequest(ISteamUGC ptr, AccountID_t unAccountID, EUserUGCList eListType, EUGCMatchingUGCType eMatchingUGCType, EUserUGCListSortOrder eSortOrder, AppId_t nCreatorAppID, AppId_t nConsumerAppID, uint32 unPage)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_CreateQueryUserUGCRequest$handle() {
        return SteamAPI_ISteamUGC_CreateQueryUserUGCRequest.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * UGCQueryHandle_t SteamAPI_ISteamUGC_CreateQueryUserUGCRequest(ISteamUGC ptr, AccountID_t unAccountID, EUserUGCList eListType, EUGCMatchingUGCType eMatchingUGCType, EUserUGCListSortOrder eSortOrder, AppId_t nCreatorAppID, AppId_t nConsumerAppID, uint32 unPage)
     * }
     */
    public static long SteamAPI_ISteamUGC_CreateQueryUserUGCRequest(MemorySegment ptr, int unAccountID, int eListType, int eMatchingUGCType, int eSortOrder, int nCreatorAppID, int nConsumerAppID, int unPage) {
        var mh$ = SteamAPI_ISteamUGC_CreateQueryUserUGCRequest.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_CreateQueryUserUGCRequest", ptr, unAccountID, eListType, eMatchingUGCType, eSortOrder, nCreatorAppID, nConsumerAppID, unPage);
            }
            return (long)mh$.invokeExact(ptr, unAccountID, eListType, eMatchingUGCType, eSortOrder, nCreatorAppID, nConsumerAppID, unPage);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_CreateQueryAllUGCRequestPage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_INT,
            SteamFlat.C_INT,
            SteamFlat.C_INT,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUGC_CreateQueryAllUGCRequestPage"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * UGCQueryHandle_t SteamAPI_ISteamUGC_CreateQueryAllUGCRequestPage(ISteamUGC ptr, EUGCQuery eQueryType, EUGCMatchingUGCType eMatchingeMatchingUGCTypeFileType, AppId_t nCreatorAppID, AppId_t nConsumerAppID, uint32 unPage)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_CreateQueryAllUGCRequestPage$descriptor() {
        return SteamAPI_ISteamUGC_CreateQueryAllUGCRequestPage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * UGCQueryHandle_t SteamAPI_ISteamUGC_CreateQueryAllUGCRequestPage(ISteamUGC ptr, EUGCQuery eQueryType, EUGCMatchingUGCType eMatchingeMatchingUGCTypeFileType, AppId_t nCreatorAppID, AppId_t nConsumerAppID, uint32 unPage)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_CreateQueryAllUGCRequestPage$handle() {
        return SteamAPI_ISteamUGC_CreateQueryAllUGCRequestPage.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * UGCQueryHandle_t SteamAPI_ISteamUGC_CreateQueryAllUGCRequestPage(ISteamUGC ptr, EUGCQuery eQueryType, EUGCMatchingUGCType eMatchingeMatchingUGCTypeFileType, AppId_t nCreatorAppID, AppId_t nConsumerAppID, uint32 unPage)
     * }
     */
    public static long SteamAPI_ISteamUGC_CreateQueryAllUGCRequestPage(MemorySegment ptr, int eQueryType, int eMatchingeMatchingUGCTypeFileType, int nCreatorAppID, int nConsumerAppID, int unPage) {
        var mh$ = SteamAPI_ISteamUGC_CreateQueryAllUGCRequestPage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_CreateQueryAllUGCRequestPage", ptr, eQueryType, eMatchingeMatchingUGCTypeFileType, nCreatorAppID, nConsumerAppID, unPage);
            }
            return (long)mh$.invokeExact(ptr, eQueryType, eMatchingeMatchingUGCTypeFileType, nCreatorAppID, nConsumerAppID, unPage);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_CreateQueryAllUGCRequestCursor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_INT,
            SteamFlat.C_INT,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUGC_CreateQueryAllUGCRequestCursor"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * UGCQueryHandle_t SteamAPI_ISteamUGC_CreateQueryAllUGCRequestCursor(ISteamUGC ptr, EUGCQuery eQueryType, EUGCMatchingUGCType eMatchingeMatchingUGCTypeFileType, AppId_t nCreatorAppID, AppId_t nConsumerAppID, const char *pchCursor)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_CreateQueryAllUGCRequestCursor$descriptor() {
        return SteamAPI_ISteamUGC_CreateQueryAllUGCRequestCursor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * UGCQueryHandle_t SteamAPI_ISteamUGC_CreateQueryAllUGCRequestCursor(ISteamUGC ptr, EUGCQuery eQueryType, EUGCMatchingUGCType eMatchingeMatchingUGCTypeFileType, AppId_t nCreatorAppID, AppId_t nConsumerAppID, const char *pchCursor)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_CreateQueryAllUGCRequestCursor$handle() {
        return SteamAPI_ISteamUGC_CreateQueryAllUGCRequestCursor.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * UGCQueryHandle_t SteamAPI_ISteamUGC_CreateQueryAllUGCRequestCursor(ISteamUGC ptr, EUGCQuery eQueryType, EUGCMatchingUGCType eMatchingeMatchingUGCTypeFileType, AppId_t nCreatorAppID, AppId_t nConsumerAppID, const char *pchCursor)
     * }
     */
    public static long SteamAPI_ISteamUGC_CreateQueryAllUGCRequestCursor(MemorySegment ptr, int eQueryType, int eMatchingeMatchingUGCTypeFileType, int nCreatorAppID, int nConsumerAppID, MemorySegment pchCursor) {
        var mh$ = SteamAPI_ISteamUGC_CreateQueryAllUGCRequestCursor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_CreateQueryAllUGCRequestCursor", ptr, eQueryType, eMatchingeMatchingUGCTypeFileType, nCreatorAppID, nConsumerAppID, pchCursor);
            }
            return (long)mh$.invokeExact(ptr, eQueryType, eMatchingeMatchingUGCTypeFileType, nCreatorAppID, nConsumerAppID, pchCursor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_CreateQueryUGCDetailsRequest {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUGC_CreateQueryUGCDetailsRequest"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * UGCQueryHandle_t SteamAPI_ISteamUGC_CreateQueryUGCDetailsRequest(ISteamUGC ptr, PublishedFileId_t *pvecPublishedFileID, uint32 unNumPublishedFileIDs)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_CreateQueryUGCDetailsRequest$descriptor() {
        return SteamAPI_ISteamUGC_CreateQueryUGCDetailsRequest.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * UGCQueryHandle_t SteamAPI_ISteamUGC_CreateQueryUGCDetailsRequest(ISteamUGC ptr, PublishedFileId_t *pvecPublishedFileID, uint32 unNumPublishedFileIDs)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_CreateQueryUGCDetailsRequest$handle() {
        return SteamAPI_ISteamUGC_CreateQueryUGCDetailsRequest.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * UGCQueryHandle_t SteamAPI_ISteamUGC_CreateQueryUGCDetailsRequest(ISteamUGC ptr, PublishedFileId_t *pvecPublishedFileID, uint32 unNumPublishedFileIDs)
     * }
     */
    public static long SteamAPI_ISteamUGC_CreateQueryUGCDetailsRequest(MemorySegment ptr, MemorySegment pvecPublishedFileID, int unNumPublishedFileIDs) {
        var mh$ = SteamAPI_ISteamUGC_CreateQueryUGCDetailsRequest.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_CreateQueryUGCDetailsRequest", ptr, pvecPublishedFileID, unNumPublishedFileIDs);
            }
            return (long)mh$.invokeExact(ptr, pvecPublishedFileID, unNumPublishedFileIDs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_SendQueryUGCRequest {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUGC_SendQueryUGCRequest"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUGC_SendQueryUGCRequest(ISteamUGC ptr, UGCQueryHandle_t handle)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_SendQueryUGCRequest$descriptor() {
        return SteamAPI_ISteamUGC_SendQueryUGCRequest.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUGC_SendQueryUGCRequest(ISteamUGC ptr, UGCQueryHandle_t handle)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_SendQueryUGCRequest$handle() {
        return SteamAPI_ISteamUGC_SendQueryUGCRequest.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUGC_SendQueryUGCRequest(ISteamUGC ptr, UGCQueryHandle_t handle)
     * }
     */
    public static long SteamAPI_ISteamUGC_SendQueryUGCRequest(MemorySegment ptr, long handle) {
        var mh$ = SteamAPI_ISteamUGC_SendQueryUGCRequest.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_SendQueryUGCRequest", ptr, handle);
            }
            return (long)mh$.invokeExact(ptr, handle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_GetQueryUGCResult {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUGC_GetQueryUGCResult"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_GetQueryUGCResult(ISteamUGC ptr, UGCQueryHandle_t handle, uint32 index, SteamUGCDetails_t *pDetails)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_GetQueryUGCResult$descriptor() {
        return SteamAPI_ISteamUGC_GetQueryUGCResult.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_GetQueryUGCResult(ISteamUGC ptr, UGCQueryHandle_t handle, uint32 index, SteamUGCDetails_t *pDetails)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_GetQueryUGCResult$handle() {
        return SteamAPI_ISteamUGC_GetQueryUGCResult.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_GetQueryUGCResult(ISteamUGC ptr, UGCQueryHandle_t handle, uint32 index, SteamUGCDetails_t *pDetails)
     * }
     */
    public static boolean SteamAPI_ISteamUGC_GetQueryUGCResult(MemorySegment ptr, long handle, int index, MemorySegment pDetails) {
        var mh$ = SteamAPI_ISteamUGC_GetQueryUGCResult.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_GetQueryUGCResult", ptr, handle, index, pDetails);
            }
            return (boolean)mh$.invokeExact(ptr, handle, index, pDetails);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_GetQueryUGCNumTags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUGC_GetQueryUGCNumTags"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamUGC_GetQueryUGCNumTags(ISteamUGC ptr, UGCQueryHandle_t handle, uint32 index)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_GetQueryUGCNumTags$descriptor() {
        return SteamAPI_ISteamUGC_GetQueryUGCNumTags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamUGC_GetQueryUGCNumTags(ISteamUGC ptr, UGCQueryHandle_t handle, uint32 index)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_GetQueryUGCNumTags$handle() {
        return SteamAPI_ISteamUGC_GetQueryUGCNumTags.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamUGC_GetQueryUGCNumTags(ISteamUGC ptr, UGCQueryHandle_t handle, uint32 index)
     * }
     */
    public static int SteamAPI_ISteamUGC_GetQueryUGCNumTags(MemorySegment ptr, long handle, int index) {
        var mh$ = SteamAPI_ISteamUGC_GetQueryUGCNumTags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_GetQueryUGCNumTags", ptr, handle, index);
            }
            return (int)mh$.invokeExact(ptr, handle, index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_GetQueryUGCTag {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_INT,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUGC_GetQueryUGCTag"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_GetQueryUGCTag(ISteamUGC ptr, UGCQueryHandle_t handle, uint32 index, uint32 indexTag, char *pchValue, uint32 cchValueSize)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_GetQueryUGCTag$descriptor() {
        return SteamAPI_ISteamUGC_GetQueryUGCTag.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_GetQueryUGCTag(ISteamUGC ptr, UGCQueryHandle_t handle, uint32 index, uint32 indexTag, char *pchValue, uint32 cchValueSize)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_GetQueryUGCTag$handle() {
        return SteamAPI_ISteamUGC_GetQueryUGCTag.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_GetQueryUGCTag(ISteamUGC ptr, UGCQueryHandle_t handle, uint32 index, uint32 indexTag, char *pchValue, uint32 cchValueSize)
     * }
     */
    public static boolean SteamAPI_ISteamUGC_GetQueryUGCTag(MemorySegment ptr, long handle, int index, int indexTag, MemorySegment pchValue, int cchValueSize) {
        var mh$ = SteamAPI_ISteamUGC_GetQueryUGCTag.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_GetQueryUGCTag", ptr, handle, index, indexTag, pchValue, cchValueSize);
            }
            return (boolean)mh$.invokeExact(ptr, handle, index, indexTag, pchValue, cchValueSize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_GetQueryUGCTagDisplayName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_INT,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUGC_GetQueryUGCTagDisplayName"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_GetQueryUGCTagDisplayName(ISteamUGC ptr, UGCQueryHandle_t handle, uint32 index, uint32 indexTag, char *pchValue, uint32 cchValueSize)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_GetQueryUGCTagDisplayName$descriptor() {
        return SteamAPI_ISteamUGC_GetQueryUGCTagDisplayName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_GetQueryUGCTagDisplayName(ISteamUGC ptr, UGCQueryHandle_t handle, uint32 index, uint32 indexTag, char *pchValue, uint32 cchValueSize)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_GetQueryUGCTagDisplayName$handle() {
        return SteamAPI_ISteamUGC_GetQueryUGCTagDisplayName.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_GetQueryUGCTagDisplayName(ISteamUGC ptr, UGCQueryHandle_t handle, uint32 index, uint32 indexTag, char *pchValue, uint32 cchValueSize)
     * }
     */
    public static boolean SteamAPI_ISteamUGC_GetQueryUGCTagDisplayName(MemorySegment ptr, long handle, int index, int indexTag, MemorySegment pchValue, int cchValueSize) {
        var mh$ = SteamAPI_ISteamUGC_GetQueryUGCTagDisplayName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_GetQueryUGCTagDisplayName", ptr, handle, index, indexTag, pchValue, cchValueSize);
            }
            return (boolean)mh$.invokeExact(ptr, handle, index, indexTag, pchValue, cchValueSize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_GetQueryUGCPreviewURL {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUGC_GetQueryUGCPreviewURL"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_GetQueryUGCPreviewURL(ISteamUGC ptr, UGCQueryHandle_t handle, uint32 index, char *pchURL, uint32 cchURLSize)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_GetQueryUGCPreviewURL$descriptor() {
        return SteamAPI_ISteamUGC_GetQueryUGCPreviewURL.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_GetQueryUGCPreviewURL(ISteamUGC ptr, UGCQueryHandle_t handle, uint32 index, char *pchURL, uint32 cchURLSize)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_GetQueryUGCPreviewURL$handle() {
        return SteamAPI_ISteamUGC_GetQueryUGCPreviewURL.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_GetQueryUGCPreviewURL(ISteamUGC ptr, UGCQueryHandle_t handle, uint32 index, char *pchURL, uint32 cchURLSize)
     * }
     */
    public static boolean SteamAPI_ISteamUGC_GetQueryUGCPreviewURL(MemorySegment ptr, long handle, int index, MemorySegment pchURL, int cchURLSize) {
        var mh$ = SteamAPI_ISteamUGC_GetQueryUGCPreviewURL.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_GetQueryUGCPreviewURL", ptr, handle, index, pchURL, cchURLSize);
            }
            return (boolean)mh$.invokeExact(ptr, handle, index, pchURL, cchURLSize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_GetQueryUGCMetadata {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUGC_GetQueryUGCMetadata"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_GetQueryUGCMetadata(ISteamUGC ptr, UGCQueryHandle_t handle, uint32 index, char *pchMetadata, uint32 cchMetadatasize)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_GetQueryUGCMetadata$descriptor() {
        return SteamAPI_ISteamUGC_GetQueryUGCMetadata.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_GetQueryUGCMetadata(ISteamUGC ptr, UGCQueryHandle_t handle, uint32 index, char *pchMetadata, uint32 cchMetadatasize)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_GetQueryUGCMetadata$handle() {
        return SteamAPI_ISteamUGC_GetQueryUGCMetadata.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_GetQueryUGCMetadata(ISteamUGC ptr, UGCQueryHandle_t handle, uint32 index, char *pchMetadata, uint32 cchMetadatasize)
     * }
     */
    public static boolean SteamAPI_ISteamUGC_GetQueryUGCMetadata(MemorySegment ptr, long handle, int index, MemorySegment pchMetadata, int cchMetadatasize) {
        var mh$ = SteamAPI_ISteamUGC_GetQueryUGCMetadata.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_GetQueryUGCMetadata", ptr, handle, index, pchMetadata, cchMetadatasize);
            }
            return (boolean)mh$.invokeExact(ptr, handle, index, pchMetadata, cchMetadatasize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_GetQueryUGCChildren {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUGC_GetQueryUGCChildren"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_GetQueryUGCChildren(ISteamUGC ptr, UGCQueryHandle_t handle, uint32 index, PublishedFileId_t *pvecPublishedFileID, uint32 cMaxEntries)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_GetQueryUGCChildren$descriptor() {
        return SteamAPI_ISteamUGC_GetQueryUGCChildren.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_GetQueryUGCChildren(ISteamUGC ptr, UGCQueryHandle_t handle, uint32 index, PublishedFileId_t *pvecPublishedFileID, uint32 cMaxEntries)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_GetQueryUGCChildren$handle() {
        return SteamAPI_ISteamUGC_GetQueryUGCChildren.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_GetQueryUGCChildren(ISteamUGC ptr, UGCQueryHandle_t handle, uint32 index, PublishedFileId_t *pvecPublishedFileID, uint32 cMaxEntries)
     * }
     */
    public static boolean SteamAPI_ISteamUGC_GetQueryUGCChildren(MemorySegment ptr, long handle, int index, MemorySegment pvecPublishedFileID, int cMaxEntries) {
        var mh$ = SteamAPI_ISteamUGC_GetQueryUGCChildren.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_GetQueryUGCChildren", ptr, handle, index, pvecPublishedFileID, cMaxEntries);
            }
            return (boolean)mh$.invokeExact(ptr, handle, index, pvecPublishedFileID, cMaxEntries);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_GetQueryUGCStatistic {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_INT,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUGC_GetQueryUGCStatistic"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_GetQueryUGCStatistic(ISteamUGC ptr, UGCQueryHandle_t handle, uint32 index, EItemStatistic eStatType, uint64 *pStatValue)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_GetQueryUGCStatistic$descriptor() {
        return SteamAPI_ISteamUGC_GetQueryUGCStatistic.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_GetQueryUGCStatistic(ISteamUGC ptr, UGCQueryHandle_t handle, uint32 index, EItemStatistic eStatType, uint64 *pStatValue)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_GetQueryUGCStatistic$handle() {
        return SteamAPI_ISteamUGC_GetQueryUGCStatistic.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_GetQueryUGCStatistic(ISteamUGC ptr, UGCQueryHandle_t handle, uint32 index, EItemStatistic eStatType, uint64 *pStatValue)
     * }
     */
    public static boolean SteamAPI_ISteamUGC_GetQueryUGCStatistic(MemorySegment ptr, long handle, int index, int eStatType, MemorySegment pStatValue) {
        var mh$ = SteamAPI_ISteamUGC_GetQueryUGCStatistic.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_GetQueryUGCStatistic", ptr, handle, index, eStatType, pStatValue);
            }
            return (boolean)mh$.invokeExact(ptr, handle, index, eStatType, pStatValue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_GetQueryUGCNumAdditionalPreviews {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUGC_GetQueryUGCNumAdditionalPreviews"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamUGC_GetQueryUGCNumAdditionalPreviews(ISteamUGC ptr, UGCQueryHandle_t handle, uint32 index)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_GetQueryUGCNumAdditionalPreviews$descriptor() {
        return SteamAPI_ISteamUGC_GetQueryUGCNumAdditionalPreviews.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamUGC_GetQueryUGCNumAdditionalPreviews(ISteamUGC ptr, UGCQueryHandle_t handle, uint32 index)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_GetQueryUGCNumAdditionalPreviews$handle() {
        return SteamAPI_ISteamUGC_GetQueryUGCNumAdditionalPreviews.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamUGC_GetQueryUGCNumAdditionalPreviews(ISteamUGC ptr, UGCQueryHandle_t handle, uint32 index)
     * }
     */
    public static int SteamAPI_ISteamUGC_GetQueryUGCNumAdditionalPreviews(MemorySegment ptr, long handle, int index) {
        var mh$ = SteamAPI_ISteamUGC_GetQueryUGCNumAdditionalPreviews.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_GetQueryUGCNumAdditionalPreviews", ptr, handle, index);
            }
            return (int)mh$.invokeExact(ptr, handle, index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_GetQueryUGCAdditionalPreview {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_INT,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUGC_GetQueryUGCAdditionalPreview"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_GetQueryUGCAdditionalPreview(ISteamUGC ptr, UGCQueryHandle_t handle, uint32 index, uint32 previewIndex, char *pchURLOrVideoID, uint32 cchURLSize, char *pchOriginalFileName, uint32 cchOriginalFileNameSize, EItemPreviewType *pPreviewType)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_GetQueryUGCAdditionalPreview$descriptor() {
        return SteamAPI_ISteamUGC_GetQueryUGCAdditionalPreview.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_GetQueryUGCAdditionalPreview(ISteamUGC ptr, UGCQueryHandle_t handle, uint32 index, uint32 previewIndex, char *pchURLOrVideoID, uint32 cchURLSize, char *pchOriginalFileName, uint32 cchOriginalFileNameSize, EItemPreviewType *pPreviewType)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_GetQueryUGCAdditionalPreview$handle() {
        return SteamAPI_ISteamUGC_GetQueryUGCAdditionalPreview.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_GetQueryUGCAdditionalPreview(ISteamUGC ptr, UGCQueryHandle_t handle, uint32 index, uint32 previewIndex, char *pchURLOrVideoID, uint32 cchURLSize, char *pchOriginalFileName, uint32 cchOriginalFileNameSize, EItemPreviewType *pPreviewType)
     * }
     */
    public static boolean SteamAPI_ISteamUGC_GetQueryUGCAdditionalPreview(MemorySegment ptr, long handle, int index, int previewIndex, MemorySegment pchURLOrVideoID, int cchURLSize, MemorySegment pchOriginalFileName, int cchOriginalFileNameSize, MemorySegment pPreviewType) {
        var mh$ = SteamAPI_ISteamUGC_GetQueryUGCAdditionalPreview.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_GetQueryUGCAdditionalPreview", ptr, handle, index, previewIndex, pchURLOrVideoID, cchURLSize, pchOriginalFileName, cchOriginalFileNameSize, pPreviewType);
            }
            return (boolean)mh$.invokeExact(ptr, handle, index, previewIndex, pchURLOrVideoID, cchURLSize, pchOriginalFileName, cchOriginalFileNameSize, pPreviewType);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_GetQueryUGCNumKeyValueTags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUGC_GetQueryUGCNumKeyValueTags"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamUGC_GetQueryUGCNumKeyValueTags(ISteamUGC ptr, UGCQueryHandle_t handle, uint32 index)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_GetQueryUGCNumKeyValueTags$descriptor() {
        return SteamAPI_ISteamUGC_GetQueryUGCNumKeyValueTags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamUGC_GetQueryUGCNumKeyValueTags(ISteamUGC ptr, UGCQueryHandle_t handle, uint32 index)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_GetQueryUGCNumKeyValueTags$handle() {
        return SteamAPI_ISteamUGC_GetQueryUGCNumKeyValueTags.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamUGC_GetQueryUGCNumKeyValueTags(ISteamUGC ptr, UGCQueryHandle_t handle, uint32 index)
     * }
     */
    public static int SteamAPI_ISteamUGC_GetQueryUGCNumKeyValueTags(MemorySegment ptr, long handle, int index) {
        var mh$ = SteamAPI_ISteamUGC_GetQueryUGCNumKeyValueTags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_GetQueryUGCNumKeyValueTags", ptr, handle, index);
            }
            return (int)mh$.invokeExact(ptr, handle, index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_GetQueryUGCKeyValueTag {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_INT,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUGC_GetQueryUGCKeyValueTag"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_GetQueryUGCKeyValueTag(ISteamUGC ptr, UGCQueryHandle_t handle, uint32 index, uint32 keyValueTagIndex, char *pchKey, uint32 cchKeySize, char *pchValue, uint32 cchValueSize)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_GetQueryUGCKeyValueTag$descriptor() {
        return SteamAPI_ISteamUGC_GetQueryUGCKeyValueTag.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_GetQueryUGCKeyValueTag(ISteamUGC ptr, UGCQueryHandle_t handle, uint32 index, uint32 keyValueTagIndex, char *pchKey, uint32 cchKeySize, char *pchValue, uint32 cchValueSize)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_GetQueryUGCKeyValueTag$handle() {
        return SteamAPI_ISteamUGC_GetQueryUGCKeyValueTag.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_GetQueryUGCKeyValueTag(ISteamUGC ptr, UGCQueryHandle_t handle, uint32 index, uint32 keyValueTagIndex, char *pchKey, uint32 cchKeySize, char *pchValue, uint32 cchValueSize)
     * }
     */
    public static boolean SteamAPI_ISteamUGC_GetQueryUGCKeyValueTag(MemorySegment ptr, long handle, int index, int keyValueTagIndex, MemorySegment pchKey, int cchKeySize, MemorySegment pchValue, int cchValueSize) {
        var mh$ = SteamAPI_ISteamUGC_GetQueryUGCKeyValueTag.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_GetQueryUGCKeyValueTag", ptr, handle, index, keyValueTagIndex, pchKey, cchKeySize, pchValue, cchValueSize);
            }
            return (boolean)mh$.invokeExact(ptr, handle, index, keyValueTagIndex, pchKey, cchKeySize, pchValue, cchValueSize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_GetQueryFirstUGCKeyValueTag {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUGC_GetQueryFirstUGCKeyValueTag"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_GetQueryFirstUGCKeyValueTag(ISteamUGC ptr, UGCQueryHandle_t handle, uint32 index, const char *pchKey, char *pchValue, uint32 cchValueSize)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_GetQueryFirstUGCKeyValueTag$descriptor() {
        return SteamAPI_ISteamUGC_GetQueryFirstUGCKeyValueTag.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_GetQueryFirstUGCKeyValueTag(ISteamUGC ptr, UGCQueryHandle_t handle, uint32 index, const char *pchKey, char *pchValue, uint32 cchValueSize)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_GetQueryFirstUGCKeyValueTag$handle() {
        return SteamAPI_ISteamUGC_GetQueryFirstUGCKeyValueTag.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_GetQueryFirstUGCKeyValueTag(ISteamUGC ptr, UGCQueryHandle_t handle, uint32 index, const char *pchKey, char *pchValue, uint32 cchValueSize)
     * }
     */
    public static boolean SteamAPI_ISteamUGC_GetQueryFirstUGCKeyValueTag(MemorySegment ptr, long handle, int index, MemorySegment pchKey, MemorySegment pchValue, int cchValueSize) {
        var mh$ = SteamAPI_ISteamUGC_GetQueryFirstUGCKeyValueTag.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_GetQueryFirstUGCKeyValueTag", ptr, handle, index, pchKey, pchValue, cchValueSize);
            }
            return (boolean)mh$.invokeExact(ptr, handle, index, pchKey, pchValue, cchValueSize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_GetQueryUGCContentDescriptors {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUGC_GetQueryUGCContentDescriptors"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamUGC_GetQueryUGCContentDescriptors(ISteamUGC ptr, UGCQueryHandle_t handle, uint32 index, EUGCContentDescriptorID *pvecDescriptors, uint32 cMaxEntries)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_GetQueryUGCContentDescriptors$descriptor() {
        return SteamAPI_ISteamUGC_GetQueryUGCContentDescriptors.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamUGC_GetQueryUGCContentDescriptors(ISteamUGC ptr, UGCQueryHandle_t handle, uint32 index, EUGCContentDescriptorID *pvecDescriptors, uint32 cMaxEntries)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_GetQueryUGCContentDescriptors$handle() {
        return SteamAPI_ISteamUGC_GetQueryUGCContentDescriptors.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamUGC_GetQueryUGCContentDescriptors(ISteamUGC ptr, UGCQueryHandle_t handle, uint32 index, EUGCContentDescriptorID *pvecDescriptors, uint32 cMaxEntries)
     * }
     */
    public static int SteamAPI_ISteamUGC_GetQueryUGCContentDescriptors(MemorySegment ptr, long handle, int index, MemorySegment pvecDescriptors, int cMaxEntries) {
        var mh$ = SteamAPI_ISteamUGC_GetQueryUGCContentDescriptors.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_GetQueryUGCContentDescriptors", ptr, handle, index, pvecDescriptors, cMaxEntries);
            }
            return (int)mh$.invokeExact(ptr, handle, index, pvecDescriptors, cMaxEntries);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_ReleaseQueryUGCRequest {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUGC_ReleaseQueryUGCRequest"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_ReleaseQueryUGCRequest(ISteamUGC ptr, UGCQueryHandle_t handle)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_ReleaseQueryUGCRequest$descriptor() {
        return SteamAPI_ISteamUGC_ReleaseQueryUGCRequest.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_ReleaseQueryUGCRequest(ISteamUGC ptr, UGCQueryHandle_t handle)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_ReleaseQueryUGCRequest$handle() {
        return SteamAPI_ISteamUGC_ReleaseQueryUGCRequest.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_ReleaseQueryUGCRequest(ISteamUGC ptr, UGCQueryHandle_t handle)
     * }
     */
    public static boolean SteamAPI_ISteamUGC_ReleaseQueryUGCRequest(MemorySegment ptr, long handle) {
        var mh$ = SteamAPI_ISteamUGC_ReleaseQueryUGCRequest.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_ReleaseQueryUGCRequest", ptr, handle);
            }
            return (boolean)mh$.invokeExact(ptr, handle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_AddRequiredTag {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUGC_AddRequiredTag"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_AddRequiredTag(ISteamUGC ptr, UGCQueryHandle_t handle, const char *pTagName)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_AddRequiredTag$descriptor() {
        return SteamAPI_ISteamUGC_AddRequiredTag.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_AddRequiredTag(ISteamUGC ptr, UGCQueryHandle_t handle, const char *pTagName)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_AddRequiredTag$handle() {
        return SteamAPI_ISteamUGC_AddRequiredTag.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_AddRequiredTag(ISteamUGC ptr, UGCQueryHandle_t handle, const char *pTagName)
     * }
     */
    public static boolean SteamAPI_ISteamUGC_AddRequiredTag(MemorySegment ptr, long handle, MemorySegment pTagName) {
        var mh$ = SteamAPI_ISteamUGC_AddRequiredTag.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_AddRequiredTag", ptr, handle, pTagName);
            }
            return (boolean)mh$.invokeExact(ptr, handle, pTagName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_AddRequiredTagGroup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUGC_AddRequiredTagGroup"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_AddRequiredTagGroup(ISteamUGC ptr, UGCQueryHandle_t handle, const SteamParamStringArray_t *pTagGroups)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_AddRequiredTagGroup$descriptor() {
        return SteamAPI_ISteamUGC_AddRequiredTagGroup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_AddRequiredTagGroup(ISteamUGC ptr, UGCQueryHandle_t handle, const SteamParamStringArray_t *pTagGroups)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_AddRequiredTagGroup$handle() {
        return SteamAPI_ISteamUGC_AddRequiredTagGroup.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_AddRequiredTagGroup(ISteamUGC ptr, UGCQueryHandle_t handle, const SteamParamStringArray_t *pTagGroups)
     * }
     */
    public static boolean SteamAPI_ISteamUGC_AddRequiredTagGroup(MemorySegment ptr, long handle, MemorySegment pTagGroups) {
        var mh$ = SteamAPI_ISteamUGC_AddRequiredTagGroup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_AddRequiredTagGroup", ptr, handle, pTagGroups);
            }
            return (boolean)mh$.invokeExact(ptr, handle, pTagGroups);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_AddExcludedTag {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUGC_AddExcludedTag"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_AddExcludedTag(ISteamUGC ptr, UGCQueryHandle_t handle, const char *pTagName)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_AddExcludedTag$descriptor() {
        return SteamAPI_ISteamUGC_AddExcludedTag.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_AddExcludedTag(ISteamUGC ptr, UGCQueryHandle_t handle, const char *pTagName)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_AddExcludedTag$handle() {
        return SteamAPI_ISteamUGC_AddExcludedTag.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_AddExcludedTag(ISteamUGC ptr, UGCQueryHandle_t handle, const char *pTagName)
     * }
     */
    public static boolean SteamAPI_ISteamUGC_AddExcludedTag(MemorySegment ptr, long handle, MemorySegment pTagName) {
        var mh$ = SteamAPI_ISteamUGC_AddExcludedTag.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_AddExcludedTag", ptr, handle, pTagName);
            }
            return (boolean)mh$.invokeExact(ptr, handle, pTagName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_SetReturnOnlyIDs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUGC_SetReturnOnlyIDs"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetReturnOnlyIDs(ISteamUGC ptr, UGCQueryHandle_t handle, bool bReturnOnlyIDs)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_SetReturnOnlyIDs$descriptor() {
        return SteamAPI_ISteamUGC_SetReturnOnlyIDs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetReturnOnlyIDs(ISteamUGC ptr, UGCQueryHandle_t handle, bool bReturnOnlyIDs)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_SetReturnOnlyIDs$handle() {
        return SteamAPI_ISteamUGC_SetReturnOnlyIDs.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetReturnOnlyIDs(ISteamUGC ptr, UGCQueryHandle_t handle, bool bReturnOnlyIDs)
     * }
     */
    public static boolean SteamAPI_ISteamUGC_SetReturnOnlyIDs(MemorySegment ptr, long handle, boolean bReturnOnlyIDs) {
        var mh$ = SteamAPI_ISteamUGC_SetReturnOnlyIDs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_SetReturnOnlyIDs", ptr, handle, bReturnOnlyIDs);
            }
            return (boolean)mh$.invokeExact(ptr, handle, bReturnOnlyIDs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_SetReturnKeyValueTags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUGC_SetReturnKeyValueTags"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetReturnKeyValueTags(ISteamUGC ptr, UGCQueryHandle_t handle, bool bReturnKeyValueTags)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_SetReturnKeyValueTags$descriptor() {
        return SteamAPI_ISteamUGC_SetReturnKeyValueTags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetReturnKeyValueTags(ISteamUGC ptr, UGCQueryHandle_t handle, bool bReturnKeyValueTags)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_SetReturnKeyValueTags$handle() {
        return SteamAPI_ISteamUGC_SetReturnKeyValueTags.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetReturnKeyValueTags(ISteamUGC ptr, UGCQueryHandle_t handle, bool bReturnKeyValueTags)
     * }
     */
    public static boolean SteamAPI_ISteamUGC_SetReturnKeyValueTags(MemorySegment ptr, long handle, boolean bReturnKeyValueTags) {
        var mh$ = SteamAPI_ISteamUGC_SetReturnKeyValueTags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_SetReturnKeyValueTags", ptr, handle, bReturnKeyValueTags);
            }
            return (boolean)mh$.invokeExact(ptr, handle, bReturnKeyValueTags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_SetReturnLongDescription {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUGC_SetReturnLongDescription"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetReturnLongDescription(ISteamUGC ptr, UGCQueryHandle_t handle, bool bReturnLongDescription)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_SetReturnLongDescription$descriptor() {
        return SteamAPI_ISteamUGC_SetReturnLongDescription.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetReturnLongDescription(ISteamUGC ptr, UGCQueryHandle_t handle, bool bReturnLongDescription)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_SetReturnLongDescription$handle() {
        return SteamAPI_ISteamUGC_SetReturnLongDescription.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetReturnLongDescription(ISteamUGC ptr, UGCQueryHandle_t handle, bool bReturnLongDescription)
     * }
     */
    public static boolean SteamAPI_ISteamUGC_SetReturnLongDescription(MemorySegment ptr, long handle, boolean bReturnLongDescription) {
        var mh$ = SteamAPI_ISteamUGC_SetReturnLongDescription.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_SetReturnLongDescription", ptr, handle, bReturnLongDescription);
            }
            return (boolean)mh$.invokeExact(ptr, handle, bReturnLongDescription);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_SetReturnMetadata {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUGC_SetReturnMetadata"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetReturnMetadata(ISteamUGC ptr, UGCQueryHandle_t handle, bool bReturnMetadata)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_SetReturnMetadata$descriptor() {
        return SteamAPI_ISteamUGC_SetReturnMetadata.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetReturnMetadata(ISteamUGC ptr, UGCQueryHandle_t handle, bool bReturnMetadata)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_SetReturnMetadata$handle() {
        return SteamAPI_ISteamUGC_SetReturnMetadata.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetReturnMetadata(ISteamUGC ptr, UGCQueryHandle_t handle, bool bReturnMetadata)
     * }
     */
    public static boolean SteamAPI_ISteamUGC_SetReturnMetadata(MemorySegment ptr, long handle, boolean bReturnMetadata) {
        var mh$ = SteamAPI_ISteamUGC_SetReturnMetadata.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_SetReturnMetadata", ptr, handle, bReturnMetadata);
            }
            return (boolean)mh$.invokeExact(ptr, handle, bReturnMetadata);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_SetReturnChildren {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUGC_SetReturnChildren"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetReturnChildren(ISteamUGC ptr, UGCQueryHandle_t handle, bool bReturnChildren)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_SetReturnChildren$descriptor() {
        return SteamAPI_ISteamUGC_SetReturnChildren.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetReturnChildren(ISteamUGC ptr, UGCQueryHandle_t handle, bool bReturnChildren)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_SetReturnChildren$handle() {
        return SteamAPI_ISteamUGC_SetReturnChildren.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetReturnChildren(ISteamUGC ptr, UGCQueryHandle_t handle, bool bReturnChildren)
     * }
     */
    public static boolean SteamAPI_ISteamUGC_SetReturnChildren(MemorySegment ptr, long handle, boolean bReturnChildren) {
        var mh$ = SteamAPI_ISteamUGC_SetReturnChildren.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_SetReturnChildren", ptr, handle, bReturnChildren);
            }
            return (boolean)mh$.invokeExact(ptr, handle, bReturnChildren);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_SetReturnAdditionalPreviews {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUGC_SetReturnAdditionalPreviews"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetReturnAdditionalPreviews(ISteamUGC ptr, UGCQueryHandle_t handle, bool bReturnAdditionalPreviews)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_SetReturnAdditionalPreviews$descriptor() {
        return SteamAPI_ISteamUGC_SetReturnAdditionalPreviews.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetReturnAdditionalPreviews(ISteamUGC ptr, UGCQueryHandle_t handle, bool bReturnAdditionalPreviews)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_SetReturnAdditionalPreviews$handle() {
        return SteamAPI_ISteamUGC_SetReturnAdditionalPreviews.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetReturnAdditionalPreviews(ISteamUGC ptr, UGCQueryHandle_t handle, bool bReturnAdditionalPreviews)
     * }
     */
    public static boolean SteamAPI_ISteamUGC_SetReturnAdditionalPreviews(MemorySegment ptr, long handle, boolean bReturnAdditionalPreviews) {
        var mh$ = SteamAPI_ISteamUGC_SetReturnAdditionalPreviews.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_SetReturnAdditionalPreviews", ptr, handle, bReturnAdditionalPreviews);
            }
            return (boolean)mh$.invokeExact(ptr, handle, bReturnAdditionalPreviews);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_SetReturnTotalOnly {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUGC_SetReturnTotalOnly"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetReturnTotalOnly(ISteamUGC ptr, UGCQueryHandle_t handle, bool bReturnTotalOnly)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_SetReturnTotalOnly$descriptor() {
        return SteamAPI_ISteamUGC_SetReturnTotalOnly.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetReturnTotalOnly(ISteamUGC ptr, UGCQueryHandle_t handle, bool bReturnTotalOnly)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_SetReturnTotalOnly$handle() {
        return SteamAPI_ISteamUGC_SetReturnTotalOnly.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetReturnTotalOnly(ISteamUGC ptr, UGCQueryHandle_t handle, bool bReturnTotalOnly)
     * }
     */
    public static boolean SteamAPI_ISteamUGC_SetReturnTotalOnly(MemorySegment ptr, long handle, boolean bReturnTotalOnly) {
        var mh$ = SteamAPI_ISteamUGC_SetReturnTotalOnly.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_SetReturnTotalOnly", ptr, handle, bReturnTotalOnly);
            }
            return (boolean)mh$.invokeExact(ptr, handle, bReturnTotalOnly);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_SetReturnPlaytimeStats {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUGC_SetReturnPlaytimeStats"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetReturnPlaytimeStats(ISteamUGC ptr, UGCQueryHandle_t handle, uint32 unDays)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_SetReturnPlaytimeStats$descriptor() {
        return SteamAPI_ISteamUGC_SetReturnPlaytimeStats.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetReturnPlaytimeStats(ISteamUGC ptr, UGCQueryHandle_t handle, uint32 unDays)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_SetReturnPlaytimeStats$handle() {
        return SteamAPI_ISteamUGC_SetReturnPlaytimeStats.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetReturnPlaytimeStats(ISteamUGC ptr, UGCQueryHandle_t handle, uint32 unDays)
     * }
     */
    public static boolean SteamAPI_ISteamUGC_SetReturnPlaytimeStats(MemorySegment ptr, long handle, int unDays) {
        var mh$ = SteamAPI_ISteamUGC_SetReturnPlaytimeStats.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_SetReturnPlaytimeStats", ptr, handle, unDays);
            }
            return (boolean)mh$.invokeExact(ptr, handle, unDays);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_SetLanguage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUGC_SetLanguage"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetLanguage(ISteamUGC ptr, UGCQueryHandle_t handle, const char *pchLanguage)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_SetLanguage$descriptor() {
        return SteamAPI_ISteamUGC_SetLanguage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetLanguage(ISteamUGC ptr, UGCQueryHandle_t handle, const char *pchLanguage)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_SetLanguage$handle() {
        return SteamAPI_ISteamUGC_SetLanguage.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetLanguage(ISteamUGC ptr, UGCQueryHandle_t handle, const char *pchLanguage)
     * }
     */
    public static boolean SteamAPI_ISteamUGC_SetLanguage(MemorySegment ptr, long handle, MemorySegment pchLanguage) {
        var mh$ = SteamAPI_ISteamUGC_SetLanguage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_SetLanguage", ptr, handle, pchLanguage);
            }
            return (boolean)mh$.invokeExact(ptr, handle, pchLanguage);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_SetAllowCachedResponse {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUGC_SetAllowCachedResponse"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetAllowCachedResponse(ISteamUGC ptr, UGCQueryHandle_t handle, uint32 unMaxAgeSeconds)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_SetAllowCachedResponse$descriptor() {
        return SteamAPI_ISteamUGC_SetAllowCachedResponse.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetAllowCachedResponse(ISteamUGC ptr, UGCQueryHandle_t handle, uint32 unMaxAgeSeconds)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_SetAllowCachedResponse$handle() {
        return SteamAPI_ISteamUGC_SetAllowCachedResponse.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetAllowCachedResponse(ISteamUGC ptr, UGCQueryHandle_t handle, uint32 unMaxAgeSeconds)
     * }
     */
    public static boolean SteamAPI_ISteamUGC_SetAllowCachedResponse(MemorySegment ptr, long handle, int unMaxAgeSeconds) {
        var mh$ = SteamAPI_ISteamUGC_SetAllowCachedResponse.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_SetAllowCachedResponse", ptr, handle, unMaxAgeSeconds);
            }
            return (boolean)mh$.invokeExact(ptr, handle, unMaxAgeSeconds);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_SetCloudFileNameFilter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUGC_SetCloudFileNameFilter"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetCloudFileNameFilter(ISteamUGC ptr, UGCQueryHandle_t handle, const char *pMatchCloudFileName)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_SetCloudFileNameFilter$descriptor() {
        return SteamAPI_ISteamUGC_SetCloudFileNameFilter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetCloudFileNameFilter(ISteamUGC ptr, UGCQueryHandle_t handle, const char *pMatchCloudFileName)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_SetCloudFileNameFilter$handle() {
        return SteamAPI_ISteamUGC_SetCloudFileNameFilter.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetCloudFileNameFilter(ISteamUGC ptr, UGCQueryHandle_t handle, const char *pMatchCloudFileName)
     * }
     */
    public static boolean SteamAPI_ISteamUGC_SetCloudFileNameFilter(MemorySegment ptr, long handle, MemorySegment pMatchCloudFileName) {
        var mh$ = SteamAPI_ISteamUGC_SetCloudFileNameFilter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_SetCloudFileNameFilter", ptr, handle, pMatchCloudFileName);
            }
            return (boolean)mh$.invokeExact(ptr, handle, pMatchCloudFileName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_SetMatchAnyTag {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUGC_SetMatchAnyTag"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetMatchAnyTag(ISteamUGC ptr, UGCQueryHandle_t handle, bool bMatchAnyTag)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_SetMatchAnyTag$descriptor() {
        return SteamAPI_ISteamUGC_SetMatchAnyTag.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetMatchAnyTag(ISteamUGC ptr, UGCQueryHandle_t handle, bool bMatchAnyTag)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_SetMatchAnyTag$handle() {
        return SteamAPI_ISteamUGC_SetMatchAnyTag.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetMatchAnyTag(ISteamUGC ptr, UGCQueryHandle_t handle, bool bMatchAnyTag)
     * }
     */
    public static boolean SteamAPI_ISteamUGC_SetMatchAnyTag(MemorySegment ptr, long handle, boolean bMatchAnyTag) {
        var mh$ = SteamAPI_ISteamUGC_SetMatchAnyTag.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_SetMatchAnyTag", ptr, handle, bMatchAnyTag);
            }
            return (boolean)mh$.invokeExact(ptr, handle, bMatchAnyTag);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_SetSearchText {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUGC_SetSearchText"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetSearchText(ISteamUGC ptr, UGCQueryHandle_t handle, const char *pSearchText)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_SetSearchText$descriptor() {
        return SteamAPI_ISteamUGC_SetSearchText.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetSearchText(ISteamUGC ptr, UGCQueryHandle_t handle, const char *pSearchText)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_SetSearchText$handle() {
        return SteamAPI_ISteamUGC_SetSearchText.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetSearchText(ISteamUGC ptr, UGCQueryHandle_t handle, const char *pSearchText)
     * }
     */
    public static boolean SteamAPI_ISteamUGC_SetSearchText(MemorySegment ptr, long handle, MemorySegment pSearchText) {
        var mh$ = SteamAPI_ISteamUGC_SetSearchText.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_SetSearchText", ptr, handle, pSearchText);
            }
            return (boolean)mh$.invokeExact(ptr, handle, pSearchText);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_SetRankedByTrendDays {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUGC_SetRankedByTrendDays"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetRankedByTrendDays(ISteamUGC ptr, UGCQueryHandle_t handle, uint32 unDays)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_SetRankedByTrendDays$descriptor() {
        return SteamAPI_ISteamUGC_SetRankedByTrendDays.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetRankedByTrendDays(ISteamUGC ptr, UGCQueryHandle_t handle, uint32 unDays)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_SetRankedByTrendDays$handle() {
        return SteamAPI_ISteamUGC_SetRankedByTrendDays.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetRankedByTrendDays(ISteamUGC ptr, UGCQueryHandle_t handle, uint32 unDays)
     * }
     */
    public static boolean SteamAPI_ISteamUGC_SetRankedByTrendDays(MemorySegment ptr, long handle, int unDays) {
        var mh$ = SteamAPI_ISteamUGC_SetRankedByTrendDays.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_SetRankedByTrendDays", ptr, handle, unDays);
            }
            return (boolean)mh$.invokeExact(ptr, handle, unDays);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_SetTimeCreatedDateRange {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_INT,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUGC_SetTimeCreatedDateRange"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetTimeCreatedDateRange(ISteamUGC ptr, UGCQueryHandle_t handle, RTime32 rtStart, RTime32 rtEnd)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_SetTimeCreatedDateRange$descriptor() {
        return SteamAPI_ISteamUGC_SetTimeCreatedDateRange.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetTimeCreatedDateRange(ISteamUGC ptr, UGCQueryHandle_t handle, RTime32 rtStart, RTime32 rtEnd)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_SetTimeCreatedDateRange$handle() {
        return SteamAPI_ISteamUGC_SetTimeCreatedDateRange.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetTimeCreatedDateRange(ISteamUGC ptr, UGCQueryHandle_t handle, RTime32 rtStart, RTime32 rtEnd)
     * }
     */
    public static boolean SteamAPI_ISteamUGC_SetTimeCreatedDateRange(MemorySegment ptr, long handle, int rtStart, int rtEnd) {
        var mh$ = SteamAPI_ISteamUGC_SetTimeCreatedDateRange.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_SetTimeCreatedDateRange", ptr, handle, rtStart, rtEnd);
            }
            return (boolean)mh$.invokeExact(ptr, handle, rtStart, rtEnd);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_SetTimeUpdatedDateRange {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_INT,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUGC_SetTimeUpdatedDateRange"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetTimeUpdatedDateRange(ISteamUGC ptr, UGCQueryHandle_t handle, RTime32 rtStart, RTime32 rtEnd)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_SetTimeUpdatedDateRange$descriptor() {
        return SteamAPI_ISteamUGC_SetTimeUpdatedDateRange.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetTimeUpdatedDateRange(ISteamUGC ptr, UGCQueryHandle_t handle, RTime32 rtStart, RTime32 rtEnd)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_SetTimeUpdatedDateRange$handle() {
        return SteamAPI_ISteamUGC_SetTimeUpdatedDateRange.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetTimeUpdatedDateRange(ISteamUGC ptr, UGCQueryHandle_t handle, RTime32 rtStart, RTime32 rtEnd)
     * }
     */
    public static boolean SteamAPI_ISteamUGC_SetTimeUpdatedDateRange(MemorySegment ptr, long handle, int rtStart, int rtEnd) {
        var mh$ = SteamAPI_ISteamUGC_SetTimeUpdatedDateRange.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_SetTimeUpdatedDateRange", ptr, handle, rtStart, rtEnd);
            }
            return (boolean)mh$.invokeExact(ptr, handle, rtStart, rtEnd);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_AddRequiredKeyValueTag {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUGC_AddRequiredKeyValueTag"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_AddRequiredKeyValueTag(ISteamUGC ptr, UGCQueryHandle_t handle, const char *pKey, const char *pValue)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_AddRequiredKeyValueTag$descriptor() {
        return SteamAPI_ISteamUGC_AddRequiredKeyValueTag.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_AddRequiredKeyValueTag(ISteamUGC ptr, UGCQueryHandle_t handle, const char *pKey, const char *pValue)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_AddRequiredKeyValueTag$handle() {
        return SteamAPI_ISteamUGC_AddRequiredKeyValueTag.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_AddRequiredKeyValueTag(ISteamUGC ptr, UGCQueryHandle_t handle, const char *pKey, const char *pValue)
     * }
     */
    public static boolean SteamAPI_ISteamUGC_AddRequiredKeyValueTag(MemorySegment ptr, long handle, MemorySegment pKey, MemorySegment pValue) {
        var mh$ = SteamAPI_ISteamUGC_AddRequiredKeyValueTag.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_AddRequiredKeyValueTag", ptr, handle, pKey, pValue);
            }
            return (boolean)mh$.invokeExact(ptr, handle, pKey, pValue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_RequestUGCDetails {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUGC_RequestUGCDetails"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUGC_RequestUGCDetails(ISteamUGC ptr, PublishedFileId_t nPublishedFileID, uint32 unMaxAgeSeconds)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_RequestUGCDetails$descriptor() {
        return SteamAPI_ISteamUGC_RequestUGCDetails.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUGC_RequestUGCDetails(ISteamUGC ptr, PublishedFileId_t nPublishedFileID, uint32 unMaxAgeSeconds)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_RequestUGCDetails$handle() {
        return SteamAPI_ISteamUGC_RequestUGCDetails.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUGC_RequestUGCDetails(ISteamUGC ptr, PublishedFileId_t nPublishedFileID, uint32 unMaxAgeSeconds)
     * }
     */
    public static long SteamAPI_ISteamUGC_RequestUGCDetails(MemorySegment ptr, long nPublishedFileID, int unMaxAgeSeconds) {
        var mh$ = SteamAPI_ISteamUGC_RequestUGCDetails.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_RequestUGCDetails", ptr, nPublishedFileID, unMaxAgeSeconds);
            }
            return (long)mh$.invokeExact(ptr, nPublishedFileID, unMaxAgeSeconds);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_CreateItem {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUGC_CreateItem"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUGC_CreateItem(ISteamUGC ptr, AppId_t nConsumerAppId, EWorkshopFileType eFileType)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_CreateItem$descriptor() {
        return SteamAPI_ISteamUGC_CreateItem.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUGC_CreateItem(ISteamUGC ptr, AppId_t nConsumerAppId, EWorkshopFileType eFileType)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_CreateItem$handle() {
        return SteamAPI_ISteamUGC_CreateItem.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUGC_CreateItem(ISteamUGC ptr, AppId_t nConsumerAppId, EWorkshopFileType eFileType)
     * }
     */
    public static long SteamAPI_ISteamUGC_CreateItem(MemorySegment ptr, int nConsumerAppId, int eFileType) {
        var mh$ = SteamAPI_ISteamUGC_CreateItem.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_CreateItem", ptr, nConsumerAppId, eFileType);
            }
            return (long)mh$.invokeExact(ptr, nConsumerAppId, eFileType);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_StartItemUpdate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUGC_StartItemUpdate"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * UGCUpdateHandle_t SteamAPI_ISteamUGC_StartItemUpdate(ISteamUGC ptr, AppId_t nConsumerAppId, PublishedFileId_t nPublishedFileID)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_StartItemUpdate$descriptor() {
        return SteamAPI_ISteamUGC_StartItemUpdate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * UGCUpdateHandle_t SteamAPI_ISteamUGC_StartItemUpdate(ISteamUGC ptr, AppId_t nConsumerAppId, PublishedFileId_t nPublishedFileID)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_StartItemUpdate$handle() {
        return SteamAPI_ISteamUGC_StartItemUpdate.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * UGCUpdateHandle_t SteamAPI_ISteamUGC_StartItemUpdate(ISteamUGC ptr, AppId_t nConsumerAppId, PublishedFileId_t nPublishedFileID)
     * }
     */
    public static long SteamAPI_ISteamUGC_StartItemUpdate(MemorySegment ptr, int nConsumerAppId, long nPublishedFileID) {
        var mh$ = SteamAPI_ISteamUGC_StartItemUpdate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_StartItemUpdate", ptr, nConsumerAppId, nPublishedFileID);
            }
            return (long)mh$.invokeExact(ptr, nConsumerAppId, nPublishedFileID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_SetItemTitle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUGC_SetItemTitle"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetItemTitle(ISteamUGC ptr, UGCUpdateHandle_t handle, const char *pchTitle)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_SetItemTitle$descriptor() {
        return SteamAPI_ISteamUGC_SetItemTitle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetItemTitle(ISteamUGC ptr, UGCUpdateHandle_t handle, const char *pchTitle)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_SetItemTitle$handle() {
        return SteamAPI_ISteamUGC_SetItemTitle.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetItemTitle(ISteamUGC ptr, UGCUpdateHandle_t handle, const char *pchTitle)
     * }
     */
    public static boolean SteamAPI_ISteamUGC_SetItemTitle(MemorySegment ptr, long handle, MemorySegment pchTitle) {
        var mh$ = SteamAPI_ISteamUGC_SetItemTitle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_SetItemTitle", ptr, handle, pchTitle);
            }
            return (boolean)mh$.invokeExact(ptr, handle, pchTitle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_SetItemDescription {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUGC_SetItemDescription"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetItemDescription(ISteamUGC ptr, UGCUpdateHandle_t handle, const char *pchDescription)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_SetItemDescription$descriptor() {
        return SteamAPI_ISteamUGC_SetItemDescription.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetItemDescription(ISteamUGC ptr, UGCUpdateHandle_t handle, const char *pchDescription)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_SetItemDescription$handle() {
        return SteamAPI_ISteamUGC_SetItemDescription.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetItemDescription(ISteamUGC ptr, UGCUpdateHandle_t handle, const char *pchDescription)
     * }
     */
    public static boolean SteamAPI_ISteamUGC_SetItemDescription(MemorySegment ptr, long handle, MemorySegment pchDescription) {
        var mh$ = SteamAPI_ISteamUGC_SetItemDescription.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_SetItemDescription", ptr, handle, pchDescription);
            }
            return (boolean)mh$.invokeExact(ptr, handle, pchDescription);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_SetItemUpdateLanguage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUGC_SetItemUpdateLanguage"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetItemUpdateLanguage(ISteamUGC ptr, UGCUpdateHandle_t handle, const char *pchLanguage)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_SetItemUpdateLanguage$descriptor() {
        return SteamAPI_ISteamUGC_SetItemUpdateLanguage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetItemUpdateLanguage(ISteamUGC ptr, UGCUpdateHandle_t handle, const char *pchLanguage)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_SetItemUpdateLanguage$handle() {
        return SteamAPI_ISteamUGC_SetItemUpdateLanguage.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetItemUpdateLanguage(ISteamUGC ptr, UGCUpdateHandle_t handle, const char *pchLanguage)
     * }
     */
    public static boolean SteamAPI_ISteamUGC_SetItemUpdateLanguage(MemorySegment ptr, long handle, MemorySegment pchLanguage) {
        var mh$ = SteamAPI_ISteamUGC_SetItemUpdateLanguage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_SetItemUpdateLanguage", ptr, handle, pchLanguage);
            }
            return (boolean)mh$.invokeExact(ptr, handle, pchLanguage);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_SetItemMetadata {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUGC_SetItemMetadata"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetItemMetadata(ISteamUGC ptr, UGCUpdateHandle_t handle, const char *pchMetaData)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_SetItemMetadata$descriptor() {
        return SteamAPI_ISteamUGC_SetItemMetadata.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetItemMetadata(ISteamUGC ptr, UGCUpdateHandle_t handle, const char *pchMetaData)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_SetItemMetadata$handle() {
        return SteamAPI_ISteamUGC_SetItemMetadata.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetItemMetadata(ISteamUGC ptr, UGCUpdateHandle_t handle, const char *pchMetaData)
     * }
     */
    public static boolean SteamAPI_ISteamUGC_SetItemMetadata(MemorySegment ptr, long handle, MemorySegment pchMetaData) {
        var mh$ = SteamAPI_ISteamUGC_SetItemMetadata.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_SetItemMetadata", ptr, handle, pchMetaData);
            }
            return (boolean)mh$.invokeExact(ptr, handle, pchMetaData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_SetItemVisibility {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUGC_SetItemVisibility"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetItemVisibility(ISteamUGC ptr, UGCUpdateHandle_t handle, ERemoteStoragePublishedFileVisibility eVisibility)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_SetItemVisibility$descriptor() {
        return SteamAPI_ISteamUGC_SetItemVisibility.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetItemVisibility(ISteamUGC ptr, UGCUpdateHandle_t handle, ERemoteStoragePublishedFileVisibility eVisibility)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_SetItemVisibility$handle() {
        return SteamAPI_ISteamUGC_SetItemVisibility.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetItemVisibility(ISteamUGC ptr, UGCUpdateHandle_t handle, ERemoteStoragePublishedFileVisibility eVisibility)
     * }
     */
    public static boolean SteamAPI_ISteamUGC_SetItemVisibility(MemorySegment ptr, long handle, int eVisibility) {
        var mh$ = SteamAPI_ISteamUGC_SetItemVisibility.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_SetItemVisibility", ptr, handle, eVisibility);
            }
            return (boolean)mh$.invokeExact(ptr, handle, eVisibility);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_SetItemTags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUGC_SetItemTags"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetItemTags(ISteamUGC ptr, UGCUpdateHandle_t updateHandle, const SteamParamStringArray_t *pTags, bool bAllowAdminTags)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_SetItemTags$descriptor() {
        return SteamAPI_ISteamUGC_SetItemTags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetItemTags(ISteamUGC ptr, UGCUpdateHandle_t updateHandle, const SteamParamStringArray_t *pTags, bool bAllowAdminTags)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_SetItemTags$handle() {
        return SteamAPI_ISteamUGC_SetItemTags.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetItemTags(ISteamUGC ptr, UGCUpdateHandle_t updateHandle, const SteamParamStringArray_t *pTags, bool bAllowAdminTags)
     * }
     */
    public static boolean SteamAPI_ISteamUGC_SetItemTags(MemorySegment ptr, long updateHandle, MemorySegment pTags, boolean bAllowAdminTags) {
        var mh$ = SteamAPI_ISteamUGC_SetItemTags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_SetItemTags", ptr, updateHandle, pTags, bAllowAdminTags);
            }
            return (boolean)mh$.invokeExact(ptr, updateHandle, pTags, bAllowAdminTags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_SetItemContent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUGC_SetItemContent"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetItemContent(ISteamUGC ptr, UGCUpdateHandle_t handle, const char *pszContentFolder)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_SetItemContent$descriptor() {
        return SteamAPI_ISteamUGC_SetItemContent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetItemContent(ISteamUGC ptr, UGCUpdateHandle_t handle, const char *pszContentFolder)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_SetItemContent$handle() {
        return SteamAPI_ISteamUGC_SetItemContent.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetItemContent(ISteamUGC ptr, UGCUpdateHandle_t handle, const char *pszContentFolder)
     * }
     */
    public static boolean SteamAPI_ISteamUGC_SetItemContent(MemorySegment ptr, long handle, MemorySegment pszContentFolder) {
        var mh$ = SteamAPI_ISteamUGC_SetItemContent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_SetItemContent", ptr, handle, pszContentFolder);
            }
            return (boolean)mh$.invokeExact(ptr, handle, pszContentFolder);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_SetItemPreview {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUGC_SetItemPreview"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetItemPreview(ISteamUGC ptr, UGCUpdateHandle_t handle, const char *pszPreviewFile)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_SetItemPreview$descriptor() {
        return SteamAPI_ISteamUGC_SetItemPreview.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetItemPreview(ISteamUGC ptr, UGCUpdateHandle_t handle, const char *pszPreviewFile)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_SetItemPreview$handle() {
        return SteamAPI_ISteamUGC_SetItemPreview.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetItemPreview(ISteamUGC ptr, UGCUpdateHandle_t handle, const char *pszPreviewFile)
     * }
     */
    public static boolean SteamAPI_ISteamUGC_SetItemPreview(MemorySegment ptr, long handle, MemorySegment pszPreviewFile) {
        var mh$ = SteamAPI_ISteamUGC_SetItemPreview.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_SetItemPreview", ptr, handle, pszPreviewFile);
            }
            return (boolean)mh$.invokeExact(ptr, handle, pszPreviewFile);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_SetAllowLegacyUpload {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUGC_SetAllowLegacyUpload"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetAllowLegacyUpload(ISteamUGC ptr, UGCUpdateHandle_t handle, bool bAllowLegacyUpload)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_SetAllowLegacyUpload$descriptor() {
        return SteamAPI_ISteamUGC_SetAllowLegacyUpload.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetAllowLegacyUpload(ISteamUGC ptr, UGCUpdateHandle_t handle, bool bAllowLegacyUpload)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_SetAllowLegacyUpload$handle() {
        return SteamAPI_ISteamUGC_SetAllowLegacyUpload.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetAllowLegacyUpload(ISteamUGC ptr, UGCUpdateHandle_t handle, bool bAllowLegacyUpload)
     * }
     */
    public static boolean SteamAPI_ISteamUGC_SetAllowLegacyUpload(MemorySegment ptr, long handle, boolean bAllowLegacyUpload) {
        var mh$ = SteamAPI_ISteamUGC_SetAllowLegacyUpload.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_SetAllowLegacyUpload", ptr, handle, bAllowLegacyUpload);
            }
            return (boolean)mh$.invokeExact(ptr, handle, bAllowLegacyUpload);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_RemoveAllItemKeyValueTags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUGC_RemoveAllItemKeyValueTags"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_RemoveAllItemKeyValueTags(ISteamUGC ptr, UGCUpdateHandle_t handle)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_RemoveAllItemKeyValueTags$descriptor() {
        return SteamAPI_ISteamUGC_RemoveAllItemKeyValueTags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_RemoveAllItemKeyValueTags(ISteamUGC ptr, UGCUpdateHandle_t handle)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_RemoveAllItemKeyValueTags$handle() {
        return SteamAPI_ISteamUGC_RemoveAllItemKeyValueTags.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_RemoveAllItemKeyValueTags(ISteamUGC ptr, UGCUpdateHandle_t handle)
     * }
     */
    public static boolean SteamAPI_ISteamUGC_RemoveAllItemKeyValueTags(MemorySegment ptr, long handle) {
        var mh$ = SteamAPI_ISteamUGC_RemoveAllItemKeyValueTags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_RemoveAllItemKeyValueTags", ptr, handle);
            }
            return (boolean)mh$.invokeExact(ptr, handle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_RemoveItemKeyValueTags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUGC_RemoveItemKeyValueTags"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_RemoveItemKeyValueTags(ISteamUGC ptr, UGCUpdateHandle_t handle, const char *pchKey)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_RemoveItemKeyValueTags$descriptor() {
        return SteamAPI_ISteamUGC_RemoveItemKeyValueTags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_RemoveItemKeyValueTags(ISteamUGC ptr, UGCUpdateHandle_t handle, const char *pchKey)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_RemoveItemKeyValueTags$handle() {
        return SteamAPI_ISteamUGC_RemoveItemKeyValueTags.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_RemoveItemKeyValueTags(ISteamUGC ptr, UGCUpdateHandle_t handle, const char *pchKey)
     * }
     */
    public static boolean SteamAPI_ISteamUGC_RemoveItemKeyValueTags(MemorySegment ptr, long handle, MemorySegment pchKey) {
        var mh$ = SteamAPI_ISteamUGC_RemoveItemKeyValueTags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_RemoveItemKeyValueTags", ptr, handle, pchKey);
            }
            return (boolean)mh$.invokeExact(ptr, handle, pchKey);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_AddItemKeyValueTag {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUGC_AddItemKeyValueTag"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_AddItemKeyValueTag(ISteamUGC ptr, UGCUpdateHandle_t handle, const char *pchKey, const char *pchValue)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_AddItemKeyValueTag$descriptor() {
        return SteamAPI_ISteamUGC_AddItemKeyValueTag.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_AddItemKeyValueTag(ISteamUGC ptr, UGCUpdateHandle_t handle, const char *pchKey, const char *pchValue)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_AddItemKeyValueTag$handle() {
        return SteamAPI_ISteamUGC_AddItemKeyValueTag.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_AddItemKeyValueTag(ISteamUGC ptr, UGCUpdateHandle_t handle, const char *pchKey, const char *pchValue)
     * }
     */
    public static boolean SteamAPI_ISteamUGC_AddItemKeyValueTag(MemorySegment ptr, long handle, MemorySegment pchKey, MemorySegment pchValue) {
        var mh$ = SteamAPI_ISteamUGC_AddItemKeyValueTag.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_AddItemKeyValueTag", ptr, handle, pchKey, pchValue);
            }
            return (boolean)mh$.invokeExact(ptr, handle, pchKey, pchValue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_AddItemPreviewFile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUGC_AddItemPreviewFile"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_AddItemPreviewFile(ISteamUGC ptr, UGCUpdateHandle_t handle, const char *pszPreviewFile, EItemPreviewType type)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_AddItemPreviewFile$descriptor() {
        return SteamAPI_ISteamUGC_AddItemPreviewFile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_AddItemPreviewFile(ISteamUGC ptr, UGCUpdateHandle_t handle, const char *pszPreviewFile, EItemPreviewType type)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_AddItemPreviewFile$handle() {
        return SteamAPI_ISteamUGC_AddItemPreviewFile.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_AddItemPreviewFile(ISteamUGC ptr, UGCUpdateHandle_t handle, const char *pszPreviewFile, EItemPreviewType type)
     * }
     */
    public static boolean SteamAPI_ISteamUGC_AddItemPreviewFile(MemorySegment ptr, long handle, MemorySegment pszPreviewFile, int type) {
        var mh$ = SteamAPI_ISteamUGC_AddItemPreviewFile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_AddItemPreviewFile", ptr, handle, pszPreviewFile, type);
            }
            return (boolean)mh$.invokeExact(ptr, handle, pszPreviewFile, type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_AddItemPreviewVideo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUGC_AddItemPreviewVideo"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_AddItemPreviewVideo(ISteamUGC ptr, UGCUpdateHandle_t handle, const char *pszVideoID)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_AddItemPreviewVideo$descriptor() {
        return SteamAPI_ISteamUGC_AddItemPreviewVideo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_AddItemPreviewVideo(ISteamUGC ptr, UGCUpdateHandle_t handle, const char *pszVideoID)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_AddItemPreviewVideo$handle() {
        return SteamAPI_ISteamUGC_AddItemPreviewVideo.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_AddItemPreviewVideo(ISteamUGC ptr, UGCUpdateHandle_t handle, const char *pszVideoID)
     * }
     */
    public static boolean SteamAPI_ISteamUGC_AddItemPreviewVideo(MemorySegment ptr, long handle, MemorySegment pszVideoID) {
        var mh$ = SteamAPI_ISteamUGC_AddItemPreviewVideo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_AddItemPreviewVideo", ptr, handle, pszVideoID);
            }
            return (boolean)mh$.invokeExact(ptr, handle, pszVideoID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_UpdateItemPreviewFile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUGC_UpdateItemPreviewFile"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_UpdateItemPreviewFile(ISteamUGC ptr, UGCUpdateHandle_t handle, uint32 index, const char *pszPreviewFile)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_UpdateItemPreviewFile$descriptor() {
        return SteamAPI_ISteamUGC_UpdateItemPreviewFile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_UpdateItemPreviewFile(ISteamUGC ptr, UGCUpdateHandle_t handle, uint32 index, const char *pszPreviewFile)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_UpdateItemPreviewFile$handle() {
        return SteamAPI_ISteamUGC_UpdateItemPreviewFile.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_UpdateItemPreviewFile(ISteamUGC ptr, UGCUpdateHandle_t handle, uint32 index, const char *pszPreviewFile)
     * }
     */
    public static boolean SteamAPI_ISteamUGC_UpdateItemPreviewFile(MemorySegment ptr, long handle, int index, MemorySegment pszPreviewFile) {
        var mh$ = SteamAPI_ISteamUGC_UpdateItemPreviewFile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_UpdateItemPreviewFile", ptr, handle, index, pszPreviewFile);
            }
            return (boolean)mh$.invokeExact(ptr, handle, index, pszPreviewFile);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_UpdateItemPreviewVideo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUGC_UpdateItemPreviewVideo"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_UpdateItemPreviewVideo(ISteamUGC ptr, UGCUpdateHandle_t handle, uint32 index, const char *pszVideoID)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_UpdateItemPreviewVideo$descriptor() {
        return SteamAPI_ISteamUGC_UpdateItemPreviewVideo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_UpdateItemPreviewVideo(ISteamUGC ptr, UGCUpdateHandle_t handle, uint32 index, const char *pszVideoID)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_UpdateItemPreviewVideo$handle() {
        return SteamAPI_ISteamUGC_UpdateItemPreviewVideo.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_UpdateItemPreviewVideo(ISteamUGC ptr, UGCUpdateHandle_t handle, uint32 index, const char *pszVideoID)
     * }
     */
    public static boolean SteamAPI_ISteamUGC_UpdateItemPreviewVideo(MemorySegment ptr, long handle, int index, MemorySegment pszVideoID) {
        var mh$ = SteamAPI_ISteamUGC_UpdateItemPreviewVideo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_UpdateItemPreviewVideo", ptr, handle, index, pszVideoID);
            }
            return (boolean)mh$.invokeExact(ptr, handle, index, pszVideoID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_RemoveItemPreview {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUGC_RemoveItemPreview"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_RemoveItemPreview(ISteamUGC ptr, UGCUpdateHandle_t handle, uint32 index)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_RemoveItemPreview$descriptor() {
        return SteamAPI_ISteamUGC_RemoveItemPreview.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_RemoveItemPreview(ISteamUGC ptr, UGCUpdateHandle_t handle, uint32 index)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_RemoveItemPreview$handle() {
        return SteamAPI_ISteamUGC_RemoveItemPreview.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_RemoveItemPreview(ISteamUGC ptr, UGCUpdateHandle_t handle, uint32 index)
     * }
     */
    public static boolean SteamAPI_ISteamUGC_RemoveItemPreview(MemorySegment ptr, long handle, int index) {
        var mh$ = SteamAPI_ISteamUGC_RemoveItemPreview.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_RemoveItemPreview", ptr, handle, index);
            }
            return (boolean)mh$.invokeExact(ptr, handle, index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_AddContentDescriptor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUGC_AddContentDescriptor"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_AddContentDescriptor(ISteamUGC ptr, UGCUpdateHandle_t handle, EUGCContentDescriptorID descid)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_AddContentDescriptor$descriptor() {
        return SteamAPI_ISteamUGC_AddContentDescriptor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_AddContentDescriptor(ISteamUGC ptr, UGCUpdateHandle_t handle, EUGCContentDescriptorID descid)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_AddContentDescriptor$handle() {
        return SteamAPI_ISteamUGC_AddContentDescriptor.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_AddContentDescriptor(ISteamUGC ptr, UGCUpdateHandle_t handle, EUGCContentDescriptorID descid)
     * }
     */
    public static boolean SteamAPI_ISteamUGC_AddContentDescriptor(MemorySegment ptr, long handle, int descid) {
        var mh$ = SteamAPI_ISteamUGC_AddContentDescriptor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_AddContentDescriptor", ptr, handle, descid);
            }
            return (boolean)mh$.invokeExact(ptr, handle, descid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_RemoveContentDescriptor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUGC_RemoveContentDescriptor"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_RemoveContentDescriptor(ISteamUGC ptr, UGCUpdateHandle_t handle, EUGCContentDescriptorID descid)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_RemoveContentDescriptor$descriptor() {
        return SteamAPI_ISteamUGC_RemoveContentDescriptor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_RemoveContentDescriptor(ISteamUGC ptr, UGCUpdateHandle_t handle, EUGCContentDescriptorID descid)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_RemoveContentDescriptor$handle() {
        return SteamAPI_ISteamUGC_RemoveContentDescriptor.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_RemoveContentDescriptor(ISteamUGC ptr, UGCUpdateHandle_t handle, EUGCContentDescriptorID descid)
     * }
     */
    public static boolean SteamAPI_ISteamUGC_RemoveContentDescriptor(MemorySegment ptr, long handle, int descid) {
        var mh$ = SteamAPI_ISteamUGC_RemoveContentDescriptor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_RemoveContentDescriptor", ptr, handle, descid);
            }
            return (boolean)mh$.invokeExact(ptr, handle, descid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_SubmitItemUpdate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUGC_SubmitItemUpdate"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUGC_SubmitItemUpdate(ISteamUGC ptr, UGCUpdateHandle_t handle, const char *pchChangeNote)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_SubmitItemUpdate$descriptor() {
        return SteamAPI_ISteamUGC_SubmitItemUpdate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUGC_SubmitItemUpdate(ISteamUGC ptr, UGCUpdateHandle_t handle, const char *pchChangeNote)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_SubmitItemUpdate$handle() {
        return SteamAPI_ISteamUGC_SubmitItemUpdate.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUGC_SubmitItemUpdate(ISteamUGC ptr, UGCUpdateHandle_t handle, const char *pchChangeNote)
     * }
     */
    public static long SteamAPI_ISteamUGC_SubmitItemUpdate(MemorySegment ptr, long handle, MemorySegment pchChangeNote) {
        var mh$ = SteamAPI_ISteamUGC_SubmitItemUpdate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_SubmitItemUpdate", ptr, handle, pchChangeNote);
            }
            return (long)mh$.invokeExact(ptr, handle, pchChangeNote);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_GetItemUpdateProgress {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUGC_GetItemUpdateProgress"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * EItemUpdateStatus SteamAPI_ISteamUGC_GetItemUpdateProgress(ISteamUGC ptr, UGCUpdateHandle_t handle, uint64 *punBytesProcessed, uint64 *punBytesTotal)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_GetItemUpdateProgress$descriptor() {
        return SteamAPI_ISteamUGC_GetItemUpdateProgress.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * EItemUpdateStatus SteamAPI_ISteamUGC_GetItemUpdateProgress(ISteamUGC ptr, UGCUpdateHandle_t handle, uint64 *punBytesProcessed, uint64 *punBytesTotal)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_GetItemUpdateProgress$handle() {
        return SteamAPI_ISteamUGC_GetItemUpdateProgress.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * EItemUpdateStatus SteamAPI_ISteamUGC_GetItemUpdateProgress(ISteamUGC ptr, UGCUpdateHandle_t handle, uint64 *punBytesProcessed, uint64 *punBytesTotal)
     * }
     */
    public static int SteamAPI_ISteamUGC_GetItemUpdateProgress(MemorySegment ptr, long handle, MemorySegment punBytesProcessed, MemorySegment punBytesTotal) {
        var mh$ = SteamAPI_ISteamUGC_GetItemUpdateProgress.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_GetItemUpdateProgress", ptr, handle, punBytesProcessed, punBytesTotal);
            }
            return (int)mh$.invokeExact(ptr, handle, punBytesProcessed, punBytesTotal);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_SetUserItemVote {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUGC_SetUserItemVote"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUGC_SetUserItemVote(ISteamUGC ptr, PublishedFileId_t nPublishedFileID, bool bVoteUp)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_SetUserItemVote$descriptor() {
        return SteamAPI_ISteamUGC_SetUserItemVote.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUGC_SetUserItemVote(ISteamUGC ptr, PublishedFileId_t nPublishedFileID, bool bVoteUp)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_SetUserItemVote$handle() {
        return SteamAPI_ISteamUGC_SetUserItemVote.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUGC_SetUserItemVote(ISteamUGC ptr, PublishedFileId_t nPublishedFileID, bool bVoteUp)
     * }
     */
    public static long SteamAPI_ISteamUGC_SetUserItemVote(MemorySegment ptr, long nPublishedFileID, boolean bVoteUp) {
        var mh$ = SteamAPI_ISteamUGC_SetUserItemVote.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_SetUserItemVote", ptr, nPublishedFileID, bVoteUp);
            }
            return (long)mh$.invokeExact(ptr, nPublishedFileID, bVoteUp);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_GetUserItemVote {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUGC_GetUserItemVote"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUGC_GetUserItemVote(ISteamUGC ptr, PublishedFileId_t nPublishedFileID)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_GetUserItemVote$descriptor() {
        return SteamAPI_ISteamUGC_GetUserItemVote.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUGC_GetUserItemVote(ISteamUGC ptr, PublishedFileId_t nPublishedFileID)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_GetUserItemVote$handle() {
        return SteamAPI_ISteamUGC_GetUserItemVote.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUGC_GetUserItemVote(ISteamUGC ptr, PublishedFileId_t nPublishedFileID)
     * }
     */
    public static long SteamAPI_ISteamUGC_GetUserItemVote(MemorySegment ptr, long nPublishedFileID) {
        var mh$ = SteamAPI_ISteamUGC_GetUserItemVote.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_GetUserItemVote", ptr, nPublishedFileID);
            }
            return (long)mh$.invokeExact(ptr, nPublishedFileID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_AddItemToFavorites {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUGC_AddItemToFavorites"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUGC_AddItemToFavorites(ISteamUGC ptr, AppId_t nAppId, PublishedFileId_t nPublishedFileID)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_AddItemToFavorites$descriptor() {
        return SteamAPI_ISteamUGC_AddItemToFavorites.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUGC_AddItemToFavorites(ISteamUGC ptr, AppId_t nAppId, PublishedFileId_t nPublishedFileID)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_AddItemToFavorites$handle() {
        return SteamAPI_ISteamUGC_AddItemToFavorites.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUGC_AddItemToFavorites(ISteamUGC ptr, AppId_t nAppId, PublishedFileId_t nPublishedFileID)
     * }
     */
    public static long SteamAPI_ISteamUGC_AddItemToFavorites(MemorySegment ptr, int nAppId, long nPublishedFileID) {
        var mh$ = SteamAPI_ISteamUGC_AddItemToFavorites.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_AddItemToFavorites", ptr, nAppId, nPublishedFileID);
            }
            return (long)mh$.invokeExact(ptr, nAppId, nPublishedFileID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_RemoveItemFromFavorites {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUGC_RemoveItemFromFavorites"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUGC_RemoveItemFromFavorites(ISteamUGC ptr, AppId_t nAppId, PublishedFileId_t nPublishedFileID)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_RemoveItemFromFavorites$descriptor() {
        return SteamAPI_ISteamUGC_RemoveItemFromFavorites.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUGC_RemoveItemFromFavorites(ISteamUGC ptr, AppId_t nAppId, PublishedFileId_t nPublishedFileID)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_RemoveItemFromFavorites$handle() {
        return SteamAPI_ISteamUGC_RemoveItemFromFavorites.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUGC_RemoveItemFromFavorites(ISteamUGC ptr, AppId_t nAppId, PublishedFileId_t nPublishedFileID)
     * }
     */
    public static long SteamAPI_ISteamUGC_RemoveItemFromFavorites(MemorySegment ptr, int nAppId, long nPublishedFileID) {
        var mh$ = SteamAPI_ISteamUGC_RemoveItemFromFavorites.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_RemoveItemFromFavorites", ptr, nAppId, nPublishedFileID);
            }
            return (long)mh$.invokeExact(ptr, nAppId, nPublishedFileID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_SubscribeItem {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUGC_SubscribeItem"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUGC_SubscribeItem(ISteamUGC ptr, PublishedFileId_t nPublishedFileID)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_SubscribeItem$descriptor() {
        return SteamAPI_ISteamUGC_SubscribeItem.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUGC_SubscribeItem(ISteamUGC ptr, PublishedFileId_t nPublishedFileID)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_SubscribeItem$handle() {
        return SteamAPI_ISteamUGC_SubscribeItem.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUGC_SubscribeItem(ISteamUGC ptr, PublishedFileId_t nPublishedFileID)
     * }
     */
    public static long SteamAPI_ISteamUGC_SubscribeItem(MemorySegment ptr, long nPublishedFileID) {
        var mh$ = SteamAPI_ISteamUGC_SubscribeItem.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_SubscribeItem", ptr, nPublishedFileID);
            }
            return (long)mh$.invokeExact(ptr, nPublishedFileID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_UnsubscribeItem {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUGC_UnsubscribeItem"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUGC_UnsubscribeItem(ISteamUGC ptr, PublishedFileId_t nPublishedFileID)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_UnsubscribeItem$descriptor() {
        return SteamAPI_ISteamUGC_UnsubscribeItem.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUGC_UnsubscribeItem(ISteamUGC ptr, PublishedFileId_t nPublishedFileID)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_UnsubscribeItem$handle() {
        return SteamAPI_ISteamUGC_UnsubscribeItem.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUGC_UnsubscribeItem(ISteamUGC ptr, PublishedFileId_t nPublishedFileID)
     * }
     */
    public static long SteamAPI_ISteamUGC_UnsubscribeItem(MemorySegment ptr, long nPublishedFileID) {
        var mh$ = SteamAPI_ISteamUGC_UnsubscribeItem.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_UnsubscribeItem", ptr, nPublishedFileID);
            }
            return (long)mh$.invokeExact(ptr, nPublishedFileID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_GetNumSubscribedItems {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUGC_GetNumSubscribedItems"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamUGC_GetNumSubscribedItems(ISteamUGC ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_GetNumSubscribedItems$descriptor() {
        return SteamAPI_ISteamUGC_GetNumSubscribedItems.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamUGC_GetNumSubscribedItems(ISteamUGC ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_GetNumSubscribedItems$handle() {
        return SteamAPI_ISteamUGC_GetNumSubscribedItems.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamUGC_GetNumSubscribedItems(ISteamUGC ptr)
     * }
     */
    public static int SteamAPI_ISteamUGC_GetNumSubscribedItems(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamUGC_GetNumSubscribedItems.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_GetNumSubscribedItems", ptr);
            }
            return (int)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_GetSubscribedItems {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUGC_GetSubscribedItems"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamUGC_GetSubscribedItems(ISteamUGC ptr, PublishedFileId_t *pvecPublishedFileID, uint32 cMaxEntries)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_GetSubscribedItems$descriptor() {
        return SteamAPI_ISteamUGC_GetSubscribedItems.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamUGC_GetSubscribedItems(ISteamUGC ptr, PublishedFileId_t *pvecPublishedFileID, uint32 cMaxEntries)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_GetSubscribedItems$handle() {
        return SteamAPI_ISteamUGC_GetSubscribedItems.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamUGC_GetSubscribedItems(ISteamUGC ptr, PublishedFileId_t *pvecPublishedFileID, uint32 cMaxEntries)
     * }
     */
    public static int SteamAPI_ISteamUGC_GetSubscribedItems(MemorySegment ptr, MemorySegment pvecPublishedFileID, int cMaxEntries) {
        var mh$ = SteamAPI_ISteamUGC_GetSubscribedItems.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_GetSubscribedItems", ptr, pvecPublishedFileID, cMaxEntries);
            }
            return (int)mh$.invokeExact(ptr, pvecPublishedFileID, cMaxEntries);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_GetItemState {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUGC_GetItemState"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamUGC_GetItemState(ISteamUGC ptr, PublishedFileId_t nPublishedFileID)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_GetItemState$descriptor() {
        return SteamAPI_ISteamUGC_GetItemState.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamUGC_GetItemState(ISteamUGC ptr, PublishedFileId_t nPublishedFileID)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_GetItemState$handle() {
        return SteamAPI_ISteamUGC_GetItemState.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamUGC_GetItemState(ISteamUGC ptr, PublishedFileId_t nPublishedFileID)
     * }
     */
    public static int SteamAPI_ISteamUGC_GetItemState(MemorySegment ptr, long nPublishedFileID) {
        var mh$ = SteamAPI_ISteamUGC_GetItemState.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_GetItemState", ptr, nPublishedFileID);
            }
            return (int)mh$.invokeExact(ptr, nPublishedFileID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_GetItemInstallInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUGC_GetItemInstallInfo"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_GetItemInstallInfo(ISteamUGC ptr, PublishedFileId_t nPublishedFileID, uint64 *punSizeOnDisk, char *pchFolder, uint32 cchFolderSize, uint32 *punTimeStamp)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_GetItemInstallInfo$descriptor() {
        return SteamAPI_ISteamUGC_GetItemInstallInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_GetItemInstallInfo(ISteamUGC ptr, PublishedFileId_t nPublishedFileID, uint64 *punSizeOnDisk, char *pchFolder, uint32 cchFolderSize, uint32 *punTimeStamp)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_GetItemInstallInfo$handle() {
        return SteamAPI_ISteamUGC_GetItemInstallInfo.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_GetItemInstallInfo(ISteamUGC ptr, PublishedFileId_t nPublishedFileID, uint64 *punSizeOnDisk, char *pchFolder, uint32 cchFolderSize, uint32 *punTimeStamp)
     * }
     */
    public static boolean SteamAPI_ISteamUGC_GetItemInstallInfo(MemorySegment ptr, long nPublishedFileID, MemorySegment punSizeOnDisk, MemorySegment pchFolder, int cchFolderSize, MemorySegment punTimeStamp) {
        var mh$ = SteamAPI_ISteamUGC_GetItemInstallInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_GetItemInstallInfo", ptr, nPublishedFileID, punSizeOnDisk, pchFolder, cchFolderSize, punTimeStamp);
            }
            return (boolean)mh$.invokeExact(ptr, nPublishedFileID, punSizeOnDisk, pchFolder, cchFolderSize, punTimeStamp);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_GetItemDownloadInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUGC_GetItemDownloadInfo"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_GetItemDownloadInfo(ISteamUGC ptr, PublishedFileId_t nPublishedFileID, uint64 *punBytesDownloaded, uint64 *punBytesTotal)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_GetItemDownloadInfo$descriptor() {
        return SteamAPI_ISteamUGC_GetItemDownloadInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_GetItemDownloadInfo(ISteamUGC ptr, PublishedFileId_t nPublishedFileID, uint64 *punBytesDownloaded, uint64 *punBytesTotal)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_GetItemDownloadInfo$handle() {
        return SteamAPI_ISteamUGC_GetItemDownloadInfo.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_GetItemDownloadInfo(ISteamUGC ptr, PublishedFileId_t nPublishedFileID, uint64 *punBytesDownloaded, uint64 *punBytesTotal)
     * }
     */
    public static boolean SteamAPI_ISteamUGC_GetItemDownloadInfo(MemorySegment ptr, long nPublishedFileID, MemorySegment punBytesDownloaded, MemorySegment punBytesTotal) {
        var mh$ = SteamAPI_ISteamUGC_GetItemDownloadInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_GetItemDownloadInfo", ptr, nPublishedFileID, punBytesDownloaded, punBytesTotal);
            }
            return (boolean)mh$.invokeExact(ptr, nPublishedFileID, punBytesDownloaded, punBytesTotal);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_DownloadItem {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUGC_DownloadItem"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_DownloadItem(ISteamUGC ptr, PublishedFileId_t nPublishedFileID, bool bHighPriority)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_DownloadItem$descriptor() {
        return SteamAPI_ISteamUGC_DownloadItem.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_DownloadItem(ISteamUGC ptr, PublishedFileId_t nPublishedFileID, bool bHighPriority)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_DownloadItem$handle() {
        return SteamAPI_ISteamUGC_DownloadItem.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_DownloadItem(ISteamUGC ptr, PublishedFileId_t nPublishedFileID, bool bHighPriority)
     * }
     */
    public static boolean SteamAPI_ISteamUGC_DownloadItem(MemorySegment ptr, long nPublishedFileID, boolean bHighPriority) {
        var mh$ = SteamAPI_ISteamUGC_DownloadItem.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_DownloadItem", ptr, nPublishedFileID, bHighPriority);
            }
            return (boolean)mh$.invokeExact(ptr, nPublishedFileID, bHighPriority);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_BInitWorkshopForGameServer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUGC_BInitWorkshopForGameServer"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_BInitWorkshopForGameServer(ISteamUGC ptr, DepotId_t unWorkshopDepotID, const char *pszFolder)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_BInitWorkshopForGameServer$descriptor() {
        return SteamAPI_ISteamUGC_BInitWorkshopForGameServer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_BInitWorkshopForGameServer(ISteamUGC ptr, DepotId_t unWorkshopDepotID, const char *pszFolder)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_BInitWorkshopForGameServer$handle() {
        return SteamAPI_ISteamUGC_BInitWorkshopForGameServer.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_BInitWorkshopForGameServer(ISteamUGC ptr, DepotId_t unWorkshopDepotID, const char *pszFolder)
     * }
     */
    public static boolean SteamAPI_ISteamUGC_BInitWorkshopForGameServer(MemorySegment ptr, int unWorkshopDepotID, MemorySegment pszFolder) {
        var mh$ = SteamAPI_ISteamUGC_BInitWorkshopForGameServer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_BInitWorkshopForGameServer", ptr, unWorkshopDepotID, pszFolder);
            }
            return (boolean)mh$.invokeExact(ptr, unWorkshopDepotID, pszFolder);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_SuspendDownloads {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUGC_SuspendDownloads"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamUGC_SuspendDownloads(ISteamUGC ptr, bool bSuspend)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_SuspendDownloads$descriptor() {
        return SteamAPI_ISteamUGC_SuspendDownloads.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamUGC_SuspendDownloads(ISteamUGC ptr, bool bSuspend)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_SuspendDownloads$handle() {
        return SteamAPI_ISteamUGC_SuspendDownloads.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamUGC_SuspendDownloads(ISteamUGC ptr, bool bSuspend)
     * }
     */
    public static void SteamAPI_ISteamUGC_SuspendDownloads(MemorySegment ptr, boolean bSuspend) {
        var mh$ = SteamAPI_ISteamUGC_SuspendDownloads.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_SuspendDownloads", ptr, bSuspend);
            }
            mh$.invokeExact(ptr, bSuspend);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_StartPlaytimeTracking {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUGC_StartPlaytimeTracking"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUGC_StartPlaytimeTracking(ISteamUGC ptr, PublishedFileId_t *pvecPublishedFileID, uint32 unNumPublishedFileIDs)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_StartPlaytimeTracking$descriptor() {
        return SteamAPI_ISteamUGC_StartPlaytimeTracking.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUGC_StartPlaytimeTracking(ISteamUGC ptr, PublishedFileId_t *pvecPublishedFileID, uint32 unNumPublishedFileIDs)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_StartPlaytimeTracking$handle() {
        return SteamAPI_ISteamUGC_StartPlaytimeTracking.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUGC_StartPlaytimeTracking(ISteamUGC ptr, PublishedFileId_t *pvecPublishedFileID, uint32 unNumPublishedFileIDs)
     * }
     */
    public static long SteamAPI_ISteamUGC_StartPlaytimeTracking(MemorySegment ptr, MemorySegment pvecPublishedFileID, int unNumPublishedFileIDs) {
        var mh$ = SteamAPI_ISteamUGC_StartPlaytimeTracking.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_StartPlaytimeTracking", ptr, pvecPublishedFileID, unNumPublishedFileIDs);
            }
            return (long)mh$.invokeExact(ptr, pvecPublishedFileID, unNumPublishedFileIDs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_StopPlaytimeTracking {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUGC_StopPlaytimeTracking"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUGC_StopPlaytimeTracking(ISteamUGC ptr, PublishedFileId_t *pvecPublishedFileID, uint32 unNumPublishedFileIDs)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_StopPlaytimeTracking$descriptor() {
        return SteamAPI_ISteamUGC_StopPlaytimeTracking.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUGC_StopPlaytimeTracking(ISteamUGC ptr, PublishedFileId_t *pvecPublishedFileID, uint32 unNumPublishedFileIDs)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_StopPlaytimeTracking$handle() {
        return SteamAPI_ISteamUGC_StopPlaytimeTracking.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUGC_StopPlaytimeTracking(ISteamUGC ptr, PublishedFileId_t *pvecPublishedFileID, uint32 unNumPublishedFileIDs)
     * }
     */
    public static long SteamAPI_ISteamUGC_StopPlaytimeTracking(MemorySegment ptr, MemorySegment pvecPublishedFileID, int unNumPublishedFileIDs) {
        var mh$ = SteamAPI_ISteamUGC_StopPlaytimeTracking.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_StopPlaytimeTracking", ptr, pvecPublishedFileID, unNumPublishedFileIDs);
            }
            return (long)mh$.invokeExact(ptr, pvecPublishedFileID, unNumPublishedFileIDs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_StopPlaytimeTrackingForAllItems {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUGC_StopPlaytimeTrackingForAllItems"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUGC_StopPlaytimeTrackingForAllItems(ISteamUGC ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_StopPlaytimeTrackingForAllItems$descriptor() {
        return SteamAPI_ISteamUGC_StopPlaytimeTrackingForAllItems.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUGC_StopPlaytimeTrackingForAllItems(ISteamUGC ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_StopPlaytimeTrackingForAllItems$handle() {
        return SteamAPI_ISteamUGC_StopPlaytimeTrackingForAllItems.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUGC_StopPlaytimeTrackingForAllItems(ISteamUGC ptr)
     * }
     */
    public static long SteamAPI_ISteamUGC_StopPlaytimeTrackingForAllItems(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamUGC_StopPlaytimeTrackingForAllItems.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_StopPlaytimeTrackingForAllItems", ptr);
            }
            return (long)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_AddDependency {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUGC_AddDependency"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUGC_AddDependency(ISteamUGC ptr, PublishedFileId_t nParentPublishedFileID, PublishedFileId_t nChildPublishedFileID)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_AddDependency$descriptor() {
        return SteamAPI_ISteamUGC_AddDependency.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUGC_AddDependency(ISteamUGC ptr, PublishedFileId_t nParentPublishedFileID, PublishedFileId_t nChildPublishedFileID)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_AddDependency$handle() {
        return SteamAPI_ISteamUGC_AddDependency.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUGC_AddDependency(ISteamUGC ptr, PublishedFileId_t nParentPublishedFileID, PublishedFileId_t nChildPublishedFileID)
     * }
     */
    public static long SteamAPI_ISteamUGC_AddDependency(MemorySegment ptr, long nParentPublishedFileID, long nChildPublishedFileID) {
        var mh$ = SteamAPI_ISteamUGC_AddDependency.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_AddDependency", ptr, nParentPublishedFileID, nChildPublishedFileID);
            }
            return (long)mh$.invokeExact(ptr, nParentPublishedFileID, nChildPublishedFileID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_RemoveDependency {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUGC_RemoveDependency"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUGC_RemoveDependency(ISteamUGC ptr, PublishedFileId_t nParentPublishedFileID, PublishedFileId_t nChildPublishedFileID)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_RemoveDependency$descriptor() {
        return SteamAPI_ISteamUGC_RemoveDependency.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUGC_RemoveDependency(ISteamUGC ptr, PublishedFileId_t nParentPublishedFileID, PublishedFileId_t nChildPublishedFileID)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_RemoveDependency$handle() {
        return SteamAPI_ISteamUGC_RemoveDependency.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUGC_RemoveDependency(ISteamUGC ptr, PublishedFileId_t nParentPublishedFileID, PublishedFileId_t nChildPublishedFileID)
     * }
     */
    public static long SteamAPI_ISteamUGC_RemoveDependency(MemorySegment ptr, long nParentPublishedFileID, long nChildPublishedFileID) {
        var mh$ = SteamAPI_ISteamUGC_RemoveDependency.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_RemoveDependency", ptr, nParentPublishedFileID, nChildPublishedFileID);
            }
            return (long)mh$.invokeExact(ptr, nParentPublishedFileID, nChildPublishedFileID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_AddAppDependency {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUGC_AddAppDependency"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUGC_AddAppDependency(ISteamUGC ptr, PublishedFileId_t nPublishedFileID, AppId_t nAppID)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_AddAppDependency$descriptor() {
        return SteamAPI_ISteamUGC_AddAppDependency.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUGC_AddAppDependency(ISteamUGC ptr, PublishedFileId_t nPublishedFileID, AppId_t nAppID)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_AddAppDependency$handle() {
        return SteamAPI_ISteamUGC_AddAppDependency.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUGC_AddAppDependency(ISteamUGC ptr, PublishedFileId_t nPublishedFileID, AppId_t nAppID)
     * }
     */
    public static long SteamAPI_ISteamUGC_AddAppDependency(MemorySegment ptr, long nPublishedFileID, int nAppID) {
        var mh$ = SteamAPI_ISteamUGC_AddAppDependency.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_AddAppDependency", ptr, nPublishedFileID, nAppID);
            }
            return (long)mh$.invokeExact(ptr, nPublishedFileID, nAppID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_RemoveAppDependency {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUGC_RemoveAppDependency"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUGC_RemoveAppDependency(ISteamUGC ptr, PublishedFileId_t nPublishedFileID, AppId_t nAppID)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_RemoveAppDependency$descriptor() {
        return SteamAPI_ISteamUGC_RemoveAppDependency.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUGC_RemoveAppDependency(ISteamUGC ptr, PublishedFileId_t nPublishedFileID, AppId_t nAppID)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_RemoveAppDependency$handle() {
        return SteamAPI_ISteamUGC_RemoveAppDependency.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUGC_RemoveAppDependency(ISteamUGC ptr, PublishedFileId_t nPublishedFileID, AppId_t nAppID)
     * }
     */
    public static long SteamAPI_ISteamUGC_RemoveAppDependency(MemorySegment ptr, long nPublishedFileID, int nAppID) {
        var mh$ = SteamAPI_ISteamUGC_RemoveAppDependency.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_RemoveAppDependency", ptr, nPublishedFileID, nAppID);
            }
            return (long)mh$.invokeExact(ptr, nPublishedFileID, nAppID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_GetAppDependencies {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUGC_GetAppDependencies"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUGC_GetAppDependencies(ISteamUGC ptr, PublishedFileId_t nPublishedFileID)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_GetAppDependencies$descriptor() {
        return SteamAPI_ISteamUGC_GetAppDependencies.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUGC_GetAppDependencies(ISteamUGC ptr, PublishedFileId_t nPublishedFileID)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_GetAppDependencies$handle() {
        return SteamAPI_ISteamUGC_GetAppDependencies.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUGC_GetAppDependencies(ISteamUGC ptr, PublishedFileId_t nPublishedFileID)
     * }
     */
    public static long SteamAPI_ISteamUGC_GetAppDependencies(MemorySegment ptr, long nPublishedFileID) {
        var mh$ = SteamAPI_ISteamUGC_GetAppDependencies.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_GetAppDependencies", ptr, nPublishedFileID);
            }
            return (long)mh$.invokeExact(ptr, nPublishedFileID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_DeleteItem {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUGC_DeleteItem"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUGC_DeleteItem(ISteamUGC ptr, PublishedFileId_t nPublishedFileID)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_DeleteItem$descriptor() {
        return SteamAPI_ISteamUGC_DeleteItem.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUGC_DeleteItem(ISteamUGC ptr, PublishedFileId_t nPublishedFileID)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_DeleteItem$handle() {
        return SteamAPI_ISteamUGC_DeleteItem.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUGC_DeleteItem(ISteamUGC ptr, PublishedFileId_t nPublishedFileID)
     * }
     */
    public static long SteamAPI_ISteamUGC_DeleteItem(MemorySegment ptr, long nPublishedFileID) {
        var mh$ = SteamAPI_ISteamUGC_DeleteItem.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_DeleteItem", ptr, nPublishedFileID);
            }
            return (long)mh$.invokeExact(ptr, nPublishedFileID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_ShowWorkshopEULA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUGC_ShowWorkshopEULA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_ShowWorkshopEULA(ISteamUGC ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_ShowWorkshopEULA$descriptor() {
        return SteamAPI_ISteamUGC_ShowWorkshopEULA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_ShowWorkshopEULA(ISteamUGC ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_ShowWorkshopEULA$handle() {
        return SteamAPI_ISteamUGC_ShowWorkshopEULA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_ShowWorkshopEULA(ISteamUGC ptr)
     * }
     */
    public static boolean SteamAPI_ISteamUGC_ShowWorkshopEULA(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamUGC_ShowWorkshopEULA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_ShowWorkshopEULA", ptr);
            }
            return (boolean)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_GetWorkshopEULAStatus {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUGC_GetWorkshopEULAStatus"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUGC_GetWorkshopEULAStatus(ISteamUGC ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_GetWorkshopEULAStatus$descriptor() {
        return SteamAPI_ISteamUGC_GetWorkshopEULAStatus.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUGC_GetWorkshopEULAStatus(ISteamUGC ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_GetWorkshopEULAStatus$handle() {
        return SteamAPI_ISteamUGC_GetWorkshopEULAStatus.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUGC_GetWorkshopEULAStatus(ISteamUGC ptr)
     * }
     */
    public static long SteamAPI_ISteamUGC_GetWorkshopEULAStatus(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamUGC_GetWorkshopEULAStatus.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_GetWorkshopEULAStatus", ptr);
            }
            return (long)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_GetUserContentDescriptorPreferences {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamUGC_GetUserContentDescriptorPreferences"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamUGC_GetUserContentDescriptorPreferences(ISteamUGC ptr, EUGCContentDescriptorID *pvecDescriptors, uint32 cMaxEntries)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_GetUserContentDescriptorPreferences$descriptor() {
        return SteamAPI_ISteamUGC_GetUserContentDescriptorPreferences.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamUGC_GetUserContentDescriptorPreferences(ISteamUGC ptr, EUGCContentDescriptorID *pvecDescriptors, uint32 cMaxEntries)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_GetUserContentDescriptorPreferences$handle() {
        return SteamAPI_ISteamUGC_GetUserContentDescriptorPreferences.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamUGC_GetUserContentDescriptorPreferences(ISteamUGC ptr, EUGCContentDescriptorID *pvecDescriptors, uint32 cMaxEntries)
     * }
     */
    public static int SteamAPI_ISteamUGC_GetUserContentDescriptorPreferences(MemorySegment ptr, MemorySegment pvecDescriptors, int cMaxEntries) {
        var mh$ = SteamAPI_ISteamUGC_GetUserContentDescriptorPreferences.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_GetUserContentDescriptorPreferences", ptr, pvecDescriptors, cMaxEntries);
            }
            return (int)mh$.invokeExact(ptr, pvecDescriptors, cMaxEntries);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_SteamUGC_v018 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_SteamUGC_v018"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ISteamUGC SteamAPI_SteamUGC_v018()
     * }
     */
    public static FunctionDescriptor SteamAPI_SteamUGC_v018$descriptor() {
        return SteamAPI_SteamUGC_v018.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ISteamUGC SteamAPI_SteamUGC_v018()
     * }
     */
    public static MethodHandle SteamAPI_SteamUGC_v018$handle() {
        return SteamAPI_SteamUGC_v018.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ISteamUGC SteamAPI_SteamUGC_v018()
     * }
     */
    public static MemorySegment SteamAPI_SteamUGC_v018() {
        var mh$ = SteamAPI_SteamUGC_v018.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_SteamUGC_v018");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_SteamGameServerUGC_v018 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_SteamGameServerUGC_v018"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ISteamUGC SteamAPI_SteamGameServerUGC_v018()
     * }
     */
    public static FunctionDescriptor SteamAPI_SteamGameServerUGC_v018$descriptor() {
        return SteamAPI_SteamGameServerUGC_v018.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ISteamUGC SteamAPI_SteamGameServerUGC_v018()
     * }
     */
    public static MethodHandle SteamAPI_SteamGameServerUGC_v018$handle() {
        return SteamAPI_SteamGameServerUGC_v018.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ISteamUGC SteamAPI_SteamGameServerUGC_v018()
     * }
     */
    public static MemorySegment SteamAPI_SteamGameServerUGC_v018() {
        var mh$ = SteamAPI_SteamGameServerUGC_v018.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_SteamGameServerUGC_v018");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTMLSurface_Init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamHTMLSurface_Init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTMLSurface_Init(ISteamHTMLSurface ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTMLSurface_Init$descriptor() {
        return SteamAPI_ISteamHTMLSurface_Init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTMLSurface_Init(ISteamHTMLSurface ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTMLSurface_Init$handle() {
        return SteamAPI_ISteamHTMLSurface_Init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTMLSurface_Init(ISteamHTMLSurface ptr)
     * }
     */
    public static boolean SteamAPI_ISteamHTMLSurface_Init(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamHTMLSurface_Init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTMLSurface_Init", ptr);
            }
            return (boolean)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTMLSurface_Shutdown {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamHTMLSurface_Shutdown"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTMLSurface_Shutdown(ISteamHTMLSurface ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTMLSurface_Shutdown$descriptor() {
        return SteamAPI_ISteamHTMLSurface_Shutdown.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTMLSurface_Shutdown(ISteamHTMLSurface ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTMLSurface_Shutdown$handle() {
        return SteamAPI_ISteamHTMLSurface_Shutdown.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTMLSurface_Shutdown(ISteamHTMLSurface ptr)
     * }
     */
    public static boolean SteamAPI_ISteamHTMLSurface_Shutdown(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamHTMLSurface_Shutdown.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTMLSurface_Shutdown", ptr);
            }
            return (boolean)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTMLSurface_CreateBrowser {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamHTMLSurface_CreateBrowser"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamHTMLSurface_CreateBrowser(ISteamHTMLSurface ptr, const char *pchUserAgent, const char *pchUserCSS)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTMLSurface_CreateBrowser$descriptor() {
        return SteamAPI_ISteamHTMLSurface_CreateBrowser.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamHTMLSurface_CreateBrowser(ISteamHTMLSurface ptr, const char *pchUserAgent, const char *pchUserCSS)
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTMLSurface_CreateBrowser$handle() {
        return SteamAPI_ISteamHTMLSurface_CreateBrowser.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamHTMLSurface_CreateBrowser(ISteamHTMLSurface ptr, const char *pchUserAgent, const char *pchUserCSS)
     * }
     */
    public static long SteamAPI_ISteamHTMLSurface_CreateBrowser(MemorySegment ptr, MemorySegment pchUserAgent, MemorySegment pchUserCSS) {
        var mh$ = SteamAPI_ISteamHTMLSurface_CreateBrowser.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTMLSurface_CreateBrowser", ptr, pchUserAgent, pchUserCSS);
            }
            return (long)mh$.invokeExact(ptr, pchUserAgent, pchUserCSS);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTMLSurface_RemoveBrowser {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamHTMLSurface_RemoveBrowser"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_RemoveBrowser(ISteamHTMLSurface ptr, HHTMLBrowser unBrowserHandle)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTMLSurface_RemoveBrowser$descriptor() {
        return SteamAPI_ISteamHTMLSurface_RemoveBrowser.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_RemoveBrowser(ISteamHTMLSurface ptr, HHTMLBrowser unBrowserHandle)
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTMLSurface_RemoveBrowser$handle() {
        return SteamAPI_ISteamHTMLSurface_RemoveBrowser.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_RemoveBrowser(ISteamHTMLSurface ptr, HHTMLBrowser unBrowserHandle)
     * }
     */
    public static void SteamAPI_ISteamHTMLSurface_RemoveBrowser(MemorySegment ptr, int unBrowserHandle) {
        var mh$ = SteamAPI_ISteamHTMLSurface_RemoveBrowser.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTMLSurface_RemoveBrowser", ptr, unBrowserHandle);
            }
            mh$.invokeExact(ptr, unBrowserHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTMLSurface_LoadURL {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamHTMLSurface_LoadURL"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_LoadURL(ISteamHTMLSurface ptr, HHTMLBrowser unBrowserHandle, const char *pchURL, const char *pchPostData)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTMLSurface_LoadURL$descriptor() {
        return SteamAPI_ISteamHTMLSurface_LoadURL.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_LoadURL(ISteamHTMLSurface ptr, HHTMLBrowser unBrowserHandle, const char *pchURL, const char *pchPostData)
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTMLSurface_LoadURL$handle() {
        return SteamAPI_ISteamHTMLSurface_LoadURL.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_LoadURL(ISteamHTMLSurface ptr, HHTMLBrowser unBrowserHandle, const char *pchURL, const char *pchPostData)
     * }
     */
    public static void SteamAPI_ISteamHTMLSurface_LoadURL(MemorySegment ptr, int unBrowserHandle, MemorySegment pchURL, MemorySegment pchPostData) {
        var mh$ = SteamAPI_ISteamHTMLSurface_LoadURL.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTMLSurface_LoadURL", ptr, unBrowserHandle, pchURL, pchPostData);
            }
            mh$.invokeExact(ptr, unBrowserHandle, pchURL, pchPostData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTMLSurface_SetSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_INT,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamHTMLSurface_SetSize"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_SetSize(ISteamHTMLSurface ptr, HHTMLBrowser unBrowserHandle, uint32 unWidth, uint32 unHeight)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTMLSurface_SetSize$descriptor() {
        return SteamAPI_ISteamHTMLSurface_SetSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_SetSize(ISteamHTMLSurface ptr, HHTMLBrowser unBrowserHandle, uint32 unWidth, uint32 unHeight)
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTMLSurface_SetSize$handle() {
        return SteamAPI_ISteamHTMLSurface_SetSize.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_SetSize(ISteamHTMLSurface ptr, HHTMLBrowser unBrowserHandle, uint32 unWidth, uint32 unHeight)
     * }
     */
    public static void SteamAPI_ISteamHTMLSurface_SetSize(MemorySegment ptr, int unBrowserHandle, int unWidth, int unHeight) {
        var mh$ = SteamAPI_ISteamHTMLSurface_SetSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTMLSurface_SetSize", ptr, unBrowserHandle, unWidth, unHeight);
            }
            mh$.invokeExact(ptr, unBrowserHandle, unWidth, unHeight);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTMLSurface_StopLoad {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamHTMLSurface_StopLoad"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_StopLoad(ISteamHTMLSurface ptr, HHTMLBrowser unBrowserHandle)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTMLSurface_StopLoad$descriptor() {
        return SteamAPI_ISteamHTMLSurface_StopLoad.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_StopLoad(ISteamHTMLSurface ptr, HHTMLBrowser unBrowserHandle)
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTMLSurface_StopLoad$handle() {
        return SteamAPI_ISteamHTMLSurface_StopLoad.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_StopLoad(ISteamHTMLSurface ptr, HHTMLBrowser unBrowserHandle)
     * }
     */
    public static void SteamAPI_ISteamHTMLSurface_StopLoad(MemorySegment ptr, int unBrowserHandle) {
        var mh$ = SteamAPI_ISteamHTMLSurface_StopLoad.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTMLSurface_StopLoad", ptr, unBrowserHandle);
            }
            mh$.invokeExact(ptr, unBrowserHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTMLSurface_Reload {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamHTMLSurface_Reload"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_Reload(ISteamHTMLSurface ptr, HHTMLBrowser unBrowserHandle)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTMLSurface_Reload$descriptor() {
        return SteamAPI_ISteamHTMLSurface_Reload.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_Reload(ISteamHTMLSurface ptr, HHTMLBrowser unBrowserHandle)
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTMLSurface_Reload$handle() {
        return SteamAPI_ISteamHTMLSurface_Reload.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_Reload(ISteamHTMLSurface ptr, HHTMLBrowser unBrowserHandle)
     * }
     */
    public static void SteamAPI_ISteamHTMLSurface_Reload(MemorySegment ptr, int unBrowserHandle) {
        var mh$ = SteamAPI_ISteamHTMLSurface_Reload.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTMLSurface_Reload", ptr, unBrowserHandle);
            }
            mh$.invokeExact(ptr, unBrowserHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTMLSurface_GoBack {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamHTMLSurface_GoBack"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_GoBack(ISteamHTMLSurface ptr, HHTMLBrowser unBrowserHandle)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTMLSurface_GoBack$descriptor() {
        return SteamAPI_ISteamHTMLSurface_GoBack.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_GoBack(ISteamHTMLSurface ptr, HHTMLBrowser unBrowserHandle)
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTMLSurface_GoBack$handle() {
        return SteamAPI_ISteamHTMLSurface_GoBack.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_GoBack(ISteamHTMLSurface ptr, HHTMLBrowser unBrowserHandle)
     * }
     */
    public static void SteamAPI_ISteamHTMLSurface_GoBack(MemorySegment ptr, int unBrowserHandle) {
        var mh$ = SteamAPI_ISteamHTMLSurface_GoBack.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTMLSurface_GoBack", ptr, unBrowserHandle);
            }
            mh$.invokeExact(ptr, unBrowserHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTMLSurface_GoForward {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamHTMLSurface_GoForward"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_GoForward(ISteamHTMLSurface ptr, HHTMLBrowser unBrowserHandle)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTMLSurface_GoForward$descriptor() {
        return SteamAPI_ISteamHTMLSurface_GoForward.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_GoForward(ISteamHTMLSurface ptr, HHTMLBrowser unBrowserHandle)
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTMLSurface_GoForward$handle() {
        return SteamAPI_ISteamHTMLSurface_GoForward.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_GoForward(ISteamHTMLSurface ptr, HHTMLBrowser unBrowserHandle)
     * }
     */
    public static void SteamAPI_ISteamHTMLSurface_GoForward(MemorySegment ptr, int unBrowserHandle) {
        var mh$ = SteamAPI_ISteamHTMLSurface_GoForward.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTMLSurface_GoForward", ptr, unBrowserHandle);
            }
            mh$.invokeExact(ptr, unBrowserHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTMLSurface_AddHeader {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamHTMLSurface_AddHeader"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_AddHeader(ISteamHTMLSurface ptr, HHTMLBrowser unBrowserHandle, const char *pchKey, const char *pchValue)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTMLSurface_AddHeader$descriptor() {
        return SteamAPI_ISteamHTMLSurface_AddHeader.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_AddHeader(ISteamHTMLSurface ptr, HHTMLBrowser unBrowserHandle, const char *pchKey, const char *pchValue)
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTMLSurface_AddHeader$handle() {
        return SteamAPI_ISteamHTMLSurface_AddHeader.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_AddHeader(ISteamHTMLSurface ptr, HHTMLBrowser unBrowserHandle, const char *pchKey, const char *pchValue)
     * }
     */
    public static void SteamAPI_ISteamHTMLSurface_AddHeader(MemorySegment ptr, int unBrowserHandle, MemorySegment pchKey, MemorySegment pchValue) {
        var mh$ = SteamAPI_ISteamHTMLSurface_AddHeader.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTMLSurface_AddHeader", ptr, unBrowserHandle, pchKey, pchValue);
            }
            mh$.invokeExact(ptr, unBrowserHandle, pchKey, pchValue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTMLSurface_ExecuteJavascript {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamHTMLSurface_ExecuteJavascript"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_ExecuteJavascript(ISteamHTMLSurface ptr, HHTMLBrowser unBrowserHandle, const char *pchScript)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTMLSurface_ExecuteJavascript$descriptor() {
        return SteamAPI_ISteamHTMLSurface_ExecuteJavascript.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_ExecuteJavascript(ISteamHTMLSurface ptr, HHTMLBrowser unBrowserHandle, const char *pchScript)
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTMLSurface_ExecuteJavascript$handle() {
        return SteamAPI_ISteamHTMLSurface_ExecuteJavascript.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_ExecuteJavascript(ISteamHTMLSurface ptr, HHTMLBrowser unBrowserHandle, const char *pchScript)
     * }
     */
    public static void SteamAPI_ISteamHTMLSurface_ExecuteJavascript(MemorySegment ptr, int unBrowserHandle, MemorySegment pchScript) {
        var mh$ = SteamAPI_ISteamHTMLSurface_ExecuteJavascript.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTMLSurface_ExecuteJavascript", ptr, unBrowserHandle, pchScript);
            }
            mh$.invokeExact(ptr, unBrowserHandle, pchScript);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTMLSurface_MouseUp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamHTMLSurface_MouseUp"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_MouseUp(ISteamHTMLSurface ptr, HHTMLBrowser unBrowserHandle, EHTMLMouseButton eMouseButton)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTMLSurface_MouseUp$descriptor() {
        return SteamAPI_ISteamHTMLSurface_MouseUp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_MouseUp(ISteamHTMLSurface ptr, HHTMLBrowser unBrowserHandle, EHTMLMouseButton eMouseButton)
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTMLSurface_MouseUp$handle() {
        return SteamAPI_ISteamHTMLSurface_MouseUp.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_MouseUp(ISteamHTMLSurface ptr, HHTMLBrowser unBrowserHandle, EHTMLMouseButton eMouseButton)
     * }
     */
    public static void SteamAPI_ISteamHTMLSurface_MouseUp(MemorySegment ptr, int unBrowserHandle, int eMouseButton) {
        var mh$ = SteamAPI_ISteamHTMLSurface_MouseUp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTMLSurface_MouseUp", ptr, unBrowserHandle, eMouseButton);
            }
            mh$.invokeExact(ptr, unBrowserHandle, eMouseButton);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTMLSurface_MouseDown {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamHTMLSurface_MouseDown"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_MouseDown(ISteamHTMLSurface ptr, HHTMLBrowser unBrowserHandle, EHTMLMouseButton eMouseButton)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTMLSurface_MouseDown$descriptor() {
        return SteamAPI_ISteamHTMLSurface_MouseDown.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_MouseDown(ISteamHTMLSurface ptr, HHTMLBrowser unBrowserHandle, EHTMLMouseButton eMouseButton)
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTMLSurface_MouseDown$handle() {
        return SteamAPI_ISteamHTMLSurface_MouseDown.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_MouseDown(ISteamHTMLSurface ptr, HHTMLBrowser unBrowserHandle, EHTMLMouseButton eMouseButton)
     * }
     */
    public static void SteamAPI_ISteamHTMLSurface_MouseDown(MemorySegment ptr, int unBrowserHandle, int eMouseButton) {
        var mh$ = SteamAPI_ISteamHTMLSurface_MouseDown.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTMLSurface_MouseDown", ptr, unBrowserHandle, eMouseButton);
            }
            mh$.invokeExact(ptr, unBrowserHandle, eMouseButton);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTMLSurface_MouseDoubleClick {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamHTMLSurface_MouseDoubleClick"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_MouseDoubleClick(ISteamHTMLSurface ptr, HHTMLBrowser unBrowserHandle, EHTMLMouseButton eMouseButton)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTMLSurface_MouseDoubleClick$descriptor() {
        return SteamAPI_ISteamHTMLSurface_MouseDoubleClick.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_MouseDoubleClick(ISteamHTMLSurface ptr, HHTMLBrowser unBrowserHandle, EHTMLMouseButton eMouseButton)
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTMLSurface_MouseDoubleClick$handle() {
        return SteamAPI_ISteamHTMLSurface_MouseDoubleClick.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_MouseDoubleClick(ISteamHTMLSurface ptr, HHTMLBrowser unBrowserHandle, EHTMLMouseButton eMouseButton)
     * }
     */
    public static void SteamAPI_ISteamHTMLSurface_MouseDoubleClick(MemorySegment ptr, int unBrowserHandle, int eMouseButton) {
        var mh$ = SteamAPI_ISteamHTMLSurface_MouseDoubleClick.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTMLSurface_MouseDoubleClick", ptr, unBrowserHandle, eMouseButton);
            }
            mh$.invokeExact(ptr, unBrowserHandle, eMouseButton);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTMLSurface_MouseMove {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_INT,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamHTMLSurface_MouseMove"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_MouseMove(ISteamHTMLSurface ptr, HHTMLBrowser unBrowserHandle, int x, int y)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTMLSurface_MouseMove$descriptor() {
        return SteamAPI_ISteamHTMLSurface_MouseMove.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_MouseMove(ISteamHTMLSurface ptr, HHTMLBrowser unBrowserHandle, int x, int y)
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTMLSurface_MouseMove$handle() {
        return SteamAPI_ISteamHTMLSurface_MouseMove.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_MouseMove(ISteamHTMLSurface ptr, HHTMLBrowser unBrowserHandle, int x, int y)
     * }
     */
    public static void SteamAPI_ISteamHTMLSurface_MouseMove(MemorySegment ptr, int unBrowserHandle, int x, int y) {
        var mh$ = SteamAPI_ISteamHTMLSurface_MouseMove.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTMLSurface_MouseMove", ptr, unBrowserHandle, x, y);
            }
            mh$.invokeExact(ptr, unBrowserHandle, x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTMLSurface_MouseWheel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamHTMLSurface_MouseWheel"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_MouseWheel(ISteamHTMLSurface ptr, HHTMLBrowser unBrowserHandle, int32 nDelta)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTMLSurface_MouseWheel$descriptor() {
        return SteamAPI_ISteamHTMLSurface_MouseWheel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_MouseWheel(ISteamHTMLSurface ptr, HHTMLBrowser unBrowserHandle, int32 nDelta)
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTMLSurface_MouseWheel$handle() {
        return SteamAPI_ISteamHTMLSurface_MouseWheel.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_MouseWheel(ISteamHTMLSurface ptr, HHTMLBrowser unBrowserHandle, int32 nDelta)
     * }
     */
    public static void SteamAPI_ISteamHTMLSurface_MouseWheel(MemorySegment ptr, int unBrowserHandle, int nDelta) {
        var mh$ = SteamAPI_ISteamHTMLSurface_MouseWheel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTMLSurface_MouseWheel", ptr, unBrowserHandle, nDelta);
            }
            mh$.invokeExact(ptr, unBrowserHandle, nDelta);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTMLSurface_KeyDown {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_INT,
            SteamFlat.C_INT,
            SteamFlat.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamHTMLSurface_KeyDown"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_KeyDown(ISteamHTMLSurface ptr, HHTMLBrowser unBrowserHandle, uint32 nNativeKeyCode, EHTMLKeyModifiers eHTMLKeyModifiers, bool bIsSystemKey)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTMLSurface_KeyDown$descriptor() {
        return SteamAPI_ISteamHTMLSurface_KeyDown.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_KeyDown(ISteamHTMLSurface ptr, HHTMLBrowser unBrowserHandle, uint32 nNativeKeyCode, EHTMLKeyModifiers eHTMLKeyModifiers, bool bIsSystemKey)
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTMLSurface_KeyDown$handle() {
        return SteamAPI_ISteamHTMLSurface_KeyDown.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_KeyDown(ISteamHTMLSurface ptr, HHTMLBrowser unBrowserHandle, uint32 nNativeKeyCode, EHTMLKeyModifiers eHTMLKeyModifiers, bool bIsSystemKey)
     * }
     */
    public static void SteamAPI_ISteamHTMLSurface_KeyDown(MemorySegment ptr, int unBrowserHandle, int nNativeKeyCode, int eHTMLKeyModifiers, boolean bIsSystemKey) {
        var mh$ = SteamAPI_ISteamHTMLSurface_KeyDown.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTMLSurface_KeyDown", ptr, unBrowserHandle, nNativeKeyCode, eHTMLKeyModifiers, bIsSystemKey);
            }
            mh$.invokeExact(ptr, unBrowserHandle, nNativeKeyCode, eHTMLKeyModifiers, bIsSystemKey);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTMLSurface_KeyUp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_INT,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamHTMLSurface_KeyUp"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_KeyUp(ISteamHTMLSurface ptr, HHTMLBrowser unBrowserHandle, uint32 nNativeKeyCode, EHTMLKeyModifiers eHTMLKeyModifiers)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTMLSurface_KeyUp$descriptor() {
        return SteamAPI_ISteamHTMLSurface_KeyUp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_KeyUp(ISteamHTMLSurface ptr, HHTMLBrowser unBrowserHandle, uint32 nNativeKeyCode, EHTMLKeyModifiers eHTMLKeyModifiers)
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTMLSurface_KeyUp$handle() {
        return SteamAPI_ISteamHTMLSurface_KeyUp.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_KeyUp(ISteamHTMLSurface ptr, HHTMLBrowser unBrowserHandle, uint32 nNativeKeyCode, EHTMLKeyModifiers eHTMLKeyModifiers)
     * }
     */
    public static void SteamAPI_ISteamHTMLSurface_KeyUp(MemorySegment ptr, int unBrowserHandle, int nNativeKeyCode, int eHTMLKeyModifiers) {
        var mh$ = SteamAPI_ISteamHTMLSurface_KeyUp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTMLSurface_KeyUp", ptr, unBrowserHandle, nNativeKeyCode, eHTMLKeyModifiers);
            }
            mh$.invokeExact(ptr, unBrowserHandle, nNativeKeyCode, eHTMLKeyModifiers);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTMLSurface_KeyChar {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_INT,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamHTMLSurface_KeyChar"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_KeyChar(ISteamHTMLSurface ptr, HHTMLBrowser unBrowserHandle, uint32 cUnicodeChar, EHTMLKeyModifiers eHTMLKeyModifiers)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTMLSurface_KeyChar$descriptor() {
        return SteamAPI_ISteamHTMLSurface_KeyChar.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_KeyChar(ISteamHTMLSurface ptr, HHTMLBrowser unBrowserHandle, uint32 cUnicodeChar, EHTMLKeyModifiers eHTMLKeyModifiers)
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTMLSurface_KeyChar$handle() {
        return SteamAPI_ISteamHTMLSurface_KeyChar.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_KeyChar(ISteamHTMLSurface ptr, HHTMLBrowser unBrowserHandle, uint32 cUnicodeChar, EHTMLKeyModifiers eHTMLKeyModifiers)
     * }
     */
    public static void SteamAPI_ISteamHTMLSurface_KeyChar(MemorySegment ptr, int unBrowserHandle, int cUnicodeChar, int eHTMLKeyModifiers) {
        var mh$ = SteamAPI_ISteamHTMLSurface_KeyChar.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTMLSurface_KeyChar", ptr, unBrowserHandle, cUnicodeChar, eHTMLKeyModifiers);
            }
            mh$.invokeExact(ptr, unBrowserHandle, cUnicodeChar, eHTMLKeyModifiers);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTMLSurface_SetHorizontalScroll {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamHTMLSurface_SetHorizontalScroll"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_SetHorizontalScroll(ISteamHTMLSurface ptr, HHTMLBrowser unBrowserHandle, uint32 nAbsolutePixelScroll)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTMLSurface_SetHorizontalScroll$descriptor() {
        return SteamAPI_ISteamHTMLSurface_SetHorizontalScroll.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_SetHorizontalScroll(ISteamHTMLSurface ptr, HHTMLBrowser unBrowserHandle, uint32 nAbsolutePixelScroll)
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTMLSurface_SetHorizontalScroll$handle() {
        return SteamAPI_ISteamHTMLSurface_SetHorizontalScroll.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_SetHorizontalScroll(ISteamHTMLSurface ptr, HHTMLBrowser unBrowserHandle, uint32 nAbsolutePixelScroll)
     * }
     */
    public static void SteamAPI_ISteamHTMLSurface_SetHorizontalScroll(MemorySegment ptr, int unBrowserHandle, int nAbsolutePixelScroll) {
        var mh$ = SteamAPI_ISteamHTMLSurface_SetHorizontalScroll.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTMLSurface_SetHorizontalScroll", ptr, unBrowserHandle, nAbsolutePixelScroll);
            }
            mh$.invokeExact(ptr, unBrowserHandle, nAbsolutePixelScroll);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTMLSurface_SetVerticalScroll {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamHTMLSurface_SetVerticalScroll"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_SetVerticalScroll(ISteamHTMLSurface ptr, HHTMLBrowser unBrowserHandle, uint32 nAbsolutePixelScroll)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTMLSurface_SetVerticalScroll$descriptor() {
        return SteamAPI_ISteamHTMLSurface_SetVerticalScroll.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_SetVerticalScroll(ISteamHTMLSurface ptr, HHTMLBrowser unBrowserHandle, uint32 nAbsolutePixelScroll)
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTMLSurface_SetVerticalScroll$handle() {
        return SteamAPI_ISteamHTMLSurface_SetVerticalScroll.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_SetVerticalScroll(ISteamHTMLSurface ptr, HHTMLBrowser unBrowserHandle, uint32 nAbsolutePixelScroll)
     * }
     */
    public static void SteamAPI_ISteamHTMLSurface_SetVerticalScroll(MemorySegment ptr, int unBrowserHandle, int nAbsolutePixelScroll) {
        var mh$ = SteamAPI_ISteamHTMLSurface_SetVerticalScroll.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTMLSurface_SetVerticalScroll", ptr, unBrowserHandle, nAbsolutePixelScroll);
            }
            mh$.invokeExact(ptr, unBrowserHandle, nAbsolutePixelScroll);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTMLSurface_SetKeyFocus {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamHTMLSurface_SetKeyFocus"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_SetKeyFocus(ISteamHTMLSurface ptr, HHTMLBrowser unBrowserHandle, bool bHasKeyFocus)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTMLSurface_SetKeyFocus$descriptor() {
        return SteamAPI_ISteamHTMLSurface_SetKeyFocus.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_SetKeyFocus(ISteamHTMLSurface ptr, HHTMLBrowser unBrowserHandle, bool bHasKeyFocus)
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTMLSurface_SetKeyFocus$handle() {
        return SteamAPI_ISteamHTMLSurface_SetKeyFocus.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_SetKeyFocus(ISteamHTMLSurface ptr, HHTMLBrowser unBrowserHandle, bool bHasKeyFocus)
     * }
     */
    public static void SteamAPI_ISteamHTMLSurface_SetKeyFocus(MemorySegment ptr, int unBrowserHandle, boolean bHasKeyFocus) {
        var mh$ = SteamAPI_ISteamHTMLSurface_SetKeyFocus.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTMLSurface_SetKeyFocus", ptr, unBrowserHandle, bHasKeyFocus);
            }
            mh$.invokeExact(ptr, unBrowserHandle, bHasKeyFocus);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTMLSurface_ViewSource {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamHTMLSurface_ViewSource"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_ViewSource(ISteamHTMLSurface ptr, HHTMLBrowser unBrowserHandle)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTMLSurface_ViewSource$descriptor() {
        return SteamAPI_ISteamHTMLSurface_ViewSource.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_ViewSource(ISteamHTMLSurface ptr, HHTMLBrowser unBrowserHandle)
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTMLSurface_ViewSource$handle() {
        return SteamAPI_ISteamHTMLSurface_ViewSource.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_ViewSource(ISteamHTMLSurface ptr, HHTMLBrowser unBrowserHandle)
     * }
     */
    public static void SteamAPI_ISteamHTMLSurface_ViewSource(MemorySegment ptr, int unBrowserHandle) {
        var mh$ = SteamAPI_ISteamHTMLSurface_ViewSource.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTMLSurface_ViewSource", ptr, unBrowserHandle);
            }
            mh$.invokeExact(ptr, unBrowserHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTMLSurface_CopyToClipboard {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamHTMLSurface_CopyToClipboard"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_CopyToClipboard(ISteamHTMLSurface ptr, HHTMLBrowser unBrowserHandle)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTMLSurface_CopyToClipboard$descriptor() {
        return SteamAPI_ISteamHTMLSurface_CopyToClipboard.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_CopyToClipboard(ISteamHTMLSurface ptr, HHTMLBrowser unBrowserHandle)
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTMLSurface_CopyToClipboard$handle() {
        return SteamAPI_ISteamHTMLSurface_CopyToClipboard.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_CopyToClipboard(ISteamHTMLSurface ptr, HHTMLBrowser unBrowserHandle)
     * }
     */
    public static void SteamAPI_ISteamHTMLSurface_CopyToClipboard(MemorySegment ptr, int unBrowserHandle) {
        var mh$ = SteamAPI_ISteamHTMLSurface_CopyToClipboard.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTMLSurface_CopyToClipboard", ptr, unBrowserHandle);
            }
            mh$.invokeExact(ptr, unBrowserHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTMLSurface_PasteFromClipboard {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamHTMLSurface_PasteFromClipboard"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_PasteFromClipboard(ISteamHTMLSurface ptr, HHTMLBrowser unBrowserHandle)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTMLSurface_PasteFromClipboard$descriptor() {
        return SteamAPI_ISteamHTMLSurface_PasteFromClipboard.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_PasteFromClipboard(ISteamHTMLSurface ptr, HHTMLBrowser unBrowserHandle)
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTMLSurface_PasteFromClipboard$handle() {
        return SteamAPI_ISteamHTMLSurface_PasteFromClipboard.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_PasteFromClipboard(ISteamHTMLSurface ptr, HHTMLBrowser unBrowserHandle)
     * }
     */
    public static void SteamAPI_ISteamHTMLSurface_PasteFromClipboard(MemorySegment ptr, int unBrowserHandle) {
        var mh$ = SteamAPI_ISteamHTMLSurface_PasteFromClipboard.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTMLSurface_PasteFromClipboard", ptr, unBrowserHandle);
            }
            mh$.invokeExact(ptr, unBrowserHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTMLSurface_Find {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_BOOL,
            SteamFlat.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamHTMLSurface_Find"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_Find(ISteamHTMLSurface ptr, HHTMLBrowser unBrowserHandle, const char *pchSearchStr, bool bCurrentlyInFind, bool bReverse)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTMLSurface_Find$descriptor() {
        return SteamAPI_ISteamHTMLSurface_Find.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_Find(ISteamHTMLSurface ptr, HHTMLBrowser unBrowserHandle, const char *pchSearchStr, bool bCurrentlyInFind, bool bReverse)
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTMLSurface_Find$handle() {
        return SteamAPI_ISteamHTMLSurface_Find.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_Find(ISteamHTMLSurface ptr, HHTMLBrowser unBrowserHandle, const char *pchSearchStr, bool bCurrentlyInFind, bool bReverse)
     * }
     */
    public static void SteamAPI_ISteamHTMLSurface_Find(MemorySegment ptr, int unBrowserHandle, MemorySegment pchSearchStr, boolean bCurrentlyInFind, boolean bReverse) {
        var mh$ = SteamAPI_ISteamHTMLSurface_Find.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTMLSurface_Find", ptr, unBrowserHandle, pchSearchStr, bCurrentlyInFind, bReverse);
            }
            mh$.invokeExact(ptr, unBrowserHandle, pchSearchStr, bCurrentlyInFind, bReverse);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTMLSurface_StopFind {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamHTMLSurface_StopFind"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_StopFind(ISteamHTMLSurface ptr, HHTMLBrowser unBrowserHandle)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTMLSurface_StopFind$descriptor() {
        return SteamAPI_ISteamHTMLSurface_StopFind.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_StopFind(ISteamHTMLSurface ptr, HHTMLBrowser unBrowserHandle)
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTMLSurface_StopFind$handle() {
        return SteamAPI_ISteamHTMLSurface_StopFind.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_StopFind(ISteamHTMLSurface ptr, HHTMLBrowser unBrowserHandle)
     * }
     */
    public static void SteamAPI_ISteamHTMLSurface_StopFind(MemorySegment ptr, int unBrowserHandle) {
        var mh$ = SteamAPI_ISteamHTMLSurface_StopFind.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTMLSurface_StopFind", ptr, unBrowserHandle);
            }
            mh$.invokeExact(ptr, unBrowserHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTMLSurface_GetLinkAtPosition {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_INT,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamHTMLSurface_GetLinkAtPosition"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_GetLinkAtPosition(ISteamHTMLSurface ptr, HHTMLBrowser unBrowserHandle, int x, int y)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTMLSurface_GetLinkAtPosition$descriptor() {
        return SteamAPI_ISteamHTMLSurface_GetLinkAtPosition.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_GetLinkAtPosition(ISteamHTMLSurface ptr, HHTMLBrowser unBrowserHandle, int x, int y)
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTMLSurface_GetLinkAtPosition$handle() {
        return SteamAPI_ISteamHTMLSurface_GetLinkAtPosition.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_GetLinkAtPosition(ISteamHTMLSurface ptr, HHTMLBrowser unBrowserHandle, int x, int y)
     * }
     */
    public static void SteamAPI_ISteamHTMLSurface_GetLinkAtPosition(MemorySegment ptr, int unBrowserHandle, int x, int y) {
        var mh$ = SteamAPI_ISteamHTMLSurface_GetLinkAtPosition.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTMLSurface_GetLinkAtPosition", ptr, unBrowserHandle, x, y);
            }
            mh$.invokeExact(ptr, unBrowserHandle, x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTMLSurface_SetCookie {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_BOOL,
            SteamFlat.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamHTMLSurface_SetCookie"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_SetCookie(ISteamHTMLSurface ptr, const char *pchHostname, const char *pchKey, const char *pchValue, const char *pchPath, RTime32 nExpires, bool bSecure, bool bHTTPOnly)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTMLSurface_SetCookie$descriptor() {
        return SteamAPI_ISteamHTMLSurface_SetCookie.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_SetCookie(ISteamHTMLSurface ptr, const char *pchHostname, const char *pchKey, const char *pchValue, const char *pchPath, RTime32 nExpires, bool bSecure, bool bHTTPOnly)
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTMLSurface_SetCookie$handle() {
        return SteamAPI_ISteamHTMLSurface_SetCookie.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_SetCookie(ISteamHTMLSurface ptr, const char *pchHostname, const char *pchKey, const char *pchValue, const char *pchPath, RTime32 nExpires, bool bSecure, bool bHTTPOnly)
     * }
     */
    public static void SteamAPI_ISteamHTMLSurface_SetCookie(MemorySegment ptr, MemorySegment pchHostname, MemorySegment pchKey, MemorySegment pchValue, MemorySegment pchPath, int nExpires, boolean bSecure, boolean bHTTPOnly) {
        var mh$ = SteamAPI_ISteamHTMLSurface_SetCookie.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTMLSurface_SetCookie", ptr, pchHostname, pchKey, pchValue, pchPath, nExpires, bSecure, bHTTPOnly);
            }
            mh$.invokeExact(ptr, pchHostname, pchKey, pchValue, pchPath, nExpires, bSecure, bHTTPOnly);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTMLSurface_SetPageScaleFactor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_FLOAT,
            SteamFlat.C_INT,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamHTMLSurface_SetPageScaleFactor"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_SetPageScaleFactor(ISteamHTMLSurface ptr, HHTMLBrowser unBrowserHandle, float flZoom, int nPointX, int nPointY)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTMLSurface_SetPageScaleFactor$descriptor() {
        return SteamAPI_ISteamHTMLSurface_SetPageScaleFactor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_SetPageScaleFactor(ISteamHTMLSurface ptr, HHTMLBrowser unBrowserHandle, float flZoom, int nPointX, int nPointY)
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTMLSurface_SetPageScaleFactor$handle() {
        return SteamAPI_ISteamHTMLSurface_SetPageScaleFactor.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_SetPageScaleFactor(ISteamHTMLSurface ptr, HHTMLBrowser unBrowserHandle, float flZoom, int nPointX, int nPointY)
     * }
     */
    public static void SteamAPI_ISteamHTMLSurface_SetPageScaleFactor(MemorySegment ptr, int unBrowserHandle, float flZoom, int nPointX, int nPointY) {
        var mh$ = SteamAPI_ISteamHTMLSurface_SetPageScaleFactor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTMLSurface_SetPageScaleFactor", ptr, unBrowserHandle, flZoom, nPointX, nPointY);
            }
            mh$.invokeExact(ptr, unBrowserHandle, flZoom, nPointX, nPointY);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTMLSurface_SetBackgroundMode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamHTMLSurface_SetBackgroundMode"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_SetBackgroundMode(ISteamHTMLSurface ptr, HHTMLBrowser unBrowserHandle, bool bBackgroundMode)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTMLSurface_SetBackgroundMode$descriptor() {
        return SteamAPI_ISteamHTMLSurface_SetBackgroundMode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_SetBackgroundMode(ISteamHTMLSurface ptr, HHTMLBrowser unBrowserHandle, bool bBackgroundMode)
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTMLSurface_SetBackgroundMode$handle() {
        return SteamAPI_ISteamHTMLSurface_SetBackgroundMode.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_SetBackgroundMode(ISteamHTMLSurface ptr, HHTMLBrowser unBrowserHandle, bool bBackgroundMode)
     * }
     */
    public static void SteamAPI_ISteamHTMLSurface_SetBackgroundMode(MemorySegment ptr, int unBrowserHandle, boolean bBackgroundMode) {
        var mh$ = SteamAPI_ISteamHTMLSurface_SetBackgroundMode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTMLSurface_SetBackgroundMode", ptr, unBrowserHandle, bBackgroundMode);
            }
            mh$.invokeExact(ptr, unBrowserHandle, bBackgroundMode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTMLSurface_SetDPIScalingFactor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_FLOAT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamHTMLSurface_SetDPIScalingFactor"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_SetDPIScalingFactor(ISteamHTMLSurface ptr, HHTMLBrowser unBrowserHandle, float flDPIScaling)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTMLSurface_SetDPIScalingFactor$descriptor() {
        return SteamAPI_ISteamHTMLSurface_SetDPIScalingFactor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_SetDPIScalingFactor(ISteamHTMLSurface ptr, HHTMLBrowser unBrowserHandle, float flDPIScaling)
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTMLSurface_SetDPIScalingFactor$handle() {
        return SteamAPI_ISteamHTMLSurface_SetDPIScalingFactor.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_SetDPIScalingFactor(ISteamHTMLSurface ptr, HHTMLBrowser unBrowserHandle, float flDPIScaling)
     * }
     */
    public static void SteamAPI_ISteamHTMLSurface_SetDPIScalingFactor(MemorySegment ptr, int unBrowserHandle, float flDPIScaling) {
        var mh$ = SteamAPI_ISteamHTMLSurface_SetDPIScalingFactor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTMLSurface_SetDPIScalingFactor", ptr, unBrowserHandle, flDPIScaling);
            }
            mh$.invokeExact(ptr, unBrowserHandle, flDPIScaling);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTMLSurface_OpenDeveloperTools {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamHTMLSurface_OpenDeveloperTools"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_OpenDeveloperTools(ISteamHTMLSurface ptr, HHTMLBrowser unBrowserHandle)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTMLSurface_OpenDeveloperTools$descriptor() {
        return SteamAPI_ISteamHTMLSurface_OpenDeveloperTools.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_OpenDeveloperTools(ISteamHTMLSurface ptr, HHTMLBrowser unBrowserHandle)
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTMLSurface_OpenDeveloperTools$handle() {
        return SteamAPI_ISteamHTMLSurface_OpenDeveloperTools.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_OpenDeveloperTools(ISteamHTMLSurface ptr, HHTMLBrowser unBrowserHandle)
     * }
     */
    public static void SteamAPI_ISteamHTMLSurface_OpenDeveloperTools(MemorySegment ptr, int unBrowserHandle) {
        var mh$ = SteamAPI_ISteamHTMLSurface_OpenDeveloperTools.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTMLSurface_OpenDeveloperTools", ptr, unBrowserHandle);
            }
            mh$.invokeExact(ptr, unBrowserHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTMLSurface_AllowStartRequest {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamHTMLSurface_AllowStartRequest"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_AllowStartRequest(ISteamHTMLSurface ptr, HHTMLBrowser unBrowserHandle, bool bAllowed)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTMLSurface_AllowStartRequest$descriptor() {
        return SteamAPI_ISteamHTMLSurface_AllowStartRequest.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_AllowStartRequest(ISteamHTMLSurface ptr, HHTMLBrowser unBrowserHandle, bool bAllowed)
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTMLSurface_AllowStartRequest$handle() {
        return SteamAPI_ISteamHTMLSurface_AllowStartRequest.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_AllowStartRequest(ISteamHTMLSurface ptr, HHTMLBrowser unBrowserHandle, bool bAllowed)
     * }
     */
    public static void SteamAPI_ISteamHTMLSurface_AllowStartRequest(MemorySegment ptr, int unBrowserHandle, boolean bAllowed) {
        var mh$ = SteamAPI_ISteamHTMLSurface_AllowStartRequest.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTMLSurface_AllowStartRequest", ptr, unBrowserHandle, bAllowed);
            }
            mh$.invokeExact(ptr, unBrowserHandle, bAllowed);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTMLSurface_JSDialogResponse {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamHTMLSurface_JSDialogResponse"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_JSDialogResponse(ISteamHTMLSurface ptr, HHTMLBrowser unBrowserHandle, bool bResult)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTMLSurface_JSDialogResponse$descriptor() {
        return SteamAPI_ISteamHTMLSurface_JSDialogResponse.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_JSDialogResponse(ISteamHTMLSurface ptr, HHTMLBrowser unBrowserHandle, bool bResult)
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTMLSurface_JSDialogResponse$handle() {
        return SteamAPI_ISteamHTMLSurface_JSDialogResponse.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_JSDialogResponse(ISteamHTMLSurface ptr, HHTMLBrowser unBrowserHandle, bool bResult)
     * }
     */
    public static void SteamAPI_ISteamHTMLSurface_JSDialogResponse(MemorySegment ptr, int unBrowserHandle, boolean bResult) {
        var mh$ = SteamAPI_ISteamHTMLSurface_JSDialogResponse.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTMLSurface_JSDialogResponse", ptr, unBrowserHandle, bResult);
            }
            mh$.invokeExact(ptr, unBrowserHandle, bResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTMLSurface_FileLoadDialogResponse {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamHTMLSurface_FileLoadDialogResponse"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_FileLoadDialogResponse(ISteamHTMLSurface ptr, HHTMLBrowser unBrowserHandle, const char **pchSelectedFiles)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTMLSurface_FileLoadDialogResponse$descriptor() {
        return SteamAPI_ISteamHTMLSurface_FileLoadDialogResponse.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_FileLoadDialogResponse(ISteamHTMLSurface ptr, HHTMLBrowser unBrowserHandle, const char **pchSelectedFiles)
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTMLSurface_FileLoadDialogResponse$handle() {
        return SteamAPI_ISteamHTMLSurface_FileLoadDialogResponse.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_FileLoadDialogResponse(ISteamHTMLSurface ptr, HHTMLBrowser unBrowserHandle, const char **pchSelectedFiles)
     * }
     */
    public static void SteamAPI_ISteamHTMLSurface_FileLoadDialogResponse(MemorySegment ptr, int unBrowserHandle, MemorySegment pchSelectedFiles) {
        var mh$ = SteamAPI_ISteamHTMLSurface_FileLoadDialogResponse.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTMLSurface_FileLoadDialogResponse", ptr, unBrowserHandle, pchSelectedFiles);
            }
            mh$.invokeExact(ptr, unBrowserHandle, pchSelectedFiles);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_SteamHTMLSurface_v005 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_SteamHTMLSurface_v005"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ISteamHTMLSurface SteamAPI_SteamHTMLSurface_v005()
     * }
     */
    public static FunctionDescriptor SteamAPI_SteamHTMLSurface_v005$descriptor() {
        return SteamAPI_SteamHTMLSurface_v005.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ISteamHTMLSurface SteamAPI_SteamHTMLSurface_v005()
     * }
     */
    public static MethodHandle SteamAPI_SteamHTMLSurface_v005$handle() {
        return SteamAPI_SteamHTMLSurface_v005.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ISteamHTMLSurface SteamAPI_SteamHTMLSurface_v005()
     * }
     */
    public static MemorySegment SteamAPI_SteamHTMLSurface_v005() {
        var mh$ = SteamAPI_SteamHTMLSurface_v005.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_SteamHTMLSurface_v005");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInventory_GetResultStatus {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamInventory_GetResultStatus"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * EResult SteamAPI_ISteamInventory_GetResultStatus(ISteamInventory ptr, SteamInventoryResult_t resultHandle)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInventory_GetResultStatus$descriptor() {
        return SteamAPI_ISteamInventory_GetResultStatus.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * EResult SteamAPI_ISteamInventory_GetResultStatus(ISteamInventory ptr, SteamInventoryResult_t resultHandle)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInventory_GetResultStatus$handle() {
        return SteamAPI_ISteamInventory_GetResultStatus.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * EResult SteamAPI_ISteamInventory_GetResultStatus(ISteamInventory ptr, SteamInventoryResult_t resultHandle)
     * }
     */
    public static int SteamAPI_ISteamInventory_GetResultStatus(MemorySegment ptr, int resultHandle) {
        var mh$ = SteamAPI_ISteamInventory_GetResultStatus.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInventory_GetResultStatus", ptr, resultHandle);
            }
            return (int)mh$.invokeExact(ptr, resultHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInventory_GetResultItems {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamInventory_GetResultItems"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_GetResultItems(ISteamInventory ptr, SteamInventoryResult_t resultHandle, SteamItemDetails_t *pOutItemsArray, uint32 *punOutItemsArraySize)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInventory_GetResultItems$descriptor() {
        return SteamAPI_ISteamInventory_GetResultItems.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_GetResultItems(ISteamInventory ptr, SteamInventoryResult_t resultHandle, SteamItemDetails_t *pOutItemsArray, uint32 *punOutItemsArraySize)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInventory_GetResultItems$handle() {
        return SteamAPI_ISteamInventory_GetResultItems.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_GetResultItems(ISteamInventory ptr, SteamInventoryResult_t resultHandle, SteamItemDetails_t *pOutItemsArray, uint32 *punOutItemsArraySize)
     * }
     */
    public static boolean SteamAPI_ISteamInventory_GetResultItems(MemorySegment ptr, int resultHandle, MemorySegment pOutItemsArray, MemorySegment punOutItemsArraySize) {
        var mh$ = SteamAPI_ISteamInventory_GetResultItems.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInventory_GetResultItems", ptr, resultHandle, pOutItemsArray, punOutItemsArraySize);
            }
            return (boolean)mh$.invokeExact(ptr, resultHandle, pOutItemsArray, punOutItemsArraySize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInventory_GetResultItemProperty {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamInventory_GetResultItemProperty"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_GetResultItemProperty(ISteamInventory ptr, SteamInventoryResult_t resultHandle, uint32 unItemIndex, const char *pchPropertyName, char *pchValueBuffer, uint32 *punValueBufferSizeOut)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInventory_GetResultItemProperty$descriptor() {
        return SteamAPI_ISteamInventory_GetResultItemProperty.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_GetResultItemProperty(ISteamInventory ptr, SteamInventoryResult_t resultHandle, uint32 unItemIndex, const char *pchPropertyName, char *pchValueBuffer, uint32 *punValueBufferSizeOut)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInventory_GetResultItemProperty$handle() {
        return SteamAPI_ISteamInventory_GetResultItemProperty.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_GetResultItemProperty(ISteamInventory ptr, SteamInventoryResult_t resultHandle, uint32 unItemIndex, const char *pchPropertyName, char *pchValueBuffer, uint32 *punValueBufferSizeOut)
     * }
     */
    public static boolean SteamAPI_ISteamInventory_GetResultItemProperty(MemorySegment ptr, int resultHandle, int unItemIndex, MemorySegment pchPropertyName, MemorySegment pchValueBuffer, MemorySegment punValueBufferSizeOut) {
        var mh$ = SteamAPI_ISteamInventory_GetResultItemProperty.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInventory_GetResultItemProperty", ptr, resultHandle, unItemIndex, pchPropertyName, pchValueBuffer, punValueBufferSizeOut);
            }
            return (boolean)mh$.invokeExact(ptr, resultHandle, unItemIndex, pchPropertyName, pchValueBuffer, punValueBufferSizeOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInventory_GetResultTimestamp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamInventory_GetResultTimestamp"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamInventory_GetResultTimestamp(ISteamInventory ptr, SteamInventoryResult_t resultHandle)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInventory_GetResultTimestamp$descriptor() {
        return SteamAPI_ISteamInventory_GetResultTimestamp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamInventory_GetResultTimestamp(ISteamInventory ptr, SteamInventoryResult_t resultHandle)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInventory_GetResultTimestamp$handle() {
        return SteamAPI_ISteamInventory_GetResultTimestamp.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamInventory_GetResultTimestamp(ISteamInventory ptr, SteamInventoryResult_t resultHandle)
     * }
     */
    public static int SteamAPI_ISteamInventory_GetResultTimestamp(MemorySegment ptr, int resultHandle) {
        var mh$ = SteamAPI_ISteamInventory_GetResultTimestamp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInventory_GetResultTimestamp", ptr, resultHandle);
            }
            return (int)mh$.invokeExact(ptr, resultHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInventory_CheckResultSteamID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamInventory_CheckResultSteamID"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_CheckResultSteamID(ISteamInventory ptr, SteamInventoryResult_t resultHandle, uint64_steamid steamIDExpected)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInventory_CheckResultSteamID$descriptor() {
        return SteamAPI_ISteamInventory_CheckResultSteamID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_CheckResultSteamID(ISteamInventory ptr, SteamInventoryResult_t resultHandle, uint64_steamid steamIDExpected)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInventory_CheckResultSteamID$handle() {
        return SteamAPI_ISteamInventory_CheckResultSteamID.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_CheckResultSteamID(ISteamInventory ptr, SteamInventoryResult_t resultHandle, uint64_steamid steamIDExpected)
     * }
     */
    public static boolean SteamAPI_ISteamInventory_CheckResultSteamID(MemorySegment ptr, int resultHandle, long steamIDExpected) {
        var mh$ = SteamAPI_ISteamInventory_CheckResultSteamID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInventory_CheckResultSteamID", ptr, resultHandle, steamIDExpected);
            }
            return (boolean)mh$.invokeExact(ptr, resultHandle, steamIDExpected);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInventory_DestroyResult {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamInventory_DestroyResult"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamInventory_DestroyResult(ISteamInventory ptr, SteamInventoryResult_t resultHandle)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInventory_DestroyResult$descriptor() {
        return SteamAPI_ISteamInventory_DestroyResult.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamInventory_DestroyResult(ISteamInventory ptr, SteamInventoryResult_t resultHandle)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInventory_DestroyResult$handle() {
        return SteamAPI_ISteamInventory_DestroyResult.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamInventory_DestroyResult(ISteamInventory ptr, SteamInventoryResult_t resultHandle)
     * }
     */
    public static void SteamAPI_ISteamInventory_DestroyResult(MemorySegment ptr, int resultHandle) {
        var mh$ = SteamAPI_ISteamInventory_DestroyResult.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInventory_DestroyResult", ptr, resultHandle);
            }
            mh$.invokeExact(ptr, resultHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInventory_GetAllItems {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamInventory_GetAllItems"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_GetAllItems(ISteamInventory ptr, SteamInventoryResult_t *pResultHandle)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInventory_GetAllItems$descriptor() {
        return SteamAPI_ISteamInventory_GetAllItems.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_GetAllItems(ISteamInventory ptr, SteamInventoryResult_t *pResultHandle)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInventory_GetAllItems$handle() {
        return SteamAPI_ISteamInventory_GetAllItems.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_GetAllItems(ISteamInventory ptr, SteamInventoryResult_t *pResultHandle)
     * }
     */
    public static boolean SteamAPI_ISteamInventory_GetAllItems(MemorySegment ptr, MemorySegment pResultHandle) {
        var mh$ = SteamAPI_ISteamInventory_GetAllItems.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInventory_GetAllItems", ptr, pResultHandle);
            }
            return (boolean)mh$.invokeExact(ptr, pResultHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInventory_GetItemsByID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamInventory_GetItemsByID"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_GetItemsByID(ISteamInventory ptr, SteamInventoryResult_t *pResultHandle, const SteamItemInstanceID_t *pInstanceIDs, uint32 unCountInstanceIDs)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInventory_GetItemsByID$descriptor() {
        return SteamAPI_ISteamInventory_GetItemsByID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_GetItemsByID(ISteamInventory ptr, SteamInventoryResult_t *pResultHandle, const SteamItemInstanceID_t *pInstanceIDs, uint32 unCountInstanceIDs)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInventory_GetItemsByID$handle() {
        return SteamAPI_ISteamInventory_GetItemsByID.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_GetItemsByID(ISteamInventory ptr, SteamInventoryResult_t *pResultHandle, const SteamItemInstanceID_t *pInstanceIDs, uint32 unCountInstanceIDs)
     * }
     */
    public static boolean SteamAPI_ISteamInventory_GetItemsByID(MemorySegment ptr, MemorySegment pResultHandle, MemorySegment pInstanceIDs, int unCountInstanceIDs) {
        var mh$ = SteamAPI_ISteamInventory_GetItemsByID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInventory_GetItemsByID", ptr, pResultHandle, pInstanceIDs, unCountInstanceIDs);
            }
            return (boolean)mh$.invokeExact(ptr, pResultHandle, pInstanceIDs, unCountInstanceIDs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInventory_SerializeResult {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamInventory_SerializeResult"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_SerializeResult(ISteamInventory ptr, SteamInventoryResult_t resultHandle, void *pOutBuffer, uint32 *punOutBufferSize)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInventory_SerializeResult$descriptor() {
        return SteamAPI_ISteamInventory_SerializeResult.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_SerializeResult(ISteamInventory ptr, SteamInventoryResult_t resultHandle, void *pOutBuffer, uint32 *punOutBufferSize)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInventory_SerializeResult$handle() {
        return SteamAPI_ISteamInventory_SerializeResult.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_SerializeResult(ISteamInventory ptr, SteamInventoryResult_t resultHandle, void *pOutBuffer, uint32 *punOutBufferSize)
     * }
     */
    public static boolean SteamAPI_ISteamInventory_SerializeResult(MemorySegment ptr, int resultHandle, MemorySegment pOutBuffer, MemorySegment punOutBufferSize) {
        var mh$ = SteamAPI_ISteamInventory_SerializeResult.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInventory_SerializeResult", ptr, resultHandle, pOutBuffer, punOutBufferSize);
            }
            return (boolean)mh$.invokeExact(ptr, resultHandle, pOutBuffer, punOutBufferSize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInventory_DeserializeResult {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamInventory_DeserializeResult"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_DeserializeResult(ISteamInventory ptr, SteamInventoryResult_t *pOutResultHandle, const void *pBuffer, uint32 unBufferSize, bool bRESERVED_MUST_BE_FALSE)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInventory_DeserializeResult$descriptor() {
        return SteamAPI_ISteamInventory_DeserializeResult.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_DeserializeResult(ISteamInventory ptr, SteamInventoryResult_t *pOutResultHandle, const void *pBuffer, uint32 unBufferSize, bool bRESERVED_MUST_BE_FALSE)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInventory_DeserializeResult$handle() {
        return SteamAPI_ISteamInventory_DeserializeResult.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_DeserializeResult(ISteamInventory ptr, SteamInventoryResult_t *pOutResultHandle, const void *pBuffer, uint32 unBufferSize, bool bRESERVED_MUST_BE_FALSE)
     * }
     */
    public static boolean SteamAPI_ISteamInventory_DeserializeResult(MemorySegment ptr, MemorySegment pOutResultHandle, MemorySegment pBuffer, int unBufferSize, boolean bRESERVED_MUST_BE_FALSE) {
        var mh$ = SteamAPI_ISteamInventory_DeserializeResult.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInventory_DeserializeResult", ptr, pOutResultHandle, pBuffer, unBufferSize, bRESERVED_MUST_BE_FALSE);
            }
            return (boolean)mh$.invokeExact(ptr, pOutResultHandle, pBuffer, unBufferSize, bRESERVED_MUST_BE_FALSE);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInventory_GenerateItems {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamInventory_GenerateItems"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_GenerateItems(ISteamInventory ptr, SteamInventoryResult_t *pResultHandle, const SteamItemDef_t *pArrayItemDefs, const uint32 *punArrayQuantity, uint32 unArrayLength)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInventory_GenerateItems$descriptor() {
        return SteamAPI_ISteamInventory_GenerateItems.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_GenerateItems(ISteamInventory ptr, SteamInventoryResult_t *pResultHandle, const SteamItemDef_t *pArrayItemDefs, const uint32 *punArrayQuantity, uint32 unArrayLength)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInventory_GenerateItems$handle() {
        return SteamAPI_ISteamInventory_GenerateItems.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_GenerateItems(ISteamInventory ptr, SteamInventoryResult_t *pResultHandle, const SteamItemDef_t *pArrayItemDefs, const uint32 *punArrayQuantity, uint32 unArrayLength)
     * }
     */
    public static boolean SteamAPI_ISteamInventory_GenerateItems(MemorySegment ptr, MemorySegment pResultHandle, MemorySegment pArrayItemDefs, MemorySegment punArrayQuantity, int unArrayLength) {
        var mh$ = SteamAPI_ISteamInventory_GenerateItems.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInventory_GenerateItems", ptr, pResultHandle, pArrayItemDefs, punArrayQuantity, unArrayLength);
            }
            return (boolean)mh$.invokeExact(ptr, pResultHandle, pArrayItemDefs, punArrayQuantity, unArrayLength);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInventory_GrantPromoItems {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamInventory_GrantPromoItems"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_GrantPromoItems(ISteamInventory ptr, SteamInventoryResult_t *pResultHandle)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInventory_GrantPromoItems$descriptor() {
        return SteamAPI_ISteamInventory_GrantPromoItems.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_GrantPromoItems(ISteamInventory ptr, SteamInventoryResult_t *pResultHandle)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInventory_GrantPromoItems$handle() {
        return SteamAPI_ISteamInventory_GrantPromoItems.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_GrantPromoItems(ISteamInventory ptr, SteamInventoryResult_t *pResultHandle)
     * }
     */
    public static boolean SteamAPI_ISteamInventory_GrantPromoItems(MemorySegment ptr, MemorySegment pResultHandle) {
        var mh$ = SteamAPI_ISteamInventory_GrantPromoItems.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInventory_GrantPromoItems", ptr, pResultHandle);
            }
            return (boolean)mh$.invokeExact(ptr, pResultHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInventory_AddPromoItem {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamInventory_AddPromoItem"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_AddPromoItem(ISteamInventory ptr, SteamInventoryResult_t *pResultHandle, SteamItemDef_t itemDef)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInventory_AddPromoItem$descriptor() {
        return SteamAPI_ISteamInventory_AddPromoItem.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_AddPromoItem(ISteamInventory ptr, SteamInventoryResult_t *pResultHandle, SteamItemDef_t itemDef)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInventory_AddPromoItem$handle() {
        return SteamAPI_ISteamInventory_AddPromoItem.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_AddPromoItem(ISteamInventory ptr, SteamInventoryResult_t *pResultHandle, SteamItemDef_t itemDef)
     * }
     */
    public static boolean SteamAPI_ISteamInventory_AddPromoItem(MemorySegment ptr, MemorySegment pResultHandle, int itemDef) {
        var mh$ = SteamAPI_ISteamInventory_AddPromoItem.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInventory_AddPromoItem", ptr, pResultHandle, itemDef);
            }
            return (boolean)mh$.invokeExact(ptr, pResultHandle, itemDef);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInventory_AddPromoItems {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamInventory_AddPromoItems"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_AddPromoItems(ISteamInventory ptr, SteamInventoryResult_t *pResultHandle, const SteamItemDef_t *pArrayItemDefs, uint32 unArrayLength)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInventory_AddPromoItems$descriptor() {
        return SteamAPI_ISteamInventory_AddPromoItems.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_AddPromoItems(ISteamInventory ptr, SteamInventoryResult_t *pResultHandle, const SteamItemDef_t *pArrayItemDefs, uint32 unArrayLength)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInventory_AddPromoItems$handle() {
        return SteamAPI_ISteamInventory_AddPromoItems.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_AddPromoItems(ISteamInventory ptr, SteamInventoryResult_t *pResultHandle, const SteamItemDef_t *pArrayItemDefs, uint32 unArrayLength)
     * }
     */
    public static boolean SteamAPI_ISteamInventory_AddPromoItems(MemorySegment ptr, MemorySegment pResultHandle, MemorySegment pArrayItemDefs, int unArrayLength) {
        var mh$ = SteamAPI_ISteamInventory_AddPromoItems.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInventory_AddPromoItems", ptr, pResultHandle, pArrayItemDefs, unArrayLength);
            }
            return (boolean)mh$.invokeExact(ptr, pResultHandle, pArrayItemDefs, unArrayLength);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInventory_ConsumeItem {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamInventory_ConsumeItem"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_ConsumeItem(ISteamInventory ptr, SteamInventoryResult_t *pResultHandle, SteamItemInstanceID_t itemConsume, uint32 unQuantity)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInventory_ConsumeItem$descriptor() {
        return SteamAPI_ISteamInventory_ConsumeItem.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_ConsumeItem(ISteamInventory ptr, SteamInventoryResult_t *pResultHandle, SteamItemInstanceID_t itemConsume, uint32 unQuantity)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInventory_ConsumeItem$handle() {
        return SteamAPI_ISteamInventory_ConsumeItem.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_ConsumeItem(ISteamInventory ptr, SteamInventoryResult_t *pResultHandle, SteamItemInstanceID_t itemConsume, uint32 unQuantity)
     * }
     */
    public static boolean SteamAPI_ISteamInventory_ConsumeItem(MemorySegment ptr, MemorySegment pResultHandle, long itemConsume, int unQuantity) {
        var mh$ = SteamAPI_ISteamInventory_ConsumeItem.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInventory_ConsumeItem", ptr, pResultHandle, itemConsume, unQuantity);
            }
            return (boolean)mh$.invokeExact(ptr, pResultHandle, itemConsume, unQuantity);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInventory_ExchangeItems {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamInventory_ExchangeItems"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_ExchangeItems(ISteamInventory ptr, SteamInventoryResult_t *pResultHandle, const SteamItemDef_t *pArrayGenerate, const uint32 *punArrayGenerateQuantity, uint32 unArrayGenerateLength, const SteamItemInstanceID_t *pArrayDestroy, const uint32 *punArrayDestroyQuantity, uint32 unArrayDestroyLength)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInventory_ExchangeItems$descriptor() {
        return SteamAPI_ISteamInventory_ExchangeItems.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_ExchangeItems(ISteamInventory ptr, SteamInventoryResult_t *pResultHandle, const SteamItemDef_t *pArrayGenerate, const uint32 *punArrayGenerateQuantity, uint32 unArrayGenerateLength, const SteamItemInstanceID_t *pArrayDestroy, const uint32 *punArrayDestroyQuantity, uint32 unArrayDestroyLength)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInventory_ExchangeItems$handle() {
        return SteamAPI_ISteamInventory_ExchangeItems.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_ExchangeItems(ISteamInventory ptr, SteamInventoryResult_t *pResultHandle, const SteamItemDef_t *pArrayGenerate, const uint32 *punArrayGenerateQuantity, uint32 unArrayGenerateLength, const SteamItemInstanceID_t *pArrayDestroy, const uint32 *punArrayDestroyQuantity, uint32 unArrayDestroyLength)
     * }
     */
    public static boolean SteamAPI_ISteamInventory_ExchangeItems(MemorySegment ptr, MemorySegment pResultHandle, MemorySegment pArrayGenerate, MemorySegment punArrayGenerateQuantity, int unArrayGenerateLength, MemorySegment pArrayDestroy, MemorySegment punArrayDestroyQuantity, int unArrayDestroyLength) {
        var mh$ = SteamAPI_ISteamInventory_ExchangeItems.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInventory_ExchangeItems", ptr, pResultHandle, pArrayGenerate, punArrayGenerateQuantity, unArrayGenerateLength, pArrayDestroy, punArrayDestroyQuantity, unArrayDestroyLength);
            }
            return (boolean)mh$.invokeExact(ptr, pResultHandle, pArrayGenerate, punArrayGenerateQuantity, unArrayGenerateLength, pArrayDestroy, punArrayDestroyQuantity, unArrayDestroyLength);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInventory_TransferItemQuantity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_INT,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamInventory_TransferItemQuantity"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_TransferItemQuantity(ISteamInventory ptr, SteamInventoryResult_t *pResultHandle, SteamItemInstanceID_t itemIdSource, uint32 unQuantity, SteamItemInstanceID_t itemIdDest)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInventory_TransferItemQuantity$descriptor() {
        return SteamAPI_ISteamInventory_TransferItemQuantity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_TransferItemQuantity(ISteamInventory ptr, SteamInventoryResult_t *pResultHandle, SteamItemInstanceID_t itemIdSource, uint32 unQuantity, SteamItemInstanceID_t itemIdDest)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInventory_TransferItemQuantity$handle() {
        return SteamAPI_ISteamInventory_TransferItemQuantity.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_TransferItemQuantity(ISteamInventory ptr, SteamInventoryResult_t *pResultHandle, SteamItemInstanceID_t itemIdSource, uint32 unQuantity, SteamItemInstanceID_t itemIdDest)
     * }
     */
    public static boolean SteamAPI_ISteamInventory_TransferItemQuantity(MemorySegment ptr, MemorySegment pResultHandle, long itemIdSource, int unQuantity, long itemIdDest) {
        var mh$ = SteamAPI_ISteamInventory_TransferItemQuantity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInventory_TransferItemQuantity", ptr, pResultHandle, itemIdSource, unQuantity, itemIdDest);
            }
            return (boolean)mh$.invokeExact(ptr, pResultHandle, itemIdSource, unQuantity, itemIdDest);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInventory_SendItemDropHeartbeat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamInventory_SendItemDropHeartbeat"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamInventory_SendItemDropHeartbeat(ISteamInventory ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInventory_SendItemDropHeartbeat$descriptor() {
        return SteamAPI_ISteamInventory_SendItemDropHeartbeat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamInventory_SendItemDropHeartbeat(ISteamInventory ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInventory_SendItemDropHeartbeat$handle() {
        return SteamAPI_ISteamInventory_SendItemDropHeartbeat.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamInventory_SendItemDropHeartbeat(ISteamInventory ptr)
     * }
     */
    public static void SteamAPI_ISteamInventory_SendItemDropHeartbeat(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamInventory_SendItemDropHeartbeat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInventory_SendItemDropHeartbeat", ptr);
            }
            mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInventory_TriggerItemDrop {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamInventory_TriggerItemDrop"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_TriggerItemDrop(ISteamInventory ptr, SteamInventoryResult_t *pResultHandle, SteamItemDef_t dropListDefinition)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInventory_TriggerItemDrop$descriptor() {
        return SteamAPI_ISteamInventory_TriggerItemDrop.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_TriggerItemDrop(ISteamInventory ptr, SteamInventoryResult_t *pResultHandle, SteamItemDef_t dropListDefinition)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInventory_TriggerItemDrop$handle() {
        return SteamAPI_ISteamInventory_TriggerItemDrop.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_TriggerItemDrop(ISteamInventory ptr, SteamInventoryResult_t *pResultHandle, SteamItemDef_t dropListDefinition)
     * }
     */
    public static boolean SteamAPI_ISteamInventory_TriggerItemDrop(MemorySegment ptr, MemorySegment pResultHandle, int dropListDefinition) {
        var mh$ = SteamAPI_ISteamInventory_TriggerItemDrop.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInventory_TriggerItemDrop", ptr, pResultHandle, dropListDefinition);
            }
            return (boolean)mh$.invokeExact(ptr, pResultHandle, dropListDefinition);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInventory_TradeItems {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamInventory_TradeItems"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_TradeItems(ISteamInventory ptr, SteamInventoryResult_t *pResultHandle, uint64_steamid steamIDTradePartner, const SteamItemInstanceID_t *pArrayGive, const uint32 *pArrayGiveQuantity, uint32 nArrayGiveLength, const SteamItemInstanceID_t *pArrayGet, const uint32 *pArrayGetQuantity, uint32 nArrayGetLength)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInventory_TradeItems$descriptor() {
        return SteamAPI_ISteamInventory_TradeItems.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_TradeItems(ISteamInventory ptr, SteamInventoryResult_t *pResultHandle, uint64_steamid steamIDTradePartner, const SteamItemInstanceID_t *pArrayGive, const uint32 *pArrayGiveQuantity, uint32 nArrayGiveLength, const SteamItemInstanceID_t *pArrayGet, const uint32 *pArrayGetQuantity, uint32 nArrayGetLength)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInventory_TradeItems$handle() {
        return SteamAPI_ISteamInventory_TradeItems.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_TradeItems(ISteamInventory ptr, SteamInventoryResult_t *pResultHandle, uint64_steamid steamIDTradePartner, const SteamItemInstanceID_t *pArrayGive, const uint32 *pArrayGiveQuantity, uint32 nArrayGiveLength, const SteamItemInstanceID_t *pArrayGet, const uint32 *pArrayGetQuantity, uint32 nArrayGetLength)
     * }
     */
    public static boolean SteamAPI_ISteamInventory_TradeItems(MemorySegment ptr, MemorySegment pResultHandle, long steamIDTradePartner, MemorySegment pArrayGive, MemorySegment pArrayGiveQuantity, int nArrayGiveLength, MemorySegment pArrayGet, MemorySegment pArrayGetQuantity, int nArrayGetLength) {
        var mh$ = SteamAPI_ISteamInventory_TradeItems.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInventory_TradeItems", ptr, pResultHandle, steamIDTradePartner, pArrayGive, pArrayGiveQuantity, nArrayGiveLength, pArrayGet, pArrayGetQuantity, nArrayGetLength);
            }
            return (boolean)mh$.invokeExact(ptr, pResultHandle, steamIDTradePartner, pArrayGive, pArrayGiveQuantity, nArrayGiveLength, pArrayGet, pArrayGetQuantity, nArrayGetLength);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInventory_LoadItemDefinitions {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamInventory_LoadItemDefinitions"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_LoadItemDefinitions(ISteamInventory ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInventory_LoadItemDefinitions$descriptor() {
        return SteamAPI_ISteamInventory_LoadItemDefinitions.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_LoadItemDefinitions(ISteamInventory ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInventory_LoadItemDefinitions$handle() {
        return SteamAPI_ISteamInventory_LoadItemDefinitions.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_LoadItemDefinitions(ISteamInventory ptr)
     * }
     */
    public static boolean SteamAPI_ISteamInventory_LoadItemDefinitions(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamInventory_LoadItemDefinitions.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInventory_LoadItemDefinitions", ptr);
            }
            return (boolean)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInventory_GetItemDefinitionIDs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamInventory_GetItemDefinitionIDs"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_GetItemDefinitionIDs(ISteamInventory ptr, SteamItemDef_t *pItemDefIDs, uint32 *punItemDefIDsArraySize)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInventory_GetItemDefinitionIDs$descriptor() {
        return SteamAPI_ISteamInventory_GetItemDefinitionIDs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_GetItemDefinitionIDs(ISteamInventory ptr, SteamItemDef_t *pItemDefIDs, uint32 *punItemDefIDsArraySize)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInventory_GetItemDefinitionIDs$handle() {
        return SteamAPI_ISteamInventory_GetItemDefinitionIDs.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_GetItemDefinitionIDs(ISteamInventory ptr, SteamItemDef_t *pItemDefIDs, uint32 *punItemDefIDsArraySize)
     * }
     */
    public static boolean SteamAPI_ISteamInventory_GetItemDefinitionIDs(MemorySegment ptr, MemorySegment pItemDefIDs, MemorySegment punItemDefIDsArraySize) {
        var mh$ = SteamAPI_ISteamInventory_GetItemDefinitionIDs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInventory_GetItemDefinitionIDs", ptr, pItemDefIDs, punItemDefIDsArraySize);
            }
            return (boolean)mh$.invokeExact(ptr, pItemDefIDs, punItemDefIDsArraySize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInventory_GetItemDefinitionProperty {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamInventory_GetItemDefinitionProperty"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_GetItemDefinitionProperty(ISteamInventory ptr, SteamItemDef_t iDefinition, const char *pchPropertyName, char *pchValueBuffer, uint32 *punValueBufferSizeOut)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInventory_GetItemDefinitionProperty$descriptor() {
        return SteamAPI_ISteamInventory_GetItemDefinitionProperty.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_GetItemDefinitionProperty(ISteamInventory ptr, SteamItemDef_t iDefinition, const char *pchPropertyName, char *pchValueBuffer, uint32 *punValueBufferSizeOut)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInventory_GetItemDefinitionProperty$handle() {
        return SteamAPI_ISteamInventory_GetItemDefinitionProperty.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_GetItemDefinitionProperty(ISteamInventory ptr, SteamItemDef_t iDefinition, const char *pchPropertyName, char *pchValueBuffer, uint32 *punValueBufferSizeOut)
     * }
     */
    public static boolean SteamAPI_ISteamInventory_GetItemDefinitionProperty(MemorySegment ptr, int iDefinition, MemorySegment pchPropertyName, MemorySegment pchValueBuffer, MemorySegment punValueBufferSizeOut) {
        var mh$ = SteamAPI_ISteamInventory_GetItemDefinitionProperty.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInventory_GetItemDefinitionProperty", ptr, iDefinition, pchPropertyName, pchValueBuffer, punValueBufferSizeOut);
            }
            return (boolean)mh$.invokeExact(ptr, iDefinition, pchPropertyName, pchValueBuffer, punValueBufferSizeOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInventory_RequestEligiblePromoItemDefinitionsIDs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamInventory_RequestEligiblePromoItemDefinitionsIDs"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamInventory_RequestEligiblePromoItemDefinitionsIDs(ISteamInventory ptr, uint64_steamid steamID)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInventory_RequestEligiblePromoItemDefinitionsIDs$descriptor() {
        return SteamAPI_ISteamInventory_RequestEligiblePromoItemDefinitionsIDs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamInventory_RequestEligiblePromoItemDefinitionsIDs(ISteamInventory ptr, uint64_steamid steamID)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInventory_RequestEligiblePromoItemDefinitionsIDs$handle() {
        return SteamAPI_ISteamInventory_RequestEligiblePromoItemDefinitionsIDs.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamInventory_RequestEligiblePromoItemDefinitionsIDs(ISteamInventory ptr, uint64_steamid steamID)
     * }
     */
    public static long SteamAPI_ISteamInventory_RequestEligiblePromoItemDefinitionsIDs(MemorySegment ptr, long steamID) {
        var mh$ = SteamAPI_ISteamInventory_RequestEligiblePromoItemDefinitionsIDs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInventory_RequestEligiblePromoItemDefinitionsIDs", ptr, steamID);
            }
            return (long)mh$.invokeExact(ptr, steamID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInventory_GetEligiblePromoItemDefinitionIDs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamInventory_GetEligiblePromoItemDefinitionIDs"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_GetEligiblePromoItemDefinitionIDs(ISteamInventory ptr, uint64_steamid steamID, SteamItemDef_t *pItemDefIDs, uint32 *punItemDefIDsArraySize)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInventory_GetEligiblePromoItemDefinitionIDs$descriptor() {
        return SteamAPI_ISteamInventory_GetEligiblePromoItemDefinitionIDs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_GetEligiblePromoItemDefinitionIDs(ISteamInventory ptr, uint64_steamid steamID, SteamItemDef_t *pItemDefIDs, uint32 *punItemDefIDsArraySize)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInventory_GetEligiblePromoItemDefinitionIDs$handle() {
        return SteamAPI_ISteamInventory_GetEligiblePromoItemDefinitionIDs.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_GetEligiblePromoItemDefinitionIDs(ISteamInventory ptr, uint64_steamid steamID, SteamItemDef_t *pItemDefIDs, uint32 *punItemDefIDsArraySize)
     * }
     */
    public static boolean SteamAPI_ISteamInventory_GetEligiblePromoItemDefinitionIDs(MemorySegment ptr, long steamID, MemorySegment pItemDefIDs, MemorySegment punItemDefIDsArraySize) {
        var mh$ = SteamAPI_ISteamInventory_GetEligiblePromoItemDefinitionIDs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInventory_GetEligiblePromoItemDefinitionIDs", ptr, steamID, pItemDefIDs, punItemDefIDsArraySize);
            }
            return (boolean)mh$.invokeExact(ptr, steamID, pItemDefIDs, punItemDefIDsArraySize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInventory_StartPurchase {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamInventory_StartPurchase"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamInventory_StartPurchase(ISteamInventory ptr, const SteamItemDef_t *pArrayItemDefs, const uint32 *punArrayQuantity, uint32 unArrayLength)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInventory_StartPurchase$descriptor() {
        return SteamAPI_ISteamInventory_StartPurchase.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamInventory_StartPurchase(ISteamInventory ptr, const SteamItemDef_t *pArrayItemDefs, const uint32 *punArrayQuantity, uint32 unArrayLength)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInventory_StartPurchase$handle() {
        return SteamAPI_ISteamInventory_StartPurchase.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamInventory_StartPurchase(ISteamInventory ptr, const SteamItemDef_t *pArrayItemDefs, const uint32 *punArrayQuantity, uint32 unArrayLength)
     * }
     */
    public static long SteamAPI_ISteamInventory_StartPurchase(MemorySegment ptr, MemorySegment pArrayItemDefs, MemorySegment punArrayQuantity, int unArrayLength) {
        var mh$ = SteamAPI_ISteamInventory_StartPurchase.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInventory_StartPurchase", ptr, pArrayItemDefs, punArrayQuantity, unArrayLength);
            }
            return (long)mh$.invokeExact(ptr, pArrayItemDefs, punArrayQuantity, unArrayLength);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInventory_RequestPrices {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamInventory_RequestPrices"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamInventory_RequestPrices(ISteamInventory ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInventory_RequestPrices$descriptor() {
        return SteamAPI_ISteamInventory_RequestPrices.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamInventory_RequestPrices(ISteamInventory ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInventory_RequestPrices$handle() {
        return SteamAPI_ISteamInventory_RequestPrices.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamInventory_RequestPrices(ISteamInventory ptr)
     * }
     */
    public static long SteamAPI_ISteamInventory_RequestPrices(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamInventory_RequestPrices.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInventory_RequestPrices", ptr);
            }
            return (long)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInventory_GetNumItemsWithPrices {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamInventory_GetNumItemsWithPrices"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamInventory_GetNumItemsWithPrices(ISteamInventory ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInventory_GetNumItemsWithPrices$descriptor() {
        return SteamAPI_ISteamInventory_GetNumItemsWithPrices.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamInventory_GetNumItemsWithPrices(ISteamInventory ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInventory_GetNumItemsWithPrices$handle() {
        return SteamAPI_ISteamInventory_GetNumItemsWithPrices.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamInventory_GetNumItemsWithPrices(ISteamInventory ptr)
     * }
     */
    public static int SteamAPI_ISteamInventory_GetNumItemsWithPrices(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamInventory_GetNumItemsWithPrices.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInventory_GetNumItemsWithPrices", ptr);
            }
            return (int)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInventory_GetItemsWithPrices {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamInventory_GetItemsWithPrices"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_GetItemsWithPrices(ISteamInventory ptr, SteamItemDef_t *pArrayItemDefs, uint64 *pCurrentPrices, uint64 *pBasePrices, uint32 unArrayLength)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInventory_GetItemsWithPrices$descriptor() {
        return SteamAPI_ISteamInventory_GetItemsWithPrices.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_GetItemsWithPrices(ISteamInventory ptr, SteamItemDef_t *pArrayItemDefs, uint64 *pCurrentPrices, uint64 *pBasePrices, uint32 unArrayLength)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInventory_GetItemsWithPrices$handle() {
        return SteamAPI_ISteamInventory_GetItemsWithPrices.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_GetItemsWithPrices(ISteamInventory ptr, SteamItemDef_t *pArrayItemDefs, uint64 *pCurrentPrices, uint64 *pBasePrices, uint32 unArrayLength)
     * }
     */
    public static boolean SteamAPI_ISteamInventory_GetItemsWithPrices(MemorySegment ptr, MemorySegment pArrayItemDefs, MemorySegment pCurrentPrices, MemorySegment pBasePrices, int unArrayLength) {
        var mh$ = SteamAPI_ISteamInventory_GetItemsWithPrices.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInventory_GetItemsWithPrices", ptr, pArrayItemDefs, pCurrentPrices, pBasePrices, unArrayLength);
            }
            return (boolean)mh$.invokeExact(ptr, pArrayItemDefs, pCurrentPrices, pBasePrices, unArrayLength);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInventory_GetItemPrice {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamInventory_GetItemPrice"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_GetItemPrice(ISteamInventory ptr, SteamItemDef_t iDefinition, uint64 *pCurrentPrice, uint64 *pBasePrice)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInventory_GetItemPrice$descriptor() {
        return SteamAPI_ISteamInventory_GetItemPrice.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_GetItemPrice(ISteamInventory ptr, SteamItemDef_t iDefinition, uint64 *pCurrentPrice, uint64 *pBasePrice)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInventory_GetItemPrice$handle() {
        return SteamAPI_ISteamInventory_GetItemPrice.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_GetItemPrice(ISteamInventory ptr, SteamItemDef_t iDefinition, uint64 *pCurrentPrice, uint64 *pBasePrice)
     * }
     */
    public static boolean SteamAPI_ISteamInventory_GetItemPrice(MemorySegment ptr, int iDefinition, MemorySegment pCurrentPrice, MemorySegment pBasePrice) {
        var mh$ = SteamAPI_ISteamInventory_GetItemPrice.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInventory_GetItemPrice", ptr, iDefinition, pCurrentPrice, pBasePrice);
            }
            return (boolean)mh$.invokeExact(ptr, iDefinition, pCurrentPrice, pBasePrice);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInventory_StartUpdateProperties {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamInventory_StartUpdateProperties"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamInventoryUpdateHandle_t SteamAPI_ISteamInventory_StartUpdateProperties(ISteamInventory ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInventory_StartUpdateProperties$descriptor() {
        return SteamAPI_ISteamInventory_StartUpdateProperties.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamInventoryUpdateHandle_t SteamAPI_ISteamInventory_StartUpdateProperties(ISteamInventory ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInventory_StartUpdateProperties$handle() {
        return SteamAPI_ISteamInventory_StartUpdateProperties.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamInventoryUpdateHandle_t SteamAPI_ISteamInventory_StartUpdateProperties(ISteamInventory ptr)
     * }
     */
    public static long SteamAPI_ISteamInventory_StartUpdateProperties(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamInventory_StartUpdateProperties.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInventory_StartUpdateProperties", ptr);
            }
            return (long)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInventory_RemoveProperty {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamInventory_RemoveProperty"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_RemoveProperty(ISteamInventory ptr, SteamInventoryUpdateHandle_t handle, SteamItemInstanceID_t nItemID, const char *pchPropertyName)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInventory_RemoveProperty$descriptor() {
        return SteamAPI_ISteamInventory_RemoveProperty.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_RemoveProperty(ISteamInventory ptr, SteamInventoryUpdateHandle_t handle, SteamItemInstanceID_t nItemID, const char *pchPropertyName)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInventory_RemoveProperty$handle() {
        return SteamAPI_ISteamInventory_RemoveProperty.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_RemoveProperty(ISteamInventory ptr, SteamInventoryUpdateHandle_t handle, SteamItemInstanceID_t nItemID, const char *pchPropertyName)
     * }
     */
    public static boolean SteamAPI_ISteamInventory_RemoveProperty(MemorySegment ptr, long handle, long nItemID, MemorySegment pchPropertyName) {
        var mh$ = SteamAPI_ISteamInventory_RemoveProperty.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInventory_RemoveProperty", ptr, handle, nItemID, pchPropertyName);
            }
            return (boolean)mh$.invokeExact(ptr, handle, nItemID, pchPropertyName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInventory_SetPropertyString {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamInventory_SetPropertyString"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_SetPropertyString(ISteamInventory ptr, SteamInventoryUpdateHandle_t handle, SteamItemInstanceID_t nItemID, const char *pchPropertyName, const char *pchPropertyValue)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInventory_SetPropertyString$descriptor() {
        return SteamAPI_ISteamInventory_SetPropertyString.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_SetPropertyString(ISteamInventory ptr, SteamInventoryUpdateHandle_t handle, SteamItemInstanceID_t nItemID, const char *pchPropertyName, const char *pchPropertyValue)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInventory_SetPropertyString$handle() {
        return SteamAPI_ISteamInventory_SetPropertyString.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_SetPropertyString(ISteamInventory ptr, SteamInventoryUpdateHandle_t handle, SteamItemInstanceID_t nItemID, const char *pchPropertyName, const char *pchPropertyValue)
     * }
     */
    public static boolean SteamAPI_ISteamInventory_SetPropertyString(MemorySegment ptr, long handle, long nItemID, MemorySegment pchPropertyName, MemorySegment pchPropertyValue) {
        var mh$ = SteamAPI_ISteamInventory_SetPropertyString.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInventory_SetPropertyString", ptr, handle, nItemID, pchPropertyName, pchPropertyValue);
            }
            return (boolean)mh$.invokeExact(ptr, handle, nItemID, pchPropertyName, pchPropertyValue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInventory_SetPropertyBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamInventory_SetPropertyBool"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_SetPropertyBool(ISteamInventory ptr, SteamInventoryUpdateHandle_t handle, SteamItemInstanceID_t nItemID, const char *pchPropertyName, bool bValue)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInventory_SetPropertyBool$descriptor() {
        return SteamAPI_ISteamInventory_SetPropertyBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_SetPropertyBool(ISteamInventory ptr, SteamInventoryUpdateHandle_t handle, SteamItemInstanceID_t nItemID, const char *pchPropertyName, bool bValue)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInventory_SetPropertyBool$handle() {
        return SteamAPI_ISteamInventory_SetPropertyBool.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_SetPropertyBool(ISteamInventory ptr, SteamInventoryUpdateHandle_t handle, SteamItemInstanceID_t nItemID, const char *pchPropertyName, bool bValue)
     * }
     */
    public static boolean SteamAPI_ISteamInventory_SetPropertyBool(MemorySegment ptr, long handle, long nItemID, MemorySegment pchPropertyName, boolean bValue) {
        var mh$ = SteamAPI_ISteamInventory_SetPropertyBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInventory_SetPropertyBool", ptr, handle, nItemID, pchPropertyName, bValue);
            }
            return (boolean)mh$.invokeExact(ptr, handle, nItemID, pchPropertyName, bValue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInventory_SetPropertyInt64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamInventory_SetPropertyInt64"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_SetPropertyInt64(ISteamInventory ptr, SteamInventoryUpdateHandle_t handle, SteamItemInstanceID_t nItemID, const char *pchPropertyName, int64 nValue)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInventory_SetPropertyInt64$descriptor() {
        return SteamAPI_ISteamInventory_SetPropertyInt64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_SetPropertyInt64(ISteamInventory ptr, SteamInventoryUpdateHandle_t handle, SteamItemInstanceID_t nItemID, const char *pchPropertyName, int64 nValue)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInventory_SetPropertyInt64$handle() {
        return SteamAPI_ISteamInventory_SetPropertyInt64.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_SetPropertyInt64(ISteamInventory ptr, SteamInventoryUpdateHandle_t handle, SteamItemInstanceID_t nItemID, const char *pchPropertyName, int64 nValue)
     * }
     */
    public static boolean SteamAPI_ISteamInventory_SetPropertyInt64(MemorySegment ptr, long handle, long nItemID, MemorySegment pchPropertyName, long nValue) {
        var mh$ = SteamAPI_ISteamInventory_SetPropertyInt64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInventory_SetPropertyInt64", ptr, handle, nItemID, pchPropertyName, nValue);
            }
            return (boolean)mh$.invokeExact(ptr, handle, nItemID, pchPropertyName, nValue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInventory_SetPropertyFloat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_FLOAT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamInventory_SetPropertyFloat"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_SetPropertyFloat(ISteamInventory ptr, SteamInventoryUpdateHandle_t handle, SteamItemInstanceID_t nItemID, const char *pchPropertyName, float flValue)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInventory_SetPropertyFloat$descriptor() {
        return SteamAPI_ISteamInventory_SetPropertyFloat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_SetPropertyFloat(ISteamInventory ptr, SteamInventoryUpdateHandle_t handle, SteamItemInstanceID_t nItemID, const char *pchPropertyName, float flValue)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInventory_SetPropertyFloat$handle() {
        return SteamAPI_ISteamInventory_SetPropertyFloat.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_SetPropertyFloat(ISteamInventory ptr, SteamInventoryUpdateHandle_t handle, SteamItemInstanceID_t nItemID, const char *pchPropertyName, float flValue)
     * }
     */
    public static boolean SteamAPI_ISteamInventory_SetPropertyFloat(MemorySegment ptr, long handle, long nItemID, MemorySegment pchPropertyName, float flValue) {
        var mh$ = SteamAPI_ISteamInventory_SetPropertyFloat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInventory_SetPropertyFloat", ptr, handle, nItemID, pchPropertyName, flValue);
            }
            return (boolean)mh$.invokeExact(ptr, handle, nItemID, pchPropertyName, flValue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInventory_SubmitUpdateProperties {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamInventory_SubmitUpdateProperties"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_SubmitUpdateProperties(ISteamInventory ptr, SteamInventoryUpdateHandle_t handle, SteamInventoryResult_t *pResultHandle)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInventory_SubmitUpdateProperties$descriptor() {
        return SteamAPI_ISteamInventory_SubmitUpdateProperties.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_SubmitUpdateProperties(ISteamInventory ptr, SteamInventoryUpdateHandle_t handle, SteamInventoryResult_t *pResultHandle)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInventory_SubmitUpdateProperties$handle() {
        return SteamAPI_ISteamInventory_SubmitUpdateProperties.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_SubmitUpdateProperties(ISteamInventory ptr, SteamInventoryUpdateHandle_t handle, SteamInventoryResult_t *pResultHandle)
     * }
     */
    public static boolean SteamAPI_ISteamInventory_SubmitUpdateProperties(MemorySegment ptr, long handle, MemorySegment pResultHandle) {
        var mh$ = SteamAPI_ISteamInventory_SubmitUpdateProperties.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInventory_SubmitUpdateProperties", ptr, handle, pResultHandle);
            }
            return (boolean)mh$.invokeExact(ptr, handle, pResultHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInventory_InspectItem {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamInventory_InspectItem"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_InspectItem(ISteamInventory ptr, SteamInventoryResult_t *pResultHandle, const char *pchItemToken)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInventory_InspectItem$descriptor() {
        return SteamAPI_ISteamInventory_InspectItem.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_InspectItem(ISteamInventory ptr, SteamInventoryResult_t *pResultHandle, const char *pchItemToken)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInventory_InspectItem$handle() {
        return SteamAPI_ISteamInventory_InspectItem.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_InspectItem(ISteamInventory ptr, SteamInventoryResult_t *pResultHandle, const char *pchItemToken)
     * }
     */
    public static boolean SteamAPI_ISteamInventory_InspectItem(MemorySegment ptr, MemorySegment pResultHandle, MemorySegment pchItemToken) {
        var mh$ = SteamAPI_ISteamInventory_InspectItem.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInventory_InspectItem", ptr, pResultHandle, pchItemToken);
            }
            return (boolean)mh$.invokeExact(ptr, pResultHandle, pchItemToken);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_SteamInventory_v003 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_SteamInventory_v003"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ISteamInventory SteamAPI_SteamInventory_v003()
     * }
     */
    public static FunctionDescriptor SteamAPI_SteamInventory_v003$descriptor() {
        return SteamAPI_SteamInventory_v003.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ISteamInventory SteamAPI_SteamInventory_v003()
     * }
     */
    public static MethodHandle SteamAPI_SteamInventory_v003$handle() {
        return SteamAPI_SteamInventory_v003.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ISteamInventory SteamAPI_SteamInventory_v003()
     * }
     */
    public static MemorySegment SteamAPI_SteamInventory_v003() {
        var mh$ = SteamAPI_SteamInventory_v003.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_SteamInventory_v003");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_SteamGameServerInventory_v003 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_SteamGameServerInventory_v003"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ISteamInventory SteamAPI_SteamGameServerInventory_v003()
     * }
     */
    public static FunctionDescriptor SteamAPI_SteamGameServerInventory_v003$descriptor() {
        return SteamAPI_SteamGameServerInventory_v003.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ISteamInventory SteamAPI_SteamGameServerInventory_v003()
     * }
     */
    public static MethodHandle SteamAPI_SteamGameServerInventory_v003$handle() {
        return SteamAPI_SteamGameServerInventory_v003.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ISteamInventory SteamAPI_SteamGameServerInventory_v003()
     * }
     */
    public static MemorySegment SteamAPI_SteamGameServerInventory_v003() {
        var mh$ = SteamAPI_SteamGameServerInventory_v003.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_SteamGameServerInventory_v003");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamParentalSettings_BIsParentalLockEnabled {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamParentalSettings_BIsParentalLockEnabled"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamParentalSettings_BIsParentalLockEnabled(ISteamParentalSettings ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamParentalSettings_BIsParentalLockEnabled$descriptor() {
        return SteamAPI_ISteamParentalSettings_BIsParentalLockEnabled.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamParentalSettings_BIsParentalLockEnabled(ISteamParentalSettings ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamParentalSettings_BIsParentalLockEnabled$handle() {
        return SteamAPI_ISteamParentalSettings_BIsParentalLockEnabled.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamParentalSettings_BIsParentalLockEnabled(ISteamParentalSettings ptr)
     * }
     */
    public static boolean SteamAPI_ISteamParentalSettings_BIsParentalLockEnabled(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamParentalSettings_BIsParentalLockEnabled.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamParentalSettings_BIsParentalLockEnabled", ptr);
            }
            return (boolean)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamParentalSettings_BIsParentalLockLocked {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamParentalSettings_BIsParentalLockLocked"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamParentalSettings_BIsParentalLockLocked(ISteamParentalSettings ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamParentalSettings_BIsParentalLockLocked$descriptor() {
        return SteamAPI_ISteamParentalSettings_BIsParentalLockLocked.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamParentalSettings_BIsParentalLockLocked(ISteamParentalSettings ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamParentalSettings_BIsParentalLockLocked$handle() {
        return SteamAPI_ISteamParentalSettings_BIsParentalLockLocked.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamParentalSettings_BIsParentalLockLocked(ISteamParentalSettings ptr)
     * }
     */
    public static boolean SteamAPI_ISteamParentalSettings_BIsParentalLockLocked(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamParentalSettings_BIsParentalLockLocked.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamParentalSettings_BIsParentalLockLocked", ptr);
            }
            return (boolean)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamParentalSettings_BIsAppBlocked {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamParentalSettings_BIsAppBlocked"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamParentalSettings_BIsAppBlocked(ISteamParentalSettings ptr, AppId_t nAppID)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamParentalSettings_BIsAppBlocked$descriptor() {
        return SteamAPI_ISteamParentalSettings_BIsAppBlocked.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamParentalSettings_BIsAppBlocked(ISteamParentalSettings ptr, AppId_t nAppID)
     * }
     */
    public static MethodHandle SteamAPI_ISteamParentalSettings_BIsAppBlocked$handle() {
        return SteamAPI_ISteamParentalSettings_BIsAppBlocked.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamParentalSettings_BIsAppBlocked(ISteamParentalSettings ptr, AppId_t nAppID)
     * }
     */
    public static boolean SteamAPI_ISteamParentalSettings_BIsAppBlocked(MemorySegment ptr, int nAppID) {
        var mh$ = SteamAPI_ISteamParentalSettings_BIsAppBlocked.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamParentalSettings_BIsAppBlocked", ptr, nAppID);
            }
            return (boolean)mh$.invokeExact(ptr, nAppID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamParentalSettings_BIsAppInBlockList {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamParentalSettings_BIsAppInBlockList"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamParentalSettings_BIsAppInBlockList(ISteamParentalSettings ptr, AppId_t nAppID)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamParentalSettings_BIsAppInBlockList$descriptor() {
        return SteamAPI_ISteamParentalSettings_BIsAppInBlockList.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamParentalSettings_BIsAppInBlockList(ISteamParentalSettings ptr, AppId_t nAppID)
     * }
     */
    public static MethodHandle SteamAPI_ISteamParentalSettings_BIsAppInBlockList$handle() {
        return SteamAPI_ISteamParentalSettings_BIsAppInBlockList.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamParentalSettings_BIsAppInBlockList(ISteamParentalSettings ptr, AppId_t nAppID)
     * }
     */
    public static boolean SteamAPI_ISteamParentalSettings_BIsAppInBlockList(MemorySegment ptr, int nAppID) {
        var mh$ = SteamAPI_ISteamParentalSettings_BIsAppInBlockList.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamParentalSettings_BIsAppInBlockList", ptr, nAppID);
            }
            return (boolean)mh$.invokeExact(ptr, nAppID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamParentalSettings_BIsFeatureBlocked {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamParentalSettings_BIsFeatureBlocked"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamParentalSettings_BIsFeatureBlocked(ISteamParentalSettings ptr, EParentalFeature eFeature)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamParentalSettings_BIsFeatureBlocked$descriptor() {
        return SteamAPI_ISteamParentalSettings_BIsFeatureBlocked.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamParentalSettings_BIsFeatureBlocked(ISteamParentalSettings ptr, EParentalFeature eFeature)
     * }
     */
    public static MethodHandle SteamAPI_ISteamParentalSettings_BIsFeatureBlocked$handle() {
        return SteamAPI_ISteamParentalSettings_BIsFeatureBlocked.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamParentalSettings_BIsFeatureBlocked(ISteamParentalSettings ptr, EParentalFeature eFeature)
     * }
     */
    public static boolean SteamAPI_ISteamParentalSettings_BIsFeatureBlocked(MemorySegment ptr, int eFeature) {
        var mh$ = SteamAPI_ISteamParentalSettings_BIsFeatureBlocked.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamParentalSettings_BIsFeatureBlocked", ptr, eFeature);
            }
            return (boolean)mh$.invokeExact(ptr, eFeature);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamParentalSettings_BIsFeatureInBlockList {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamParentalSettings_BIsFeatureInBlockList"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamParentalSettings_BIsFeatureInBlockList(ISteamParentalSettings ptr, EParentalFeature eFeature)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamParentalSettings_BIsFeatureInBlockList$descriptor() {
        return SteamAPI_ISteamParentalSettings_BIsFeatureInBlockList.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamParentalSettings_BIsFeatureInBlockList(ISteamParentalSettings ptr, EParentalFeature eFeature)
     * }
     */
    public static MethodHandle SteamAPI_ISteamParentalSettings_BIsFeatureInBlockList$handle() {
        return SteamAPI_ISteamParentalSettings_BIsFeatureInBlockList.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamParentalSettings_BIsFeatureInBlockList(ISteamParentalSettings ptr, EParentalFeature eFeature)
     * }
     */
    public static boolean SteamAPI_ISteamParentalSettings_BIsFeatureInBlockList(MemorySegment ptr, int eFeature) {
        var mh$ = SteamAPI_ISteamParentalSettings_BIsFeatureInBlockList.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamParentalSettings_BIsFeatureInBlockList", ptr, eFeature);
            }
            return (boolean)mh$.invokeExact(ptr, eFeature);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_SteamParentalSettings_v001 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_SteamParentalSettings_v001"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ISteamParentalSettings SteamAPI_SteamParentalSettings_v001()
     * }
     */
    public static FunctionDescriptor SteamAPI_SteamParentalSettings_v001$descriptor() {
        return SteamAPI_SteamParentalSettings_v001.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ISteamParentalSettings SteamAPI_SteamParentalSettings_v001()
     * }
     */
    public static MethodHandle SteamAPI_SteamParentalSettings_v001$handle() {
        return SteamAPI_SteamParentalSettings_v001.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ISteamParentalSettings SteamAPI_SteamParentalSettings_v001()
     * }
     */
    public static MemorySegment SteamAPI_SteamParentalSettings_v001() {
        var mh$ = SteamAPI_SteamParentalSettings_v001.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_SteamParentalSettings_v001");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemotePlay_GetSessionCount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamRemotePlay_GetSessionCount"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamRemotePlay_GetSessionCount(ISteamRemotePlay ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemotePlay_GetSessionCount$descriptor() {
        return SteamAPI_ISteamRemotePlay_GetSessionCount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamRemotePlay_GetSessionCount(ISteamRemotePlay ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemotePlay_GetSessionCount$handle() {
        return SteamAPI_ISteamRemotePlay_GetSessionCount.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamRemotePlay_GetSessionCount(ISteamRemotePlay ptr)
     * }
     */
    public static int SteamAPI_ISteamRemotePlay_GetSessionCount(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamRemotePlay_GetSessionCount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemotePlay_GetSessionCount", ptr);
            }
            return (int)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemotePlay_GetSessionID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamRemotePlay_GetSessionID"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RemotePlaySessionID_t SteamAPI_ISteamRemotePlay_GetSessionID(ISteamRemotePlay ptr, int iSessionIndex)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemotePlay_GetSessionID$descriptor() {
        return SteamAPI_ISteamRemotePlay_GetSessionID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RemotePlaySessionID_t SteamAPI_ISteamRemotePlay_GetSessionID(ISteamRemotePlay ptr, int iSessionIndex)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemotePlay_GetSessionID$handle() {
        return SteamAPI_ISteamRemotePlay_GetSessionID.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RemotePlaySessionID_t SteamAPI_ISteamRemotePlay_GetSessionID(ISteamRemotePlay ptr, int iSessionIndex)
     * }
     */
    public static int SteamAPI_ISteamRemotePlay_GetSessionID(MemorySegment ptr, int iSessionIndex) {
        var mh$ = SteamAPI_ISteamRemotePlay_GetSessionID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemotePlay_GetSessionID", ptr, iSessionIndex);
            }
            return (int)mh$.invokeExact(ptr, iSessionIndex);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemotePlay_GetSessionSteamID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamRemotePlay_GetSessionSteamID"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint64_steamid SteamAPI_ISteamRemotePlay_GetSessionSteamID(ISteamRemotePlay ptr, RemotePlaySessionID_t unSessionID)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemotePlay_GetSessionSteamID$descriptor() {
        return SteamAPI_ISteamRemotePlay_GetSessionSteamID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint64_steamid SteamAPI_ISteamRemotePlay_GetSessionSteamID(ISteamRemotePlay ptr, RemotePlaySessionID_t unSessionID)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemotePlay_GetSessionSteamID$handle() {
        return SteamAPI_ISteamRemotePlay_GetSessionSteamID.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * uint64_steamid SteamAPI_ISteamRemotePlay_GetSessionSteamID(ISteamRemotePlay ptr, RemotePlaySessionID_t unSessionID)
     * }
     */
    public static long SteamAPI_ISteamRemotePlay_GetSessionSteamID(MemorySegment ptr, int unSessionID) {
        var mh$ = SteamAPI_ISteamRemotePlay_GetSessionSteamID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemotePlay_GetSessionSteamID", ptr, unSessionID);
            }
            return (long)mh$.invokeExact(ptr, unSessionID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemotePlay_GetSessionClientName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamRemotePlay_GetSessionClientName"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamRemotePlay_GetSessionClientName(ISteamRemotePlay ptr, RemotePlaySessionID_t unSessionID)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemotePlay_GetSessionClientName$descriptor() {
        return SteamAPI_ISteamRemotePlay_GetSessionClientName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamRemotePlay_GetSessionClientName(ISteamRemotePlay ptr, RemotePlaySessionID_t unSessionID)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemotePlay_GetSessionClientName$handle() {
        return SteamAPI_ISteamRemotePlay_GetSessionClientName.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamRemotePlay_GetSessionClientName(ISteamRemotePlay ptr, RemotePlaySessionID_t unSessionID)
     * }
     */
    public static MemorySegment SteamAPI_ISteamRemotePlay_GetSessionClientName(MemorySegment ptr, int unSessionID) {
        var mh$ = SteamAPI_ISteamRemotePlay_GetSessionClientName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemotePlay_GetSessionClientName", ptr, unSessionID);
            }
            return (MemorySegment)mh$.invokeExact(ptr, unSessionID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemotePlay_GetSessionClientFormFactor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamRemotePlay_GetSessionClientFormFactor"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ESteamDeviceFormFactor SteamAPI_ISteamRemotePlay_GetSessionClientFormFactor(ISteamRemotePlay ptr, RemotePlaySessionID_t unSessionID)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemotePlay_GetSessionClientFormFactor$descriptor() {
        return SteamAPI_ISteamRemotePlay_GetSessionClientFormFactor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ESteamDeviceFormFactor SteamAPI_ISteamRemotePlay_GetSessionClientFormFactor(ISteamRemotePlay ptr, RemotePlaySessionID_t unSessionID)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemotePlay_GetSessionClientFormFactor$handle() {
        return SteamAPI_ISteamRemotePlay_GetSessionClientFormFactor.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ESteamDeviceFormFactor SteamAPI_ISteamRemotePlay_GetSessionClientFormFactor(ISteamRemotePlay ptr, RemotePlaySessionID_t unSessionID)
     * }
     */
    public static int SteamAPI_ISteamRemotePlay_GetSessionClientFormFactor(MemorySegment ptr, int unSessionID) {
        var mh$ = SteamAPI_ISteamRemotePlay_GetSessionClientFormFactor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemotePlay_GetSessionClientFormFactor", ptr, unSessionID);
            }
            return (int)mh$.invokeExact(ptr, unSessionID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemotePlay_BGetSessionClientResolution {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamRemotePlay_BGetSessionClientResolution"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemotePlay_BGetSessionClientResolution(ISteamRemotePlay ptr, RemotePlaySessionID_t unSessionID, int *pnResolutionX, int *pnResolutionY)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemotePlay_BGetSessionClientResolution$descriptor() {
        return SteamAPI_ISteamRemotePlay_BGetSessionClientResolution.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemotePlay_BGetSessionClientResolution(ISteamRemotePlay ptr, RemotePlaySessionID_t unSessionID, int *pnResolutionX, int *pnResolutionY)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemotePlay_BGetSessionClientResolution$handle() {
        return SteamAPI_ISteamRemotePlay_BGetSessionClientResolution.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemotePlay_BGetSessionClientResolution(ISteamRemotePlay ptr, RemotePlaySessionID_t unSessionID, int *pnResolutionX, int *pnResolutionY)
     * }
     */
    public static boolean SteamAPI_ISteamRemotePlay_BGetSessionClientResolution(MemorySegment ptr, int unSessionID, MemorySegment pnResolutionX, MemorySegment pnResolutionY) {
        var mh$ = SteamAPI_ISteamRemotePlay_BGetSessionClientResolution.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemotePlay_BGetSessionClientResolution", ptr, unSessionID, pnResolutionX, pnResolutionY);
            }
            return (boolean)mh$.invokeExact(ptr, unSessionID, pnResolutionX, pnResolutionY);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemotePlay_BStartRemotePlayTogether {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamRemotePlay_BStartRemotePlayTogether"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemotePlay_BStartRemotePlayTogether(ISteamRemotePlay ptr, bool bShowOverlay)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemotePlay_BStartRemotePlayTogether$descriptor() {
        return SteamAPI_ISteamRemotePlay_BStartRemotePlayTogether.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemotePlay_BStartRemotePlayTogether(ISteamRemotePlay ptr, bool bShowOverlay)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemotePlay_BStartRemotePlayTogether$handle() {
        return SteamAPI_ISteamRemotePlay_BStartRemotePlayTogether.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemotePlay_BStartRemotePlayTogether(ISteamRemotePlay ptr, bool bShowOverlay)
     * }
     */
    public static boolean SteamAPI_ISteamRemotePlay_BStartRemotePlayTogether(MemorySegment ptr, boolean bShowOverlay) {
        var mh$ = SteamAPI_ISteamRemotePlay_BStartRemotePlayTogether.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemotePlay_BStartRemotePlayTogether", ptr, bShowOverlay);
            }
            return (boolean)mh$.invokeExact(ptr, bShowOverlay);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemotePlay_BSendRemotePlayTogetherInvite {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamRemotePlay_BSendRemotePlayTogetherInvite"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemotePlay_BSendRemotePlayTogetherInvite(ISteamRemotePlay ptr, uint64_steamid steamIDFriend)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemotePlay_BSendRemotePlayTogetherInvite$descriptor() {
        return SteamAPI_ISteamRemotePlay_BSendRemotePlayTogetherInvite.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemotePlay_BSendRemotePlayTogetherInvite(ISteamRemotePlay ptr, uint64_steamid steamIDFriend)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemotePlay_BSendRemotePlayTogetherInvite$handle() {
        return SteamAPI_ISteamRemotePlay_BSendRemotePlayTogetherInvite.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemotePlay_BSendRemotePlayTogetherInvite(ISteamRemotePlay ptr, uint64_steamid steamIDFriend)
     * }
     */
    public static boolean SteamAPI_ISteamRemotePlay_BSendRemotePlayTogetherInvite(MemorySegment ptr, long steamIDFriend) {
        var mh$ = SteamAPI_ISteamRemotePlay_BSendRemotePlayTogetherInvite.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemotePlay_BSendRemotePlayTogetherInvite", ptr, steamIDFriend);
            }
            return (boolean)mh$.invokeExact(ptr, steamIDFriend);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_SteamRemotePlay_v002 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_SteamRemotePlay_v002"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ISteamRemotePlay SteamAPI_SteamRemotePlay_v002()
     * }
     */
    public static FunctionDescriptor SteamAPI_SteamRemotePlay_v002$descriptor() {
        return SteamAPI_SteamRemotePlay_v002.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ISteamRemotePlay SteamAPI_SteamRemotePlay_v002()
     * }
     */
    public static MethodHandle SteamAPI_SteamRemotePlay_v002$handle() {
        return SteamAPI_SteamRemotePlay_v002.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ISteamRemotePlay SteamAPI_SteamRemotePlay_v002()
     * }
     */
    public static MemorySegment SteamAPI_SteamRemotePlay_v002() {
        var mh$ = SteamAPI_SteamRemotePlay_v002.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_SteamRemotePlay_v002");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingMessages_SendMessageToUser {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_INT,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamNetworkingMessages_SendMessageToUser"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * EResult SteamAPI_ISteamNetworkingMessages_SendMessageToUser(ISteamNetworkingMessages ptr, const SteamNetworkingIdentity *identityRemote, const void *pubData, uint32 cubData, int nSendFlags, int nRemoteChannel)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingMessages_SendMessageToUser$descriptor() {
        return SteamAPI_ISteamNetworkingMessages_SendMessageToUser.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * EResult SteamAPI_ISteamNetworkingMessages_SendMessageToUser(ISteamNetworkingMessages ptr, const SteamNetworkingIdentity *identityRemote, const void *pubData, uint32 cubData, int nSendFlags, int nRemoteChannel)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingMessages_SendMessageToUser$handle() {
        return SteamAPI_ISteamNetworkingMessages_SendMessageToUser.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * EResult SteamAPI_ISteamNetworkingMessages_SendMessageToUser(ISteamNetworkingMessages ptr, const SteamNetworkingIdentity *identityRemote, const void *pubData, uint32 cubData, int nSendFlags, int nRemoteChannel)
     * }
     */
    public static int SteamAPI_ISteamNetworkingMessages_SendMessageToUser(MemorySegment ptr, MemorySegment identityRemote, MemorySegment pubData, int cubData, int nSendFlags, int nRemoteChannel) {
        var mh$ = SteamAPI_ISteamNetworkingMessages_SendMessageToUser.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingMessages_SendMessageToUser", ptr, identityRemote, pubData, cubData, nSendFlags, nRemoteChannel);
            }
            return (int)mh$.invokeExact(ptr, identityRemote, pubData, cubData, nSendFlags, nRemoteChannel);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingMessages_ReceiveMessagesOnChannel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamNetworkingMessages_ReceiveMessagesOnChannel"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamNetworkingMessages_ReceiveMessagesOnChannel(ISteamNetworkingMessages ptr, int nLocalChannel, SteamNetworkingMessage_t **ppOutMessages, int nMaxMessages)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingMessages_ReceiveMessagesOnChannel$descriptor() {
        return SteamAPI_ISteamNetworkingMessages_ReceiveMessagesOnChannel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamNetworkingMessages_ReceiveMessagesOnChannel(ISteamNetworkingMessages ptr, int nLocalChannel, SteamNetworkingMessage_t **ppOutMessages, int nMaxMessages)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingMessages_ReceiveMessagesOnChannel$handle() {
        return SteamAPI_ISteamNetworkingMessages_ReceiveMessagesOnChannel.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int SteamAPI_ISteamNetworkingMessages_ReceiveMessagesOnChannel(ISteamNetworkingMessages ptr, int nLocalChannel, SteamNetworkingMessage_t **ppOutMessages, int nMaxMessages)
     * }
     */
    public static int SteamAPI_ISteamNetworkingMessages_ReceiveMessagesOnChannel(MemorySegment ptr, int nLocalChannel, MemorySegment ppOutMessages, int nMaxMessages) {
        var mh$ = SteamAPI_ISteamNetworkingMessages_ReceiveMessagesOnChannel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingMessages_ReceiveMessagesOnChannel", ptr, nLocalChannel, ppOutMessages, nMaxMessages);
            }
            return (int)mh$.invokeExact(ptr, nLocalChannel, ppOutMessages, nMaxMessages);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingMessages_AcceptSessionWithUser {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamNetworkingMessages_AcceptSessionWithUser"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingMessages_AcceptSessionWithUser(ISteamNetworkingMessages ptr, const SteamNetworkingIdentity *identityRemote)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingMessages_AcceptSessionWithUser$descriptor() {
        return SteamAPI_ISteamNetworkingMessages_AcceptSessionWithUser.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingMessages_AcceptSessionWithUser(ISteamNetworkingMessages ptr, const SteamNetworkingIdentity *identityRemote)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingMessages_AcceptSessionWithUser$handle() {
        return SteamAPI_ISteamNetworkingMessages_AcceptSessionWithUser.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingMessages_AcceptSessionWithUser(ISteamNetworkingMessages ptr, const SteamNetworkingIdentity *identityRemote)
     * }
     */
    public static boolean SteamAPI_ISteamNetworkingMessages_AcceptSessionWithUser(MemorySegment ptr, MemorySegment identityRemote) {
        var mh$ = SteamAPI_ISteamNetworkingMessages_AcceptSessionWithUser.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingMessages_AcceptSessionWithUser", ptr, identityRemote);
            }
            return (boolean)mh$.invokeExact(ptr, identityRemote);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingMessages_CloseSessionWithUser {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamNetworkingMessages_CloseSessionWithUser"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingMessages_CloseSessionWithUser(ISteamNetworkingMessages ptr, const SteamNetworkingIdentity *identityRemote)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingMessages_CloseSessionWithUser$descriptor() {
        return SteamAPI_ISteamNetworkingMessages_CloseSessionWithUser.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingMessages_CloseSessionWithUser(ISteamNetworkingMessages ptr, const SteamNetworkingIdentity *identityRemote)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingMessages_CloseSessionWithUser$handle() {
        return SteamAPI_ISteamNetworkingMessages_CloseSessionWithUser.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingMessages_CloseSessionWithUser(ISteamNetworkingMessages ptr, const SteamNetworkingIdentity *identityRemote)
     * }
     */
    public static boolean SteamAPI_ISteamNetworkingMessages_CloseSessionWithUser(MemorySegment ptr, MemorySegment identityRemote) {
        var mh$ = SteamAPI_ISteamNetworkingMessages_CloseSessionWithUser.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingMessages_CloseSessionWithUser", ptr, identityRemote);
            }
            return (boolean)mh$.invokeExact(ptr, identityRemote);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingMessages_CloseChannelWithUser {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamNetworkingMessages_CloseChannelWithUser"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingMessages_CloseChannelWithUser(ISteamNetworkingMessages ptr, const SteamNetworkingIdentity *identityRemote, int nLocalChannel)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingMessages_CloseChannelWithUser$descriptor() {
        return SteamAPI_ISteamNetworkingMessages_CloseChannelWithUser.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingMessages_CloseChannelWithUser(ISteamNetworkingMessages ptr, const SteamNetworkingIdentity *identityRemote, int nLocalChannel)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingMessages_CloseChannelWithUser$handle() {
        return SteamAPI_ISteamNetworkingMessages_CloseChannelWithUser.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingMessages_CloseChannelWithUser(ISteamNetworkingMessages ptr, const SteamNetworkingIdentity *identityRemote, int nLocalChannel)
     * }
     */
    public static boolean SteamAPI_ISteamNetworkingMessages_CloseChannelWithUser(MemorySegment ptr, MemorySegment identityRemote, int nLocalChannel) {
        var mh$ = SteamAPI_ISteamNetworkingMessages_CloseChannelWithUser.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingMessages_CloseChannelWithUser", ptr, identityRemote, nLocalChannel);
            }
            return (boolean)mh$.invokeExact(ptr, identityRemote, nLocalChannel);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingMessages_GetSessionConnectionInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamNetworkingMessages_GetSessionConnectionInfo"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ESteamNetworkingConnectionState SteamAPI_ISteamNetworkingMessages_GetSessionConnectionInfo(ISteamNetworkingMessages ptr, const SteamNetworkingIdentity *identityRemote, SteamNetConnectionInfo_t *pConnectionInfo, SteamNetConnectionRealTimeStatus_t *pQuickStatus)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingMessages_GetSessionConnectionInfo$descriptor() {
        return SteamAPI_ISteamNetworkingMessages_GetSessionConnectionInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ESteamNetworkingConnectionState SteamAPI_ISteamNetworkingMessages_GetSessionConnectionInfo(ISteamNetworkingMessages ptr, const SteamNetworkingIdentity *identityRemote, SteamNetConnectionInfo_t *pConnectionInfo, SteamNetConnectionRealTimeStatus_t *pQuickStatus)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingMessages_GetSessionConnectionInfo$handle() {
        return SteamAPI_ISteamNetworkingMessages_GetSessionConnectionInfo.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ESteamNetworkingConnectionState SteamAPI_ISteamNetworkingMessages_GetSessionConnectionInfo(ISteamNetworkingMessages ptr, const SteamNetworkingIdentity *identityRemote, SteamNetConnectionInfo_t *pConnectionInfo, SteamNetConnectionRealTimeStatus_t *pQuickStatus)
     * }
     */
    public static int SteamAPI_ISteamNetworkingMessages_GetSessionConnectionInfo(MemorySegment ptr, MemorySegment identityRemote, MemorySegment pConnectionInfo, MemorySegment pQuickStatus) {
        var mh$ = SteamAPI_ISteamNetworkingMessages_GetSessionConnectionInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingMessages_GetSessionConnectionInfo", ptr, identityRemote, pConnectionInfo, pQuickStatus);
            }
            return (int)mh$.invokeExact(ptr, identityRemote, pConnectionInfo, pQuickStatus);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_SteamNetworkingMessages_SteamAPI_v002 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_SteamNetworkingMessages_SteamAPI_v002"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ISteamNetworkingMessages SteamAPI_SteamNetworkingMessages_SteamAPI_v002()
     * }
     */
    public static FunctionDescriptor SteamAPI_SteamNetworkingMessages_SteamAPI_v002$descriptor() {
        return SteamAPI_SteamNetworkingMessages_SteamAPI_v002.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ISteamNetworkingMessages SteamAPI_SteamNetworkingMessages_SteamAPI_v002()
     * }
     */
    public static MethodHandle SteamAPI_SteamNetworkingMessages_SteamAPI_v002$handle() {
        return SteamAPI_SteamNetworkingMessages_SteamAPI_v002.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ISteamNetworkingMessages SteamAPI_SteamNetworkingMessages_SteamAPI_v002()
     * }
     */
    public static MemorySegment SteamAPI_SteamNetworkingMessages_SteamAPI_v002() {
        var mh$ = SteamAPI_SteamNetworkingMessages_SteamAPI_v002.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_SteamNetworkingMessages_SteamAPI_v002");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_SteamGameServerNetworkingMessages_SteamAPI_v002 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_SteamGameServerNetworkingMessages_SteamAPI_v002"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ISteamNetworkingMessages SteamAPI_SteamGameServerNetworkingMessages_SteamAPI_v002()
     * }
     */
    public static FunctionDescriptor SteamAPI_SteamGameServerNetworkingMessages_SteamAPI_v002$descriptor() {
        return SteamAPI_SteamGameServerNetworkingMessages_SteamAPI_v002.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ISteamNetworkingMessages SteamAPI_SteamGameServerNetworkingMessages_SteamAPI_v002()
     * }
     */
    public static MethodHandle SteamAPI_SteamGameServerNetworkingMessages_SteamAPI_v002$handle() {
        return SteamAPI_SteamGameServerNetworkingMessages_SteamAPI_v002.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ISteamNetworkingMessages SteamAPI_SteamGameServerNetworkingMessages_SteamAPI_v002()
     * }
     */
    public static MemorySegment SteamAPI_SteamGameServerNetworkingMessages_SteamAPI_v002() {
        var mh$ = SteamAPI_SteamGameServerNetworkingMessages_SteamAPI_v002.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_SteamGameServerNetworkingMessages_SteamAPI_v002");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingSockets_CreateListenSocketIP {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamNetworkingSockets_CreateListenSocketIP"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HSteamListenSocket SteamAPI_ISteamNetworkingSockets_CreateListenSocketIP(ISteamNetworkingSockets ptr, const SteamNetworkingIPAddr *localAddress, int nOptions, const SteamNetworkingConfigValue_t *pOptions)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingSockets_CreateListenSocketIP$descriptor() {
        return SteamAPI_ISteamNetworkingSockets_CreateListenSocketIP.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HSteamListenSocket SteamAPI_ISteamNetworkingSockets_CreateListenSocketIP(ISteamNetworkingSockets ptr, const SteamNetworkingIPAddr *localAddress, int nOptions, const SteamNetworkingConfigValue_t *pOptions)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingSockets_CreateListenSocketIP$handle() {
        return SteamAPI_ISteamNetworkingSockets_CreateListenSocketIP.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HSteamListenSocket SteamAPI_ISteamNetworkingSockets_CreateListenSocketIP(ISteamNetworkingSockets ptr, const SteamNetworkingIPAddr *localAddress, int nOptions, const SteamNetworkingConfigValue_t *pOptions)
     * }
     */
    public static int SteamAPI_ISteamNetworkingSockets_CreateListenSocketIP(MemorySegment ptr, MemorySegment localAddress, int nOptions, MemorySegment pOptions) {
        var mh$ = SteamAPI_ISteamNetworkingSockets_CreateListenSocketIP.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingSockets_CreateListenSocketIP", ptr, localAddress, nOptions, pOptions);
            }
            return (int)mh$.invokeExact(ptr, localAddress, nOptions, pOptions);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingSockets_ConnectByIPAddress {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamNetworkingSockets_ConnectByIPAddress"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HSteamNetConnection SteamAPI_ISteamNetworkingSockets_ConnectByIPAddress(ISteamNetworkingSockets ptr, const SteamNetworkingIPAddr *address, int nOptions, const SteamNetworkingConfigValue_t *pOptions)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingSockets_ConnectByIPAddress$descriptor() {
        return SteamAPI_ISteamNetworkingSockets_ConnectByIPAddress.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HSteamNetConnection SteamAPI_ISteamNetworkingSockets_ConnectByIPAddress(ISteamNetworkingSockets ptr, const SteamNetworkingIPAddr *address, int nOptions, const SteamNetworkingConfigValue_t *pOptions)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingSockets_ConnectByIPAddress$handle() {
        return SteamAPI_ISteamNetworkingSockets_ConnectByIPAddress.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HSteamNetConnection SteamAPI_ISteamNetworkingSockets_ConnectByIPAddress(ISteamNetworkingSockets ptr, const SteamNetworkingIPAddr *address, int nOptions, const SteamNetworkingConfigValue_t *pOptions)
     * }
     */
    public static int SteamAPI_ISteamNetworkingSockets_ConnectByIPAddress(MemorySegment ptr, MemorySegment address, int nOptions, MemorySegment pOptions) {
        var mh$ = SteamAPI_ISteamNetworkingSockets_ConnectByIPAddress.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingSockets_ConnectByIPAddress", ptr, address, nOptions, pOptions);
            }
            return (int)mh$.invokeExact(ptr, address, nOptions, pOptions);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingSockets_CreateListenSocketP2P {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamNetworkingSockets_CreateListenSocketP2P"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HSteamListenSocket SteamAPI_ISteamNetworkingSockets_CreateListenSocketP2P(ISteamNetworkingSockets ptr, int nLocalVirtualPort, int nOptions, const SteamNetworkingConfigValue_t *pOptions)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingSockets_CreateListenSocketP2P$descriptor() {
        return SteamAPI_ISteamNetworkingSockets_CreateListenSocketP2P.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HSteamListenSocket SteamAPI_ISteamNetworkingSockets_CreateListenSocketP2P(ISteamNetworkingSockets ptr, int nLocalVirtualPort, int nOptions, const SteamNetworkingConfigValue_t *pOptions)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingSockets_CreateListenSocketP2P$handle() {
        return SteamAPI_ISteamNetworkingSockets_CreateListenSocketP2P.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HSteamListenSocket SteamAPI_ISteamNetworkingSockets_CreateListenSocketP2P(ISteamNetworkingSockets ptr, int nLocalVirtualPort, int nOptions, const SteamNetworkingConfigValue_t *pOptions)
     * }
     */
    public static int SteamAPI_ISteamNetworkingSockets_CreateListenSocketP2P(MemorySegment ptr, int nLocalVirtualPort, int nOptions, MemorySegment pOptions) {
        var mh$ = SteamAPI_ISteamNetworkingSockets_CreateListenSocketP2P.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingSockets_CreateListenSocketP2P", ptr, nLocalVirtualPort, nOptions, pOptions);
            }
            return (int)mh$.invokeExact(ptr, nLocalVirtualPort, nOptions, pOptions);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingSockets_ConnectP2P {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamNetworkingSockets_ConnectP2P"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HSteamNetConnection SteamAPI_ISteamNetworkingSockets_ConnectP2P(ISteamNetworkingSockets ptr, const SteamNetworkingIdentity *identityRemote, int nRemoteVirtualPort, int nOptions, const SteamNetworkingConfigValue_t *pOptions)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingSockets_ConnectP2P$descriptor() {
        return SteamAPI_ISteamNetworkingSockets_ConnectP2P.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HSteamNetConnection SteamAPI_ISteamNetworkingSockets_ConnectP2P(ISteamNetworkingSockets ptr, const SteamNetworkingIdentity *identityRemote, int nRemoteVirtualPort, int nOptions, const SteamNetworkingConfigValue_t *pOptions)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingSockets_ConnectP2P$handle() {
        return SteamAPI_ISteamNetworkingSockets_ConnectP2P.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HSteamNetConnection SteamAPI_ISteamNetworkingSockets_ConnectP2P(ISteamNetworkingSockets ptr, const SteamNetworkingIdentity *identityRemote, int nRemoteVirtualPort, int nOptions, const SteamNetworkingConfigValue_t *pOptions)
     * }
     */
    public static int SteamAPI_ISteamNetworkingSockets_ConnectP2P(MemorySegment ptr, MemorySegment identityRemote, int nRemoteVirtualPort, int nOptions, MemorySegment pOptions) {
        var mh$ = SteamAPI_ISteamNetworkingSockets_ConnectP2P.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingSockets_ConnectP2P", ptr, identityRemote, nRemoteVirtualPort, nOptions, pOptions);
            }
            return (int)mh$.invokeExact(ptr, identityRemote, nRemoteVirtualPort, nOptions, pOptions);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingSockets_AcceptConnection {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamNetworkingSockets_AcceptConnection"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * EResult SteamAPI_ISteamNetworkingSockets_AcceptConnection(ISteamNetworkingSockets ptr, HSteamNetConnection hConn)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingSockets_AcceptConnection$descriptor() {
        return SteamAPI_ISteamNetworkingSockets_AcceptConnection.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * EResult SteamAPI_ISteamNetworkingSockets_AcceptConnection(ISteamNetworkingSockets ptr, HSteamNetConnection hConn)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingSockets_AcceptConnection$handle() {
        return SteamAPI_ISteamNetworkingSockets_AcceptConnection.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * EResult SteamAPI_ISteamNetworkingSockets_AcceptConnection(ISteamNetworkingSockets ptr, HSteamNetConnection hConn)
     * }
     */
    public static int SteamAPI_ISteamNetworkingSockets_AcceptConnection(MemorySegment ptr, int hConn) {
        var mh$ = SteamAPI_ISteamNetworkingSockets_AcceptConnection.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingSockets_AcceptConnection", ptr, hConn);
            }
            return (int)mh$.invokeExact(ptr, hConn);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingSockets_CloseConnection {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamNetworkingSockets_CloseConnection"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingSockets_CloseConnection(ISteamNetworkingSockets ptr, HSteamNetConnection hPeer, int nReason, const char *pszDebug, bool bEnableLinger)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingSockets_CloseConnection$descriptor() {
        return SteamAPI_ISteamNetworkingSockets_CloseConnection.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingSockets_CloseConnection(ISteamNetworkingSockets ptr, HSteamNetConnection hPeer, int nReason, const char *pszDebug, bool bEnableLinger)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingSockets_CloseConnection$handle() {
        return SteamAPI_ISteamNetworkingSockets_CloseConnection.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingSockets_CloseConnection(ISteamNetworkingSockets ptr, HSteamNetConnection hPeer, int nReason, const char *pszDebug, bool bEnableLinger)
     * }
     */
    public static boolean SteamAPI_ISteamNetworkingSockets_CloseConnection(MemorySegment ptr, int hPeer, int nReason, MemorySegment pszDebug, boolean bEnableLinger) {
        var mh$ = SteamAPI_ISteamNetworkingSockets_CloseConnection.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingSockets_CloseConnection", ptr, hPeer, nReason, pszDebug, bEnableLinger);
            }
            return (boolean)mh$.invokeExact(ptr, hPeer, nReason, pszDebug, bEnableLinger);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingSockets_CloseListenSocket {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamNetworkingSockets_CloseListenSocket"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingSockets_CloseListenSocket(ISteamNetworkingSockets ptr, HSteamListenSocket hSocket)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingSockets_CloseListenSocket$descriptor() {
        return SteamAPI_ISteamNetworkingSockets_CloseListenSocket.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingSockets_CloseListenSocket(ISteamNetworkingSockets ptr, HSteamListenSocket hSocket)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingSockets_CloseListenSocket$handle() {
        return SteamAPI_ISteamNetworkingSockets_CloseListenSocket.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingSockets_CloseListenSocket(ISteamNetworkingSockets ptr, HSteamListenSocket hSocket)
     * }
     */
    public static boolean SteamAPI_ISteamNetworkingSockets_CloseListenSocket(MemorySegment ptr, int hSocket) {
        var mh$ = SteamAPI_ISteamNetworkingSockets_CloseListenSocket.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingSockets_CloseListenSocket", ptr, hSocket);
            }
            return (boolean)mh$.invokeExact(ptr, hSocket);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingSockets_SetConnectionUserData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamNetworkingSockets_SetConnectionUserData"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingSockets_SetConnectionUserData(ISteamNetworkingSockets ptr, HSteamNetConnection hPeer, int64 nUserData)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingSockets_SetConnectionUserData$descriptor() {
        return SteamAPI_ISteamNetworkingSockets_SetConnectionUserData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingSockets_SetConnectionUserData(ISteamNetworkingSockets ptr, HSteamNetConnection hPeer, int64 nUserData)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingSockets_SetConnectionUserData$handle() {
        return SteamAPI_ISteamNetworkingSockets_SetConnectionUserData.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingSockets_SetConnectionUserData(ISteamNetworkingSockets ptr, HSteamNetConnection hPeer, int64 nUserData)
     * }
     */
    public static boolean SteamAPI_ISteamNetworkingSockets_SetConnectionUserData(MemorySegment ptr, int hPeer, long nUserData) {
        var mh$ = SteamAPI_ISteamNetworkingSockets_SetConnectionUserData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingSockets_SetConnectionUserData", ptr, hPeer, nUserData);
            }
            return (boolean)mh$.invokeExact(ptr, hPeer, nUserData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingSockets_GetConnectionUserData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamNetworkingSockets_GetConnectionUserData"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int64 SteamAPI_ISteamNetworkingSockets_GetConnectionUserData(ISteamNetworkingSockets ptr, HSteamNetConnection hPeer)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingSockets_GetConnectionUserData$descriptor() {
        return SteamAPI_ISteamNetworkingSockets_GetConnectionUserData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int64 SteamAPI_ISteamNetworkingSockets_GetConnectionUserData(ISteamNetworkingSockets ptr, HSteamNetConnection hPeer)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingSockets_GetConnectionUserData$handle() {
        return SteamAPI_ISteamNetworkingSockets_GetConnectionUserData.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int64 SteamAPI_ISteamNetworkingSockets_GetConnectionUserData(ISteamNetworkingSockets ptr, HSteamNetConnection hPeer)
     * }
     */
    public static long SteamAPI_ISteamNetworkingSockets_GetConnectionUserData(MemorySegment ptr, int hPeer) {
        var mh$ = SteamAPI_ISteamNetworkingSockets_GetConnectionUserData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingSockets_GetConnectionUserData", ptr, hPeer);
            }
            return (long)mh$.invokeExact(ptr, hPeer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingSockets_SetConnectionName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamNetworkingSockets_SetConnectionName"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamNetworkingSockets_SetConnectionName(ISteamNetworkingSockets ptr, HSteamNetConnection hPeer, const char *pszName)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingSockets_SetConnectionName$descriptor() {
        return SteamAPI_ISteamNetworkingSockets_SetConnectionName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamNetworkingSockets_SetConnectionName(ISteamNetworkingSockets ptr, HSteamNetConnection hPeer, const char *pszName)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingSockets_SetConnectionName$handle() {
        return SteamAPI_ISteamNetworkingSockets_SetConnectionName.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamNetworkingSockets_SetConnectionName(ISteamNetworkingSockets ptr, HSteamNetConnection hPeer, const char *pszName)
     * }
     */
    public static void SteamAPI_ISteamNetworkingSockets_SetConnectionName(MemorySegment ptr, int hPeer, MemorySegment pszName) {
        var mh$ = SteamAPI_ISteamNetworkingSockets_SetConnectionName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingSockets_SetConnectionName", ptr, hPeer, pszName);
            }
            mh$.invokeExact(ptr, hPeer, pszName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingSockets_GetConnectionName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamNetworkingSockets_GetConnectionName"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingSockets_GetConnectionName(ISteamNetworkingSockets ptr, HSteamNetConnection hPeer, char *pszName, int nMaxLen)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingSockets_GetConnectionName$descriptor() {
        return SteamAPI_ISteamNetworkingSockets_GetConnectionName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingSockets_GetConnectionName(ISteamNetworkingSockets ptr, HSteamNetConnection hPeer, char *pszName, int nMaxLen)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingSockets_GetConnectionName$handle() {
        return SteamAPI_ISteamNetworkingSockets_GetConnectionName.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingSockets_GetConnectionName(ISteamNetworkingSockets ptr, HSteamNetConnection hPeer, char *pszName, int nMaxLen)
     * }
     */
    public static boolean SteamAPI_ISteamNetworkingSockets_GetConnectionName(MemorySegment ptr, int hPeer, MemorySegment pszName, int nMaxLen) {
        var mh$ = SteamAPI_ISteamNetworkingSockets_GetConnectionName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingSockets_GetConnectionName", ptr, hPeer, pszName, nMaxLen);
            }
            return (boolean)mh$.invokeExact(ptr, hPeer, pszName, nMaxLen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingSockets_SendMessageToConnection {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamNetworkingSockets_SendMessageToConnection"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * EResult SteamAPI_ISteamNetworkingSockets_SendMessageToConnection(ISteamNetworkingSockets ptr, HSteamNetConnection hConn, const void *pData, uint32 cbData, int nSendFlags, int64 *pOutMessageNumber)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingSockets_SendMessageToConnection$descriptor() {
        return SteamAPI_ISteamNetworkingSockets_SendMessageToConnection.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * EResult SteamAPI_ISteamNetworkingSockets_SendMessageToConnection(ISteamNetworkingSockets ptr, HSteamNetConnection hConn, const void *pData, uint32 cbData, int nSendFlags, int64 *pOutMessageNumber)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingSockets_SendMessageToConnection$handle() {
        return SteamAPI_ISteamNetworkingSockets_SendMessageToConnection.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * EResult SteamAPI_ISteamNetworkingSockets_SendMessageToConnection(ISteamNetworkingSockets ptr, HSteamNetConnection hConn, const void *pData, uint32 cbData, int nSendFlags, int64 *pOutMessageNumber)
     * }
     */
    public static int SteamAPI_ISteamNetworkingSockets_SendMessageToConnection(MemorySegment ptr, int hConn, MemorySegment pData, int cbData, int nSendFlags, MemorySegment pOutMessageNumber) {
        var mh$ = SteamAPI_ISteamNetworkingSockets_SendMessageToConnection.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingSockets_SendMessageToConnection", ptr, hConn, pData, cbData, nSendFlags, pOutMessageNumber);
            }
            return (int)mh$.invokeExact(ptr, hConn, pData, cbData, nSendFlags, pOutMessageNumber);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingSockets_SendMessages {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamNetworkingSockets_SendMessages"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamNetworkingSockets_SendMessages(ISteamNetworkingSockets ptr, int nMessages, SteamNetworkingMessage_t *const *pMessages, int64 *pOutMessageNumberOrResult)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingSockets_SendMessages$descriptor() {
        return SteamAPI_ISteamNetworkingSockets_SendMessages.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamNetworkingSockets_SendMessages(ISteamNetworkingSockets ptr, int nMessages, SteamNetworkingMessage_t *const *pMessages, int64 *pOutMessageNumberOrResult)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingSockets_SendMessages$handle() {
        return SteamAPI_ISteamNetworkingSockets_SendMessages.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamNetworkingSockets_SendMessages(ISteamNetworkingSockets ptr, int nMessages, SteamNetworkingMessage_t *const *pMessages, int64 *pOutMessageNumberOrResult)
     * }
     */
    public static void SteamAPI_ISteamNetworkingSockets_SendMessages(MemorySegment ptr, int nMessages, MemorySegment pMessages, MemorySegment pOutMessageNumberOrResult) {
        var mh$ = SteamAPI_ISteamNetworkingSockets_SendMessages.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingSockets_SendMessages", ptr, nMessages, pMessages, pOutMessageNumberOrResult);
            }
            mh$.invokeExact(ptr, nMessages, pMessages, pOutMessageNumberOrResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingSockets_FlushMessagesOnConnection {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamNetworkingSockets_FlushMessagesOnConnection"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * EResult SteamAPI_ISteamNetworkingSockets_FlushMessagesOnConnection(ISteamNetworkingSockets ptr, HSteamNetConnection hConn)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingSockets_FlushMessagesOnConnection$descriptor() {
        return SteamAPI_ISteamNetworkingSockets_FlushMessagesOnConnection.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * EResult SteamAPI_ISteamNetworkingSockets_FlushMessagesOnConnection(ISteamNetworkingSockets ptr, HSteamNetConnection hConn)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingSockets_FlushMessagesOnConnection$handle() {
        return SteamAPI_ISteamNetworkingSockets_FlushMessagesOnConnection.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * EResult SteamAPI_ISteamNetworkingSockets_FlushMessagesOnConnection(ISteamNetworkingSockets ptr, HSteamNetConnection hConn)
     * }
     */
    public static int SteamAPI_ISteamNetworkingSockets_FlushMessagesOnConnection(MemorySegment ptr, int hConn) {
        var mh$ = SteamAPI_ISteamNetworkingSockets_FlushMessagesOnConnection.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingSockets_FlushMessagesOnConnection", ptr, hConn);
            }
            return (int)mh$.invokeExact(ptr, hConn);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingSockets_ReceiveMessagesOnConnection {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamNetworkingSockets_ReceiveMessagesOnConnection"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamNetworkingSockets_ReceiveMessagesOnConnection(ISteamNetworkingSockets ptr, HSteamNetConnection hConn, SteamNetworkingMessage_t **ppOutMessages, int nMaxMessages)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingSockets_ReceiveMessagesOnConnection$descriptor() {
        return SteamAPI_ISteamNetworkingSockets_ReceiveMessagesOnConnection.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamNetworkingSockets_ReceiveMessagesOnConnection(ISteamNetworkingSockets ptr, HSteamNetConnection hConn, SteamNetworkingMessage_t **ppOutMessages, int nMaxMessages)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingSockets_ReceiveMessagesOnConnection$handle() {
        return SteamAPI_ISteamNetworkingSockets_ReceiveMessagesOnConnection.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int SteamAPI_ISteamNetworkingSockets_ReceiveMessagesOnConnection(ISteamNetworkingSockets ptr, HSteamNetConnection hConn, SteamNetworkingMessage_t **ppOutMessages, int nMaxMessages)
     * }
     */
    public static int SteamAPI_ISteamNetworkingSockets_ReceiveMessagesOnConnection(MemorySegment ptr, int hConn, MemorySegment ppOutMessages, int nMaxMessages) {
        var mh$ = SteamAPI_ISteamNetworkingSockets_ReceiveMessagesOnConnection.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingSockets_ReceiveMessagesOnConnection", ptr, hConn, ppOutMessages, nMaxMessages);
            }
            return (int)mh$.invokeExact(ptr, hConn, ppOutMessages, nMaxMessages);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingSockets_GetConnectionInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamNetworkingSockets_GetConnectionInfo"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingSockets_GetConnectionInfo(ISteamNetworkingSockets ptr, HSteamNetConnection hConn, SteamNetConnectionInfo_t *pInfo)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingSockets_GetConnectionInfo$descriptor() {
        return SteamAPI_ISteamNetworkingSockets_GetConnectionInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingSockets_GetConnectionInfo(ISteamNetworkingSockets ptr, HSteamNetConnection hConn, SteamNetConnectionInfo_t *pInfo)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingSockets_GetConnectionInfo$handle() {
        return SteamAPI_ISteamNetworkingSockets_GetConnectionInfo.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingSockets_GetConnectionInfo(ISteamNetworkingSockets ptr, HSteamNetConnection hConn, SteamNetConnectionInfo_t *pInfo)
     * }
     */
    public static boolean SteamAPI_ISteamNetworkingSockets_GetConnectionInfo(MemorySegment ptr, int hConn, MemorySegment pInfo) {
        var mh$ = SteamAPI_ISteamNetworkingSockets_GetConnectionInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingSockets_GetConnectionInfo", ptr, hConn, pInfo);
            }
            return (boolean)mh$.invokeExact(ptr, hConn, pInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingSockets_GetConnectionRealTimeStatus {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamNetworkingSockets_GetConnectionRealTimeStatus"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * EResult SteamAPI_ISteamNetworkingSockets_GetConnectionRealTimeStatus(ISteamNetworkingSockets ptr, HSteamNetConnection hConn, SteamNetConnectionRealTimeStatus_t *pStatus, int nLanes, SteamNetConnectionRealTimeLaneStatus_t *pLanes)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingSockets_GetConnectionRealTimeStatus$descriptor() {
        return SteamAPI_ISteamNetworkingSockets_GetConnectionRealTimeStatus.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * EResult SteamAPI_ISteamNetworkingSockets_GetConnectionRealTimeStatus(ISteamNetworkingSockets ptr, HSteamNetConnection hConn, SteamNetConnectionRealTimeStatus_t *pStatus, int nLanes, SteamNetConnectionRealTimeLaneStatus_t *pLanes)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingSockets_GetConnectionRealTimeStatus$handle() {
        return SteamAPI_ISteamNetworkingSockets_GetConnectionRealTimeStatus.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * EResult SteamAPI_ISteamNetworkingSockets_GetConnectionRealTimeStatus(ISteamNetworkingSockets ptr, HSteamNetConnection hConn, SteamNetConnectionRealTimeStatus_t *pStatus, int nLanes, SteamNetConnectionRealTimeLaneStatus_t *pLanes)
     * }
     */
    public static int SteamAPI_ISteamNetworkingSockets_GetConnectionRealTimeStatus(MemorySegment ptr, int hConn, MemorySegment pStatus, int nLanes, MemorySegment pLanes) {
        var mh$ = SteamAPI_ISteamNetworkingSockets_GetConnectionRealTimeStatus.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingSockets_GetConnectionRealTimeStatus", ptr, hConn, pStatus, nLanes, pLanes);
            }
            return (int)mh$.invokeExact(ptr, hConn, pStatus, nLanes, pLanes);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingSockets_GetDetailedConnectionStatus {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamNetworkingSockets_GetDetailedConnectionStatus"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamNetworkingSockets_GetDetailedConnectionStatus(ISteamNetworkingSockets ptr, HSteamNetConnection hConn, char *pszBuf, int cbBuf)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingSockets_GetDetailedConnectionStatus$descriptor() {
        return SteamAPI_ISteamNetworkingSockets_GetDetailedConnectionStatus.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamNetworkingSockets_GetDetailedConnectionStatus(ISteamNetworkingSockets ptr, HSteamNetConnection hConn, char *pszBuf, int cbBuf)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingSockets_GetDetailedConnectionStatus$handle() {
        return SteamAPI_ISteamNetworkingSockets_GetDetailedConnectionStatus.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int SteamAPI_ISteamNetworkingSockets_GetDetailedConnectionStatus(ISteamNetworkingSockets ptr, HSteamNetConnection hConn, char *pszBuf, int cbBuf)
     * }
     */
    public static int SteamAPI_ISteamNetworkingSockets_GetDetailedConnectionStatus(MemorySegment ptr, int hConn, MemorySegment pszBuf, int cbBuf) {
        var mh$ = SteamAPI_ISteamNetworkingSockets_GetDetailedConnectionStatus.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingSockets_GetDetailedConnectionStatus", ptr, hConn, pszBuf, cbBuf);
            }
            return (int)mh$.invokeExact(ptr, hConn, pszBuf, cbBuf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingSockets_GetListenSocketAddress {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamNetworkingSockets_GetListenSocketAddress"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingSockets_GetListenSocketAddress(ISteamNetworkingSockets ptr, HSteamListenSocket hSocket, SteamNetworkingIPAddr *address)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingSockets_GetListenSocketAddress$descriptor() {
        return SteamAPI_ISteamNetworkingSockets_GetListenSocketAddress.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingSockets_GetListenSocketAddress(ISteamNetworkingSockets ptr, HSteamListenSocket hSocket, SteamNetworkingIPAddr *address)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingSockets_GetListenSocketAddress$handle() {
        return SteamAPI_ISteamNetworkingSockets_GetListenSocketAddress.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingSockets_GetListenSocketAddress(ISteamNetworkingSockets ptr, HSteamListenSocket hSocket, SteamNetworkingIPAddr *address)
     * }
     */
    public static boolean SteamAPI_ISteamNetworkingSockets_GetListenSocketAddress(MemorySegment ptr, int hSocket, MemorySegment address) {
        var mh$ = SteamAPI_ISteamNetworkingSockets_GetListenSocketAddress.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingSockets_GetListenSocketAddress", ptr, hSocket, address);
            }
            return (boolean)mh$.invokeExact(ptr, hSocket, address);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingSockets_CreateSocketPair {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamNetworkingSockets_CreateSocketPair"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingSockets_CreateSocketPair(ISteamNetworkingSockets ptr, HSteamNetConnection *pOutConnection1, HSteamNetConnection *pOutConnection2, bool bUseNetworkLoopback, const SteamNetworkingIdentity *pIdentity1, const SteamNetworkingIdentity *pIdentity2)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingSockets_CreateSocketPair$descriptor() {
        return SteamAPI_ISteamNetworkingSockets_CreateSocketPair.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingSockets_CreateSocketPair(ISteamNetworkingSockets ptr, HSteamNetConnection *pOutConnection1, HSteamNetConnection *pOutConnection2, bool bUseNetworkLoopback, const SteamNetworkingIdentity *pIdentity1, const SteamNetworkingIdentity *pIdentity2)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingSockets_CreateSocketPair$handle() {
        return SteamAPI_ISteamNetworkingSockets_CreateSocketPair.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingSockets_CreateSocketPair(ISteamNetworkingSockets ptr, HSteamNetConnection *pOutConnection1, HSteamNetConnection *pOutConnection2, bool bUseNetworkLoopback, const SteamNetworkingIdentity *pIdentity1, const SteamNetworkingIdentity *pIdentity2)
     * }
     */
    public static boolean SteamAPI_ISteamNetworkingSockets_CreateSocketPair(MemorySegment ptr, MemorySegment pOutConnection1, MemorySegment pOutConnection2, boolean bUseNetworkLoopback, MemorySegment pIdentity1, MemorySegment pIdentity2) {
        var mh$ = SteamAPI_ISteamNetworkingSockets_CreateSocketPair.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingSockets_CreateSocketPair", ptr, pOutConnection1, pOutConnection2, bUseNetworkLoopback, pIdentity1, pIdentity2);
            }
            return (boolean)mh$.invokeExact(ptr, pOutConnection1, pOutConnection2, bUseNetworkLoopback, pIdentity1, pIdentity2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingSockets_ConfigureConnectionLanes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamNetworkingSockets_ConfigureConnectionLanes"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * EResult SteamAPI_ISteamNetworkingSockets_ConfigureConnectionLanes(ISteamNetworkingSockets ptr, HSteamNetConnection hConn, int nNumLanes, const int *pLanePriorities, const uint16 *pLaneWeights)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingSockets_ConfigureConnectionLanes$descriptor() {
        return SteamAPI_ISteamNetworkingSockets_ConfigureConnectionLanes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * EResult SteamAPI_ISteamNetworkingSockets_ConfigureConnectionLanes(ISteamNetworkingSockets ptr, HSteamNetConnection hConn, int nNumLanes, const int *pLanePriorities, const uint16 *pLaneWeights)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingSockets_ConfigureConnectionLanes$handle() {
        return SteamAPI_ISteamNetworkingSockets_ConfigureConnectionLanes.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * EResult SteamAPI_ISteamNetworkingSockets_ConfigureConnectionLanes(ISteamNetworkingSockets ptr, HSteamNetConnection hConn, int nNumLanes, const int *pLanePriorities, const uint16 *pLaneWeights)
     * }
     */
    public static int SteamAPI_ISteamNetworkingSockets_ConfigureConnectionLanes(MemorySegment ptr, int hConn, int nNumLanes, MemorySegment pLanePriorities, MemorySegment pLaneWeights) {
        var mh$ = SteamAPI_ISteamNetworkingSockets_ConfigureConnectionLanes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingSockets_ConfigureConnectionLanes", ptr, hConn, nNumLanes, pLanePriorities, pLaneWeights);
            }
            return (int)mh$.invokeExact(ptr, hConn, nNumLanes, pLanePriorities, pLaneWeights);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingSockets_GetIdentity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamNetworkingSockets_GetIdentity"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingSockets_GetIdentity(ISteamNetworkingSockets ptr, SteamNetworkingIdentity *pIdentity)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingSockets_GetIdentity$descriptor() {
        return SteamAPI_ISteamNetworkingSockets_GetIdentity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingSockets_GetIdentity(ISteamNetworkingSockets ptr, SteamNetworkingIdentity *pIdentity)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingSockets_GetIdentity$handle() {
        return SteamAPI_ISteamNetworkingSockets_GetIdentity.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingSockets_GetIdentity(ISteamNetworkingSockets ptr, SteamNetworkingIdentity *pIdentity)
     * }
     */
    public static boolean SteamAPI_ISteamNetworkingSockets_GetIdentity(MemorySegment ptr, MemorySegment pIdentity) {
        var mh$ = SteamAPI_ISteamNetworkingSockets_GetIdentity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingSockets_GetIdentity", ptr, pIdentity);
            }
            return (boolean)mh$.invokeExact(ptr, pIdentity);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingSockets_InitAuthentication {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamNetworkingSockets_InitAuthentication"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ESteamNetworkingAvailability SteamAPI_ISteamNetworkingSockets_InitAuthentication(ISteamNetworkingSockets ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingSockets_InitAuthentication$descriptor() {
        return SteamAPI_ISteamNetworkingSockets_InitAuthentication.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ESteamNetworkingAvailability SteamAPI_ISteamNetworkingSockets_InitAuthentication(ISteamNetworkingSockets ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingSockets_InitAuthentication$handle() {
        return SteamAPI_ISteamNetworkingSockets_InitAuthentication.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ESteamNetworkingAvailability SteamAPI_ISteamNetworkingSockets_InitAuthentication(ISteamNetworkingSockets ptr)
     * }
     */
    public static int SteamAPI_ISteamNetworkingSockets_InitAuthentication(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamNetworkingSockets_InitAuthentication.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingSockets_InitAuthentication", ptr);
            }
            return (int)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingSockets_GetAuthenticationStatus {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamNetworkingSockets_GetAuthenticationStatus"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ESteamNetworkingAvailability SteamAPI_ISteamNetworkingSockets_GetAuthenticationStatus(ISteamNetworkingSockets ptr, SteamNetAuthenticationStatus_t *pDetails)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingSockets_GetAuthenticationStatus$descriptor() {
        return SteamAPI_ISteamNetworkingSockets_GetAuthenticationStatus.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ESteamNetworkingAvailability SteamAPI_ISteamNetworkingSockets_GetAuthenticationStatus(ISteamNetworkingSockets ptr, SteamNetAuthenticationStatus_t *pDetails)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingSockets_GetAuthenticationStatus$handle() {
        return SteamAPI_ISteamNetworkingSockets_GetAuthenticationStatus.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ESteamNetworkingAvailability SteamAPI_ISteamNetworkingSockets_GetAuthenticationStatus(ISteamNetworkingSockets ptr, SteamNetAuthenticationStatus_t *pDetails)
     * }
     */
    public static int SteamAPI_ISteamNetworkingSockets_GetAuthenticationStatus(MemorySegment ptr, MemorySegment pDetails) {
        var mh$ = SteamAPI_ISteamNetworkingSockets_GetAuthenticationStatus.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingSockets_GetAuthenticationStatus", ptr, pDetails);
            }
            return (int)mh$.invokeExact(ptr, pDetails);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingSockets_CreatePollGroup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamNetworkingSockets_CreatePollGroup"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HSteamNetPollGroup SteamAPI_ISteamNetworkingSockets_CreatePollGroup(ISteamNetworkingSockets ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingSockets_CreatePollGroup$descriptor() {
        return SteamAPI_ISteamNetworkingSockets_CreatePollGroup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HSteamNetPollGroup SteamAPI_ISteamNetworkingSockets_CreatePollGroup(ISteamNetworkingSockets ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingSockets_CreatePollGroup$handle() {
        return SteamAPI_ISteamNetworkingSockets_CreatePollGroup.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HSteamNetPollGroup SteamAPI_ISteamNetworkingSockets_CreatePollGroup(ISteamNetworkingSockets ptr)
     * }
     */
    public static int SteamAPI_ISteamNetworkingSockets_CreatePollGroup(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamNetworkingSockets_CreatePollGroup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingSockets_CreatePollGroup", ptr);
            }
            return (int)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingSockets_DestroyPollGroup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamNetworkingSockets_DestroyPollGroup"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingSockets_DestroyPollGroup(ISteamNetworkingSockets ptr, HSteamNetPollGroup hPollGroup)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingSockets_DestroyPollGroup$descriptor() {
        return SteamAPI_ISteamNetworkingSockets_DestroyPollGroup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingSockets_DestroyPollGroup(ISteamNetworkingSockets ptr, HSteamNetPollGroup hPollGroup)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingSockets_DestroyPollGroup$handle() {
        return SteamAPI_ISteamNetworkingSockets_DestroyPollGroup.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingSockets_DestroyPollGroup(ISteamNetworkingSockets ptr, HSteamNetPollGroup hPollGroup)
     * }
     */
    public static boolean SteamAPI_ISteamNetworkingSockets_DestroyPollGroup(MemorySegment ptr, int hPollGroup) {
        var mh$ = SteamAPI_ISteamNetworkingSockets_DestroyPollGroup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingSockets_DestroyPollGroup", ptr, hPollGroup);
            }
            return (boolean)mh$.invokeExact(ptr, hPollGroup);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingSockets_SetConnectionPollGroup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamNetworkingSockets_SetConnectionPollGroup"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingSockets_SetConnectionPollGroup(ISteamNetworkingSockets ptr, HSteamNetConnection hConn, HSteamNetPollGroup hPollGroup)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingSockets_SetConnectionPollGroup$descriptor() {
        return SteamAPI_ISteamNetworkingSockets_SetConnectionPollGroup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingSockets_SetConnectionPollGroup(ISteamNetworkingSockets ptr, HSteamNetConnection hConn, HSteamNetPollGroup hPollGroup)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingSockets_SetConnectionPollGroup$handle() {
        return SteamAPI_ISteamNetworkingSockets_SetConnectionPollGroup.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingSockets_SetConnectionPollGroup(ISteamNetworkingSockets ptr, HSteamNetConnection hConn, HSteamNetPollGroup hPollGroup)
     * }
     */
    public static boolean SteamAPI_ISteamNetworkingSockets_SetConnectionPollGroup(MemorySegment ptr, int hConn, int hPollGroup) {
        var mh$ = SteamAPI_ISteamNetworkingSockets_SetConnectionPollGroup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingSockets_SetConnectionPollGroup", ptr, hConn, hPollGroup);
            }
            return (boolean)mh$.invokeExact(ptr, hConn, hPollGroup);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingSockets_ReceiveMessagesOnPollGroup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamNetworkingSockets_ReceiveMessagesOnPollGroup"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamNetworkingSockets_ReceiveMessagesOnPollGroup(ISteamNetworkingSockets ptr, HSteamNetPollGroup hPollGroup, SteamNetworkingMessage_t **ppOutMessages, int nMaxMessages)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingSockets_ReceiveMessagesOnPollGroup$descriptor() {
        return SteamAPI_ISteamNetworkingSockets_ReceiveMessagesOnPollGroup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamNetworkingSockets_ReceiveMessagesOnPollGroup(ISteamNetworkingSockets ptr, HSteamNetPollGroup hPollGroup, SteamNetworkingMessage_t **ppOutMessages, int nMaxMessages)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingSockets_ReceiveMessagesOnPollGroup$handle() {
        return SteamAPI_ISteamNetworkingSockets_ReceiveMessagesOnPollGroup.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int SteamAPI_ISteamNetworkingSockets_ReceiveMessagesOnPollGroup(ISteamNetworkingSockets ptr, HSteamNetPollGroup hPollGroup, SteamNetworkingMessage_t **ppOutMessages, int nMaxMessages)
     * }
     */
    public static int SteamAPI_ISteamNetworkingSockets_ReceiveMessagesOnPollGroup(MemorySegment ptr, int hPollGroup, MemorySegment ppOutMessages, int nMaxMessages) {
        var mh$ = SteamAPI_ISteamNetworkingSockets_ReceiveMessagesOnPollGroup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingSockets_ReceiveMessagesOnPollGroup", ptr, hPollGroup, ppOutMessages, nMaxMessages);
            }
            return (int)mh$.invokeExact(ptr, hPollGroup, ppOutMessages, nMaxMessages);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingSockets_ConnectToHostedDedicatedServer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamNetworkingSockets_ConnectToHostedDedicatedServer"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HSteamNetConnection SteamAPI_ISteamNetworkingSockets_ConnectToHostedDedicatedServer(ISteamNetworkingSockets ptr, const SteamNetworkingIdentity *identityTarget, int nRemoteVirtualPort, int nOptions, const SteamNetworkingConfigValue_t *pOptions)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingSockets_ConnectToHostedDedicatedServer$descriptor() {
        return SteamAPI_ISteamNetworkingSockets_ConnectToHostedDedicatedServer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HSteamNetConnection SteamAPI_ISteamNetworkingSockets_ConnectToHostedDedicatedServer(ISteamNetworkingSockets ptr, const SteamNetworkingIdentity *identityTarget, int nRemoteVirtualPort, int nOptions, const SteamNetworkingConfigValue_t *pOptions)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingSockets_ConnectToHostedDedicatedServer$handle() {
        return SteamAPI_ISteamNetworkingSockets_ConnectToHostedDedicatedServer.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HSteamNetConnection SteamAPI_ISteamNetworkingSockets_ConnectToHostedDedicatedServer(ISteamNetworkingSockets ptr, const SteamNetworkingIdentity *identityTarget, int nRemoteVirtualPort, int nOptions, const SteamNetworkingConfigValue_t *pOptions)
     * }
     */
    public static int SteamAPI_ISteamNetworkingSockets_ConnectToHostedDedicatedServer(MemorySegment ptr, MemorySegment identityTarget, int nRemoteVirtualPort, int nOptions, MemorySegment pOptions) {
        var mh$ = SteamAPI_ISteamNetworkingSockets_ConnectToHostedDedicatedServer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingSockets_ConnectToHostedDedicatedServer", ptr, identityTarget, nRemoteVirtualPort, nOptions, pOptions);
            }
            return (int)mh$.invokeExact(ptr, identityTarget, nRemoteVirtualPort, nOptions, pOptions);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingSockets_GetHostedDedicatedServerPort {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_SHORT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamNetworkingSockets_GetHostedDedicatedServerPort"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint16 SteamAPI_ISteamNetworkingSockets_GetHostedDedicatedServerPort(ISteamNetworkingSockets ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingSockets_GetHostedDedicatedServerPort$descriptor() {
        return SteamAPI_ISteamNetworkingSockets_GetHostedDedicatedServerPort.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint16 SteamAPI_ISteamNetworkingSockets_GetHostedDedicatedServerPort(ISteamNetworkingSockets ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingSockets_GetHostedDedicatedServerPort$handle() {
        return SteamAPI_ISteamNetworkingSockets_GetHostedDedicatedServerPort.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * uint16 SteamAPI_ISteamNetworkingSockets_GetHostedDedicatedServerPort(ISteamNetworkingSockets ptr)
     * }
     */
    public static short SteamAPI_ISteamNetworkingSockets_GetHostedDedicatedServerPort(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamNetworkingSockets_GetHostedDedicatedServerPort.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingSockets_GetHostedDedicatedServerPort", ptr);
            }
            return (short)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingSockets_GetHostedDedicatedServerPOPID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamNetworkingSockets_GetHostedDedicatedServerPOPID"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamNetworkingPOPID SteamAPI_ISteamNetworkingSockets_GetHostedDedicatedServerPOPID(ISteamNetworkingSockets ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingSockets_GetHostedDedicatedServerPOPID$descriptor() {
        return SteamAPI_ISteamNetworkingSockets_GetHostedDedicatedServerPOPID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamNetworkingPOPID SteamAPI_ISteamNetworkingSockets_GetHostedDedicatedServerPOPID(ISteamNetworkingSockets ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingSockets_GetHostedDedicatedServerPOPID$handle() {
        return SteamAPI_ISteamNetworkingSockets_GetHostedDedicatedServerPOPID.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamNetworkingPOPID SteamAPI_ISteamNetworkingSockets_GetHostedDedicatedServerPOPID(ISteamNetworkingSockets ptr)
     * }
     */
    public static int SteamAPI_ISteamNetworkingSockets_GetHostedDedicatedServerPOPID(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamNetworkingSockets_GetHostedDedicatedServerPOPID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingSockets_GetHostedDedicatedServerPOPID", ptr);
            }
            return (int)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingSockets_GetHostedDedicatedServerAddress {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamNetworkingSockets_GetHostedDedicatedServerAddress"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * EResult SteamAPI_ISteamNetworkingSockets_GetHostedDedicatedServerAddress(ISteamNetworkingSockets ptr, SteamDatagramHostedAddress *pRouting)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingSockets_GetHostedDedicatedServerAddress$descriptor() {
        return SteamAPI_ISteamNetworkingSockets_GetHostedDedicatedServerAddress.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * EResult SteamAPI_ISteamNetworkingSockets_GetHostedDedicatedServerAddress(ISteamNetworkingSockets ptr, SteamDatagramHostedAddress *pRouting)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingSockets_GetHostedDedicatedServerAddress$handle() {
        return SteamAPI_ISteamNetworkingSockets_GetHostedDedicatedServerAddress.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * EResult SteamAPI_ISteamNetworkingSockets_GetHostedDedicatedServerAddress(ISteamNetworkingSockets ptr, SteamDatagramHostedAddress *pRouting)
     * }
     */
    public static int SteamAPI_ISteamNetworkingSockets_GetHostedDedicatedServerAddress(MemorySegment ptr, MemorySegment pRouting) {
        var mh$ = SteamAPI_ISteamNetworkingSockets_GetHostedDedicatedServerAddress.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingSockets_GetHostedDedicatedServerAddress", ptr, pRouting);
            }
            return (int)mh$.invokeExact(ptr, pRouting);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingSockets_CreateHostedDedicatedServerListenSocket {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamNetworkingSockets_CreateHostedDedicatedServerListenSocket"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HSteamListenSocket SteamAPI_ISteamNetworkingSockets_CreateHostedDedicatedServerListenSocket(ISteamNetworkingSockets ptr, int nLocalVirtualPort, int nOptions, const SteamNetworkingConfigValue_t *pOptions)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingSockets_CreateHostedDedicatedServerListenSocket$descriptor() {
        return SteamAPI_ISteamNetworkingSockets_CreateHostedDedicatedServerListenSocket.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HSteamListenSocket SteamAPI_ISteamNetworkingSockets_CreateHostedDedicatedServerListenSocket(ISteamNetworkingSockets ptr, int nLocalVirtualPort, int nOptions, const SteamNetworkingConfigValue_t *pOptions)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingSockets_CreateHostedDedicatedServerListenSocket$handle() {
        return SteamAPI_ISteamNetworkingSockets_CreateHostedDedicatedServerListenSocket.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HSteamListenSocket SteamAPI_ISteamNetworkingSockets_CreateHostedDedicatedServerListenSocket(ISteamNetworkingSockets ptr, int nLocalVirtualPort, int nOptions, const SteamNetworkingConfigValue_t *pOptions)
     * }
     */
    public static int SteamAPI_ISteamNetworkingSockets_CreateHostedDedicatedServerListenSocket(MemorySegment ptr, int nLocalVirtualPort, int nOptions, MemorySegment pOptions) {
        var mh$ = SteamAPI_ISteamNetworkingSockets_CreateHostedDedicatedServerListenSocket.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingSockets_CreateHostedDedicatedServerListenSocket", ptr, nLocalVirtualPort, nOptions, pOptions);
            }
            return (int)mh$.invokeExact(ptr, nLocalVirtualPort, nOptions, pOptions);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingSockets_GetGameCoordinatorServerLogin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamNetworkingSockets_GetGameCoordinatorServerLogin"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * EResult SteamAPI_ISteamNetworkingSockets_GetGameCoordinatorServerLogin(ISteamNetworkingSockets ptr, SteamDatagramGameCoordinatorServerLogin *pLoginInfo, int *pcbSignedBlob, void *pBlob)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingSockets_GetGameCoordinatorServerLogin$descriptor() {
        return SteamAPI_ISteamNetworkingSockets_GetGameCoordinatorServerLogin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * EResult SteamAPI_ISteamNetworkingSockets_GetGameCoordinatorServerLogin(ISteamNetworkingSockets ptr, SteamDatagramGameCoordinatorServerLogin *pLoginInfo, int *pcbSignedBlob, void *pBlob)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingSockets_GetGameCoordinatorServerLogin$handle() {
        return SteamAPI_ISteamNetworkingSockets_GetGameCoordinatorServerLogin.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * EResult SteamAPI_ISteamNetworkingSockets_GetGameCoordinatorServerLogin(ISteamNetworkingSockets ptr, SteamDatagramGameCoordinatorServerLogin *pLoginInfo, int *pcbSignedBlob, void *pBlob)
     * }
     */
    public static int SteamAPI_ISteamNetworkingSockets_GetGameCoordinatorServerLogin(MemorySegment ptr, MemorySegment pLoginInfo, MemorySegment pcbSignedBlob, MemorySegment pBlob) {
        var mh$ = SteamAPI_ISteamNetworkingSockets_GetGameCoordinatorServerLogin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingSockets_GetGameCoordinatorServerLogin", ptr, pLoginInfo, pcbSignedBlob, pBlob);
            }
            return (int)mh$.invokeExact(ptr, pLoginInfo, pcbSignedBlob, pBlob);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingSockets_GetCertificateRequest {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamNetworkingSockets_GetCertificateRequest"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingSockets_GetCertificateRequest(ISteamNetworkingSockets ptr, int *pcbBlob, void *pBlob, SteamNetworkingErrMsg *errMsg)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingSockets_GetCertificateRequest$descriptor() {
        return SteamAPI_ISteamNetworkingSockets_GetCertificateRequest.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingSockets_GetCertificateRequest(ISteamNetworkingSockets ptr, int *pcbBlob, void *pBlob, SteamNetworkingErrMsg *errMsg)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingSockets_GetCertificateRequest$handle() {
        return SteamAPI_ISteamNetworkingSockets_GetCertificateRequest.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingSockets_GetCertificateRequest(ISteamNetworkingSockets ptr, int *pcbBlob, void *pBlob, SteamNetworkingErrMsg *errMsg)
     * }
     */
    public static boolean SteamAPI_ISteamNetworkingSockets_GetCertificateRequest(MemorySegment ptr, MemorySegment pcbBlob, MemorySegment pBlob, MemorySegment errMsg) {
        var mh$ = SteamAPI_ISteamNetworkingSockets_GetCertificateRequest.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingSockets_GetCertificateRequest", ptr, pcbBlob, pBlob, errMsg);
            }
            return (boolean)mh$.invokeExact(ptr, pcbBlob, pBlob, errMsg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingSockets_SetCertificate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamNetworkingSockets_SetCertificate"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingSockets_SetCertificate(ISteamNetworkingSockets ptr, const void *pCertificate, int cbCertificate, SteamNetworkingErrMsg *errMsg)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingSockets_SetCertificate$descriptor() {
        return SteamAPI_ISteamNetworkingSockets_SetCertificate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingSockets_SetCertificate(ISteamNetworkingSockets ptr, const void *pCertificate, int cbCertificate, SteamNetworkingErrMsg *errMsg)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingSockets_SetCertificate$handle() {
        return SteamAPI_ISteamNetworkingSockets_SetCertificate.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingSockets_SetCertificate(ISteamNetworkingSockets ptr, const void *pCertificate, int cbCertificate, SteamNetworkingErrMsg *errMsg)
     * }
     */
    public static boolean SteamAPI_ISteamNetworkingSockets_SetCertificate(MemorySegment ptr, MemorySegment pCertificate, int cbCertificate, MemorySegment errMsg) {
        var mh$ = SteamAPI_ISteamNetworkingSockets_SetCertificate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingSockets_SetCertificate", ptr, pCertificate, cbCertificate, errMsg);
            }
            return (boolean)mh$.invokeExact(ptr, pCertificate, cbCertificate, errMsg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingSockets_ResetIdentity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamNetworkingSockets_ResetIdentity"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamNetworkingSockets_ResetIdentity(ISteamNetworkingSockets ptr, const SteamNetworkingIdentity *pIdentity)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingSockets_ResetIdentity$descriptor() {
        return SteamAPI_ISteamNetworkingSockets_ResetIdentity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamNetworkingSockets_ResetIdentity(ISteamNetworkingSockets ptr, const SteamNetworkingIdentity *pIdentity)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingSockets_ResetIdentity$handle() {
        return SteamAPI_ISteamNetworkingSockets_ResetIdentity.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamNetworkingSockets_ResetIdentity(ISteamNetworkingSockets ptr, const SteamNetworkingIdentity *pIdentity)
     * }
     */
    public static void SteamAPI_ISteamNetworkingSockets_ResetIdentity(MemorySegment ptr, MemorySegment pIdentity) {
        var mh$ = SteamAPI_ISteamNetworkingSockets_ResetIdentity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingSockets_ResetIdentity", ptr, pIdentity);
            }
            mh$.invokeExact(ptr, pIdentity);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingSockets_RunCallbacks {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamNetworkingSockets_RunCallbacks"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamNetworkingSockets_RunCallbacks(ISteamNetworkingSockets ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingSockets_RunCallbacks$descriptor() {
        return SteamAPI_ISteamNetworkingSockets_RunCallbacks.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamNetworkingSockets_RunCallbacks(ISteamNetworkingSockets ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingSockets_RunCallbacks$handle() {
        return SteamAPI_ISteamNetworkingSockets_RunCallbacks.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamNetworkingSockets_RunCallbacks(ISteamNetworkingSockets ptr)
     * }
     */
    public static void SteamAPI_ISteamNetworkingSockets_RunCallbacks(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamNetworkingSockets_RunCallbacks.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingSockets_RunCallbacks", ptr);
            }
            mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingSockets_BeginAsyncRequestFakeIP {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamNetworkingSockets_BeginAsyncRequestFakeIP"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingSockets_BeginAsyncRequestFakeIP(ISteamNetworkingSockets ptr, int nNumPorts)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingSockets_BeginAsyncRequestFakeIP$descriptor() {
        return SteamAPI_ISteamNetworkingSockets_BeginAsyncRequestFakeIP.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingSockets_BeginAsyncRequestFakeIP(ISteamNetworkingSockets ptr, int nNumPorts)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingSockets_BeginAsyncRequestFakeIP$handle() {
        return SteamAPI_ISteamNetworkingSockets_BeginAsyncRequestFakeIP.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingSockets_BeginAsyncRequestFakeIP(ISteamNetworkingSockets ptr, int nNumPorts)
     * }
     */
    public static boolean SteamAPI_ISteamNetworkingSockets_BeginAsyncRequestFakeIP(MemorySegment ptr, int nNumPorts) {
        var mh$ = SteamAPI_ISteamNetworkingSockets_BeginAsyncRequestFakeIP.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingSockets_BeginAsyncRequestFakeIP", ptr, nNumPorts);
            }
            return (boolean)mh$.invokeExact(ptr, nNumPorts);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingSockets_GetFakeIP {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamNetworkingSockets_GetFakeIP"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamNetworkingSockets_GetFakeIP(ISteamNetworkingSockets ptr, int idxFirstPort, SteamNetworkingFakeIPResult_t *pInfo)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingSockets_GetFakeIP$descriptor() {
        return SteamAPI_ISteamNetworkingSockets_GetFakeIP.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamNetworkingSockets_GetFakeIP(ISteamNetworkingSockets ptr, int idxFirstPort, SteamNetworkingFakeIPResult_t *pInfo)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingSockets_GetFakeIP$handle() {
        return SteamAPI_ISteamNetworkingSockets_GetFakeIP.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamNetworkingSockets_GetFakeIP(ISteamNetworkingSockets ptr, int idxFirstPort, SteamNetworkingFakeIPResult_t *pInfo)
     * }
     */
    public static void SteamAPI_ISteamNetworkingSockets_GetFakeIP(MemorySegment ptr, int idxFirstPort, MemorySegment pInfo) {
        var mh$ = SteamAPI_ISteamNetworkingSockets_GetFakeIP.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingSockets_GetFakeIP", ptr, idxFirstPort, pInfo);
            }
            mh$.invokeExact(ptr, idxFirstPort, pInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingSockets_CreateListenSocketP2PFakeIP {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamNetworkingSockets_CreateListenSocketP2PFakeIP"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HSteamListenSocket SteamAPI_ISteamNetworkingSockets_CreateListenSocketP2PFakeIP(ISteamNetworkingSockets ptr, int idxFakePort, int nOptions, const SteamNetworkingConfigValue_t *pOptions)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingSockets_CreateListenSocketP2PFakeIP$descriptor() {
        return SteamAPI_ISteamNetworkingSockets_CreateListenSocketP2PFakeIP.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HSteamListenSocket SteamAPI_ISteamNetworkingSockets_CreateListenSocketP2PFakeIP(ISteamNetworkingSockets ptr, int idxFakePort, int nOptions, const SteamNetworkingConfigValue_t *pOptions)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingSockets_CreateListenSocketP2PFakeIP$handle() {
        return SteamAPI_ISteamNetworkingSockets_CreateListenSocketP2PFakeIP.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HSteamListenSocket SteamAPI_ISteamNetworkingSockets_CreateListenSocketP2PFakeIP(ISteamNetworkingSockets ptr, int idxFakePort, int nOptions, const SteamNetworkingConfigValue_t *pOptions)
     * }
     */
    public static int SteamAPI_ISteamNetworkingSockets_CreateListenSocketP2PFakeIP(MemorySegment ptr, int idxFakePort, int nOptions, MemorySegment pOptions) {
        var mh$ = SteamAPI_ISteamNetworkingSockets_CreateListenSocketP2PFakeIP.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingSockets_CreateListenSocketP2PFakeIP", ptr, idxFakePort, nOptions, pOptions);
            }
            return (int)mh$.invokeExact(ptr, idxFakePort, nOptions, pOptions);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingSockets_GetRemoteFakeIPForConnection {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamNetworkingSockets_GetRemoteFakeIPForConnection"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * EResult SteamAPI_ISteamNetworkingSockets_GetRemoteFakeIPForConnection(ISteamNetworkingSockets ptr, HSteamNetConnection hConn, SteamNetworkingIPAddr *pOutAddr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingSockets_GetRemoteFakeIPForConnection$descriptor() {
        return SteamAPI_ISteamNetworkingSockets_GetRemoteFakeIPForConnection.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * EResult SteamAPI_ISteamNetworkingSockets_GetRemoteFakeIPForConnection(ISteamNetworkingSockets ptr, HSteamNetConnection hConn, SteamNetworkingIPAddr *pOutAddr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingSockets_GetRemoteFakeIPForConnection$handle() {
        return SteamAPI_ISteamNetworkingSockets_GetRemoteFakeIPForConnection.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * EResult SteamAPI_ISteamNetworkingSockets_GetRemoteFakeIPForConnection(ISteamNetworkingSockets ptr, HSteamNetConnection hConn, SteamNetworkingIPAddr *pOutAddr)
     * }
     */
    public static int SteamAPI_ISteamNetworkingSockets_GetRemoteFakeIPForConnection(MemorySegment ptr, int hConn, MemorySegment pOutAddr) {
        var mh$ = SteamAPI_ISteamNetworkingSockets_GetRemoteFakeIPForConnection.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingSockets_GetRemoteFakeIPForConnection", ptr, hConn, pOutAddr);
            }
            return (int)mh$.invokeExact(ptr, hConn, pOutAddr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingSockets_CreateFakeUDPPort {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamNetworkingSockets_CreateFakeUDPPort"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ISteamNetworkingFakeUDPPort *SteamAPI_ISteamNetworkingSockets_CreateFakeUDPPort(ISteamNetworkingSockets ptr, int idxFakeServerPort)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingSockets_CreateFakeUDPPort$descriptor() {
        return SteamAPI_ISteamNetworkingSockets_CreateFakeUDPPort.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ISteamNetworkingFakeUDPPort *SteamAPI_ISteamNetworkingSockets_CreateFakeUDPPort(ISteamNetworkingSockets ptr, int idxFakeServerPort)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingSockets_CreateFakeUDPPort$handle() {
        return SteamAPI_ISteamNetworkingSockets_CreateFakeUDPPort.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ISteamNetworkingFakeUDPPort *SteamAPI_ISteamNetworkingSockets_CreateFakeUDPPort(ISteamNetworkingSockets ptr, int idxFakeServerPort)
     * }
     */
    public static MemorySegment SteamAPI_ISteamNetworkingSockets_CreateFakeUDPPort(MemorySegment ptr, int idxFakeServerPort) {
        var mh$ = SteamAPI_ISteamNetworkingSockets_CreateFakeUDPPort.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingSockets_CreateFakeUDPPort", ptr, idxFakeServerPort);
            }
            return (MemorySegment)mh$.invokeExact(ptr, idxFakeServerPort);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_SteamNetworkingSockets_SteamAPI_v012 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_SteamNetworkingSockets_SteamAPI_v012"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ISteamNetworkingSockets SteamAPI_SteamNetworkingSockets_SteamAPI_v012()
     * }
     */
    public static FunctionDescriptor SteamAPI_SteamNetworkingSockets_SteamAPI_v012$descriptor() {
        return SteamAPI_SteamNetworkingSockets_SteamAPI_v012.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ISteamNetworkingSockets SteamAPI_SteamNetworkingSockets_SteamAPI_v012()
     * }
     */
    public static MethodHandle SteamAPI_SteamNetworkingSockets_SteamAPI_v012$handle() {
        return SteamAPI_SteamNetworkingSockets_SteamAPI_v012.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ISteamNetworkingSockets SteamAPI_SteamNetworkingSockets_SteamAPI_v012()
     * }
     */
    public static MemorySegment SteamAPI_SteamNetworkingSockets_SteamAPI_v012() {
        var mh$ = SteamAPI_SteamNetworkingSockets_SteamAPI_v012.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_SteamNetworkingSockets_SteamAPI_v012");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_SteamGameServerNetworkingSockets_SteamAPI_v012 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_SteamGameServerNetworkingSockets_SteamAPI_v012"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ISteamNetworkingSockets SteamAPI_SteamGameServerNetworkingSockets_SteamAPI_v012()
     * }
     */
    public static FunctionDescriptor SteamAPI_SteamGameServerNetworkingSockets_SteamAPI_v012$descriptor() {
        return SteamAPI_SteamGameServerNetworkingSockets_SteamAPI_v012.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ISteamNetworkingSockets SteamAPI_SteamGameServerNetworkingSockets_SteamAPI_v012()
     * }
     */
    public static MethodHandle SteamAPI_SteamGameServerNetworkingSockets_SteamAPI_v012$handle() {
        return SteamAPI_SteamGameServerNetworkingSockets_SteamAPI_v012.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ISteamNetworkingSockets SteamAPI_SteamGameServerNetworkingSockets_SteamAPI_v012()
     * }
     */
    public static MemorySegment SteamAPI_SteamGameServerNetworkingSockets_SteamAPI_v012() {
        var mh$ = SteamAPI_SteamGameServerNetworkingSockets_SteamAPI_v012.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_SteamGameServerNetworkingSockets_SteamAPI_v012");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingUtils_AllocateMessage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamNetworkingUtils_AllocateMessage"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamNetworkingMessage_t *SteamAPI_ISteamNetworkingUtils_AllocateMessage(ISteamNetworkingUtils ptr, int cbAllocateBuffer)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingUtils_AllocateMessage$descriptor() {
        return SteamAPI_ISteamNetworkingUtils_AllocateMessage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamNetworkingMessage_t *SteamAPI_ISteamNetworkingUtils_AllocateMessage(ISteamNetworkingUtils ptr, int cbAllocateBuffer)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingUtils_AllocateMessage$handle() {
        return SteamAPI_ISteamNetworkingUtils_AllocateMessage.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamNetworkingMessage_t *SteamAPI_ISteamNetworkingUtils_AllocateMessage(ISteamNetworkingUtils ptr, int cbAllocateBuffer)
     * }
     */
    public static MemorySegment SteamAPI_ISteamNetworkingUtils_AllocateMessage(MemorySegment ptr, int cbAllocateBuffer) {
        var mh$ = SteamAPI_ISteamNetworkingUtils_AllocateMessage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingUtils_AllocateMessage", ptr, cbAllocateBuffer);
            }
            return (MemorySegment)mh$.invokeExact(ptr, cbAllocateBuffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingUtils_InitRelayNetworkAccess {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamNetworkingUtils_InitRelayNetworkAccess"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamNetworkingUtils_InitRelayNetworkAccess(ISteamNetworkingUtils ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingUtils_InitRelayNetworkAccess$descriptor() {
        return SteamAPI_ISteamNetworkingUtils_InitRelayNetworkAccess.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamNetworkingUtils_InitRelayNetworkAccess(ISteamNetworkingUtils ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingUtils_InitRelayNetworkAccess$handle() {
        return SteamAPI_ISteamNetworkingUtils_InitRelayNetworkAccess.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamNetworkingUtils_InitRelayNetworkAccess(ISteamNetworkingUtils ptr)
     * }
     */
    public static void SteamAPI_ISteamNetworkingUtils_InitRelayNetworkAccess(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamNetworkingUtils_InitRelayNetworkAccess.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingUtils_InitRelayNetworkAccess", ptr);
            }
            mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingUtils_GetRelayNetworkStatus {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamNetworkingUtils_GetRelayNetworkStatus"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ESteamNetworkingAvailability SteamAPI_ISteamNetworkingUtils_GetRelayNetworkStatus(ISteamNetworkingUtils ptr, SteamRelayNetworkStatus_t *pDetails)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingUtils_GetRelayNetworkStatus$descriptor() {
        return SteamAPI_ISteamNetworkingUtils_GetRelayNetworkStatus.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ESteamNetworkingAvailability SteamAPI_ISteamNetworkingUtils_GetRelayNetworkStatus(ISteamNetworkingUtils ptr, SteamRelayNetworkStatus_t *pDetails)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingUtils_GetRelayNetworkStatus$handle() {
        return SteamAPI_ISteamNetworkingUtils_GetRelayNetworkStatus.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ESteamNetworkingAvailability SteamAPI_ISteamNetworkingUtils_GetRelayNetworkStatus(ISteamNetworkingUtils ptr, SteamRelayNetworkStatus_t *pDetails)
     * }
     */
    public static int SteamAPI_ISteamNetworkingUtils_GetRelayNetworkStatus(MemorySegment ptr, MemorySegment pDetails) {
        var mh$ = SteamAPI_ISteamNetworkingUtils_GetRelayNetworkStatus.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingUtils_GetRelayNetworkStatus", ptr, pDetails);
            }
            return (int)mh$.invokeExact(ptr, pDetails);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingUtils_GetLocalPingLocation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_FLOAT,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamNetworkingUtils_GetLocalPingLocation"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * float SteamAPI_ISteamNetworkingUtils_GetLocalPingLocation(ISteamNetworkingUtils ptr, SteamNetworkPingLocation_t *result)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingUtils_GetLocalPingLocation$descriptor() {
        return SteamAPI_ISteamNetworkingUtils_GetLocalPingLocation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * float SteamAPI_ISteamNetworkingUtils_GetLocalPingLocation(ISteamNetworkingUtils ptr, SteamNetworkPingLocation_t *result)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingUtils_GetLocalPingLocation$handle() {
        return SteamAPI_ISteamNetworkingUtils_GetLocalPingLocation.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * float SteamAPI_ISteamNetworkingUtils_GetLocalPingLocation(ISteamNetworkingUtils ptr, SteamNetworkPingLocation_t *result)
     * }
     */
    public static float SteamAPI_ISteamNetworkingUtils_GetLocalPingLocation(MemorySegment ptr, MemorySegment result) {
        var mh$ = SteamAPI_ISteamNetworkingUtils_GetLocalPingLocation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingUtils_GetLocalPingLocation", ptr, result);
            }
            return (float)mh$.invokeExact(ptr, result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingUtils_EstimatePingTimeBetweenTwoLocations {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamNetworkingUtils_EstimatePingTimeBetweenTwoLocations"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamNetworkingUtils_EstimatePingTimeBetweenTwoLocations(ISteamNetworkingUtils ptr, const SteamNetworkPingLocation_t *location1, const SteamNetworkPingLocation_t *location2)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingUtils_EstimatePingTimeBetweenTwoLocations$descriptor() {
        return SteamAPI_ISteamNetworkingUtils_EstimatePingTimeBetweenTwoLocations.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamNetworkingUtils_EstimatePingTimeBetweenTwoLocations(ISteamNetworkingUtils ptr, const SteamNetworkPingLocation_t *location1, const SteamNetworkPingLocation_t *location2)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingUtils_EstimatePingTimeBetweenTwoLocations$handle() {
        return SteamAPI_ISteamNetworkingUtils_EstimatePingTimeBetweenTwoLocations.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int SteamAPI_ISteamNetworkingUtils_EstimatePingTimeBetweenTwoLocations(ISteamNetworkingUtils ptr, const SteamNetworkPingLocation_t *location1, const SteamNetworkPingLocation_t *location2)
     * }
     */
    public static int SteamAPI_ISteamNetworkingUtils_EstimatePingTimeBetweenTwoLocations(MemorySegment ptr, MemorySegment location1, MemorySegment location2) {
        var mh$ = SteamAPI_ISteamNetworkingUtils_EstimatePingTimeBetweenTwoLocations.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingUtils_EstimatePingTimeBetweenTwoLocations", ptr, location1, location2);
            }
            return (int)mh$.invokeExact(ptr, location1, location2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingUtils_EstimatePingTimeFromLocalHost {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamNetworkingUtils_EstimatePingTimeFromLocalHost"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamNetworkingUtils_EstimatePingTimeFromLocalHost(ISteamNetworkingUtils ptr, const SteamNetworkPingLocation_t *remoteLocation)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingUtils_EstimatePingTimeFromLocalHost$descriptor() {
        return SteamAPI_ISteamNetworkingUtils_EstimatePingTimeFromLocalHost.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamNetworkingUtils_EstimatePingTimeFromLocalHost(ISteamNetworkingUtils ptr, const SteamNetworkPingLocation_t *remoteLocation)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingUtils_EstimatePingTimeFromLocalHost$handle() {
        return SteamAPI_ISteamNetworkingUtils_EstimatePingTimeFromLocalHost.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int SteamAPI_ISteamNetworkingUtils_EstimatePingTimeFromLocalHost(ISteamNetworkingUtils ptr, const SteamNetworkPingLocation_t *remoteLocation)
     * }
     */
    public static int SteamAPI_ISteamNetworkingUtils_EstimatePingTimeFromLocalHost(MemorySegment ptr, MemorySegment remoteLocation) {
        var mh$ = SteamAPI_ISteamNetworkingUtils_EstimatePingTimeFromLocalHost.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingUtils_EstimatePingTimeFromLocalHost", ptr, remoteLocation);
            }
            return (int)mh$.invokeExact(ptr, remoteLocation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingUtils_ConvertPingLocationToString {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamNetworkingUtils_ConvertPingLocationToString"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamNetworkingUtils_ConvertPingLocationToString(ISteamNetworkingUtils ptr, const SteamNetworkPingLocation_t *location, char *pszBuf, int cchBufSize)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingUtils_ConvertPingLocationToString$descriptor() {
        return SteamAPI_ISteamNetworkingUtils_ConvertPingLocationToString.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamNetworkingUtils_ConvertPingLocationToString(ISteamNetworkingUtils ptr, const SteamNetworkPingLocation_t *location, char *pszBuf, int cchBufSize)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingUtils_ConvertPingLocationToString$handle() {
        return SteamAPI_ISteamNetworkingUtils_ConvertPingLocationToString.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamNetworkingUtils_ConvertPingLocationToString(ISteamNetworkingUtils ptr, const SteamNetworkPingLocation_t *location, char *pszBuf, int cchBufSize)
     * }
     */
    public static void SteamAPI_ISteamNetworkingUtils_ConvertPingLocationToString(MemorySegment ptr, MemorySegment location, MemorySegment pszBuf, int cchBufSize) {
        var mh$ = SteamAPI_ISteamNetworkingUtils_ConvertPingLocationToString.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingUtils_ConvertPingLocationToString", ptr, location, pszBuf, cchBufSize);
            }
            mh$.invokeExact(ptr, location, pszBuf, cchBufSize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingUtils_ParsePingLocationString {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamNetworkingUtils_ParsePingLocationString"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingUtils_ParsePingLocationString(ISteamNetworkingUtils ptr, const char *pszString, SteamNetworkPingLocation_t *result)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingUtils_ParsePingLocationString$descriptor() {
        return SteamAPI_ISteamNetworkingUtils_ParsePingLocationString.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingUtils_ParsePingLocationString(ISteamNetworkingUtils ptr, const char *pszString, SteamNetworkPingLocation_t *result)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingUtils_ParsePingLocationString$handle() {
        return SteamAPI_ISteamNetworkingUtils_ParsePingLocationString.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingUtils_ParsePingLocationString(ISteamNetworkingUtils ptr, const char *pszString, SteamNetworkPingLocation_t *result)
     * }
     */
    public static boolean SteamAPI_ISteamNetworkingUtils_ParsePingLocationString(MemorySegment ptr, MemorySegment pszString, MemorySegment result) {
        var mh$ = SteamAPI_ISteamNetworkingUtils_ParsePingLocationString.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingUtils_ParsePingLocationString", ptr, pszString, result);
            }
            return (boolean)mh$.invokeExact(ptr, pszString, result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingUtils_CheckPingDataUpToDate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_FLOAT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamNetworkingUtils_CheckPingDataUpToDate"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingUtils_CheckPingDataUpToDate(ISteamNetworkingUtils ptr, float flMaxAgeSeconds)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingUtils_CheckPingDataUpToDate$descriptor() {
        return SteamAPI_ISteamNetworkingUtils_CheckPingDataUpToDate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingUtils_CheckPingDataUpToDate(ISteamNetworkingUtils ptr, float flMaxAgeSeconds)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingUtils_CheckPingDataUpToDate$handle() {
        return SteamAPI_ISteamNetworkingUtils_CheckPingDataUpToDate.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingUtils_CheckPingDataUpToDate(ISteamNetworkingUtils ptr, float flMaxAgeSeconds)
     * }
     */
    public static boolean SteamAPI_ISteamNetworkingUtils_CheckPingDataUpToDate(MemorySegment ptr, float flMaxAgeSeconds) {
        var mh$ = SteamAPI_ISteamNetworkingUtils_CheckPingDataUpToDate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingUtils_CheckPingDataUpToDate", ptr, flMaxAgeSeconds);
            }
            return (boolean)mh$.invokeExact(ptr, flMaxAgeSeconds);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingUtils_GetPingToDataCenter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamNetworkingUtils_GetPingToDataCenter"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamNetworkingUtils_GetPingToDataCenter(ISteamNetworkingUtils ptr, SteamNetworkingPOPID popID, SteamNetworkingPOPID *pViaRelayPoP)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingUtils_GetPingToDataCenter$descriptor() {
        return SteamAPI_ISteamNetworkingUtils_GetPingToDataCenter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamNetworkingUtils_GetPingToDataCenter(ISteamNetworkingUtils ptr, SteamNetworkingPOPID popID, SteamNetworkingPOPID *pViaRelayPoP)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingUtils_GetPingToDataCenter$handle() {
        return SteamAPI_ISteamNetworkingUtils_GetPingToDataCenter.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int SteamAPI_ISteamNetworkingUtils_GetPingToDataCenter(ISteamNetworkingUtils ptr, SteamNetworkingPOPID popID, SteamNetworkingPOPID *pViaRelayPoP)
     * }
     */
    public static int SteamAPI_ISteamNetworkingUtils_GetPingToDataCenter(MemorySegment ptr, int popID, MemorySegment pViaRelayPoP) {
        var mh$ = SteamAPI_ISteamNetworkingUtils_GetPingToDataCenter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingUtils_GetPingToDataCenter", ptr, popID, pViaRelayPoP);
            }
            return (int)mh$.invokeExact(ptr, popID, pViaRelayPoP);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingUtils_GetDirectPingToPOP {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamNetworkingUtils_GetDirectPingToPOP"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamNetworkingUtils_GetDirectPingToPOP(ISteamNetworkingUtils ptr, SteamNetworkingPOPID popID)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingUtils_GetDirectPingToPOP$descriptor() {
        return SteamAPI_ISteamNetworkingUtils_GetDirectPingToPOP.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamNetworkingUtils_GetDirectPingToPOP(ISteamNetworkingUtils ptr, SteamNetworkingPOPID popID)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingUtils_GetDirectPingToPOP$handle() {
        return SteamAPI_ISteamNetworkingUtils_GetDirectPingToPOP.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int SteamAPI_ISteamNetworkingUtils_GetDirectPingToPOP(ISteamNetworkingUtils ptr, SteamNetworkingPOPID popID)
     * }
     */
    public static int SteamAPI_ISteamNetworkingUtils_GetDirectPingToPOP(MemorySegment ptr, int popID) {
        var mh$ = SteamAPI_ISteamNetworkingUtils_GetDirectPingToPOP.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingUtils_GetDirectPingToPOP", ptr, popID);
            }
            return (int)mh$.invokeExact(ptr, popID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingUtils_GetPOPCount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamNetworkingUtils_GetPOPCount"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamNetworkingUtils_GetPOPCount(ISteamNetworkingUtils ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingUtils_GetPOPCount$descriptor() {
        return SteamAPI_ISteamNetworkingUtils_GetPOPCount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamNetworkingUtils_GetPOPCount(ISteamNetworkingUtils ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingUtils_GetPOPCount$handle() {
        return SteamAPI_ISteamNetworkingUtils_GetPOPCount.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int SteamAPI_ISteamNetworkingUtils_GetPOPCount(ISteamNetworkingUtils ptr)
     * }
     */
    public static int SteamAPI_ISteamNetworkingUtils_GetPOPCount(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamNetworkingUtils_GetPOPCount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingUtils_GetPOPCount", ptr);
            }
            return (int)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingUtils_GetPOPList {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamNetworkingUtils_GetPOPList"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamNetworkingUtils_GetPOPList(ISteamNetworkingUtils ptr, SteamNetworkingPOPID *list, int nListSz)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingUtils_GetPOPList$descriptor() {
        return SteamAPI_ISteamNetworkingUtils_GetPOPList.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamNetworkingUtils_GetPOPList(ISteamNetworkingUtils ptr, SteamNetworkingPOPID *list, int nListSz)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingUtils_GetPOPList$handle() {
        return SteamAPI_ISteamNetworkingUtils_GetPOPList.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int SteamAPI_ISteamNetworkingUtils_GetPOPList(ISteamNetworkingUtils ptr, SteamNetworkingPOPID *list, int nListSz)
     * }
     */
    public static int SteamAPI_ISteamNetworkingUtils_GetPOPList(MemorySegment ptr, MemorySegment list, int nListSz) {
        var mh$ = SteamAPI_ISteamNetworkingUtils_GetPOPList.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingUtils_GetPOPList", ptr, list, nListSz);
            }
            return (int)mh$.invokeExact(ptr, list, nListSz);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingUtils_GetLocalTimestamp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamNetworkingUtils_GetLocalTimestamp"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamNetworkingMicroseconds SteamAPI_ISteamNetworkingUtils_GetLocalTimestamp(ISteamNetworkingUtils ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingUtils_GetLocalTimestamp$descriptor() {
        return SteamAPI_ISteamNetworkingUtils_GetLocalTimestamp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamNetworkingMicroseconds SteamAPI_ISteamNetworkingUtils_GetLocalTimestamp(ISteamNetworkingUtils ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingUtils_GetLocalTimestamp$handle() {
        return SteamAPI_ISteamNetworkingUtils_GetLocalTimestamp.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamNetworkingMicroseconds SteamAPI_ISteamNetworkingUtils_GetLocalTimestamp(ISteamNetworkingUtils ptr)
     * }
     */
    public static long SteamAPI_ISteamNetworkingUtils_GetLocalTimestamp(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamNetworkingUtils_GetLocalTimestamp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingUtils_GetLocalTimestamp", ptr);
            }
            return (long)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingUtils_SetDebugOutputFunction {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamNetworkingUtils_SetDebugOutputFunction"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamNetworkingUtils_SetDebugOutputFunction(ISteamNetworkingUtils ptr, ESteamNetworkingSocketsDebugOutputType eDetailLevel, FSteamNetworkingSocketsDebugOutput pfnFunc)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingUtils_SetDebugOutputFunction$descriptor() {
        return SteamAPI_ISteamNetworkingUtils_SetDebugOutputFunction.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamNetworkingUtils_SetDebugOutputFunction(ISteamNetworkingUtils ptr, ESteamNetworkingSocketsDebugOutputType eDetailLevel, FSteamNetworkingSocketsDebugOutput pfnFunc)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingUtils_SetDebugOutputFunction$handle() {
        return SteamAPI_ISteamNetworkingUtils_SetDebugOutputFunction.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamNetworkingUtils_SetDebugOutputFunction(ISteamNetworkingUtils ptr, ESteamNetworkingSocketsDebugOutputType eDetailLevel, FSteamNetworkingSocketsDebugOutput pfnFunc)
     * }
     */
    public static void SteamAPI_ISteamNetworkingUtils_SetDebugOutputFunction(MemorySegment ptr, int eDetailLevel, MemorySegment pfnFunc) {
        var mh$ = SteamAPI_ISteamNetworkingUtils_SetDebugOutputFunction.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingUtils_SetDebugOutputFunction", ptr, eDetailLevel, pfnFunc);
            }
            mh$.invokeExact(ptr, eDetailLevel, pfnFunc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingUtils_IsFakeIPv4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamNetworkingUtils_IsFakeIPv4"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingUtils_IsFakeIPv4(ISteamNetworkingUtils ptr, uint32 nIPv4)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingUtils_IsFakeIPv4$descriptor() {
        return SteamAPI_ISteamNetworkingUtils_IsFakeIPv4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingUtils_IsFakeIPv4(ISteamNetworkingUtils ptr, uint32 nIPv4)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingUtils_IsFakeIPv4$handle() {
        return SteamAPI_ISteamNetworkingUtils_IsFakeIPv4.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingUtils_IsFakeIPv4(ISteamNetworkingUtils ptr, uint32 nIPv4)
     * }
     */
    public static boolean SteamAPI_ISteamNetworkingUtils_IsFakeIPv4(MemorySegment ptr, int nIPv4) {
        var mh$ = SteamAPI_ISteamNetworkingUtils_IsFakeIPv4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingUtils_IsFakeIPv4", ptr, nIPv4);
            }
            return (boolean)mh$.invokeExact(ptr, nIPv4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingUtils_GetIPv4FakeIPType {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamNetworkingUtils_GetIPv4FakeIPType"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ESteamNetworkingFakeIPType SteamAPI_ISteamNetworkingUtils_GetIPv4FakeIPType(ISteamNetworkingUtils ptr, uint32 nIPv4)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingUtils_GetIPv4FakeIPType$descriptor() {
        return SteamAPI_ISteamNetworkingUtils_GetIPv4FakeIPType.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ESteamNetworkingFakeIPType SteamAPI_ISteamNetworkingUtils_GetIPv4FakeIPType(ISteamNetworkingUtils ptr, uint32 nIPv4)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingUtils_GetIPv4FakeIPType$handle() {
        return SteamAPI_ISteamNetworkingUtils_GetIPv4FakeIPType.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ESteamNetworkingFakeIPType SteamAPI_ISteamNetworkingUtils_GetIPv4FakeIPType(ISteamNetworkingUtils ptr, uint32 nIPv4)
     * }
     */
    public static int SteamAPI_ISteamNetworkingUtils_GetIPv4FakeIPType(MemorySegment ptr, int nIPv4) {
        var mh$ = SteamAPI_ISteamNetworkingUtils_GetIPv4FakeIPType.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingUtils_GetIPv4FakeIPType", ptr, nIPv4);
            }
            return (int)mh$.invokeExact(ptr, nIPv4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingUtils_GetRealIdentityForFakeIP {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamNetworkingUtils_GetRealIdentityForFakeIP"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * EResult SteamAPI_ISteamNetworkingUtils_GetRealIdentityForFakeIP(ISteamNetworkingUtils ptr, const SteamNetworkingIPAddr *fakeIP, SteamNetworkingIdentity *pOutRealIdentity)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingUtils_GetRealIdentityForFakeIP$descriptor() {
        return SteamAPI_ISteamNetworkingUtils_GetRealIdentityForFakeIP.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * EResult SteamAPI_ISteamNetworkingUtils_GetRealIdentityForFakeIP(ISteamNetworkingUtils ptr, const SteamNetworkingIPAddr *fakeIP, SteamNetworkingIdentity *pOutRealIdentity)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingUtils_GetRealIdentityForFakeIP$handle() {
        return SteamAPI_ISteamNetworkingUtils_GetRealIdentityForFakeIP.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * EResult SteamAPI_ISteamNetworkingUtils_GetRealIdentityForFakeIP(ISteamNetworkingUtils ptr, const SteamNetworkingIPAddr *fakeIP, SteamNetworkingIdentity *pOutRealIdentity)
     * }
     */
    public static int SteamAPI_ISteamNetworkingUtils_GetRealIdentityForFakeIP(MemorySegment ptr, MemorySegment fakeIP, MemorySegment pOutRealIdentity) {
        var mh$ = SteamAPI_ISteamNetworkingUtils_GetRealIdentityForFakeIP.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingUtils_GetRealIdentityForFakeIP", ptr, fakeIP, pOutRealIdentity);
            }
            return (int)mh$.invokeExact(ptr, fakeIP, pOutRealIdentity);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingUtils_SetGlobalConfigValueInt32 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamNetworkingUtils_SetGlobalConfigValueInt32"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingUtils_SetGlobalConfigValueInt32(ISteamNetworkingUtils ptr, ESteamNetworkingConfigValue eValue, int32 val)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingUtils_SetGlobalConfigValueInt32$descriptor() {
        return SteamAPI_ISteamNetworkingUtils_SetGlobalConfigValueInt32.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingUtils_SetGlobalConfigValueInt32(ISteamNetworkingUtils ptr, ESteamNetworkingConfigValue eValue, int32 val)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingUtils_SetGlobalConfigValueInt32$handle() {
        return SteamAPI_ISteamNetworkingUtils_SetGlobalConfigValueInt32.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingUtils_SetGlobalConfigValueInt32(ISteamNetworkingUtils ptr, ESteamNetworkingConfigValue eValue, int32 val)
     * }
     */
    public static boolean SteamAPI_ISteamNetworkingUtils_SetGlobalConfigValueInt32(MemorySegment ptr, int eValue, int val) {
        var mh$ = SteamAPI_ISteamNetworkingUtils_SetGlobalConfigValueInt32.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingUtils_SetGlobalConfigValueInt32", ptr, eValue, val);
            }
            return (boolean)mh$.invokeExact(ptr, eValue, val);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingUtils_SetGlobalConfigValueFloat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_FLOAT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamNetworkingUtils_SetGlobalConfigValueFloat"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingUtils_SetGlobalConfigValueFloat(ISteamNetworkingUtils ptr, ESteamNetworkingConfigValue eValue, float val)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingUtils_SetGlobalConfigValueFloat$descriptor() {
        return SteamAPI_ISteamNetworkingUtils_SetGlobalConfigValueFloat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingUtils_SetGlobalConfigValueFloat(ISteamNetworkingUtils ptr, ESteamNetworkingConfigValue eValue, float val)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingUtils_SetGlobalConfigValueFloat$handle() {
        return SteamAPI_ISteamNetworkingUtils_SetGlobalConfigValueFloat.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingUtils_SetGlobalConfigValueFloat(ISteamNetworkingUtils ptr, ESteamNetworkingConfigValue eValue, float val)
     * }
     */
    public static boolean SteamAPI_ISteamNetworkingUtils_SetGlobalConfigValueFloat(MemorySegment ptr, int eValue, float val) {
        var mh$ = SteamAPI_ISteamNetworkingUtils_SetGlobalConfigValueFloat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingUtils_SetGlobalConfigValueFloat", ptr, eValue, val);
            }
            return (boolean)mh$.invokeExact(ptr, eValue, val);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingUtils_SetGlobalConfigValueString {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamNetworkingUtils_SetGlobalConfigValueString"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingUtils_SetGlobalConfigValueString(ISteamNetworkingUtils ptr, ESteamNetworkingConfigValue eValue, const char *val)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingUtils_SetGlobalConfigValueString$descriptor() {
        return SteamAPI_ISteamNetworkingUtils_SetGlobalConfigValueString.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingUtils_SetGlobalConfigValueString(ISteamNetworkingUtils ptr, ESteamNetworkingConfigValue eValue, const char *val)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingUtils_SetGlobalConfigValueString$handle() {
        return SteamAPI_ISteamNetworkingUtils_SetGlobalConfigValueString.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingUtils_SetGlobalConfigValueString(ISteamNetworkingUtils ptr, ESteamNetworkingConfigValue eValue, const char *val)
     * }
     */
    public static boolean SteamAPI_ISteamNetworkingUtils_SetGlobalConfigValueString(MemorySegment ptr, int eValue, MemorySegment val) {
        var mh$ = SteamAPI_ISteamNetworkingUtils_SetGlobalConfigValueString.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingUtils_SetGlobalConfigValueString", ptr, eValue, val);
            }
            return (boolean)mh$.invokeExact(ptr, eValue, val);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingUtils_SetGlobalConfigValuePtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamNetworkingUtils_SetGlobalConfigValuePtr"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingUtils_SetGlobalConfigValuePtr(ISteamNetworkingUtils ptr, ESteamNetworkingConfigValue eValue, void *val)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingUtils_SetGlobalConfigValuePtr$descriptor() {
        return SteamAPI_ISteamNetworkingUtils_SetGlobalConfigValuePtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingUtils_SetGlobalConfigValuePtr(ISteamNetworkingUtils ptr, ESteamNetworkingConfigValue eValue, void *val)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingUtils_SetGlobalConfigValuePtr$handle() {
        return SteamAPI_ISteamNetworkingUtils_SetGlobalConfigValuePtr.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingUtils_SetGlobalConfigValuePtr(ISteamNetworkingUtils ptr, ESteamNetworkingConfigValue eValue, void *val)
     * }
     */
    public static boolean SteamAPI_ISteamNetworkingUtils_SetGlobalConfigValuePtr(MemorySegment ptr, int eValue, MemorySegment val) {
        var mh$ = SteamAPI_ISteamNetworkingUtils_SetGlobalConfigValuePtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingUtils_SetGlobalConfigValuePtr", ptr, eValue, val);
            }
            return (boolean)mh$.invokeExact(ptr, eValue, val);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingUtils_SetConnectionConfigValueInt32 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_INT,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamNetworkingUtils_SetConnectionConfigValueInt32"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingUtils_SetConnectionConfigValueInt32(ISteamNetworkingUtils ptr, HSteamNetConnection hConn, ESteamNetworkingConfigValue eValue, int32 val)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingUtils_SetConnectionConfigValueInt32$descriptor() {
        return SteamAPI_ISteamNetworkingUtils_SetConnectionConfigValueInt32.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingUtils_SetConnectionConfigValueInt32(ISteamNetworkingUtils ptr, HSteamNetConnection hConn, ESteamNetworkingConfigValue eValue, int32 val)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingUtils_SetConnectionConfigValueInt32$handle() {
        return SteamAPI_ISteamNetworkingUtils_SetConnectionConfigValueInt32.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingUtils_SetConnectionConfigValueInt32(ISteamNetworkingUtils ptr, HSteamNetConnection hConn, ESteamNetworkingConfigValue eValue, int32 val)
     * }
     */
    public static boolean SteamAPI_ISteamNetworkingUtils_SetConnectionConfigValueInt32(MemorySegment ptr, int hConn, int eValue, int val) {
        var mh$ = SteamAPI_ISteamNetworkingUtils_SetConnectionConfigValueInt32.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingUtils_SetConnectionConfigValueInt32", ptr, hConn, eValue, val);
            }
            return (boolean)mh$.invokeExact(ptr, hConn, eValue, val);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingUtils_SetConnectionConfigValueFloat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_INT,
            SteamFlat.C_FLOAT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamNetworkingUtils_SetConnectionConfigValueFloat"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingUtils_SetConnectionConfigValueFloat(ISteamNetworkingUtils ptr, HSteamNetConnection hConn, ESteamNetworkingConfigValue eValue, float val)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingUtils_SetConnectionConfigValueFloat$descriptor() {
        return SteamAPI_ISteamNetworkingUtils_SetConnectionConfigValueFloat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingUtils_SetConnectionConfigValueFloat(ISteamNetworkingUtils ptr, HSteamNetConnection hConn, ESteamNetworkingConfigValue eValue, float val)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingUtils_SetConnectionConfigValueFloat$handle() {
        return SteamAPI_ISteamNetworkingUtils_SetConnectionConfigValueFloat.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingUtils_SetConnectionConfigValueFloat(ISteamNetworkingUtils ptr, HSteamNetConnection hConn, ESteamNetworkingConfigValue eValue, float val)
     * }
     */
    public static boolean SteamAPI_ISteamNetworkingUtils_SetConnectionConfigValueFloat(MemorySegment ptr, int hConn, int eValue, float val) {
        var mh$ = SteamAPI_ISteamNetworkingUtils_SetConnectionConfigValueFloat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingUtils_SetConnectionConfigValueFloat", ptr, hConn, eValue, val);
            }
            return (boolean)mh$.invokeExact(ptr, hConn, eValue, val);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingUtils_SetConnectionConfigValueString {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamNetworkingUtils_SetConnectionConfigValueString"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingUtils_SetConnectionConfigValueString(ISteamNetworkingUtils ptr, HSteamNetConnection hConn, ESteamNetworkingConfigValue eValue, const char *val)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingUtils_SetConnectionConfigValueString$descriptor() {
        return SteamAPI_ISteamNetworkingUtils_SetConnectionConfigValueString.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingUtils_SetConnectionConfigValueString(ISteamNetworkingUtils ptr, HSteamNetConnection hConn, ESteamNetworkingConfigValue eValue, const char *val)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingUtils_SetConnectionConfigValueString$handle() {
        return SteamAPI_ISteamNetworkingUtils_SetConnectionConfigValueString.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingUtils_SetConnectionConfigValueString(ISteamNetworkingUtils ptr, HSteamNetConnection hConn, ESteamNetworkingConfigValue eValue, const char *val)
     * }
     */
    public static boolean SteamAPI_ISteamNetworkingUtils_SetConnectionConfigValueString(MemorySegment ptr, int hConn, int eValue, MemorySegment val) {
        var mh$ = SteamAPI_ISteamNetworkingUtils_SetConnectionConfigValueString.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingUtils_SetConnectionConfigValueString", ptr, hConn, eValue, val);
            }
            return (boolean)mh$.invokeExact(ptr, hConn, eValue, val);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_SteamNetConnectionStatusChanged {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_SteamNetConnectionStatusChanged"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_SteamNetConnectionStatusChanged(ISteamNetworkingUtils ptr, FnSteamNetConnectionStatusChanged fnCallback)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_SteamNetConnectionStatusChanged$descriptor() {
        return SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_SteamNetConnectionStatusChanged.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_SteamNetConnectionStatusChanged(ISteamNetworkingUtils ptr, FnSteamNetConnectionStatusChanged fnCallback)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_SteamNetConnectionStatusChanged$handle() {
        return SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_SteamNetConnectionStatusChanged.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_SteamNetConnectionStatusChanged(ISteamNetworkingUtils ptr, FnSteamNetConnectionStatusChanged fnCallback)
     * }
     */
    public static boolean SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_SteamNetConnectionStatusChanged(MemorySegment ptr, MemorySegment fnCallback) {
        var mh$ = SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_SteamNetConnectionStatusChanged.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_SteamNetConnectionStatusChanged", ptr, fnCallback);
            }
            return (boolean)mh$.invokeExact(ptr, fnCallback);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_SteamNetAuthenticationStatusChanged {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_SteamNetAuthenticationStatusChanged"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_SteamNetAuthenticationStatusChanged(ISteamNetworkingUtils ptr, FnSteamNetAuthenticationStatusChanged fnCallback)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_SteamNetAuthenticationStatusChanged$descriptor() {
        return SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_SteamNetAuthenticationStatusChanged.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_SteamNetAuthenticationStatusChanged(ISteamNetworkingUtils ptr, FnSteamNetAuthenticationStatusChanged fnCallback)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_SteamNetAuthenticationStatusChanged$handle() {
        return SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_SteamNetAuthenticationStatusChanged.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_SteamNetAuthenticationStatusChanged(ISteamNetworkingUtils ptr, FnSteamNetAuthenticationStatusChanged fnCallback)
     * }
     */
    public static boolean SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_SteamNetAuthenticationStatusChanged(MemorySegment ptr, MemorySegment fnCallback) {
        var mh$ = SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_SteamNetAuthenticationStatusChanged.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_SteamNetAuthenticationStatusChanged", ptr, fnCallback);
            }
            return (boolean)mh$.invokeExact(ptr, fnCallback);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_SteamRelayNetworkStatusChanged {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_SteamRelayNetworkStatusChanged"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_SteamRelayNetworkStatusChanged(ISteamNetworkingUtils ptr, FnSteamRelayNetworkStatusChanged fnCallback)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_SteamRelayNetworkStatusChanged$descriptor() {
        return SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_SteamRelayNetworkStatusChanged.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_SteamRelayNetworkStatusChanged(ISteamNetworkingUtils ptr, FnSteamRelayNetworkStatusChanged fnCallback)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_SteamRelayNetworkStatusChanged$handle() {
        return SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_SteamRelayNetworkStatusChanged.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_SteamRelayNetworkStatusChanged(ISteamNetworkingUtils ptr, FnSteamRelayNetworkStatusChanged fnCallback)
     * }
     */
    public static boolean SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_SteamRelayNetworkStatusChanged(MemorySegment ptr, MemorySegment fnCallback) {
        var mh$ = SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_SteamRelayNetworkStatusChanged.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_SteamRelayNetworkStatusChanged", ptr, fnCallback);
            }
            return (boolean)mh$.invokeExact(ptr, fnCallback);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_FakeIPResult {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_FakeIPResult"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_FakeIPResult(ISteamNetworkingUtils ptr, FnSteamNetworkingFakeIPResult fnCallback)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_FakeIPResult$descriptor() {
        return SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_FakeIPResult.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_FakeIPResult(ISteamNetworkingUtils ptr, FnSteamNetworkingFakeIPResult fnCallback)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_FakeIPResult$handle() {
        return SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_FakeIPResult.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_FakeIPResult(ISteamNetworkingUtils ptr, FnSteamNetworkingFakeIPResult fnCallback)
     * }
     */
    public static boolean SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_FakeIPResult(MemorySegment ptr, MemorySegment fnCallback) {
        var mh$ = SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_FakeIPResult.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_FakeIPResult", ptr, fnCallback);
            }
            return (boolean)mh$.invokeExact(ptr, fnCallback);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_MessagesSessionRequest {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_MessagesSessionRequest"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_MessagesSessionRequest(ISteamNetworkingUtils ptr, FnSteamNetworkingMessagesSessionRequest fnCallback)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_MessagesSessionRequest$descriptor() {
        return SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_MessagesSessionRequest.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_MessagesSessionRequest(ISteamNetworkingUtils ptr, FnSteamNetworkingMessagesSessionRequest fnCallback)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_MessagesSessionRequest$handle() {
        return SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_MessagesSessionRequest.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_MessagesSessionRequest(ISteamNetworkingUtils ptr, FnSteamNetworkingMessagesSessionRequest fnCallback)
     * }
     */
    public static boolean SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_MessagesSessionRequest(MemorySegment ptr, MemorySegment fnCallback) {
        var mh$ = SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_MessagesSessionRequest.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_MessagesSessionRequest", ptr, fnCallback);
            }
            return (boolean)mh$.invokeExact(ptr, fnCallback);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_MessagesSessionFailed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_MessagesSessionFailed"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_MessagesSessionFailed(ISteamNetworkingUtils ptr, FnSteamNetworkingMessagesSessionFailed fnCallback)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_MessagesSessionFailed$descriptor() {
        return SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_MessagesSessionFailed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_MessagesSessionFailed(ISteamNetworkingUtils ptr, FnSteamNetworkingMessagesSessionFailed fnCallback)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_MessagesSessionFailed$handle() {
        return SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_MessagesSessionFailed.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_MessagesSessionFailed(ISteamNetworkingUtils ptr, FnSteamNetworkingMessagesSessionFailed fnCallback)
     * }
     */
    public static boolean SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_MessagesSessionFailed(MemorySegment ptr, MemorySegment fnCallback) {
        var mh$ = SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_MessagesSessionFailed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_MessagesSessionFailed", ptr, fnCallback);
            }
            return (boolean)mh$.invokeExact(ptr, fnCallback);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingUtils_SetConfigValue {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_INT,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamNetworkingUtils_SetConfigValue"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingUtils_SetConfigValue(ISteamNetworkingUtils ptr, ESteamNetworkingConfigValue eValue, ESteamNetworkingConfigScope eScopeType, intptr_t scopeObj, ESteamNetworkingConfigDataType eDataType, const void *pArg)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingUtils_SetConfigValue$descriptor() {
        return SteamAPI_ISteamNetworkingUtils_SetConfigValue.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingUtils_SetConfigValue(ISteamNetworkingUtils ptr, ESteamNetworkingConfigValue eValue, ESteamNetworkingConfigScope eScopeType, intptr_t scopeObj, ESteamNetworkingConfigDataType eDataType, const void *pArg)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingUtils_SetConfigValue$handle() {
        return SteamAPI_ISteamNetworkingUtils_SetConfigValue.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingUtils_SetConfigValue(ISteamNetworkingUtils ptr, ESteamNetworkingConfigValue eValue, ESteamNetworkingConfigScope eScopeType, intptr_t scopeObj, ESteamNetworkingConfigDataType eDataType, const void *pArg)
     * }
     */
    public static boolean SteamAPI_ISteamNetworkingUtils_SetConfigValue(MemorySegment ptr, int eValue, int eScopeType, long scopeObj, int eDataType, MemorySegment pArg) {
        var mh$ = SteamAPI_ISteamNetworkingUtils_SetConfigValue.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingUtils_SetConfigValue", ptr, eValue, eScopeType, scopeObj, eDataType, pArg);
            }
            return (boolean)mh$.invokeExact(ptr, eValue, eScopeType, scopeObj, eDataType, pArg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingUtils_SetConfigValueStruct {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamNetworkingUtils_SetConfigValueStruct"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingUtils_SetConfigValueStruct(ISteamNetworkingUtils ptr, const SteamNetworkingConfigValue_t *opt, ESteamNetworkingConfigScope eScopeType, intptr_t scopeObj)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingUtils_SetConfigValueStruct$descriptor() {
        return SteamAPI_ISteamNetworkingUtils_SetConfigValueStruct.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingUtils_SetConfigValueStruct(ISteamNetworkingUtils ptr, const SteamNetworkingConfigValue_t *opt, ESteamNetworkingConfigScope eScopeType, intptr_t scopeObj)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingUtils_SetConfigValueStruct$handle() {
        return SteamAPI_ISteamNetworkingUtils_SetConfigValueStruct.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingUtils_SetConfigValueStruct(ISteamNetworkingUtils ptr, const SteamNetworkingConfigValue_t *opt, ESteamNetworkingConfigScope eScopeType, intptr_t scopeObj)
     * }
     */
    public static boolean SteamAPI_ISteamNetworkingUtils_SetConfigValueStruct(MemorySegment ptr, MemorySegment opt, int eScopeType, long scopeObj) {
        var mh$ = SteamAPI_ISteamNetworkingUtils_SetConfigValueStruct.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingUtils_SetConfigValueStruct", ptr, opt, eScopeType, scopeObj);
            }
            return (boolean)mh$.invokeExact(ptr, opt, eScopeType, scopeObj);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingUtils_GetConfigValue {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_INT,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamNetworkingUtils_GetConfigValue"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ESteamNetworkingGetConfigValueResult SteamAPI_ISteamNetworkingUtils_GetConfigValue(ISteamNetworkingUtils ptr, ESteamNetworkingConfigValue eValue, ESteamNetworkingConfigScope eScopeType, intptr_t scopeObj, ESteamNetworkingConfigDataType *pOutDataType, void *pResult, size_t *cbResult)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingUtils_GetConfigValue$descriptor() {
        return SteamAPI_ISteamNetworkingUtils_GetConfigValue.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ESteamNetworkingGetConfigValueResult SteamAPI_ISteamNetworkingUtils_GetConfigValue(ISteamNetworkingUtils ptr, ESteamNetworkingConfigValue eValue, ESteamNetworkingConfigScope eScopeType, intptr_t scopeObj, ESteamNetworkingConfigDataType *pOutDataType, void *pResult, size_t *cbResult)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingUtils_GetConfigValue$handle() {
        return SteamAPI_ISteamNetworkingUtils_GetConfigValue.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ESteamNetworkingGetConfigValueResult SteamAPI_ISteamNetworkingUtils_GetConfigValue(ISteamNetworkingUtils ptr, ESteamNetworkingConfigValue eValue, ESteamNetworkingConfigScope eScopeType, intptr_t scopeObj, ESteamNetworkingConfigDataType *pOutDataType, void *pResult, size_t *cbResult)
     * }
     */
    public static int SteamAPI_ISteamNetworkingUtils_GetConfigValue(MemorySegment ptr, int eValue, int eScopeType, long scopeObj, MemorySegment pOutDataType, MemorySegment pResult, MemorySegment cbResult) {
        var mh$ = SteamAPI_ISteamNetworkingUtils_GetConfigValue.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingUtils_GetConfigValue", ptr, eValue, eScopeType, scopeObj, pOutDataType, pResult, cbResult);
            }
            return (int)mh$.invokeExact(ptr, eValue, eScopeType, scopeObj, pOutDataType, pResult, cbResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingUtils_GetConfigValueInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamNetworkingUtils_GetConfigValueInfo"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamNetworkingUtils_GetConfigValueInfo(ISteamNetworkingUtils ptr, ESteamNetworkingConfigValue eValue, ESteamNetworkingConfigDataType *pOutDataType, ESteamNetworkingConfigScope *pOutScope)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingUtils_GetConfigValueInfo$descriptor() {
        return SteamAPI_ISteamNetworkingUtils_GetConfigValueInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamNetworkingUtils_GetConfigValueInfo(ISteamNetworkingUtils ptr, ESteamNetworkingConfigValue eValue, ESteamNetworkingConfigDataType *pOutDataType, ESteamNetworkingConfigScope *pOutScope)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingUtils_GetConfigValueInfo$handle() {
        return SteamAPI_ISteamNetworkingUtils_GetConfigValueInfo.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamNetworkingUtils_GetConfigValueInfo(ISteamNetworkingUtils ptr, ESteamNetworkingConfigValue eValue, ESteamNetworkingConfigDataType *pOutDataType, ESteamNetworkingConfigScope *pOutScope)
     * }
     */
    public static MemorySegment SteamAPI_ISteamNetworkingUtils_GetConfigValueInfo(MemorySegment ptr, int eValue, MemorySegment pOutDataType, MemorySegment pOutScope) {
        var mh$ = SteamAPI_ISteamNetworkingUtils_GetConfigValueInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingUtils_GetConfigValueInfo", ptr, eValue, pOutDataType, pOutScope);
            }
            return (MemorySegment)mh$.invokeExact(ptr, eValue, pOutDataType, pOutScope);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingUtils_IterateGenericEditableConfigValues {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamNetworkingUtils_IterateGenericEditableConfigValues"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ESteamNetworkingConfigValue SteamAPI_ISteamNetworkingUtils_IterateGenericEditableConfigValues(ISteamNetworkingUtils ptr, ESteamNetworkingConfigValue eCurrent, bool bEnumerateDevVars)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingUtils_IterateGenericEditableConfigValues$descriptor() {
        return SteamAPI_ISteamNetworkingUtils_IterateGenericEditableConfigValues.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ESteamNetworkingConfigValue SteamAPI_ISteamNetworkingUtils_IterateGenericEditableConfigValues(ISteamNetworkingUtils ptr, ESteamNetworkingConfigValue eCurrent, bool bEnumerateDevVars)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingUtils_IterateGenericEditableConfigValues$handle() {
        return SteamAPI_ISteamNetworkingUtils_IterateGenericEditableConfigValues.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ESteamNetworkingConfigValue SteamAPI_ISteamNetworkingUtils_IterateGenericEditableConfigValues(ISteamNetworkingUtils ptr, ESteamNetworkingConfigValue eCurrent, bool bEnumerateDevVars)
     * }
     */
    public static int SteamAPI_ISteamNetworkingUtils_IterateGenericEditableConfigValues(MemorySegment ptr, int eCurrent, boolean bEnumerateDevVars) {
        var mh$ = SteamAPI_ISteamNetworkingUtils_IterateGenericEditableConfigValues.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingUtils_IterateGenericEditableConfigValues", ptr, eCurrent, bEnumerateDevVars);
            }
            return (int)mh$.invokeExact(ptr, eCurrent, bEnumerateDevVars);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingUtils_SteamNetworkingIPAddr_ToString {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamNetworkingUtils_SteamNetworkingIPAddr_ToString"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamNetworkingUtils_SteamNetworkingIPAddr_ToString(ISteamNetworkingUtils ptr, const SteamNetworkingIPAddr *addr, char *buf, uint32 cbBuf, bool bWithPort)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingUtils_SteamNetworkingIPAddr_ToString$descriptor() {
        return SteamAPI_ISteamNetworkingUtils_SteamNetworkingIPAddr_ToString.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamNetworkingUtils_SteamNetworkingIPAddr_ToString(ISteamNetworkingUtils ptr, const SteamNetworkingIPAddr *addr, char *buf, uint32 cbBuf, bool bWithPort)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingUtils_SteamNetworkingIPAddr_ToString$handle() {
        return SteamAPI_ISteamNetworkingUtils_SteamNetworkingIPAddr_ToString.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamNetworkingUtils_SteamNetworkingIPAddr_ToString(ISteamNetworkingUtils ptr, const SteamNetworkingIPAddr *addr, char *buf, uint32 cbBuf, bool bWithPort)
     * }
     */
    public static void SteamAPI_ISteamNetworkingUtils_SteamNetworkingIPAddr_ToString(MemorySegment ptr, MemorySegment addr, MemorySegment buf, int cbBuf, boolean bWithPort) {
        var mh$ = SteamAPI_ISteamNetworkingUtils_SteamNetworkingIPAddr_ToString.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingUtils_SteamNetworkingIPAddr_ToString", ptr, addr, buf, cbBuf, bWithPort);
            }
            mh$.invokeExact(ptr, addr, buf, cbBuf, bWithPort);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingUtils_SteamNetworkingIPAddr_ParseString {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamNetworkingUtils_SteamNetworkingIPAddr_ParseString"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingUtils_SteamNetworkingIPAddr_ParseString(ISteamNetworkingUtils ptr, SteamNetworkingIPAddr *pAddr, const char *pszStr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingUtils_SteamNetworkingIPAddr_ParseString$descriptor() {
        return SteamAPI_ISteamNetworkingUtils_SteamNetworkingIPAddr_ParseString.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingUtils_SteamNetworkingIPAddr_ParseString(ISteamNetworkingUtils ptr, SteamNetworkingIPAddr *pAddr, const char *pszStr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingUtils_SteamNetworkingIPAddr_ParseString$handle() {
        return SteamAPI_ISteamNetworkingUtils_SteamNetworkingIPAddr_ParseString.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingUtils_SteamNetworkingIPAddr_ParseString(ISteamNetworkingUtils ptr, SteamNetworkingIPAddr *pAddr, const char *pszStr)
     * }
     */
    public static boolean SteamAPI_ISteamNetworkingUtils_SteamNetworkingIPAddr_ParseString(MemorySegment ptr, MemorySegment pAddr, MemorySegment pszStr) {
        var mh$ = SteamAPI_ISteamNetworkingUtils_SteamNetworkingIPAddr_ParseString.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingUtils_SteamNetworkingIPAddr_ParseString", ptr, pAddr, pszStr);
            }
            return (boolean)mh$.invokeExact(ptr, pAddr, pszStr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingUtils_SteamNetworkingIPAddr_GetFakeIPType {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamNetworkingUtils_SteamNetworkingIPAddr_GetFakeIPType"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ESteamNetworkingFakeIPType SteamAPI_ISteamNetworkingUtils_SteamNetworkingIPAddr_GetFakeIPType(ISteamNetworkingUtils ptr, const SteamNetworkingIPAddr *addr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingUtils_SteamNetworkingIPAddr_GetFakeIPType$descriptor() {
        return SteamAPI_ISteamNetworkingUtils_SteamNetworkingIPAddr_GetFakeIPType.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ESteamNetworkingFakeIPType SteamAPI_ISteamNetworkingUtils_SteamNetworkingIPAddr_GetFakeIPType(ISteamNetworkingUtils ptr, const SteamNetworkingIPAddr *addr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingUtils_SteamNetworkingIPAddr_GetFakeIPType$handle() {
        return SteamAPI_ISteamNetworkingUtils_SteamNetworkingIPAddr_GetFakeIPType.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ESteamNetworkingFakeIPType SteamAPI_ISteamNetworkingUtils_SteamNetworkingIPAddr_GetFakeIPType(ISteamNetworkingUtils ptr, const SteamNetworkingIPAddr *addr)
     * }
     */
    public static int SteamAPI_ISteamNetworkingUtils_SteamNetworkingIPAddr_GetFakeIPType(MemorySegment ptr, MemorySegment addr) {
        var mh$ = SteamAPI_ISteamNetworkingUtils_SteamNetworkingIPAddr_GetFakeIPType.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingUtils_SteamNetworkingIPAddr_GetFakeIPType", ptr, addr);
            }
            return (int)mh$.invokeExact(ptr, addr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingUtils_SteamNetworkingIdentity_ToString {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamNetworkingUtils_SteamNetworkingIdentity_ToString"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamNetworkingUtils_SteamNetworkingIdentity_ToString(ISteamNetworkingUtils ptr, const SteamNetworkingIdentity *identity, char *buf, uint32 cbBuf)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingUtils_SteamNetworkingIdentity_ToString$descriptor() {
        return SteamAPI_ISteamNetworkingUtils_SteamNetworkingIdentity_ToString.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamNetworkingUtils_SteamNetworkingIdentity_ToString(ISteamNetworkingUtils ptr, const SteamNetworkingIdentity *identity, char *buf, uint32 cbBuf)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingUtils_SteamNetworkingIdentity_ToString$handle() {
        return SteamAPI_ISteamNetworkingUtils_SteamNetworkingIdentity_ToString.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamNetworkingUtils_SteamNetworkingIdentity_ToString(ISteamNetworkingUtils ptr, const SteamNetworkingIdentity *identity, char *buf, uint32 cbBuf)
     * }
     */
    public static void SteamAPI_ISteamNetworkingUtils_SteamNetworkingIdentity_ToString(MemorySegment ptr, MemorySegment identity, MemorySegment buf, int cbBuf) {
        var mh$ = SteamAPI_ISteamNetworkingUtils_SteamNetworkingIdentity_ToString.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingUtils_SteamNetworkingIdentity_ToString", ptr, identity, buf, cbBuf);
            }
            mh$.invokeExact(ptr, identity, buf, cbBuf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingUtils_SteamNetworkingIdentity_ParseString {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamNetworkingUtils_SteamNetworkingIdentity_ParseString"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingUtils_SteamNetworkingIdentity_ParseString(ISteamNetworkingUtils ptr, SteamNetworkingIdentity *pIdentity, const char *pszStr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingUtils_SteamNetworkingIdentity_ParseString$descriptor() {
        return SteamAPI_ISteamNetworkingUtils_SteamNetworkingIdentity_ParseString.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingUtils_SteamNetworkingIdentity_ParseString(ISteamNetworkingUtils ptr, SteamNetworkingIdentity *pIdentity, const char *pszStr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingUtils_SteamNetworkingIdentity_ParseString$handle() {
        return SteamAPI_ISteamNetworkingUtils_SteamNetworkingIdentity_ParseString.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingUtils_SteamNetworkingIdentity_ParseString(ISteamNetworkingUtils ptr, SteamNetworkingIdentity *pIdentity, const char *pszStr)
     * }
     */
    public static boolean SteamAPI_ISteamNetworkingUtils_SteamNetworkingIdentity_ParseString(MemorySegment ptr, MemorySegment pIdentity, MemorySegment pszStr) {
        var mh$ = SteamAPI_ISteamNetworkingUtils_SteamNetworkingIdentity_ParseString.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingUtils_SteamNetworkingIdentity_ParseString", ptr, pIdentity, pszStr);
            }
            return (boolean)mh$.invokeExact(ptr, pIdentity, pszStr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_SteamNetworkingUtils_SteamAPI_v004 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_SteamNetworkingUtils_SteamAPI_v004"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ISteamNetworkingUtils SteamAPI_SteamNetworkingUtils_SteamAPI_v004()
     * }
     */
    public static FunctionDescriptor SteamAPI_SteamNetworkingUtils_SteamAPI_v004$descriptor() {
        return SteamAPI_SteamNetworkingUtils_SteamAPI_v004.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ISteamNetworkingUtils SteamAPI_SteamNetworkingUtils_SteamAPI_v004()
     * }
     */
    public static MethodHandle SteamAPI_SteamNetworkingUtils_SteamAPI_v004$handle() {
        return SteamAPI_SteamNetworkingUtils_SteamAPI_v004.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ISteamNetworkingUtils SteamAPI_SteamNetworkingUtils_SteamAPI_v004()
     * }
     */
    public static MemorySegment SteamAPI_SteamNetworkingUtils_SteamAPI_v004() {
        var mh$ = SteamAPI_SteamNetworkingUtils_SteamAPI_v004.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_SteamNetworkingUtils_SteamAPI_v004");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameServer_SetProduct {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamGameServer_SetProduct"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_SetProduct(ISteamGameServer ptr, const char *pszProduct)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameServer_SetProduct$descriptor() {
        return SteamAPI_ISteamGameServer_SetProduct.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_SetProduct(ISteamGameServer ptr, const char *pszProduct)
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameServer_SetProduct$handle() {
        return SteamAPI_ISteamGameServer_SetProduct.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_SetProduct(ISteamGameServer ptr, const char *pszProduct)
     * }
     */
    public static void SteamAPI_ISteamGameServer_SetProduct(MemorySegment ptr, MemorySegment pszProduct) {
        var mh$ = SteamAPI_ISteamGameServer_SetProduct.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameServer_SetProduct", ptr, pszProduct);
            }
            mh$.invokeExact(ptr, pszProduct);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameServer_SetGameDescription {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamGameServer_SetGameDescription"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_SetGameDescription(ISteamGameServer ptr, const char *pszGameDescription)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameServer_SetGameDescription$descriptor() {
        return SteamAPI_ISteamGameServer_SetGameDescription.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_SetGameDescription(ISteamGameServer ptr, const char *pszGameDescription)
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameServer_SetGameDescription$handle() {
        return SteamAPI_ISteamGameServer_SetGameDescription.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_SetGameDescription(ISteamGameServer ptr, const char *pszGameDescription)
     * }
     */
    public static void SteamAPI_ISteamGameServer_SetGameDescription(MemorySegment ptr, MemorySegment pszGameDescription) {
        var mh$ = SteamAPI_ISteamGameServer_SetGameDescription.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameServer_SetGameDescription", ptr, pszGameDescription);
            }
            mh$.invokeExact(ptr, pszGameDescription);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameServer_SetModDir {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamGameServer_SetModDir"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_SetModDir(ISteamGameServer ptr, const char *pszModDir)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameServer_SetModDir$descriptor() {
        return SteamAPI_ISteamGameServer_SetModDir.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_SetModDir(ISteamGameServer ptr, const char *pszModDir)
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameServer_SetModDir$handle() {
        return SteamAPI_ISteamGameServer_SetModDir.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_SetModDir(ISteamGameServer ptr, const char *pszModDir)
     * }
     */
    public static void SteamAPI_ISteamGameServer_SetModDir(MemorySegment ptr, MemorySegment pszModDir) {
        var mh$ = SteamAPI_ISteamGameServer_SetModDir.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameServer_SetModDir", ptr, pszModDir);
            }
            mh$.invokeExact(ptr, pszModDir);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameServer_SetDedicatedServer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamGameServer_SetDedicatedServer"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_SetDedicatedServer(ISteamGameServer ptr, bool bDedicated)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameServer_SetDedicatedServer$descriptor() {
        return SteamAPI_ISteamGameServer_SetDedicatedServer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_SetDedicatedServer(ISteamGameServer ptr, bool bDedicated)
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameServer_SetDedicatedServer$handle() {
        return SteamAPI_ISteamGameServer_SetDedicatedServer.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_SetDedicatedServer(ISteamGameServer ptr, bool bDedicated)
     * }
     */
    public static void SteamAPI_ISteamGameServer_SetDedicatedServer(MemorySegment ptr, boolean bDedicated) {
        var mh$ = SteamAPI_ISteamGameServer_SetDedicatedServer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameServer_SetDedicatedServer", ptr, bDedicated);
            }
            mh$.invokeExact(ptr, bDedicated);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameServer_LogOn {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamGameServer_LogOn"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_LogOn(ISteamGameServer ptr, const char *pszToken)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameServer_LogOn$descriptor() {
        return SteamAPI_ISteamGameServer_LogOn.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_LogOn(ISteamGameServer ptr, const char *pszToken)
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameServer_LogOn$handle() {
        return SteamAPI_ISteamGameServer_LogOn.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_LogOn(ISteamGameServer ptr, const char *pszToken)
     * }
     */
    public static void SteamAPI_ISteamGameServer_LogOn(MemorySegment ptr, MemorySegment pszToken) {
        var mh$ = SteamAPI_ISteamGameServer_LogOn.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameServer_LogOn", ptr, pszToken);
            }
            mh$.invokeExact(ptr, pszToken);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameServer_LogOnAnonymous {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamGameServer_LogOnAnonymous"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_LogOnAnonymous(ISteamGameServer ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameServer_LogOnAnonymous$descriptor() {
        return SteamAPI_ISteamGameServer_LogOnAnonymous.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_LogOnAnonymous(ISteamGameServer ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameServer_LogOnAnonymous$handle() {
        return SteamAPI_ISteamGameServer_LogOnAnonymous.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_LogOnAnonymous(ISteamGameServer ptr)
     * }
     */
    public static void SteamAPI_ISteamGameServer_LogOnAnonymous(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamGameServer_LogOnAnonymous.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameServer_LogOnAnonymous", ptr);
            }
            mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameServer_LogOff {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamGameServer_LogOff"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_LogOff(ISteamGameServer ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameServer_LogOff$descriptor() {
        return SteamAPI_ISteamGameServer_LogOff.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_LogOff(ISteamGameServer ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameServer_LogOff$handle() {
        return SteamAPI_ISteamGameServer_LogOff.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_LogOff(ISteamGameServer ptr)
     * }
     */
    public static void SteamAPI_ISteamGameServer_LogOff(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamGameServer_LogOff.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameServer_LogOff", ptr);
            }
            mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameServer_BLoggedOn {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamGameServer_BLoggedOn"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamGameServer_BLoggedOn(ISteamGameServer ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameServer_BLoggedOn$descriptor() {
        return SteamAPI_ISteamGameServer_BLoggedOn.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamGameServer_BLoggedOn(ISteamGameServer ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameServer_BLoggedOn$handle() {
        return SteamAPI_ISteamGameServer_BLoggedOn.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamGameServer_BLoggedOn(ISteamGameServer ptr)
     * }
     */
    public static boolean SteamAPI_ISteamGameServer_BLoggedOn(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamGameServer_BLoggedOn.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameServer_BLoggedOn", ptr);
            }
            return (boolean)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameServer_BSecure {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamGameServer_BSecure"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamGameServer_BSecure(ISteamGameServer ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameServer_BSecure$descriptor() {
        return SteamAPI_ISteamGameServer_BSecure.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamGameServer_BSecure(ISteamGameServer ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameServer_BSecure$handle() {
        return SteamAPI_ISteamGameServer_BSecure.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamGameServer_BSecure(ISteamGameServer ptr)
     * }
     */
    public static boolean SteamAPI_ISteamGameServer_BSecure(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamGameServer_BSecure.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameServer_BSecure", ptr);
            }
            return (boolean)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameServer_GetSteamID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamGameServer_GetSteamID"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint64_steamid SteamAPI_ISteamGameServer_GetSteamID(ISteamGameServer ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameServer_GetSteamID$descriptor() {
        return SteamAPI_ISteamGameServer_GetSteamID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint64_steamid SteamAPI_ISteamGameServer_GetSteamID(ISteamGameServer ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameServer_GetSteamID$handle() {
        return SteamAPI_ISteamGameServer_GetSteamID.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * uint64_steamid SteamAPI_ISteamGameServer_GetSteamID(ISteamGameServer ptr)
     * }
     */
    public static long SteamAPI_ISteamGameServer_GetSteamID(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamGameServer_GetSteamID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameServer_GetSteamID", ptr);
            }
            return (long)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameServer_WasRestartRequested {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamGameServer_WasRestartRequested"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamGameServer_WasRestartRequested(ISteamGameServer ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameServer_WasRestartRequested$descriptor() {
        return SteamAPI_ISteamGameServer_WasRestartRequested.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamGameServer_WasRestartRequested(ISteamGameServer ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameServer_WasRestartRequested$handle() {
        return SteamAPI_ISteamGameServer_WasRestartRequested.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamGameServer_WasRestartRequested(ISteamGameServer ptr)
     * }
     */
    public static boolean SteamAPI_ISteamGameServer_WasRestartRequested(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamGameServer_WasRestartRequested.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameServer_WasRestartRequested", ptr);
            }
            return (boolean)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameServer_SetMaxPlayerCount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamGameServer_SetMaxPlayerCount"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_SetMaxPlayerCount(ISteamGameServer ptr, int cPlayersMax)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameServer_SetMaxPlayerCount$descriptor() {
        return SteamAPI_ISteamGameServer_SetMaxPlayerCount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_SetMaxPlayerCount(ISteamGameServer ptr, int cPlayersMax)
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameServer_SetMaxPlayerCount$handle() {
        return SteamAPI_ISteamGameServer_SetMaxPlayerCount.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_SetMaxPlayerCount(ISteamGameServer ptr, int cPlayersMax)
     * }
     */
    public static void SteamAPI_ISteamGameServer_SetMaxPlayerCount(MemorySegment ptr, int cPlayersMax) {
        var mh$ = SteamAPI_ISteamGameServer_SetMaxPlayerCount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameServer_SetMaxPlayerCount", ptr, cPlayersMax);
            }
            mh$.invokeExact(ptr, cPlayersMax);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameServer_SetBotPlayerCount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamGameServer_SetBotPlayerCount"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_SetBotPlayerCount(ISteamGameServer ptr, int cBotplayers)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameServer_SetBotPlayerCount$descriptor() {
        return SteamAPI_ISteamGameServer_SetBotPlayerCount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_SetBotPlayerCount(ISteamGameServer ptr, int cBotplayers)
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameServer_SetBotPlayerCount$handle() {
        return SteamAPI_ISteamGameServer_SetBotPlayerCount.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_SetBotPlayerCount(ISteamGameServer ptr, int cBotplayers)
     * }
     */
    public static void SteamAPI_ISteamGameServer_SetBotPlayerCount(MemorySegment ptr, int cBotplayers) {
        var mh$ = SteamAPI_ISteamGameServer_SetBotPlayerCount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameServer_SetBotPlayerCount", ptr, cBotplayers);
            }
            mh$.invokeExact(ptr, cBotplayers);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameServer_SetServerName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamGameServer_SetServerName"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_SetServerName(ISteamGameServer ptr, const char *pszServerName)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameServer_SetServerName$descriptor() {
        return SteamAPI_ISteamGameServer_SetServerName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_SetServerName(ISteamGameServer ptr, const char *pszServerName)
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameServer_SetServerName$handle() {
        return SteamAPI_ISteamGameServer_SetServerName.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_SetServerName(ISteamGameServer ptr, const char *pszServerName)
     * }
     */
    public static void SteamAPI_ISteamGameServer_SetServerName(MemorySegment ptr, MemorySegment pszServerName) {
        var mh$ = SteamAPI_ISteamGameServer_SetServerName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameServer_SetServerName", ptr, pszServerName);
            }
            mh$.invokeExact(ptr, pszServerName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameServer_SetMapName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamGameServer_SetMapName"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_SetMapName(ISteamGameServer ptr, const char *pszMapName)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameServer_SetMapName$descriptor() {
        return SteamAPI_ISteamGameServer_SetMapName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_SetMapName(ISteamGameServer ptr, const char *pszMapName)
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameServer_SetMapName$handle() {
        return SteamAPI_ISteamGameServer_SetMapName.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_SetMapName(ISteamGameServer ptr, const char *pszMapName)
     * }
     */
    public static void SteamAPI_ISteamGameServer_SetMapName(MemorySegment ptr, MemorySegment pszMapName) {
        var mh$ = SteamAPI_ISteamGameServer_SetMapName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameServer_SetMapName", ptr, pszMapName);
            }
            mh$.invokeExact(ptr, pszMapName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameServer_SetPasswordProtected {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamGameServer_SetPasswordProtected"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_SetPasswordProtected(ISteamGameServer ptr, bool bPasswordProtected)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameServer_SetPasswordProtected$descriptor() {
        return SteamAPI_ISteamGameServer_SetPasswordProtected.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_SetPasswordProtected(ISteamGameServer ptr, bool bPasswordProtected)
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameServer_SetPasswordProtected$handle() {
        return SteamAPI_ISteamGameServer_SetPasswordProtected.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_SetPasswordProtected(ISteamGameServer ptr, bool bPasswordProtected)
     * }
     */
    public static void SteamAPI_ISteamGameServer_SetPasswordProtected(MemorySegment ptr, boolean bPasswordProtected) {
        var mh$ = SteamAPI_ISteamGameServer_SetPasswordProtected.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameServer_SetPasswordProtected", ptr, bPasswordProtected);
            }
            mh$.invokeExact(ptr, bPasswordProtected);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameServer_SetSpectatorPort {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_SHORT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamGameServer_SetSpectatorPort"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_SetSpectatorPort(ISteamGameServer ptr, uint16 unSpectatorPort)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameServer_SetSpectatorPort$descriptor() {
        return SteamAPI_ISteamGameServer_SetSpectatorPort.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_SetSpectatorPort(ISteamGameServer ptr, uint16 unSpectatorPort)
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameServer_SetSpectatorPort$handle() {
        return SteamAPI_ISteamGameServer_SetSpectatorPort.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_SetSpectatorPort(ISteamGameServer ptr, uint16 unSpectatorPort)
     * }
     */
    public static void SteamAPI_ISteamGameServer_SetSpectatorPort(MemorySegment ptr, short unSpectatorPort) {
        var mh$ = SteamAPI_ISteamGameServer_SetSpectatorPort.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameServer_SetSpectatorPort", ptr, unSpectatorPort);
            }
            mh$.invokeExact(ptr, unSpectatorPort);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameServer_SetSpectatorServerName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamGameServer_SetSpectatorServerName"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_SetSpectatorServerName(ISteamGameServer ptr, const char *pszSpectatorServerName)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameServer_SetSpectatorServerName$descriptor() {
        return SteamAPI_ISteamGameServer_SetSpectatorServerName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_SetSpectatorServerName(ISteamGameServer ptr, const char *pszSpectatorServerName)
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameServer_SetSpectatorServerName$handle() {
        return SteamAPI_ISteamGameServer_SetSpectatorServerName.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_SetSpectatorServerName(ISteamGameServer ptr, const char *pszSpectatorServerName)
     * }
     */
    public static void SteamAPI_ISteamGameServer_SetSpectatorServerName(MemorySegment ptr, MemorySegment pszSpectatorServerName) {
        var mh$ = SteamAPI_ISteamGameServer_SetSpectatorServerName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameServer_SetSpectatorServerName", ptr, pszSpectatorServerName);
            }
            mh$.invokeExact(ptr, pszSpectatorServerName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameServer_ClearAllKeyValues {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamGameServer_ClearAllKeyValues"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_ClearAllKeyValues(ISteamGameServer ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameServer_ClearAllKeyValues$descriptor() {
        return SteamAPI_ISteamGameServer_ClearAllKeyValues.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_ClearAllKeyValues(ISteamGameServer ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameServer_ClearAllKeyValues$handle() {
        return SteamAPI_ISteamGameServer_ClearAllKeyValues.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_ClearAllKeyValues(ISteamGameServer ptr)
     * }
     */
    public static void SteamAPI_ISteamGameServer_ClearAllKeyValues(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamGameServer_ClearAllKeyValues.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameServer_ClearAllKeyValues", ptr);
            }
            mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameServer_SetKeyValue {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamGameServer_SetKeyValue"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_SetKeyValue(ISteamGameServer ptr, const char *pKey, const char *pValue)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameServer_SetKeyValue$descriptor() {
        return SteamAPI_ISteamGameServer_SetKeyValue.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_SetKeyValue(ISteamGameServer ptr, const char *pKey, const char *pValue)
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameServer_SetKeyValue$handle() {
        return SteamAPI_ISteamGameServer_SetKeyValue.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_SetKeyValue(ISteamGameServer ptr, const char *pKey, const char *pValue)
     * }
     */
    public static void SteamAPI_ISteamGameServer_SetKeyValue(MemorySegment ptr, MemorySegment pKey, MemorySegment pValue) {
        var mh$ = SteamAPI_ISteamGameServer_SetKeyValue.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameServer_SetKeyValue", ptr, pKey, pValue);
            }
            mh$.invokeExact(ptr, pKey, pValue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameServer_SetGameTags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamGameServer_SetGameTags"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_SetGameTags(ISteamGameServer ptr, const char *pchGameTags)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameServer_SetGameTags$descriptor() {
        return SteamAPI_ISteamGameServer_SetGameTags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_SetGameTags(ISteamGameServer ptr, const char *pchGameTags)
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameServer_SetGameTags$handle() {
        return SteamAPI_ISteamGameServer_SetGameTags.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_SetGameTags(ISteamGameServer ptr, const char *pchGameTags)
     * }
     */
    public static void SteamAPI_ISteamGameServer_SetGameTags(MemorySegment ptr, MemorySegment pchGameTags) {
        var mh$ = SteamAPI_ISteamGameServer_SetGameTags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameServer_SetGameTags", ptr, pchGameTags);
            }
            mh$.invokeExact(ptr, pchGameTags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameServer_SetGameData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamGameServer_SetGameData"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_SetGameData(ISteamGameServer ptr, const char *pchGameData)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameServer_SetGameData$descriptor() {
        return SteamAPI_ISteamGameServer_SetGameData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_SetGameData(ISteamGameServer ptr, const char *pchGameData)
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameServer_SetGameData$handle() {
        return SteamAPI_ISteamGameServer_SetGameData.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_SetGameData(ISteamGameServer ptr, const char *pchGameData)
     * }
     */
    public static void SteamAPI_ISteamGameServer_SetGameData(MemorySegment ptr, MemorySegment pchGameData) {
        var mh$ = SteamAPI_ISteamGameServer_SetGameData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameServer_SetGameData", ptr, pchGameData);
            }
            mh$.invokeExact(ptr, pchGameData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameServer_SetRegion {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamGameServer_SetRegion"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_SetRegion(ISteamGameServer ptr, const char *pszRegion)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameServer_SetRegion$descriptor() {
        return SteamAPI_ISteamGameServer_SetRegion.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_SetRegion(ISteamGameServer ptr, const char *pszRegion)
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameServer_SetRegion$handle() {
        return SteamAPI_ISteamGameServer_SetRegion.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_SetRegion(ISteamGameServer ptr, const char *pszRegion)
     * }
     */
    public static void SteamAPI_ISteamGameServer_SetRegion(MemorySegment ptr, MemorySegment pszRegion) {
        var mh$ = SteamAPI_ISteamGameServer_SetRegion.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameServer_SetRegion", ptr, pszRegion);
            }
            mh$.invokeExact(ptr, pszRegion);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameServer_SetAdvertiseServerActive {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamGameServer_SetAdvertiseServerActive"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_SetAdvertiseServerActive(ISteamGameServer ptr, bool bActive)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameServer_SetAdvertiseServerActive$descriptor() {
        return SteamAPI_ISteamGameServer_SetAdvertiseServerActive.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_SetAdvertiseServerActive(ISteamGameServer ptr, bool bActive)
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameServer_SetAdvertiseServerActive$handle() {
        return SteamAPI_ISteamGameServer_SetAdvertiseServerActive.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_SetAdvertiseServerActive(ISteamGameServer ptr, bool bActive)
     * }
     */
    public static void SteamAPI_ISteamGameServer_SetAdvertiseServerActive(MemorySegment ptr, boolean bActive) {
        var mh$ = SteamAPI_ISteamGameServer_SetAdvertiseServerActive.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameServer_SetAdvertiseServerActive", ptr, bActive);
            }
            mh$.invokeExact(ptr, bActive);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameServer_GetAuthSessionTicket {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamGameServer_GetAuthSessionTicket"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HAuthTicket SteamAPI_ISteamGameServer_GetAuthSessionTicket(ISteamGameServer ptr, void *pTicket, int cbMaxTicket, uint32 *pcbTicket, const SteamNetworkingIdentity *pSnid)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameServer_GetAuthSessionTicket$descriptor() {
        return SteamAPI_ISteamGameServer_GetAuthSessionTicket.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HAuthTicket SteamAPI_ISteamGameServer_GetAuthSessionTicket(ISteamGameServer ptr, void *pTicket, int cbMaxTicket, uint32 *pcbTicket, const SteamNetworkingIdentity *pSnid)
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameServer_GetAuthSessionTicket$handle() {
        return SteamAPI_ISteamGameServer_GetAuthSessionTicket.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HAuthTicket SteamAPI_ISteamGameServer_GetAuthSessionTicket(ISteamGameServer ptr, void *pTicket, int cbMaxTicket, uint32 *pcbTicket, const SteamNetworkingIdentity *pSnid)
     * }
     */
    public static int SteamAPI_ISteamGameServer_GetAuthSessionTicket(MemorySegment ptr, MemorySegment pTicket, int cbMaxTicket, MemorySegment pcbTicket, MemorySegment pSnid) {
        var mh$ = SteamAPI_ISteamGameServer_GetAuthSessionTicket.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameServer_GetAuthSessionTicket", ptr, pTicket, cbMaxTicket, pcbTicket, pSnid);
            }
            return (int)mh$.invokeExact(ptr, pTicket, cbMaxTicket, pcbTicket, pSnid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameServer_BeginAuthSession {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamGameServer_BeginAuthSession"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * EBeginAuthSessionResult SteamAPI_ISteamGameServer_BeginAuthSession(ISteamGameServer ptr, const void *pAuthTicket, int cbAuthTicket, uint64_steamid steamID)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameServer_BeginAuthSession$descriptor() {
        return SteamAPI_ISteamGameServer_BeginAuthSession.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * EBeginAuthSessionResult SteamAPI_ISteamGameServer_BeginAuthSession(ISteamGameServer ptr, const void *pAuthTicket, int cbAuthTicket, uint64_steamid steamID)
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameServer_BeginAuthSession$handle() {
        return SteamAPI_ISteamGameServer_BeginAuthSession.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * EBeginAuthSessionResult SteamAPI_ISteamGameServer_BeginAuthSession(ISteamGameServer ptr, const void *pAuthTicket, int cbAuthTicket, uint64_steamid steamID)
     * }
     */
    public static int SteamAPI_ISteamGameServer_BeginAuthSession(MemorySegment ptr, MemorySegment pAuthTicket, int cbAuthTicket, long steamID) {
        var mh$ = SteamAPI_ISteamGameServer_BeginAuthSession.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameServer_BeginAuthSession", ptr, pAuthTicket, cbAuthTicket, steamID);
            }
            return (int)mh$.invokeExact(ptr, pAuthTicket, cbAuthTicket, steamID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameServer_EndAuthSession {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamGameServer_EndAuthSession"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_EndAuthSession(ISteamGameServer ptr, uint64_steamid steamID)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameServer_EndAuthSession$descriptor() {
        return SteamAPI_ISteamGameServer_EndAuthSession.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_EndAuthSession(ISteamGameServer ptr, uint64_steamid steamID)
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameServer_EndAuthSession$handle() {
        return SteamAPI_ISteamGameServer_EndAuthSession.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_EndAuthSession(ISteamGameServer ptr, uint64_steamid steamID)
     * }
     */
    public static void SteamAPI_ISteamGameServer_EndAuthSession(MemorySegment ptr, long steamID) {
        var mh$ = SteamAPI_ISteamGameServer_EndAuthSession.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameServer_EndAuthSession", ptr, steamID);
            }
            mh$.invokeExact(ptr, steamID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameServer_CancelAuthTicket {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamGameServer_CancelAuthTicket"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_CancelAuthTicket(ISteamGameServer ptr, HAuthTicket hAuthTicket)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameServer_CancelAuthTicket$descriptor() {
        return SteamAPI_ISteamGameServer_CancelAuthTicket.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_CancelAuthTicket(ISteamGameServer ptr, HAuthTicket hAuthTicket)
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameServer_CancelAuthTicket$handle() {
        return SteamAPI_ISteamGameServer_CancelAuthTicket.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_CancelAuthTicket(ISteamGameServer ptr, HAuthTicket hAuthTicket)
     * }
     */
    public static void SteamAPI_ISteamGameServer_CancelAuthTicket(MemorySegment ptr, int hAuthTicket) {
        var mh$ = SteamAPI_ISteamGameServer_CancelAuthTicket.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameServer_CancelAuthTicket", ptr, hAuthTicket);
            }
            mh$.invokeExact(ptr, hAuthTicket);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameServer_UserHasLicenseForApp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamGameServer_UserHasLicenseForApp"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * EUserHasLicenseForAppResult SteamAPI_ISteamGameServer_UserHasLicenseForApp(ISteamGameServer ptr, uint64_steamid steamID, AppId_t appID)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameServer_UserHasLicenseForApp$descriptor() {
        return SteamAPI_ISteamGameServer_UserHasLicenseForApp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * EUserHasLicenseForAppResult SteamAPI_ISteamGameServer_UserHasLicenseForApp(ISteamGameServer ptr, uint64_steamid steamID, AppId_t appID)
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameServer_UserHasLicenseForApp$handle() {
        return SteamAPI_ISteamGameServer_UserHasLicenseForApp.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * EUserHasLicenseForAppResult SteamAPI_ISteamGameServer_UserHasLicenseForApp(ISteamGameServer ptr, uint64_steamid steamID, AppId_t appID)
     * }
     */
    public static int SteamAPI_ISteamGameServer_UserHasLicenseForApp(MemorySegment ptr, long steamID, int appID) {
        var mh$ = SteamAPI_ISteamGameServer_UserHasLicenseForApp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameServer_UserHasLicenseForApp", ptr, steamID, appID);
            }
            return (int)mh$.invokeExact(ptr, steamID, appID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameServer_RequestUserGroupStatus {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamGameServer_RequestUserGroupStatus"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamGameServer_RequestUserGroupStatus(ISteamGameServer ptr, uint64_steamid steamIDUser, uint64_steamid steamIDGroup)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameServer_RequestUserGroupStatus$descriptor() {
        return SteamAPI_ISteamGameServer_RequestUserGroupStatus.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamGameServer_RequestUserGroupStatus(ISteamGameServer ptr, uint64_steamid steamIDUser, uint64_steamid steamIDGroup)
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameServer_RequestUserGroupStatus$handle() {
        return SteamAPI_ISteamGameServer_RequestUserGroupStatus.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamGameServer_RequestUserGroupStatus(ISteamGameServer ptr, uint64_steamid steamIDUser, uint64_steamid steamIDGroup)
     * }
     */
    public static boolean SteamAPI_ISteamGameServer_RequestUserGroupStatus(MemorySegment ptr, long steamIDUser, long steamIDGroup) {
        var mh$ = SteamAPI_ISteamGameServer_RequestUserGroupStatus.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameServer_RequestUserGroupStatus", ptr, steamIDUser, steamIDGroup);
            }
            return (boolean)mh$.invokeExact(ptr, steamIDUser, steamIDGroup);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameServer_GetGameplayStats {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamGameServer_GetGameplayStats"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_GetGameplayStats(ISteamGameServer ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameServer_GetGameplayStats$descriptor() {
        return SteamAPI_ISteamGameServer_GetGameplayStats.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_GetGameplayStats(ISteamGameServer ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameServer_GetGameplayStats$handle() {
        return SteamAPI_ISteamGameServer_GetGameplayStats.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_GetGameplayStats(ISteamGameServer ptr)
     * }
     */
    public static void SteamAPI_ISteamGameServer_GetGameplayStats(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamGameServer_GetGameplayStats.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameServer_GetGameplayStats", ptr);
            }
            mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameServer_GetServerReputation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamGameServer_GetServerReputation"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamGameServer_GetServerReputation(ISteamGameServer ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameServer_GetServerReputation$descriptor() {
        return SteamAPI_ISteamGameServer_GetServerReputation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamGameServer_GetServerReputation(ISteamGameServer ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameServer_GetServerReputation$handle() {
        return SteamAPI_ISteamGameServer_GetServerReputation.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamGameServer_GetServerReputation(ISteamGameServer ptr)
     * }
     */
    public static long SteamAPI_ISteamGameServer_GetServerReputation(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamGameServer_GetServerReputation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameServer_GetServerReputation", ptr);
            }
            return (long)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameServer_GetPublicIP {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamIPAddress_t.layout(),
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamGameServer_GetPublicIP"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamIPAddress_t SteamAPI_ISteamGameServer_GetPublicIP(ISteamGameServer ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameServer_GetPublicIP$descriptor() {
        return SteamAPI_ISteamGameServer_GetPublicIP.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamIPAddress_t SteamAPI_ISteamGameServer_GetPublicIP(ISteamGameServer ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameServer_GetPublicIP$handle() {
        return SteamAPI_ISteamGameServer_GetPublicIP.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamIPAddress_t SteamAPI_ISteamGameServer_GetPublicIP(ISteamGameServer ptr)
     * }
     */
    public static MemorySegment SteamAPI_ISteamGameServer_GetPublicIP(SegmentAllocator allocator, MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamGameServer_GetPublicIP.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameServer_GetPublicIP", allocator, ptr);
            }
            return (MemorySegment)mh$.invokeExact(allocator, ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameServer_HandleIncomingPacket {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_INT,
            SteamFlat.C_SHORT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamGameServer_HandleIncomingPacket"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamGameServer_HandleIncomingPacket(ISteamGameServer ptr, const void *pData, int cbData, uint32 srcIP, uint16 srcPort)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameServer_HandleIncomingPacket$descriptor() {
        return SteamAPI_ISteamGameServer_HandleIncomingPacket.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamGameServer_HandleIncomingPacket(ISteamGameServer ptr, const void *pData, int cbData, uint32 srcIP, uint16 srcPort)
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameServer_HandleIncomingPacket$handle() {
        return SteamAPI_ISteamGameServer_HandleIncomingPacket.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamGameServer_HandleIncomingPacket(ISteamGameServer ptr, const void *pData, int cbData, uint32 srcIP, uint16 srcPort)
     * }
     */
    public static boolean SteamAPI_ISteamGameServer_HandleIncomingPacket(MemorySegment ptr, MemorySegment pData, int cbData, int srcIP, short srcPort) {
        var mh$ = SteamAPI_ISteamGameServer_HandleIncomingPacket.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameServer_HandleIncomingPacket", ptr, pData, cbData, srcIP, srcPort);
            }
            return (boolean)mh$.invokeExact(ptr, pData, cbData, srcIP, srcPort);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameServer_GetNextOutgoingPacket {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamGameServer_GetNextOutgoingPacket"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamGameServer_GetNextOutgoingPacket(ISteamGameServer ptr, void *pOut, int cbMaxOut, uint32 *pNetAdr, uint16 *pPort)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameServer_GetNextOutgoingPacket$descriptor() {
        return SteamAPI_ISteamGameServer_GetNextOutgoingPacket.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamGameServer_GetNextOutgoingPacket(ISteamGameServer ptr, void *pOut, int cbMaxOut, uint32 *pNetAdr, uint16 *pPort)
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameServer_GetNextOutgoingPacket$handle() {
        return SteamAPI_ISteamGameServer_GetNextOutgoingPacket.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int SteamAPI_ISteamGameServer_GetNextOutgoingPacket(ISteamGameServer ptr, void *pOut, int cbMaxOut, uint32 *pNetAdr, uint16 *pPort)
     * }
     */
    public static int SteamAPI_ISteamGameServer_GetNextOutgoingPacket(MemorySegment ptr, MemorySegment pOut, int cbMaxOut, MemorySegment pNetAdr, MemorySegment pPort) {
        var mh$ = SteamAPI_ISteamGameServer_GetNextOutgoingPacket.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameServer_GetNextOutgoingPacket", ptr, pOut, cbMaxOut, pNetAdr, pPort);
            }
            return (int)mh$.invokeExact(ptr, pOut, cbMaxOut, pNetAdr, pPort);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameServer_AssociateWithClan {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamGameServer_AssociateWithClan"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamGameServer_AssociateWithClan(ISteamGameServer ptr, uint64_steamid steamIDClan)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameServer_AssociateWithClan$descriptor() {
        return SteamAPI_ISteamGameServer_AssociateWithClan.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamGameServer_AssociateWithClan(ISteamGameServer ptr, uint64_steamid steamIDClan)
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameServer_AssociateWithClan$handle() {
        return SteamAPI_ISteamGameServer_AssociateWithClan.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamGameServer_AssociateWithClan(ISteamGameServer ptr, uint64_steamid steamIDClan)
     * }
     */
    public static long SteamAPI_ISteamGameServer_AssociateWithClan(MemorySegment ptr, long steamIDClan) {
        var mh$ = SteamAPI_ISteamGameServer_AssociateWithClan.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameServer_AssociateWithClan", ptr, steamIDClan);
            }
            return (long)mh$.invokeExact(ptr, steamIDClan);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameServer_ComputeNewPlayerCompatibility {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamGameServer_ComputeNewPlayerCompatibility"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamGameServer_ComputeNewPlayerCompatibility(ISteamGameServer ptr, uint64_steamid steamIDNewPlayer)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameServer_ComputeNewPlayerCompatibility$descriptor() {
        return SteamAPI_ISteamGameServer_ComputeNewPlayerCompatibility.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamGameServer_ComputeNewPlayerCompatibility(ISteamGameServer ptr, uint64_steamid steamIDNewPlayer)
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameServer_ComputeNewPlayerCompatibility$handle() {
        return SteamAPI_ISteamGameServer_ComputeNewPlayerCompatibility.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamGameServer_ComputeNewPlayerCompatibility(ISteamGameServer ptr, uint64_steamid steamIDNewPlayer)
     * }
     */
    public static long SteamAPI_ISteamGameServer_ComputeNewPlayerCompatibility(MemorySegment ptr, long steamIDNewPlayer) {
        var mh$ = SteamAPI_ISteamGameServer_ComputeNewPlayerCompatibility.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameServer_ComputeNewPlayerCompatibility", ptr, steamIDNewPlayer);
            }
            return (long)mh$.invokeExact(ptr, steamIDNewPlayer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameServer_SendUserConnectAndAuthenticate_DEPRECATED {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamGameServer_SendUserConnectAndAuthenticate_DEPRECATED"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamGameServer_SendUserConnectAndAuthenticate_DEPRECATED(ISteamGameServer ptr, uint32 unIPClient, const void *pvAuthBlob, uint32 cubAuthBlobSize, CSteamID *pSteamIDUser)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameServer_SendUserConnectAndAuthenticate_DEPRECATED$descriptor() {
        return SteamAPI_ISteamGameServer_SendUserConnectAndAuthenticate_DEPRECATED.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamGameServer_SendUserConnectAndAuthenticate_DEPRECATED(ISteamGameServer ptr, uint32 unIPClient, const void *pvAuthBlob, uint32 cubAuthBlobSize, CSteamID *pSteamIDUser)
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameServer_SendUserConnectAndAuthenticate_DEPRECATED$handle() {
        return SteamAPI_ISteamGameServer_SendUserConnectAndAuthenticate_DEPRECATED.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamGameServer_SendUserConnectAndAuthenticate_DEPRECATED(ISteamGameServer ptr, uint32 unIPClient, const void *pvAuthBlob, uint32 cubAuthBlobSize, CSteamID *pSteamIDUser)
     * }
     */
    public static boolean SteamAPI_ISteamGameServer_SendUserConnectAndAuthenticate_DEPRECATED(MemorySegment ptr, int unIPClient, MemorySegment pvAuthBlob, int cubAuthBlobSize, MemorySegment pSteamIDUser) {
        var mh$ = SteamAPI_ISteamGameServer_SendUserConnectAndAuthenticate_DEPRECATED.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameServer_SendUserConnectAndAuthenticate_DEPRECATED", ptr, unIPClient, pvAuthBlob, cubAuthBlobSize, pSteamIDUser);
            }
            return (boolean)mh$.invokeExact(ptr, unIPClient, pvAuthBlob, cubAuthBlobSize, pSteamIDUser);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameServer_CreateUnauthenticatedUserConnection {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamGameServer_CreateUnauthenticatedUserConnection"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint64_steamid SteamAPI_ISteamGameServer_CreateUnauthenticatedUserConnection(ISteamGameServer ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameServer_CreateUnauthenticatedUserConnection$descriptor() {
        return SteamAPI_ISteamGameServer_CreateUnauthenticatedUserConnection.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint64_steamid SteamAPI_ISteamGameServer_CreateUnauthenticatedUserConnection(ISteamGameServer ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameServer_CreateUnauthenticatedUserConnection$handle() {
        return SteamAPI_ISteamGameServer_CreateUnauthenticatedUserConnection.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * uint64_steamid SteamAPI_ISteamGameServer_CreateUnauthenticatedUserConnection(ISteamGameServer ptr)
     * }
     */
    public static long SteamAPI_ISteamGameServer_CreateUnauthenticatedUserConnection(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamGameServer_CreateUnauthenticatedUserConnection.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameServer_CreateUnauthenticatedUserConnection", ptr);
            }
            return (long)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameServer_SendUserDisconnect_DEPRECATED {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamGameServer_SendUserDisconnect_DEPRECATED"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_SendUserDisconnect_DEPRECATED(ISteamGameServer ptr, uint64_steamid steamIDUser)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameServer_SendUserDisconnect_DEPRECATED$descriptor() {
        return SteamAPI_ISteamGameServer_SendUserDisconnect_DEPRECATED.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_SendUserDisconnect_DEPRECATED(ISteamGameServer ptr, uint64_steamid steamIDUser)
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameServer_SendUserDisconnect_DEPRECATED$handle() {
        return SteamAPI_ISteamGameServer_SendUserDisconnect_DEPRECATED.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_SendUserDisconnect_DEPRECATED(ISteamGameServer ptr, uint64_steamid steamIDUser)
     * }
     */
    public static void SteamAPI_ISteamGameServer_SendUserDisconnect_DEPRECATED(MemorySegment ptr, long steamIDUser) {
        var mh$ = SteamAPI_ISteamGameServer_SendUserDisconnect_DEPRECATED.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameServer_SendUserDisconnect_DEPRECATED", ptr, steamIDUser);
            }
            mh$.invokeExact(ptr, steamIDUser);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameServer_BUpdateUserData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamGameServer_BUpdateUserData"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamGameServer_BUpdateUserData(ISteamGameServer ptr, uint64_steamid steamIDUser, const char *pchPlayerName, uint32 uScore)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameServer_BUpdateUserData$descriptor() {
        return SteamAPI_ISteamGameServer_BUpdateUserData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamGameServer_BUpdateUserData(ISteamGameServer ptr, uint64_steamid steamIDUser, const char *pchPlayerName, uint32 uScore)
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameServer_BUpdateUserData$handle() {
        return SteamAPI_ISteamGameServer_BUpdateUserData.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamGameServer_BUpdateUserData(ISteamGameServer ptr, uint64_steamid steamIDUser, const char *pchPlayerName, uint32 uScore)
     * }
     */
    public static boolean SteamAPI_ISteamGameServer_BUpdateUserData(MemorySegment ptr, long steamIDUser, MemorySegment pchPlayerName, int uScore) {
        var mh$ = SteamAPI_ISteamGameServer_BUpdateUserData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameServer_BUpdateUserData", ptr, steamIDUser, pchPlayerName, uScore);
            }
            return (boolean)mh$.invokeExact(ptr, steamIDUser, pchPlayerName, uScore);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_SteamGameServer_v015 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_SteamGameServer_v015"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ISteamGameServer SteamAPI_SteamGameServer_v015()
     * }
     */
    public static FunctionDescriptor SteamAPI_SteamGameServer_v015$descriptor() {
        return SteamAPI_SteamGameServer_v015.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ISteamGameServer SteamAPI_SteamGameServer_v015()
     * }
     */
    public static MethodHandle SteamAPI_SteamGameServer_v015$handle() {
        return SteamAPI_SteamGameServer_v015.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ISteamGameServer SteamAPI_SteamGameServer_v015()
     * }
     */
    public static MemorySegment SteamAPI_SteamGameServer_v015() {
        var mh$ = SteamAPI_SteamGameServer_v015.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_SteamGameServer_v015");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameServerStats_RequestUserStats {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamGameServerStats_RequestUserStats"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamGameServerStats_RequestUserStats(ISteamGameServerStats ptr, uint64_steamid steamIDUser)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameServerStats_RequestUserStats$descriptor() {
        return SteamAPI_ISteamGameServerStats_RequestUserStats.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamGameServerStats_RequestUserStats(ISteamGameServerStats ptr, uint64_steamid steamIDUser)
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameServerStats_RequestUserStats$handle() {
        return SteamAPI_ISteamGameServerStats_RequestUserStats.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamGameServerStats_RequestUserStats(ISteamGameServerStats ptr, uint64_steamid steamIDUser)
     * }
     */
    public static long SteamAPI_ISteamGameServerStats_RequestUserStats(MemorySegment ptr, long steamIDUser) {
        var mh$ = SteamAPI_ISteamGameServerStats_RequestUserStats.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameServerStats_RequestUserStats", ptr, steamIDUser);
            }
            return (long)mh$.invokeExact(ptr, steamIDUser);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameServerStats_GetUserStatInt32 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamGameServerStats_GetUserStatInt32"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamGameServerStats_GetUserStatInt32(ISteamGameServerStats ptr, uint64_steamid steamIDUser, const char *pchName, int32 *pData)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameServerStats_GetUserStatInt32$descriptor() {
        return SteamAPI_ISteamGameServerStats_GetUserStatInt32.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamGameServerStats_GetUserStatInt32(ISteamGameServerStats ptr, uint64_steamid steamIDUser, const char *pchName, int32 *pData)
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameServerStats_GetUserStatInt32$handle() {
        return SteamAPI_ISteamGameServerStats_GetUserStatInt32.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamGameServerStats_GetUserStatInt32(ISteamGameServerStats ptr, uint64_steamid steamIDUser, const char *pchName, int32 *pData)
     * }
     */
    public static boolean SteamAPI_ISteamGameServerStats_GetUserStatInt32(MemorySegment ptr, long steamIDUser, MemorySegment pchName, MemorySegment pData) {
        var mh$ = SteamAPI_ISteamGameServerStats_GetUserStatInt32.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameServerStats_GetUserStatInt32", ptr, steamIDUser, pchName, pData);
            }
            return (boolean)mh$.invokeExact(ptr, steamIDUser, pchName, pData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameServerStats_GetUserStatFloat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamGameServerStats_GetUserStatFloat"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamGameServerStats_GetUserStatFloat(ISteamGameServerStats ptr, uint64_steamid steamIDUser, const char *pchName, float *pData)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameServerStats_GetUserStatFloat$descriptor() {
        return SteamAPI_ISteamGameServerStats_GetUserStatFloat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamGameServerStats_GetUserStatFloat(ISteamGameServerStats ptr, uint64_steamid steamIDUser, const char *pchName, float *pData)
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameServerStats_GetUserStatFloat$handle() {
        return SteamAPI_ISteamGameServerStats_GetUserStatFloat.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamGameServerStats_GetUserStatFloat(ISteamGameServerStats ptr, uint64_steamid steamIDUser, const char *pchName, float *pData)
     * }
     */
    public static boolean SteamAPI_ISteamGameServerStats_GetUserStatFloat(MemorySegment ptr, long steamIDUser, MemorySegment pchName, MemorySegment pData) {
        var mh$ = SteamAPI_ISteamGameServerStats_GetUserStatFloat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameServerStats_GetUserStatFloat", ptr, steamIDUser, pchName, pData);
            }
            return (boolean)mh$.invokeExact(ptr, steamIDUser, pchName, pData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameServerStats_GetUserAchievement {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamGameServerStats_GetUserAchievement"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamGameServerStats_GetUserAchievement(ISteamGameServerStats ptr, uint64_steamid steamIDUser, const char *pchName, bool *pbAchieved)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameServerStats_GetUserAchievement$descriptor() {
        return SteamAPI_ISteamGameServerStats_GetUserAchievement.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamGameServerStats_GetUserAchievement(ISteamGameServerStats ptr, uint64_steamid steamIDUser, const char *pchName, bool *pbAchieved)
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameServerStats_GetUserAchievement$handle() {
        return SteamAPI_ISteamGameServerStats_GetUserAchievement.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamGameServerStats_GetUserAchievement(ISteamGameServerStats ptr, uint64_steamid steamIDUser, const char *pchName, bool *pbAchieved)
     * }
     */
    public static boolean SteamAPI_ISteamGameServerStats_GetUserAchievement(MemorySegment ptr, long steamIDUser, MemorySegment pchName, MemorySegment pbAchieved) {
        var mh$ = SteamAPI_ISteamGameServerStats_GetUserAchievement.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameServerStats_GetUserAchievement", ptr, steamIDUser, pchName, pbAchieved);
            }
            return (boolean)mh$.invokeExact(ptr, steamIDUser, pchName, pbAchieved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameServerStats_SetUserStatInt32 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamGameServerStats_SetUserStatInt32"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamGameServerStats_SetUserStatInt32(ISteamGameServerStats ptr, uint64_steamid steamIDUser, const char *pchName, int32 nData)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameServerStats_SetUserStatInt32$descriptor() {
        return SteamAPI_ISteamGameServerStats_SetUserStatInt32.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamGameServerStats_SetUserStatInt32(ISteamGameServerStats ptr, uint64_steamid steamIDUser, const char *pchName, int32 nData)
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameServerStats_SetUserStatInt32$handle() {
        return SteamAPI_ISteamGameServerStats_SetUserStatInt32.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamGameServerStats_SetUserStatInt32(ISteamGameServerStats ptr, uint64_steamid steamIDUser, const char *pchName, int32 nData)
     * }
     */
    public static boolean SteamAPI_ISteamGameServerStats_SetUserStatInt32(MemorySegment ptr, long steamIDUser, MemorySegment pchName, int nData) {
        var mh$ = SteamAPI_ISteamGameServerStats_SetUserStatInt32.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameServerStats_SetUserStatInt32", ptr, steamIDUser, pchName, nData);
            }
            return (boolean)mh$.invokeExact(ptr, steamIDUser, pchName, nData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameServerStats_SetUserStatFloat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_FLOAT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamGameServerStats_SetUserStatFloat"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamGameServerStats_SetUserStatFloat(ISteamGameServerStats ptr, uint64_steamid steamIDUser, const char *pchName, float fData)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameServerStats_SetUserStatFloat$descriptor() {
        return SteamAPI_ISteamGameServerStats_SetUserStatFloat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamGameServerStats_SetUserStatFloat(ISteamGameServerStats ptr, uint64_steamid steamIDUser, const char *pchName, float fData)
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameServerStats_SetUserStatFloat$handle() {
        return SteamAPI_ISteamGameServerStats_SetUserStatFloat.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamGameServerStats_SetUserStatFloat(ISteamGameServerStats ptr, uint64_steamid steamIDUser, const char *pchName, float fData)
     * }
     */
    public static boolean SteamAPI_ISteamGameServerStats_SetUserStatFloat(MemorySegment ptr, long steamIDUser, MemorySegment pchName, float fData) {
        var mh$ = SteamAPI_ISteamGameServerStats_SetUserStatFloat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameServerStats_SetUserStatFloat", ptr, steamIDUser, pchName, fData);
            }
            return (boolean)mh$.invokeExact(ptr, steamIDUser, pchName, fData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameServerStats_UpdateUserAvgRateStat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_FLOAT,
            SteamFlat.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamGameServerStats_UpdateUserAvgRateStat"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamGameServerStats_UpdateUserAvgRateStat(ISteamGameServerStats ptr, uint64_steamid steamIDUser, const char *pchName, float flCountThisSession, double dSessionLength)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameServerStats_UpdateUserAvgRateStat$descriptor() {
        return SteamAPI_ISteamGameServerStats_UpdateUserAvgRateStat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamGameServerStats_UpdateUserAvgRateStat(ISteamGameServerStats ptr, uint64_steamid steamIDUser, const char *pchName, float flCountThisSession, double dSessionLength)
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameServerStats_UpdateUserAvgRateStat$handle() {
        return SteamAPI_ISteamGameServerStats_UpdateUserAvgRateStat.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamGameServerStats_UpdateUserAvgRateStat(ISteamGameServerStats ptr, uint64_steamid steamIDUser, const char *pchName, float flCountThisSession, double dSessionLength)
     * }
     */
    public static boolean SteamAPI_ISteamGameServerStats_UpdateUserAvgRateStat(MemorySegment ptr, long steamIDUser, MemorySegment pchName, float flCountThisSession, double dSessionLength) {
        var mh$ = SteamAPI_ISteamGameServerStats_UpdateUserAvgRateStat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameServerStats_UpdateUserAvgRateStat", ptr, steamIDUser, pchName, flCountThisSession, dSessionLength);
            }
            return (boolean)mh$.invokeExact(ptr, steamIDUser, pchName, flCountThisSession, dSessionLength);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameServerStats_SetUserAchievement {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamGameServerStats_SetUserAchievement"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamGameServerStats_SetUserAchievement(ISteamGameServerStats ptr, uint64_steamid steamIDUser, const char *pchName)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameServerStats_SetUserAchievement$descriptor() {
        return SteamAPI_ISteamGameServerStats_SetUserAchievement.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamGameServerStats_SetUserAchievement(ISteamGameServerStats ptr, uint64_steamid steamIDUser, const char *pchName)
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameServerStats_SetUserAchievement$handle() {
        return SteamAPI_ISteamGameServerStats_SetUserAchievement.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamGameServerStats_SetUserAchievement(ISteamGameServerStats ptr, uint64_steamid steamIDUser, const char *pchName)
     * }
     */
    public static boolean SteamAPI_ISteamGameServerStats_SetUserAchievement(MemorySegment ptr, long steamIDUser, MemorySegment pchName) {
        var mh$ = SteamAPI_ISteamGameServerStats_SetUserAchievement.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameServerStats_SetUserAchievement", ptr, steamIDUser, pchName);
            }
            return (boolean)mh$.invokeExact(ptr, steamIDUser, pchName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameServerStats_ClearUserAchievement {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_BOOL,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamGameServerStats_ClearUserAchievement"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamGameServerStats_ClearUserAchievement(ISteamGameServerStats ptr, uint64_steamid steamIDUser, const char *pchName)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameServerStats_ClearUserAchievement$descriptor() {
        return SteamAPI_ISteamGameServerStats_ClearUserAchievement.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamGameServerStats_ClearUserAchievement(ISteamGameServerStats ptr, uint64_steamid steamIDUser, const char *pchName)
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameServerStats_ClearUserAchievement$handle() {
        return SteamAPI_ISteamGameServerStats_ClearUserAchievement.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamGameServerStats_ClearUserAchievement(ISteamGameServerStats ptr, uint64_steamid steamIDUser, const char *pchName)
     * }
     */
    public static boolean SteamAPI_ISteamGameServerStats_ClearUserAchievement(MemorySegment ptr, long steamIDUser, MemorySegment pchName) {
        var mh$ = SteamAPI_ISteamGameServerStats_ClearUserAchievement.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameServerStats_ClearUserAchievement", ptr, steamIDUser, pchName);
            }
            return (boolean)mh$.invokeExact(ptr, steamIDUser, pchName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameServerStats_StoreUserStats {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_LONG_LONG,
            SteamFlat.C_POINTER,
            SteamFlat.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamGameServerStats_StoreUserStats"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamGameServerStats_StoreUserStats(ISteamGameServerStats ptr, uint64_steamid steamIDUser)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameServerStats_StoreUserStats$descriptor() {
        return SteamAPI_ISteamGameServerStats_StoreUserStats.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamGameServerStats_StoreUserStats(ISteamGameServerStats ptr, uint64_steamid steamIDUser)
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameServerStats_StoreUserStats$handle() {
        return SteamAPI_ISteamGameServerStats_StoreUserStats.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamGameServerStats_StoreUserStats(ISteamGameServerStats ptr, uint64_steamid steamIDUser)
     * }
     */
    public static long SteamAPI_ISteamGameServerStats_StoreUserStats(MemorySegment ptr, long steamIDUser) {
        var mh$ = SteamAPI_ISteamGameServerStats_StoreUserStats.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameServerStats_StoreUserStats", ptr, steamIDUser);
            }
            return (long)mh$.invokeExact(ptr, steamIDUser);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_SteamGameServerStats_v001 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_SteamGameServerStats_v001"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ISteamGameServerStats SteamAPI_SteamGameServerStats_v001()
     * }
     */
    public static FunctionDescriptor SteamAPI_SteamGameServerStats_v001$descriptor() {
        return SteamAPI_SteamGameServerStats_v001.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ISteamGameServerStats SteamAPI_SteamGameServerStats_v001()
     * }
     */
    public static MethodHandle SteamAPI_SteamGameServerStats_v001$handle() {
        return SteamAPI_SteamGameServerStats_v001.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ISteamGameServerStats SteamAPI_SteamGameServerStats_v001()
     * }
     */
    public static MemorySegment SteamAPI_SteamGameServerStats_v001() {
        var mh$ = SteamAPI_SteamGameServerStats_v001.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_SteamGameServerStats_v001");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingFakeUDPPort_DestroyFakeUDPPort {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamNetworkingFakeUDPPort_DestroyFakeUDPPort"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamNetworkingFakeUDPPort_DestroyFakeUDPPort(ISteamNetworkingFakeUDPPort ptr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingFakeUDPPort_DestroyFakeUDPPort$descriptor() {
        return SteamAPI_ISteamNetworkingFakeUDPPort_DestroyFakeUDPPort.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamNetworkingFakeUDPPort_DestroyFakeUDPPort(ISteamNetworkingFakeUDPPort ptr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingFakeUDPPort_DestroyFakeUDPPort$handle() {
        return SteamAPI_ISteamNetworkingFakeUDPPort_DestroyFakeUDPPort.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamNetworkingFakeUDPPort_DestroyFakeUDPPort(ISteamNetworkingFakeUDPPort ptr)
     * }
     */
    public static void SteamAPI_ISteamNetworkingFakeUDPPort_DestroyFakeUDPPort(MemorySegment ptr) {
        var mh$ = SteamAPI_ISteamNetworkingFakeUDPPort_DestroyFakeUDPPort.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingFakeUDPPort_DestroyFakeUDPPort", ptr);
            }
            mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingFakeUDPPort_SendMessageToFakeIP {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamNetworkingFakeUDPPort_SendMessageToFakeIP"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * EResult SteamAPI_ISteamNetworkingFakeUDPPort_SendMessageToFakeIP(ISteamNetworkingFakeUDPPort ptr, const SteamNetworkingIPAddr *remoteAddress, const void *pData, uint32 cbData, int nSendFlags)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingFakeUDPPort_SendMessageToFakeIP$descriptor() {
        return SteamAPI_ISteamNetworkingFakeUDPPort_SendMessageToFakeIP.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * EResult SteamAPI_ISteamNetworkingFakeUDPPort_SendMessageToFakeIP(ISteamNetworkingFakeUDPPort ptr, const SteamNetworkingIPAddr *remoteAddress, const void *pData, uint32 cbData, int nSendFlags)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingFakeUDPPort_SendMessageToFakeIP$handle() {
        return SteamAPI_ISteamNetworkingFakeUDPPort_SendMessageToFakeIP.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * EResult SteamAPI_ISteamNetworkingFakeUDPPort_SendMessageToFakeIP(ISteamNetworkingFakeUDPPort ptr, const SteamNetworkingIPAddr *remoteAddress, const void *pData, uint32 cbData, int nSendFlags)
     * }
     */
    public static int SteamAPI_ISteamNetworkingFakeUDPPort_SendMessageToFakeIP(MemorySegment ptr, MemorySegment remoteAddress, MemorySegment pData, int cbData, int nSendFlags) {
        var mh$ = SteamAPI_ISteamNetworkingFakeUDPPort_SendMessageToFakeIP.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingFakeUDPPort_SendMessageToFakeIP", ptr, remoteAddress, pData, cbData, nSendFlags);
            }
            return (int)mh$.invokeExact(ptr, remoteAddress, pData, cbData, nSendFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingFakeUDPPort_ReceiveMessages {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER,
            SteamFlat.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamNetworkingFakeUDPPort_ReceiveMessages"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamNetworkingFakeUDPPort_ReceiveMessages(ISteamNetworkingFakeUDPPort ptr, SteamNetworkingMessage_t **ppOutMessages, int nMaxMessages)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingFakeUDPPort_ReceiveMessages$descriptor() {
        return SteamAPI_ISteamNetworkingFakeUDPPort_ReceiveMessages.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamNetworkingFakeUDPPort_ReceiveMessages(ISteamNetworkingFakeUDPPort ptr, SteamNetworkingMessage_t **ppOutMessages, int nMaxMessages)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingFakeUDPPort_ReceiveMessages$handle() {
        return SteamAPI_ISteamNetworkingFakeUDPPort_ReceiveMessages.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int SteamAPI_ISteamNetworkingFakeUDPPort_ReceiveMessages(ISteamNetworkingFakeUDPPort ptr, SteamNetworkingMessage_t **ppOutMessages, int nMaxMessages)
     * }
     */
    public static int SteamAPI_ISteamNetworkingFakeUDPPort_ReceiveMessages(MemorySegment ptr, MemorySegment ppOutMessages, int nMaxMessages) {
        var mh$ = SteamAPI_ISteamNetworkingFakeUDPPort_ReceiveMessages.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingFakeUDPPort_ReceiveMessages", ptr, ppOutMessages, nMaxMessages);
            }
            return (int)mh$.invokeExact(ptr, ppOutMessages, nMaxMessages);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingFakeUDPPort_ScheduleCleanup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat.C_POINTER,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_ISteamNetworkingFakeUDPPort_ScheduleCleanup"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamNetworkingFakeUDPPort_ScheduleCleanup(ISteamNetworkingFakeUDPPort ptr, const SteamNetworkingIPAddr *remoteAddress)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingFakeUDPPort_ScheduleCleanup$descriptor() {
        return SteamAPI_ISteamNetworkingFakeUDPPort_ScheduleCleanup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamNetworkingFakeUDPPort_ScheduleCleanup(ISteamNetworkingFakeUDPPort ptr, const SteamNetworkingIPAddr *remoteAddress)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingFakeUDPPort_ScheduleCleanup$handle() {
        return SteamAPI_ISteamNetworkingFakeUDPPort_ScheduleCleanup.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamNetworkingFakeUDPPort_ScheduleCleanup(ISteamNetworkingFakeUDPPort ptr, const SteamNetworkingIPAddr *remoteAddress)
     * }
     */
    public static void SteamAPI_ISteamNetworkingFakeUDPPort_ScheduleCleanup(MemorySegment ptr, MemorySegment remoteAddress) {
        var mh$ = SteamAPI_ISteamNetworkingFakeUDPPort_ScheduleCleanup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingFakeUDPPort_ScheduleCleanup", ptr, remoteAddress);
            }
            mh$.invokeExact(ptr, remoteAddress);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_InitFlat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat.C_INT,
            SteamFlat.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat.findOrThrow("SteamAPI_InitFlat"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ESteamAPIInitResult SteamAPI_InitFlat(SteamErrMsg *pOutErrMsg)
     * }
     */
    public static FunctionDescriptor SteamAPI_InitFlat$descriptor() {
        return SteamAPI_InitFlat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ESteamAPIInitResult SteamAPI_InitFlat(SteamErrMsg *pOutErrMsg)
     * }
     */
    public static MethodHandle SteamAPI_InitFlat$handle() {
        return SteamAPI_InitFlat.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ESteamAPIInitResult SteamAPI_InitFlat(SteamErrMsg *pOutErrMsg)
     * }
     */
    public static int SteamAPI_InitFlat(MemorySegment pOutErrMsg) {
        var mh$ = SteamAPI_InitFlat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_InitFlat", pOutErrMsg);
            }
            return (int)mh$.invokeExact(pOutErrMsg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * void SteamAPI_Shutdown()
     * }
     */
    public static class SteamAPI_Shutdown {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(        );
        private static final MemorySegment ADDR = SteamFlat.findOrThrow("SteamAPI_Shutdown");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private SteamAPI_Shutdown(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * void SteamAPI_Shutdown()
         * }
         */
        public static SteamAPI_Shutdown makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new SteamAPI_Shutdown(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(Object... x0) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("SteamAPI_Shutdown", x0);
                }
                spreader.invokeExact(x0);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }
    private static final int _VCRUNTIME_DISABLED_WARNINGS = (int)4514L;
    /**
     * {@snippet lang=c :
     * #define _VCRUNTIME_DISABLED_WARNINGS 4514
     * }
     */
    public static int _VCRUNTIME_DISABLED_WARNINGS() {
        return _VCRUNTIME_DISABLED_WARNINGS;
    }
    private static final MemorySegment NULL = MemorySegment.ofAddress(0L);
    /**
     * {@snippet lang=c :
     * #define NULL (void*) 0
     * }
     */
    public static MemorySegment NULL() {
        return NULL;
    }
    private static final int INT8_MIN = (int)-128L;
    /**
     * {@snippet lang=c :
     * #define INT8_MIN -128
     * }
     */
    public static int INT8_MIN() {
        return INT8_MIN;
    }
    private static final int INT16_MIN = (int)-32768L;
    /**
     * {@snippet lang=c :
     * #define INT16_MIN -32768
     * }
     */
    public static int INT16_MIN() {
        return INT16_MIN;
    }
    private static final int INT32_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define INT32_MIN -2147483648
     * }
     */
    public static int INT32_MIN() {
        return INT32_MIN;
    }
    private static final long INT64_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INT64_MIN -9223372036854775808
     * }
     */
    public static long INT64_MIN() {
        return INT64_MIN;
    }
    private static final byte INT8_MAX = (byte)127L;
    /**
     * {@snippet lang=c :
     * #define INT8_MAX 127
     * }
     */
    public static byte INT8_MAX() {
        return INT8_MAX;
    }
    private static final short INT16_MAX = (short)32767L;
    /**
     * {@snippet lang=c :
     * #define INT16_MAX 32767
     * }
     */
    public static short INT16_MAX() {
        return INT16_MAX;
    }
    private static final int INT32_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define INT32_MAX 2147483647
     * }
     */
    public static int INT32_MAX() {
        return INT32_MAX;
    }
    private static final long INT64_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INT64_MAX 9223372036854775807
     * }
     */
    public static long INT64_MAX() {
        return INT64_MAX;
    }
    private static final byte UINT8_MAX = (byte)255L;
    /**
     * {@snippet lang=c :
     * #define UINT8_MAX 255
     * }
     */
    public static byte UINT8_MAX() {
        return UINT8_MAX;
    }
    private static final short UINT16_MAX = (short)65535L;
    /**
     * {@snippet lang=c :
     * #define UINT16_MAX 65535
     * }
     */
    public static short UINT16_MAX() {
        return UINT16_MAX;
    }
    private static final int UINT32_MAX = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define UINT32_MAX 4294967295
     * }
     */
    public static int UINT32_MAX() {
        return UINT32_MAX;
    }
    private static final long UINT64_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINT64_MAX -1
     * }
     */
    public static long UINT64_MAX() {
        return UINT64_MAX;
    }
}

