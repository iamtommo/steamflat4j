// Generated by jextract

package steamflat4j;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct gameserveritem_t {
 *     servernetadr_t m_NetAdr;
 *     int m_nPing;
 *     bool m_bHadSuccessfulResponse;
 *     bool m_bDoNotRefresh;
 *     char m_szGameDir[32];
 *     char m_szMap[32];
 *     char m_szGameDescription[64];
 *     uint32 m_nAppID;
 *     int m_nPlayers;
 *     int m_nMaxPlayers;
 *     int m_nBotPlayers;
 *     bool m_bPassword;
 *     bool m_bSecure;
 *     uint32 m_ulTimeLastPlayed;
 *     int m_nServerVersion;
 *     char m_szServerName[64];
 *     char m_szGameTags[128];
 *     CSteamID m_steamID;
 * }
 * }
 */
public class gameserveritem_t {

    gameserveritem_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        servernetadr_t.layout().withName("m_NetAdr"),
        SteamFlat.C_INT.withName("m_nPing"),
        SteamFlat.C_BOOL.withName("m_bHadSuccessfulResponse"),
        SteamFlat.C_BOOL.withName("m_bDoNotRefresh"),
        MemoryLayout.sequenceLayout(32, SteamFlat.C_CHAR).withName("m_szGameDir"),
        MemoryLayout.sequenceLayout(32, SteamFlat.C_CHAR).withName("m_szMap"),
        MemoryLayout.sequenceLayout(64, SteamFlat.C_CHAR).withName("m_szGameDescription"),
        MemoryLayout.paddingLayout(2),
        SteamFlat.C_INT.withName("m_nAppID"),
        SteamFlat.C_INT.withName("m_nPlayers"),
        SteamFlat.C_INT.withName("m_nMaxPlayers"),
        SteamFlat.C_INT.withName("m_nBotPlayers"),
        SteamFlat.C_BOOL.withName("m_bPassword"),
        SteamFlat.C_BOOL.withName("m_bSecure"),
        MemoryLayout.paddingLayout(2),
        SteamFlat.C_INT.withName("m_ulTimeLastPlayed"),
        SteamFlat.C_INT.withName("m_nServerVersion"),
        MemoryLayout.sequenceLayout(64, SteamFlat.C_CHAR).withName("m_szServerName"),
        MemoryLayout.sequenceLayout(128, SteamFlat.C_CHAR).withName("m_szGameTags"),
        MemoryLayout.paddingLayout(4),
        SteamFlat.C_LONG_LONG.withName("m_steamID")
    ).withName("gameserveritem_t");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout m_NetAdr$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("m_NetAdr"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * servernetadr_t m_NetAdr
     * }
     */
    public static final GroupLayout m_NetAdr$layout() {
        return m_NetAdr$LAYOUT;
    }

    private static final long m_NetAdr$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * servernetadr_t m_NetAdr
     * }
     */
    public static final long m_NetAdr$offset() {
        return m_NetAdr$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * servernetadr_t m_NetAdr
     * }
     */
    public static MemorySegment m_NetAdr(MemorySegment struct) {
        return struct.asSlice(m_NetAdr$OFFSET, m_NetAdr$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * servernetadr_t m_NetAdr
     * }
     */
    public static void m_NetAdr(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, m_NetAdr$OFFSET, m_NetAdr$LAYOUT.byteSize());
    }

    private static final OfInt m_nPing$LAYOUT = (OfInt)$LAYOUT.select(groupElement("m_nPing"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int m_nPing
     * }
     */
    public static final OfInt m_nPing$layout() {
        return m_nPing$LAYOUT;
    }

    private static final long m_nPing$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int m_nPing
     * }
     */
    public static final long m_nPing$offset() {
        return m_nPing$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int m_nPing
     * }
     */
    public static int m_nPing(MemorySegment struct) {
        return struct.get(m_nPing$LAYOUT, m_nPing$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int m_nPing
     * }
     */
    public static void m_nPing(MemorySegment struct, int fieldValue) {
        struct.set(m_nPing$LAYOUT, m_nPing$OFFSET, fieldValue);
    }

    private static final OfBoolean m_bHadSuccessfulResponse$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("m_bHadSuccessfulResponse"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool m_bHadSuccessfulResponse
     * }
     */
    public static final OfBoolean m_bHadSuccessfulResponse$layout() {
        return m_bHadSuccessfulResponse$LAYOUT;
    }

    private static final long m_bHadSuccessfulResponse$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool m_bHadSuccessfulResponse
     * }
     */
    public static final long m_bHadSuccessfulResponse$offset() {
        return m_bHadSuccessfulResponse$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool m_bHadSuccessfulResponse
     * }
     */
    public static boolean m_bHadSuccessfulResponse(MemorySegment struct) {
        return struct.get(m_bHadSuccessfulResponse$LAYOUT, m_bHadSuccessfulResponse$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool m_bHadSuccessfulResponse
     * }
     */
    public static void m_bHadSuccessfulResponse(MemorySegment struct, boolean fieldValue) {
        struct.set(m_bHadSuccessfulResponse$LAYOUT, m_bHadSuccessfulResponse$OFFSET, fieldValue);
    }

    private static final OfBoolean m_bDoNotRefresh$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("m_bDoNotRefresh"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool m_bDoNotRefresh
     * }
     */
    public static final OfBoolean m_bDoNotRefresh$layout() {
        return m_bDoNotRefresh$LAYOUT;
    }

    private static final long m_bDoNotRefresh$OFFSET = 13;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool m_bDoNotRefresh
     * }
     */
    public static final long m_bDoNotRefresh$offset() {
        return m_bDoNotRefresh$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool m_bDoNotRefresh
     * }
     */
    public static boolean m_bDoNotRefresh(MemorySegment struct) {
        return struct.get(m_bDoNotRefresh$LAYOUT, m_bDoNotRefresh$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool m_bDoNotRefresh
     * }
     */
    public static void m_bDoNotRefresh(MemorySegment struct, boolean fieldValue) {
        struct.set(m_bDoNotRefresh$LAYOUT, m_bDoNotRefresh$OFFSET, fieldValue);
    }

    private static final SequenceLayout m_szGameDir$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("m_szGameDir"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char m_szGameDir[32]
     * }
     */
    public static final SequenceLayout m_szGameDir$layout() {
        return m_szGameDir$LAYOUT;
    }

    private static final long m_szGameDir$OFFSET = 14;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char m_szGameDir[32]
     * }
     */
    public static final long m_szGameDir$offset() {
        return m_szGameDir$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char m_szGameDir[32]
     * }
     */
    public static MemorySegment m_szGameDir(MemorySegment struct) {
        return struct.asSlice(m_szGameDir$OFFSET, m_szGameDir$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char m_szGameDir[32]
     * }
     */
    public static void m_szGameDir(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, m_szGameDir$OFFSET, m_szGameDir$LAYOUT.byteSize());
    }

    private static long[] m_szGameDir$DIMS = { 32 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * char m_szGameDir[32]
     * }
     */
    public static long[] m_szGameDir$dimensions() {
        return m_szGameDir$DIMS;
    }
    private static final VarHandle m_szGameDir$ELEM_HANDLE = m_szGameDir$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * char m_szGameDir[32]
     * }
     */
    public static byte m_szGameDir(MemorySegment struct, long index0) {
        return (byte)m_szGameDir$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * char m_szGameDir[32]
     * }
     */
    public static void m_szGameDir(MemorySegment struct, long index0, byte fieldValue) {
        m_szGameDir$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout m_szMap$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("m_szMap"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char m_szMap[32]
     * }
     */
    public static final SequenceLayout m_szMap$layout() {
        return m_szMap$LAYOUT;
    }

    private static final long m_szMap$OFFSET = 46;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char m_szMap[32]
     * }
     */
    public static final long m_szMap$offset() {
        return m_szMap$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char m_szMap[32]
     * }
     */
    public static MemorySegment m_szMap(MemorySegment struct) {
        return struct.asSlice(m_szMap$OFFSET, m_szMap$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char m_szMap[32]
     * }
     */
    public static void m_szMap(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, m_szMap$OFFSET, m_szMap$LAYOUT.byteSize());
    }

    private static long[] m_szMap$DIMS = { 32 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * char m_szMap[32]
     * }
     */
    public static long[] m_szMap$dimensions() {
        return m_szMap$DIMS;
    }
    private static final VarHandle m_szMap$ELEM_HANDLE = m_szMap$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * char m_szMap[32]
     * }
     */
    public static byte m_szMap(MemorySegment struct, long index0) {
        return (byte)m_szMap$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * char m_szMap[32]
     * }
     */
    public static void m_szMap(MemorySegment struct, long index0, byte fieldValue) {
        m_szMap$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout m_szGameDescription$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("m_szGameDescription"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char m_szGameDescription[64]
     * }
     */
    public static final SequenceLayout m_szGameDescription$layout() {
        return m_szGameDescription$LAYOUT;
    }

    private static final long m_szGameDescription$OFFSET = 78;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char m_szGameDescription[64]
     * }
     */
    public static final long m_szGameDescription$offset() {
        return m_szGameDescription$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char m_szGameDescription[64]
     * }
     */
    public static MemorySegment m_szGameDescription(MemorySegment struct) {
        return struct.asSlice(m_szGameDescription$OFFSET, m_szGameDescription$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char m_szGameDescription[64]
     * }
     */
    public static void m_szGameDescription(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, m_szGameDescription$OFFSET, m_szGameDescription$LAYOUT.byteSize());
    }

    private static long[] m_szGameDescription$DIMS = { 64 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * char m_szGameDescription[64]
     * }
     */
    public static long[] m_szGameDescription$dimensions() {
        return m_szGameDescription$DIMS;
    }
    private static final VarHandle m_szGameDescription$ELEM_HANDLE = m_szGameDescription$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * char m_szGameDescription[64]
     * }
     */
    public static byte m_szGameDescription(MemorySegment struct, long index0) {
        return (byte)m_szGameDescription$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * char m_szGameDescription[64]
     * }
     */
    public static void m_szGameDescription(MemorySegment struct, long index0, byte fieldValue) {
        m_szGameDescription$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfInt m_nAppID$LAYOUT = (OfInt)$LAYOUT.select(groupElement("m_nAppID"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32 m_nAppID
     * }
     */
    public static final OfInt m_nAppID$layout() {
        return m_nAppID$LAYOUT;
    }

    private static final long m_nAppID$OFFSET = 144;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32 m_nAppID
     * }
     */
    public static final long m_nAppID$offset() {
        return m_nAppID$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32 m_nAppID
     * }
     */
    public static int m_nAppID(MemorySegment struct) {
        return struct.get(m_nAppID$LAYOUT, m_nAppID$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32 m_nAppID
     * }
     */
    public static void m_nAppID(MemorySegment struct, int fieldValue) {
        struct.set(m_nAppID$LAYOUT, m_nAppID$OFFSET, fieldValue);
    }

    private static final OfInt m_nPlayers$LAYOUT = (OfInt)$LAYOUT.select(groupElement("m_nPlayers"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int m_nPlayers
     * }
     */
    public static final OfInt m_nPlayers$layout() {
        return m_nPlayers$LAYOUT;
    }

    private static final long m_nPlayers$OFFSET = 148;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int m_nPlayers
     * }
     */
    public static final long m_nPlayers$offset() {
        return m_nPlayers$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int m_nPlayers
     * }
     */
    public static int m_nPlayers(MemorySegment struct) {
        return struct.get(m_nPlayers$LAYOUT, m_nPlayers$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int m_nPlayers
     * }
     */
    public static void m_nPlayers(MemorySegment struct, int fieldValue) {
        struct.set(m_nPlayers$LAYOUT, m_nPlayers$OFFSET, fieldValue);
    }

    private static final OfInt m_nMaxPlayers$LAYOUT = (OfInt)$LAYOUT.select(groupElement("m_nMaxPlayers"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int m_nMaxPlayers
     * }
     */
    public static final OfInt m_nMaxPlayers$layout() {
        return m_nMaxPlayers$LAYOUT;
    }

    private static final long m_nMaxPlayers$OFFSET = 152;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int m_nMaxPlayers
     * }
     */
    public static final long m_nMaxPlayers$offset() {
        return m_nMaxPlayers$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int m_nMaxPlayers
     * }
     */
    public static int m_nMaxPlayers(MemorySegment struct) {
        return struct.get(m_nMaxPlayers$LAYOUT, m_nMaxPlayers$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int m_nMaxPlayers
     * }
     */
    public static void m_nMaxPlayers(MemorySegment struct, int fieldValue) {
        struct.set(m_nMaxPlayers$LAYOUT, m_nMaxPlayers$OFFSET, fieldValue);
    }

    private static final OfInt m_nBotPlayers$LAYOUT = (OfInt)$LAYOUT.select(groupElement("m_nBotPlayers"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int m_nBotPlayers
     * }
     */
    public static final OfInt m_nBotPlayers$layout() {
        return m_nBotPlayers$LAYOUT;
    }

    private static final long m_nBotPlayers$OFFSET = 156;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int m_nBotPlayers
     * }
     */
    public static final long m_nBotPlayers$offset() {
        return m_nBotPlayers$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int m_nBotPlayers
     * }
     */
    public static int m_nBotPlayers(MemorySegment struct) {
        return struct.get(m_nBotPlayers$LAYOUT, m_nBotPlayers$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int m_nBotPlayers
     * }
     */
    public static void m_nBotPlayers(MemorySegment struct, int fieldValue) {
        struct.set(m_nBotPlayers$LAYOUT, m_nBotPlayers$OFFSET, fieldValue);
    }

    private static final OfBoolean m_bPassword$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("m_bPassword"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool m_bPassword
     * }
     */
    public static final OfBoolean m_bPassword$layout() {
        return m_bPassword$LAYOUT;
    }

    private static final long m_bPassword$OFFSET = 160;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool m_bPassword
     * }
     */
    public static final long m_bPassword$offset() {
        return m_bPassword$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool m_bPassword
     * }
     */
    public static boolean m_bPassword(MemorySegment struct) {
        return struct.get(m_bPassword$LAYOUT, m_bPassword$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool m_bPassword
     * }
     */
    public static void m_bPassword(MemorySegment struct, boolean fieldValue) {
        struct.set(m_bPassword$LAYOUT, m_bPassword$OFFSET, fieldValue);
    }

    private static final OfBoolean m_bSecure$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("m_bSecure"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool m_bSecure
     * }
     */
    public static final OfBoolean m_bSecure$layout() {
        return m_bSecure$LAYOUT;
    }

    private static final long m_bSecure$OFFSET = 161;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool m_bSecure
     * }
     */
    public static final long m_bSecure$offset() {
        return m_bSecure$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool m_bSecure
     * }
     */
    public static boolean m_bSecure(MemorySegment struct) {
        return struct.get(m_bSecure$LAYOUT, m_bSecure$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool m_bSecure
     * }
     */
    public static void m_bSecure(MemorySegment struct, boolean fieldValue) {
        struct.set(m_bSecure$LAYOUT, m_bSecure$OFFSET, fieldValue);
    }

    private static final OfInt m_ulTimeLastPlayed$LAYOUT = (OfInt)$LAYOUT.select(groupElement("m_ulTimeLastPlayed"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32 m_ulTimeLastPlayed
     * }
     */
    public static final OfInt m_ulTimeLastPlayed$layout() {
        return m_ulTimeLastPlayed$LAYOUT;
    }

    private static final long m_ulTimeLastPlayed$OFFSET = 164;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32 m_ulTimeLastPlayed
     * }
     */
    public static final long m_ulTimeLastPlayed$offset() {
        return m_ulTimeLastPlayed$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32 m_ulTimeLastPlayed
     * }
     */
    public static int m_ulTimeLastPlayed(MemorySegment struct) {
        return struct.get(m_ulTimeLastPlayed$LAYOUT, m_ulTimeLastPlayed$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32 m_ulTimeLastPlayed
     * }
     */
    public static void m_ulTimeLastPlayed(MemorySegment struct, int fieldValue) {
        struct.set(m_ulTimeLastPlayed$LAYOUT, m_ulTimeLastPlayed$OFFSET, fieldValue);
    }

    private static final OfInt m_nServerVersion$LAYOUT = (OfInt)$LAYOUT.select(groupElement("m_nServerVersion"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int m_nServerVersion
     * }
     */
    public static final OfInt m_nServerVersion$layout() {
        return m_nServerVersion$LAYOUT;
    }

    private static final long m_nServerVersion$OFFSET = 168;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int m_nServerVersion
     * }
     */
    public static final long m_nServerVersion$offset() {
        return m_nServerVersion$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int m_nServerVersion
     * }
     */
    public static int m_nServerVersion(MemorySegment struct) {
        return struct.get(m_nServerVersion$LAYOUT, m_nServerVersion$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int m_nServerVersion
     * }
     */
    public static void m_nServerVersion(MemorySegment struct, int fieldValue) {
        struct.set(m_nServerVersion$LAYOUT, m_nServerVersion$OFFSET, fieldValue);
    }

    private static final SequenceLayout m_szServerName$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("m_szServerName"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char m_szServerName[64]
     * }
     */
    public static final SequenceLayout m_szServerName$layout() {
        return m_szServerName$LAYOUT;
    }

    private static final long m_szServerName$OFFSET = 172;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char m_szServerName[64]
     * }
     */
    public static final long m_szServerName$offset() {
        return m_szServerName$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char m_szServerName[64]
     * }
     */
    public static MemorySegment m_szServerName(MemorySegment struct) {
        return struct.asSlice(m_szServerName$OFFSET, m_szServerName$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char m_szServerName[64]
     * }
     */
    public static void m_szServerName(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, m_szServerName$OFFSET, m_szServerName$LAYOUT.byteSize());
    }

    private static long[] m_szServerName$DIMS = { 64 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * char m_szServerName[64]
     * }
     */
    public static long[] m_szServerName$dimensions() {
        return m_szServerName$DIMS;
    }
    private static final VarHandle m_szServerName$ELEM_HANDLE = m_szServerName$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * char m_szServerName[64]
     * }
     */
    public static byte m_szServerName(MemorySegment struct, long index0) {
        return (byte)m_szServerName$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * char m_szServerName[64]
     * }
     */
    public static void m_szServerName(MemorySegment struct, long index0, byte fieldValue) {
        m_szServerName$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout m_szGameTags$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("m_szGameTags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char m_szGameTags[128]
     * }
     */
    public static final SequenceLayout m_szGameTags$layout() {
        return m_szGameTags$LAYOUT;
    }

    private static final long m_szGameTags$OFFSET = 236;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char m_szGameTags[128]
     * }
     */
    public static final long m_szGameTags$offset() {
        return m_szGameTags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char m_szGameTags[128]
     * }
     */
    public static MemorySegment m_szGameTags(MemorySegment struct) {
        return struct.asSlice(m_szGameTags$OFFSET, m_szGameTags$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char m_szGameTags[128]
     * }
     */
    public static void m_szGameTags(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, m_szGameTags$OFFSET, m_szGameTags$LAYOUT.byteSize());
    }

    private static long[] m_szGameTags$DIMS = { 128 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * char m_szGameTags[128]
     * }
     */
    public static long[] m_szGameTags$dimensions() {
        return m_szGameTags$DIMS;
    }
    private static final VarHandle m_szGameTags$ELEM_HANDLE = m_szGameTags$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * char m_szGameTags[128]
     * }
     */
    public static byte m_szGameTags(MemorySegment struct, long index0) {
        return (byte)m_szGameTags$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * char m_szGameTags[128]
     * }
     */
    public static void m_szGameTags(MemorySegment struct, long index0, byte fieldValue) {
        m_szGameTags$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfLong m_steamID$LAYOUT = (OfLong)$LAYOUT.select(groupElement("m_steamID"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * CSteamID m_steamID
     * }
     */
    public static final OfLong m_steamID$layout() {
        return m_steamID$LAYOUT;
    }

    private static final long m_steamID$OFFSET = 368;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * CSteamID m_steamID
     * }
     */
    public static final long m_steamID$offset() {
        return m_steamID$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * CSteamID m_steamID
     * }
     */
    public static long m_steamID(MemorySegment struct) {
        return struct.get(m_steamID$LAYOUT, m_steamID$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * CSteamID m_steamID
     * }
     */
    public static void m_steamID(MemorySegment struct, long fieldValue) {
        struct.set(m_steamID$LAYOUT, m_steamID$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

