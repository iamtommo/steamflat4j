// Generated by jextract

package steamflat4j;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct SteamDatagramGameCoordinatorServerLogin {
 *     SteamNetworkingIdentity m_identity;
 *     SteamDatagramHostedAddress m_routing;
 *     AppId_t m_nAppID;
 *     RTime32 m_rtime;
 *     int m_cbAppData;
 *     char m_appData[2048];
 * }
 * }
 */
public class SteamDatagramGameCoordinatorServerLogin {

    SteamDatagramGameCoordinatorServerLogin() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        SteamNetworkingIdentity.layout().withName("m_identity"),
        SteamDatagramHostedAddress.layout().withName("m_routing"),
        SteamFlat.C_INT.withName("m_nAppID"),
        SteamFlat.C_INT.withName("m_rtime"),
        SteamFlat.C_INT.withName("m_cbAppData"),
        MemoryLayout.sequenceLayout(2048, SteamFlat.C_CHAR).withName("m_appData")
    ).withName("SteamDatagramGameCoordinatorServerLogin");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout m_identity$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("m_identity"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * SteamNetworkingIdentity m_identity
     * }
     */
    public static final GroupLayout m_identity$layout() {
        return m_identity$LAYOUT;
    }

    private static final long m_identity$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * SteamNetworkingIdentity m_identity
     * }
     */
    public static final long m_identity$offset() {
        return m_identity$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * SteamNetworkingIdentity m_identity
     * }
     */
    public static MemorySegment m_identity(MemorySegment struct) {
        return struct.asSlice(m_identity$OFFSET, m_identity$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * SteamNetworkingIdentity m_identity
     * }
     */
    public static void m_identity(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, m_identity$OFFSET, m_identity$LAYOUT.byteSize());
    }

    private static final GroupLayout m_routing$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("m_routing"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * SteamDatagramHostedAddress m_routing
     * }
     */
    public static final GroupLayout m_routing$layout() {
        return m_routing$LAYOUT;
    }

    private static final long m_routing$OFFSET = 136;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * SteamDatagramHostedAddress m_routing
     * }
     */
    public static final long m_routing$offset() {
        return m_routing$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * SteamDatagramHostedAddress m_routing
     * }
     */
    public static MemorySegment m_routing(MemorySegment struct) {
        return struct.asSlice(m_routing$OFFSET, m_routing$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * SteamDatagramHostedAddress m_routing
     * }
     */
    public static void m_routing(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, m_routing$OFFSET, m_routing$LAYOUT.byteSize());
    }

    private static final OfInt m_nAppID$LAYOUT = (OfInt)$LAYOUT.select(groupElement("m_nAppID"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * AppId_t m_nAppID
     * }
     */
    public static final OfInt m_nAppID$layout() {
        return m_nAppID$LAYOUT;
    }

    private static final long m_nAppID$OFFSET = 268;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * AppId_t m_nAppID
     * }
     */
    public static final long m_nAppID$offset() {
        return m_nAppID$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * AppId_t m_nAppID
     * }
     */
    public static int m_nAppID(MemorySegment struct) {
        return struct.get(m_nAppID$LAYOUT, m_nAppID$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * AppId_t m_nAppID
     * }
     */
    public static void m_nAppID(MemorySegment struct, int fieldValue) {
        struct.set(m_nAppID$LAYOUT, m_nAppID$OFFSET, fieldValue);
    }

    private static final OfInt m_rtime$LAYOUT = (OfInt)$LAYOUT.select(groupElement("m_rtime"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * RTime32 m_rtime
     * }
     */
    public static final OfInt m_rtime$layout() {
        return m_rtime$LAYOUT;
    }

    private static final long m_rtime$OFFSET = 272;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * RTime32 m_rtime
     * }
     */
    public static final long m_rtime$offset() {
        return m_rtime$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * RTime32 m_rtime
     * }
     */
    public static int m_rtime(MemorySegment struct) {
        return struct.get(m_rtime$LAYOUT, m_rtime$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * RTime32 m_rtime
     * }
     */
    public static void m_rtime(MemorySegment struct, int fieldValue) {
        struct.set(m_rtime$LAYOUT, m_rtime$OFFSET, fieldValue);
    }

    private static final OfInt m_cbAppData$LAYOUT = (OfInt)$LAYOUT.select(groupElement("m_cbAppData"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int m_cbAppData
     * }
     */
    public static final OfInt m_cbAppData$layout() {
        return m_cbAppData$LAYOUT;
    }

    private static final long m_cbAppData$OFFSET = 276;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int m_cbAppData
     * }
     */
    public static final long m_cbAppData$offset() {
        return m_cbAppData$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int m_cbAppData
     * }
     */
    public static int m_cbAppData(MemorySegment struct) {
        return struct.get(m_cbAppData$LAYOUT, m_cbAppData$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int m_cbAppData
     * }
     */
    public static void m_cbAppData(MemorySegment struct, int fieldValue) {
        struct.set(m_cbAppData$LAYOUT, m_cbAppData$OFFSET, fieldValue);
    }

    private static final SequenceLayout m_appData$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("m_appData"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char m_appData[2048]
     * }
     */
    public static final SequenceLayout m_appData$layout() {
        return m_appData$LAYOUT;
    }

    private static final long m_appData$OFFSET = 280;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char m_appData[2048]
     * }
     */
    public static final long m_appData$offset() {
        return m_appData$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char m_appData[2048]
     * }
     */
    public static MemorySegment m_appData(MemorySegment struct) {
        return struct.asSlice(m_appData$OFFSET, m_appData$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char m_appData[2048]
     * }
     */
    public static void m_appData(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, m_appData$OFFSET, m_appData$LAYOUT.byteSize());
    }

    private static long[] m_appData$DIMS = { 2048 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * char m_appData[2048]
     * }
     */
    public static long[] m_appData$dimensions() {
        return m_appData$DIMS;
    }
    private static final VarHandle m_appData$ELEM_HANDLE = m_appData$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * char m_appData[2048]
     * }
     */
    public static byte m_appData(MemorySegment struct, long index0) {
        return (byte)m_appData$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * char m_appData[2048]
     * }
     */
    public static void m_appData(MemorySegment struct, long index0, byte fieldValue) {
        m_appData$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

