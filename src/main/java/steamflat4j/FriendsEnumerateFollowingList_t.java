// Generated by jextract

package steamflat4j;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct FriendsEnumerateFollowingList_t {
 *     EResult m_eResult;
 *     CSteamID m_rgSteamID[50];
 *     int32 m_nResultsReturned;
 *     int32 m_nTotalResultCount;
 * }
 * }
 */
public class FriendsEnumerateFollowingList_t {

    FriendsEnumerateFollowingList_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        SteamFlat.C_INT.withName("m_eResult"),
        MemoryLayout.paddingLayout(4),
        MemoryLayout.sequenceLayout(50, SteamFlat.C_LONG_LONG).withName("m_rgSteamID"),
        SteamFlat.C_INT.withName("m_nResultsReturned"),
        SteamFlat.C_INT.withName("m_nTotalResultCount")
    ).withName("FriendsEnumerateFollowingList_t");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt m_eResult$LAYOUT = (OfInt)$LAYOUT.select(groupElement("m_eResult"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * EResult m_eResult
     * }
     */
    public static final OfInt m_eResult$layout() {
        return m_eResult$LAYOUT;
    }

    private static final long m_eResult$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * EResult m_eResult
     * }
     */
    public static final long m_eResult$offset() {
        return m_eResult$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * EResult m_eResult
     * }
     */
    public static int m_eResult(MemorySegment struct) {
        return struct.get(m_eResult$LAYOUT, m_eResult$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * EResult m_eResult
     * }
     */
    public static void m_eResult(MemorySegment struct, int fieldValue) {
        struct.set(m_eResult$LAYOUT, m_eResult$OFFSET, fieldValue);
    }

    private static final SequenceLayout m_rgSteamID$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("m_rgSteamID"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * CSteamID m_rgSteamID[50]
     * }
     */
    public static final SequenceLayout m_rgSteamID$layout() {
        return m_rgSteamID$LAYOUT;
    }

    private static final long m_rgSteamID$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * CSteamID m_rgSteamID[50]
     * }
     */
    public static final long m_rgSteamID$offset() {
        return m_rgSteamID$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * CSteamID m_rgSteamID[50]
     * }
     */
    public static MemorySegment m_rgSteamID(MemorySegment struct) {
        return struct.asSlice(m_rgSteamID$OFFSET, m_rgSteamID$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * CSteamID m_rgSteamID[50]
     * }
     */
    public static void m_rgSteamID(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, m_rgSteamID$OFFSET, m_rgSteamID$LAYOUT.byteSize());
    }

    private static long[] m_rgSteamID$DIMS = { 50 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * CSteamID m_rgSteamID[50]
     * }
     */
    public static long[] m_rgSteamID$dimensions() {
        return m_rgSteamID$DIMS;
    }
    private static final VarHandle m_rgSteamID$ELEM_HANDLE = m_rgSteamID$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * CSteamID m_rgSteamID[50]
     * }
     */
    public static long m_rgSteamID(MemorySegment struct, long index0) {
        return (long)m_rgSteamID$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * CSteamID m_rgSteamID[50]
     * }
     */
    public static void m_rgSteamID(MemorySegment struct, long index0, long fieldValue) {
        m_rgSteamID$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfInt m_nResultsReturned$LAYOUT = (OfInt)$LAYOUT.select(groupElement("m_nResultsReturned"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32 m_nResultsReturned
     * }
     */
    public static final OfInt m_nResultsReturned$layout() {
        return m_nResultsReturned$LAYOUT;
    }

    private static final long m_nResultsReturned$OFFSET = 408;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32 m_nResultsReturned
     * }
     */
    public static final long m_nResultsReturned$offset() {
        return m_nResultsReturned$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32 m_nResultsReturned
     * }
     */
    public static int m_nResultsReturned(MemorySegment struct) {
        return struct.get(m_nResultsReturned$LAYOUT, m_nResultsReturned$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32 m_nResultsReturned
     * }
     */
    public static void m_nResultsReturned(MemorySegment struct, int fieldValue) {
        struct.set(m_nResultsReturned$LAYOUT, m_nResultsReturned$OFFSET, fieldValue);
    }

    private static final OfInt m_nTotalResultCount$LAYOUT = (OfInt)$LAYOUT.select(groupElement("m_nTotalResultCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32 m_nTotalResultCount
     * }
     */
    public static final OfInt m_nTotalResultCount$layout() {
        return m_nTotalResultCount$LAYOUT;
    }

    private static final long m_nTotalResultCount$OFFSET = 412;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32 m_nTotalResultCount
     * }
     */
    public static final long m_nTotalResultCount$offset() {
        return m_nTotalResultCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32 m_nTotalResultCount
     * }
     */
    public static int m_nTotalResultCount(MemorySegment struct) {
        return struct.get(m_nTotalResultCount$LAYOUT, m_nTotalResultCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32 m_nTotalResultCount
     * }
     */
    public static void m_nTotalResultCount(MemorySegment struct, int fieldValue) {
        struct.set(m_nTotalResultCount$LAYOUT, m_nTotalResultCount$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

