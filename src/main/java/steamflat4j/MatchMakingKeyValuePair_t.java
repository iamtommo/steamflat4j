// Generated by jextract

package steamflat4j;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct MatchMakingKeyValuePair_t {
 *     char m_szKey[256];
 *     char m_szValue[256];
 * }
 * }
 */
public class MatchMakingKeyValuePair_t {

    MatchMakingKeyValuePair_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.sequenceLayout(256, SteamFlat.C_CHAR).withName("m_szKey"),
        MemoryLayout.sequenceLayout(256, SteamFlat.C_CHAR).withName("m_szValue")
    ).withName("MatchMakingKeyValuePair_t");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final SequenceLayout m_szKey$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("m_szKey"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char m_szKey[256]
     * }
     */
    public static final SequenceLayout m_szKey$layout() {
        return m_szKey$LAYOUT;
    }

    private static final long m_szKey$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char m_szKey[256]
     * }
     */
    public static final long m_szKey$offset() {
        return m_szKey$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char m_szKey[256]
     * }
     */
    public static MemorySegment m_szKey(MemorySegment struct) {
        return struct.asSlice(m_szKey$OFFSET, m_szKey$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char m_szKey[256]
     * }
     */
    public static void m_szKey(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, m_szKey$OFFSET, m_szKey$LAYOUT.byteSize());
    }

    private static long[] m_szKey$DIMS = { 256 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * char m_szKey[256]
     * }
     */
    public static long[] m_szKey$dimensions() {
        return m_szKey$DIMS;
    }
    private static final VarHandle m_szKey$ELEM_HANDLE = m_szKey$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * char m_szKey[256]
     * }
     */
    public static byte m_szKey(MemorySegment struct, long index0) {
        return (byte)m_szKey$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * char m_szKey[256]
     * }
     */
    public static void m_szKey(MemorySegment struct, long index0, byte fieldValue) {
        m_szKey$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout m_szValue$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("m_szValue"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char m_szValue[256]
     * }
     */
    public static final SequenceLayout m_szValue$layout() {
        return m_szValue$LAYOUT;
    }

    private static final long m_szValue$OFFSET = 256;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char m_szValue[256]
     * }
     */
    public static final long m_szValue$offset() {
        return m_szValue$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char m_szValue[256]
     * }
     */
    public static MemorySegment m_szValue(MemorySegment struct) {
        return struct.asSlice(m_szValue$OFFSET, m_szValue$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char m_szValue[256]
     * }
     */
    public static void m_szValue(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, m_szValue$OFFSET, m_szValue$LAYOUT.byteSize());
    }

    private static long[] m_szValue$DIMS = { 256 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * char m_szValue[256]
     * }
     */
    public static long[] m_szValue$dimensions() {
        return m_szValue$DIMS;
    }
    private static final VarHandle m_szValue$ELEM_HANDLE = m_szValue$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * char m_szValue[256]
     * }
     */
    public static byte m_szValue(MemorySegment struct, long index0) {
        return (byte)m_szValue$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * char m_szValue[256]
     * }
     */
    public static void m_szValue(MemorySegment struct, long index0, byte fieldValue) {
        m_szValue$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

