// Generated by jextract

package steamflat4j;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct EquippedProfileItems_t {
 *     EResult m_eResult;
 *     CSteamID m_steamID;
 *     bool m_bHasAnimatedAvatar;
 *     bool m_bHasAvatarFrame;
 *     bool m_bHasProfileModifier;
 *     bool m_bHasProfileBackground;
 *     bool m_bHasMiniProfileBackground;
 * }
 * }
 */
public class EquippedProfileItems_t {

    EquippedProfileItems_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        SteamFlat.C_INT.withName("m_eResult"),
        MemoryLayout.paddingLayout(4),
        SteamFlat.C_LONG_LONG.withName("m_steamID"),
        SteamFlat.C_BOOL.withName("m_bHasAnimatedAvatar"),
        SteamFlat.C_BOOL.withName("m_bHasAvatarFrame"),
        SteamFlat.C_BOOL.withName("m_bHasProfileModifier"),
        SteamFlat.C_BOOL.withName("m_bHasProfileBackground"),
        SteamFlat.C_BOOL.withName("m_bHasMiniProfileBackground"),
        MemoryLayout.paddingLayout(3)
    ).withName("EquippedProfileItems_t");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt m_eResult$LAYOUT = (OfInt)$LAYOUT.select(groupElement("m_eResult"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * EResult m_eResult
     * }
     */
    public static final OfInt m_eResult$layout() {
        return m_eResult$LAYOUT;
    }

    private static final long m_eResult$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * EResult m_eResult
     * }
     */
    public static final long m_eResult$offset() {
        return m_eResult$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * EResult m_eResult
     * }
     */
    public static int m_eResult(MemorySegment struct) {
        return struct.get(m_eResult$LAYOUT, m_eResult$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * EResult m_eResult
     * }
     */
    public static void m_eResult(MemorySegment struct, int fieldValue) {
        struct.set(m_eResult$LAYOUT, m_eResult$OFFSET, fieldValue);
    }

    private static final OfLong m_steamID$LAYOUT = (OfLong)$LAYOUT.select(groupElement("m_steamID"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * CSteamID m_steamID
     * }
     */
    public static final OfLong m_steamID$layout() {
        return m_steamID$LAYOUT;
    }

    private static final long m_steamID$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * CSteamID m_steamID
     * }
     */
    public static final long m_steamID$offset() {
        return m_steamID$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * CSteamID m_steamID
     * }
     */
    public static long m_steamID(MemorySegment struct) {
        return struct.get(m_steamID$LAYOUT, m_steamID$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * CSteamID m_steamID
     * }
     */
    public static void m_steamID(MemorySegment struct, long fieldValue) {
        struct.set(m_steamID$LAYOUT, m_steamID$OFFSET, fieldValue);
    }

    private static final OfBoolean m_bHasAnimatedAvatar$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("m_bHasAnimatedAvatar"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool m_bHasAnimatedAvatar
     * }
     */
    public static final OfBoolean m_bHasAnimatedAvatar$layout() {
        return m_bHasAnimatedAvatar$LAYOUT;
    }

    private static final long m_bHasAnimatedAvatar$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool m_bHasAnimatedAvatar
     * }
     */
    public static final long m_bHasAnimatedAvatar$offset() {
        return m_bHasAnimatedAvatar$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool m_bHasAnimatedAvatar
     * }
     */
    public static boolean m_bHasAnimatedAvatar(MemorySegment struct) {
        return struct.get(m_bHasAnimatedAvatar$LAYOUT, m_bHasAnimatedAvatar$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool m_bHasAnimatedAvatar
     * }
     */
    public static void m_bHasAnimatedAvatar(MemorySegment struct, boolean fieldValue) {
        struct.set(m_bHasAnimatedAvatar$LAYOUT, m_bHasAnimatedAvatar$OFFSET, fieldValue);
    }

    private static final OfBoolean m_bHasAvatarFrame$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("m_bHasAvatarFrame"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool m_bHasAvatarFrame
     * }
     */
    public static final OfBoolean m_bHasAvatarFrame$layout() {
        return m_bHasAvatarFrame$LAYOUT;
    }

    private static final long m_bHasAvatarFrame$OFFSET = 17;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool m_bHasAvatarFrame
     * }
     */
    public static final long m_bHasAvatarFrame$offset() {
        return m_bHasAvatarFrame$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool m_bHasAvatarFrame
     * }
     */
    public static boolean m_bHasAvatarFrame(MemorySegment struct) {
        return struct.get(m_bHasAvatarFrame$LAYOUT, m_bHasAvatarFrame$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool m_bHasAvatarFrame
     * }
     */
    public static void m_bHasAvatarFrame(MemorySegment struct, boolean fieldValue) {
        struct.set(m_bHasAvatarFrame$LAYOUT, m_bHasAvatarFrame$OFFSET, fieldValue);
    }

    private static final OfBoolean m_bHasProfileModifier$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("m_bHasProfileModifier"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool m_bHasProfileModifier
     * }
     */
    public static final OfBoolean m_bHasProfileModifier$layout() {
        return m_bHasProfileModifier$LAYOUT;
    }

    private static final long m_bHasProfileModifier$OFFSET = 18;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool m_bHasProfileModifier
     * }
     */
    public static final long m_bHasProfileModifier$offset() {
        return m_bHasProfileModifier$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool m_bHasProfileModifier
     * }
     */
    public static boolean m_bHasProfileModifier(MemorySegment struct) {
        return struct.get(m_bHasProfileModifier$LAYOUT, m_bHasProfileModifier$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool m_bHasProfileModifier
     * }
     */
    public static void m_bHasProfileModifier(MemorySegment struct, boolean fieldValue) {
        struct.set(m_bHasProfileModifier$LAYOUT, m_bHasProfileModifier$OFFSET, fieldValue);
    }

    private static final OfBoolean m_bHasProfileBackground$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("m_bHasProfileBackground"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool m_bHasProfileBackground
     * }
     */
    public static final OfBoolean m_bHasProfileBackground$layout() {
        return m_bHasProfileBackground$LAYOUT;
    }

    private static final long m_bHasProfileBackground$OFFSET = 19;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool m_bHasProfileBackground
     * }
     */
    public static final long m_bHasProfileBackground$offset() {
        return m_bHasProfileBackground$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool m_bHasProfileBackground
     * }
     */
    public static boolean m_bHasProfileBackground(MemorySegment struct) {
        return struct.get(m_bHasProfileBackground$LAYOUT, m_bHasProfileBackground$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool m_bHasProfileBackground
     * }
     */
    public static void m_bHasProfileBackground(MemorySegment struct, boolean fieldValue) {
        struct.set(m_bHasProfileBackground$LAYOUT, m_bHasProfileBackground$OFFSET, fieldValue);
    }

    private static final OfBoolean m_bHasMiniProfileBackground$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("m_bHasMiniProfileBackground"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool m_bHasMiniProfileBackground
     * }
     */
    public static final OfBoolean m_bHasMiniProfileBackground$layout() {
        return m_bHasMiniProfileBackground$LAYOUT;
    }

    private static final long m_bHasMiniProfileBackground$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool m_bHasMiniProfileBackground
     * }
     */
    public static final long m_bHasMiniProfileBackground$offset() {
        return m_bHasMiniProfileBackground$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool m_bHasMiniProfileBackground
     * }
     */
    public static boolean m_bHasMiniProfileBackground(MemorySegment struct) {
        return struct.get(m_bHasMiniProfileBackground$LAYOUT, m_bHasMiniProfileBackground$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool m_bHasMiniProfileBackground
     * }
     */
    public static void m_bHasMiniProfileBackground(MemorySegment struct, boolean fieldValue) {
        struct.set(m_bHasMiniProfileBackground$LAYOUT, m_bHasMiniProfileBackground$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

