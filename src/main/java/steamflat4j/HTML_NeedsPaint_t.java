// Generated by jextract

package steamflat4j;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct HTML_NeedsPaint_t {
 *     HHTMLBrowser unBrowserHandle;
 *     const char *pBGRA;
 *     uint32 unWide;
 *     uint32 unTall;
 *     uint32 unUpdateX;
 *     uint32 unUpdateY;
 *     uint32 unUpdateWide;
 *     uint32 unUpdateTall;
 *     uint32 unScrollX;
 *     uint32 unScrollY;
 *     float flPageScale;
 *     uint32 unPageSerial;
 * }
 * }
 */
public class HTML_NeedsPaint_t {

    HTML_NeedsPaint_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        SteamFlat.C_INT.withName("unBrowserHandle"),
        MemoryLayout.paddingLayout(4),
        SteamFlat.C_POINTER.withName("pBGRA"),
        SteamFlat.C_INT.withName("unWide"),
        SteamFlat.C_INT.withName("unTall"),
        SteamFlat.C_INT.withName("unUpdateX"),
        SteamFlat.C_INT.withName("unUpdateY"),
        SteamFlat.C_INT.withName("unUpdateWide"),
        SteamFlat.C_INT.withName("unUpdateTall"),
        SteamFlat.C_INT.withName("unScrollX"),
        SteamFlat.C_INT.withName("unScrollY"),
        SteamFlat.C_FLOAT.withName("flPageScale"),
        SteamFlat.C_INT.withName("unPageSerial")
    ).withName("HTML_NeedsPaint_t");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt unBrowserHandle$LAYOUT = (OfInt)$LAYOUT.select(groupElement("unBrowserHandle"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HHTMLBrowser unBrowserHandle
     * }
     */
    public static final OfInt unBrowserHandle$layout() {
        return unBrowserHandle$LAYOUT;
    }

    private static final long unBrowserHandle$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HHTMLBrowser unBrowserHandle
     * }
     */
    public static final long unBrowserHandle$offset() {
        return unBrowserHandle$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HHTMLBrowser unBrowserHandle
     * }
     */
    public static int unBrowserHandle(MemorySegment struct) {
        return struct.get(unBrowserHandle$LAYOUT, unBrowserHandle$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HHTMLBrowser unBrowserHandle
     * }
     */
    public static void unBrowserHandle(MemorySegment struct, int fieldValue) {
        struct.set(unBrowserHandle$LAYOUT, unBrowserHandle$OFFSET, fieldValue);
    }

    private static final AddressLayout pBGRA$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pBGRA"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *pBGRA
     * }
     */
    public static final AddressLayout pBGRA$layout() {
        return pBGRA$LAYOUT;
    }

    private static final long pBGRA$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *pBGRA
     * }
     */
    public static final long pBGRA$offset() {
        return pBGRA$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *pBGRA
     * }
     */
    public static MemorySegment pBGRA(MemorySegment struct) {
        return struct.get(pBGRA$LAYOUT, pBGRA$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *pBGRA
     * }
     */
    public static void pBGRA(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pBGRA$LAYOUT, pBGRA$OFFSET, fieldValue);
    }

    private static final OfInt unWide$LAYOUT = (OfInt)$LAYOUT.select(groupElement("unWide"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32 unWide
     * }
     */
    public static final OfInt unWide$layout() {
        return unWide$LAYOUT;
    }

    private static final long unWide$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32 unWide
     * }
     */
    public static final long unWide$offset() {
        return unWide$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32 unWide
     * }
     */
    public static int unWide(MemorySegment struct) {
        return struct.get(unWide$LAYOUT, unWide$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32 unWide
     * }
     */
    public static void unWide(MemorySegment struct, int fieldValue) {
        struct.set(unWide$LAYOUT, unWide$OFFSET, fieldValue);
    }

    private static final OfInt unTall$LAYOUT = (OfInt)$LAYOUT.select(groupElement("unTall"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32 unTall
     * }
     */
    public static final OfInt unTall$layout() {
        return unTall$LAYOUT;
    }

    private static final long unTall$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32 unTall
     * }
     */
    public static final long unTall$offset() {
        return unTall$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32 unTall
     * }
     */
    public static int unTall(MemorySegment struct) {
        return struct.get(unTall$LAYOUT, unTall$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32 unTall
     * }
     */
    public static void unTall(MemorySegment struct, int fieldValue) {
        struct.set(unTall$LAYOUT, unTall$OFFSET, fieldValue);
    }

    private static final OfInt unUpdateX$LAYOUT = (OfInt)$LAYOUT.select(groupElement("unUpdateX"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32 unUpdateX
     * }
     */
    public static final OfInt unUpdateX$layout() {
        return unUpdateX$LAYOUT;
    }

    private static final long unUpdateX$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32 unUpdateX
     * }
     */
    public static final long unUpdateX$offset() {
        return unUpdateX$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32 unUpdateX
     * }
     */
    public static int unUpdateX(MemorySegment struct) {
        return struct.get(unUpdateX$LAYOUT, unUpdateX$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32 unUpdateX
     * }
     */
    public static void unUpdateX(MemorySegment struct, int fieldValue) {
        struct.set(unUpdateX$LAYOUT, unUpdateX$OFFSET, fieldValue);
    }

    private static final OfInt unUpdateY$LAYOUT = (OfInt)$LAYOUT.select(groupElement("unUpdateY"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32 unUpdateY
     * }
     */
    public static final OfInt unUpdateY$layout() {
        return unUpdateY$LAYOUT;
    }

    private static final long unUpdateY$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32 unUpdateY
     * }
     */
    public static final long unUpdateY$offset() {
        return unUpdateY$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32 unUpdateY
     * }
     */
    public static int unUpdateY(MemorySegment struct) {
        return struct.get(unUpdateY$LAYOUT, unUpdateY$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32 unUpdateY
     * }
     */
    public static void unUpdateY(MemorySegment struct, int fieldValue) {
        struct.set(unUpdateY$LAYOUT, unUpdateY$OFFSET, fieldValue);
    }

    private static final OfInt unUpdateWide$LAYOUT = (OfInt)$LAYOUT.select(groupElement("unUpdateWide"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32 unUpdateWide
     * }
     */
    public static final OfInt unUpdateWide$layout() {
        return unUpdateWide$LAYOUT;
    }

    private static final long unUpdateWide$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32 unUpdateWide
     * }
     */
    public static final long unUpdateWide$offset() {
        return unUpdateWide$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32 unUpdateWide
     * }
     */
    public static int unUpdateWide(MemorySegment struct) {
        return struct.get(unUpdateWide$LAYOUT, unUpdateWide$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32 unUpdateWide
     * }
     */
    public static void unUpdateWide(MemorySegment struct, int fieldValue) {
        struct.set(unUpdateWide$LAYOUT, unUpdateWide$OFFSET, fieldValue);
    }

    private static final OfInt unUpdateTall$LAYOUT = (OfInt)$LAYOUT.select(groupElement("unUpdateTall"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32 unUpdateTall
     * }
     */
    public static final OfInt unUpdateTall$layout() {
        return unUpdateTall$LAYOUT;
    }

    private static final long unUpdateTall$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32 unUpdateTall
     * }
     */
    public static final long unUpdateTall$offset() {
        return unUpdateTall$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32 unUpdateTall
     * }
     */
    public static int unUpdateTall(MemorySegment struct) {
        return struct.get(unUpdateTall$LAYOUT, unUpdateTall$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32 unUpdateTall
     * }
     */
    public static void unUpdateTall(MemorySegment struct, int fieldValue) {
        struct.set(unUpdateTall$LAYOUT, unUpdateTall$OFFSET, fieldValue);
    }

    private static final OfInt unScrollX$LAYOUT = (OfInt)$LAYOUT.select(groupElement("unScrollX"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32 unScrollX
     * }
     */
    public static final OfInt unScrollX$layout() {
        return unScrollX$LAYOUT;
    }

    private static final long unScrollX$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32 unScrollX
     * }
     */
    public static final long unScrollX$offset() {
        return unScrollX$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32 unScrollX
     * }
     */
    public static int unScrollX(MemorySegment struct) {
        return struct.get(unScrollX$LAYOUT, unScrollX$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32 unScrollX
     * }
     */
    public static void unScrollX(MemorySegment struct, int fieldValue) {
        struct.set(unScrollX$LAYOUT, unScrollX$OFFSET, fieldValue);
    }

    private static final OfInt unScrollY$LAYOUT = (OfInt)$LAYOUT.select(groupElement("unScrollY"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32 unScrollY
     * }
     */
    public static final OfInt unScrollY$layout() {
        return unScrollY$LAYOUT;
    }

    private static final long unScrollY$OFFSET = 44;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32 unScrollY
     * }
     */
    public static final long unScrollY$offset() {
        return unScrollY$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32 unScrollY
     * }
     */
    public static int unScrollY(MemorySegment struct) {
        return struct.get(unScrollY$LAYOUT, unScrollY$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32 unScrollY
     * }
     */
    public static void unScrollY(MemorySegment struct, int fieldValue) {
        struct.set(unScrollY$LAYOUT, unScrollY$OFFSET, fieldValue);
    }

    private static final OfFloat flPageScale$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("flPageScale"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float flPageScale
     * }
     */
    public static final OfFloat flPageScale$layout() {
        return flPageScale$LAYOUT;
    }

    private static final long flPageScale$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float flPageScale
     * }
     */
    public static final long flPageScale$offset() {
        return flPageScale$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float flPageScale
     * }
     */
    public static float flPageScale(MemorySegment struct) {
        return struct.get(flPageScale$LAYOUT, flPageScale$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float flPageScale
     * }
     */
    public static void flPageScale(MemorySegment struct, float fieldValue) {
        struct.set(flPageScale$LAYOUT, flPageScale$OFFSET, fieldValue);
    }

    private static final OfInt unPageSerial$LAYOUT = (OfInt)$LAYOUT.select(groupElement("unPageSerial"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32 unPageSerial
     * }
     */
    public static final OfInt unPageSerial$layout() {
        return unPageSerial$LAYOUT;
    }

    private static final long unPageSerial$OFFSET = 52;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32 unPageSerial
     * }
     */
    public static final long unPageSerial$offset() {
        return unPageSerial$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32 unPageSerial
     * }
     */
    public static int unPageSerial(MemorySegment struct) {
        return struct.get(unPageSerial$LAYOUT, unPageSerial$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32 unPageSerial
     * }
     */
    public static void unPageSerial(MemorySegment struct, int fieldValue) {
        struct.set(unPageSerial$LAYOUT, unPageSerial$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

