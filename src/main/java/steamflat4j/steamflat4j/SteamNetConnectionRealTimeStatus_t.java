// Generated by jextract

package steamflat4j;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct SteamNetConnectionRealTimeStatus_t {
 *     ESteamNetworkingConnectionState m_eState;
 *     int m_nPing;
 *     float m_flConnectionQualityLocal;
 *     float m_flConnectionQualityRemote;
 *     float m_flOutPacketsPerSec;
 *     float m_flOutBytesPerSec;
 *     float m_flInPacketsPerSec;
 *     float m_flInBytesPerSec;
 *     int m_nSendRateBytesPerSecond;
 *     int m_cbPendingUnreliable;
 *     int m_cbPendingReliable;
 *     int m_cbSentUnackedReliable;
 *     SteamNetworkingMicroseconds m_usecQueueTime;
 *     uint32 reserved[16];
 * }
 * }
 */
public class SteamNetConnectionRealTimeStatus_t {

    SteamNetConnectionRealTimeStatus_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        SteamFlat4j.C_INT.withName("m_eState"),
        SteamFlat4j.C_INT.withName("m_nPing"),
        SteamFlat4j.C_FLOAT.withName("m_flConnectionQualityLocal"),
        SteamFlat4j.C_FLOAT.withName("m_flConnectionQualityRemote"),
        SteamFlat4j.C_FLOAT.withName("m_flOutPacketsPerSec"),
        SteamFlat4j.C_FLOAT.withName("m_flOutBytesPerSec"),
        SteamFlat4j.C_FLOAT.withName("m_flInPacketsPerSec"),
        SteamFlat4j.C_FLOAT.withName("m_flInBytesPerSec"),
        SteamFlat4j.C_INT.withName("m_nSendRateBytesPerSecond"),
        SteamFlat4j.C_INT.withName("m_cbPendingUnreliable"),
        SteamFlat4j.C_INT.withName("m_cbPendingReliable"),
        SteamFlat4j.C_INT.withName("m_cbSentUnackedReliable"),
        SteamFlat4j.C_LONG_LONG.withName("m_usecQueueTime"),
        MemoryLayout.sequenceLayout(16, SteamFlat4j.C_INT).withName("reserved")
    ).withName("SteamNetConnectionRealTimeStatus_t");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt m_eState$LAYOUT = (OfInt)$LAYOUT.select(groupElement("m_eState"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ESteamNetworkingConnectionState m_eState
     * }
     */
    public static final OfInt m_eState$layout() {
        return m_eState$LAYOUT;
    }

    private static final long m_eState$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ESteamNetworkingConnectionState m_eState
     * }
     */
    public static final long m_eState$offset() {
        return m_eState$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ESteamNetworkingConnectionState m_eState
     * }
     */
    public static int m_eState(MemorySegment struct) {
        return struct.get(m_eState$LAYOUT, m_eState$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ESteamNetworkingConnectionState m_eState
     * }
     */
    public static void m_eState(MemorySegment struct, int fieldValue) {
        struct.set(m_eState$LAYOUT, m_eState$OFFSET, fieldValue);
    }

    private static final OfInt m_nPing$LAYOUT = (OfInt)$LAYOUT.select(groupElement("m_nPing"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int m_nPing
     * }
     */
    public static final OfInt m_nPing$layout() {
        return m_nPing$LAYOUT;
    }

    private static final long m_nPing$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int m_nPing
     * }
     */
    public static final long m_nPing$offset() {
        return m_nPing$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int m_nPing
     * }
     */
    public static int m_nPing(MemorySegment struct) {
        return struct.get(m_nPing$LAYOUT, m_nPing$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int m_nPing
     * }
     */
    public static void m_nPing(MemorySegment struct, int fieldValue) {
        struct.set(m_nPing$LAYOUT, m_nPing$OFFSET, fieldValue);
    }

    private static final OfFloat m_flConnectionQualityLocal$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("m_flConnectionQualityLocal"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float m_flConnectionQualityLocal
     * }
     */
    public static final OfFloat m_flConnectionQualityLocal$layout() {
        return m_flConnectionQualityLocal$LAYOUT;
    }

    private static final long m_flConnectionQualityLocal$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float m_flConnectionQualityLocal
     * }
     */
    public static final long m_flConnectionQualityLocal$offset() {
        return m_flConnectionQualityLocal$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float m_flConnectionQualityLocal
     * }
     */
    public static float m_flConnectionQualityLocal(MemorySegment struct) {
        return struct.get(m_flConnectionQualityLocal$LAYOUT, m_flConnectionQualityLocal$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float m_flConnectionQualityLocal
     * }
     */
    public static void m_flConnectionQualityLocal(MemorySegment struct, float fieldValue) {
        struct.set(m_flConnectionQualityLocal$LAYOUT, m_flConnectionQualityLocal$OFFSET, fieldValue);
    }

    private static final OfFloat m_flConnectionQualityRemote$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("m_flConnectionQualityRemote"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float m_flConnectionQualityRemote
     * }
     */
    public static final OfFloat m_flConnectionQualityRemote$layout() {
        return m_flConnectionQualityRemote$LAYOUT;
    }

    private static final long m_flConnectionQualityRemote$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float m_flConnectionQualityRemote
     * }
     */
    public static final long m_flConnectionQualityRemote$offset() {
        return m_flConnectionQualityRemote$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float m_flConnectionQualityRemote
     * }
     */
    public static float m_flConnectionQualityRemote(MemorySegment struct) {
        return struct.get(m_flConnectionQualityRemote$LAYOUT, m_flConnectionQualityRemote$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float m_flConnectionQualityRemote
     * }
     */
    public static void m_flConnectionQualityRemote(MemorySegment struct, float fieldValue) {
        struct.set(m_flConnectionQualityRemote$LAYOUT, m_flConnectionQualityRemote$OFFSET, fieldValue);
    }

    private static final OfFloat m_flOutPacketsPerSec$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("m_flOutPacketsPerSec"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float m_flOutPacketsPerSec
     * }
     */
    public static final OfFloat m_flOutPacketsPerSec$layout() {
        return m_flOutPacketsPerSec$LAYOUT;
    }

    private static final long m_flOutPacketsPerSec$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float m_flOutPacketsPerSec
     * }
     */
    public static final long m_flOutPacketsPerSec$offset() {
        return m_flOutPacketsPerSec$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float m_flOutPacketsPerSec
     * }
     */
    public static float m_flOutPacketsPerSec(MemorySegment struct) {
        return struct.get(m_flOutPacketsPerSec$LAYOUT, m_flOutPacketsPerSec$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float m_flOutPacketsPerSec
     * }
     */
    public static void m_flOutPacketsPerSec(MemorySegment struct, float fieldValue) {
        struct.set(m_flOutPacketsPerSec$LAYOUT, m_flOutPacketsPerSec$OFFSET, fieldValue);
    }

    private static final OfFloat m_flOutBytesPerSec$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("m_flOutBytesPerSec"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float m_flOutBytesPerSec
     * }
     */
    public static final OfFloat m_flOutBytesPerSec$layout() {
        return m_flOutBytesPerSec$LAYOUT;
    }

    private static final long m_flOutBytesPerSec$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float m_flOutBytesPerSec
     * }
     */
    public static final long m_flOutBytesPerSec$offset() {
        return m_flOutBytesPerSec$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float m_flOutBytesPerSec
     * }
     */
    public static float m_flOutBytesPerSec(MemorySegment struct) {
        return struct.get(m_flOutBytesPerSec$LAYOUT, m_flOutBytesPerSec$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float m_flOutBytesPerSec
     * }
     */
    public static void m_flOutBytesPerSec(MemorySegment struct, float fieldValue) {
        struct.set(m_flOutBytesPerSec$LAYOUT, m_flOutBytesPerSec$OFFSET, fieldValue);
    }

    private static final OfFloat m_flInPacketsPerSec$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("m_flInPacketsPerSec"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float m_flInPacketsPerSec
     * }
     */
    public static final OfFloat m_flInPacketsPerSec$layout() {
        return m_flInPacketsPerSec$LAYOUT;
    }

    private static final long m_flInPacketsPerSec$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float m_flInPacketsPerSec
     * }
     */
    public static final long m_flInPacketsPerSec$offset() {
        return m_flInPacketsPerSec$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float m_flInPacketsPerSec
     * }
     */
    public static float m_flInPacketsPerSec(MemorySegment struct) {
        return struct.get(m_flInPacketsPerSec$LAYOUT, m_flInPacketsPerSec$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float m_flInPacketsPerSec
     * }
     */
    public static void m_flInPacketsPerSec(MemorySegment struct, float fieldValue) {
        struct.set(m_flInPacketsPerSec$LAYOUT, m_flInPacketsPerSec$OFFSET, fieldValue);
    }

    private static final OfFloat m_flInBytesPerSec$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("m_flInBytesPerSec"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float m_flInBytesPerSec
     * }
     */
    public static final OfFloat m_flInBytesPerSec$layout() {
        return m_flInBytesPerSec$LAYOUT;
    }

    private static final long m_flInBytesPerSec$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float m_flInBytesPerSec
     * }
     */
    public static final long m_flInBytesPerSec$offset() {
        return m_flInBytesPerSec$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float m_flInBytesPerSec
     * }
     */
    public static float m_flInBytesPerSec(MemorySegment struct) {
        return struct.get(m_flInBytesPerSec$LAYOUT, m_flInBytesPerSec$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float m_flInBytesPerSec
     * }
     */
    public static void m_flInBytesPerSec(MemorySegment struct, float fieldValue) {
        struct.set(m_flInBytesPerSec$LAYOUT, m_flInBytesPerSec$OFFSET, fieldValue);
    }

    private static final OfInt m_nSendRateBytesPerSecond$LAYOUT = (OfInt)$LAYOUT.select(groupElement("m_nSendRateBytesPerSecond"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int m_nSendRateBytesPerSecond
     * }
     */
    public static final OfInt m_nSendRateBytesPerSecond$layout() {
        return m_nSendRateBytesPerSecond$LAYOUT;
    }

    private static final long m_nSendRateBytesPerSecond$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int m_nSendRateBytesPerSecond
     * }
     */
    public static final long m_nSendRateBytesPerSecond$offset() {
        return m_nSendRateBytesPerSecond$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int m_nSendRateBytesPerSecond
     * }
     */
    public static int m_nSendRateBytesPerSecond(MemorySegment struct) {
        return struct.get(m_nSendRateBytesPerSecond$LAYOUT, m_nSendRateBytesPerSecond$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int m_nSendRateBytesPerSecond
     * }
     */
    public static void m_nSendRateBytesPerSecond(MemorySegment struct, int fieldValue) {
        struct.set(m_nSendRateBytesPerSecond$LAYOUT, m_nSendRateBytesPerSecond$OFFSET, fieldValue);
    }

    private static final OfInt m_cbPendingUnreliable$LAYOUT = (OfInt)$LAYOUT.select(groupElement("m_cbPendingUnreliable"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int m_cbPendingUnreliable
     * }
     */
    public static final OfInt m_cbPendingUnreliable$layout() {
        return m_cbPendingUnreliable$LAYOUT;
    }

    private static final long m_cbPendingUnreliable$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int m_cbPendingUnreliable
     * }
     */
    public static final long m_cbPendingUnreliable$offset() {
        return m_cbPendingUnreliable$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int m_cbPendingUnreliable
     * }
     */
    public static int m_cbPendingUnreliable(MemorySegment struct) {
        return struct.get(m_cbPendingUnreliable$LAYOUT, m_cbPendingUnreliable$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int m_cbPendingUnreliable
     * }
     */
    public static void m_cbPendingUnreliable(MemorySegment struct, int fieldValue) {
        struct.set(m_cbPendingUnreliable$LAYOUT, m_cbPendingUnreliable$OFFSET, fieldValue);
    }

    private static final OfInt m_cbPendingReliable$LAYOUT = (OfInt)$LAYOUT.select(groupElement("m_cbPendingReliable"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int m_cbPendingReliable
     * }
     */
    public static final OfInt m_cbPendingReliable$layout() {
        return m_cbPendingReliable$LAYOUT;
    }

    private static final long m_cbPendingReliable$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int m_cbPendingReliable
     * }
     */
    public static final long m_cbPendingReliable$offset() {
        return m_cbPendingReliable$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int m_cbPendingReliable
     * }
     */
    public static int m_cbPendingReliable(MemorySegment struct) {
        return struct.get(m_cbPendingReliable$LAYOUT, m_cbPendingReliable$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int m_cbPendingReliable
     * }
     */
    public static void m_cbPendingReliable(MemorySegment struct, int fieldValue) {
        struct.set(m_cbPendingReliable$LAYOUT, m_cbPendingReliable$OFFSET, fieldValue);
    }

    private static final OfInt m_cbSentUnackedReliable$LAYOUT = (OfInt)$LAYOUT.select(groupElement("m_cbSentUnackedReliable"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int m_cbSentUnackedReliable
     * }
     */
    public static final OfInt m_cbSentUnackedReliable$layout() {
        return m_cbSentUnackedReliable$LAYOUT;
    }

    private static final long m_cbSentUnackedReliable$OFFSET = 44;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int m_cbSentUnackedReliable
     * }
     */
    public static final long m_cbSentUnackedReliable$offset() {
        return m_cbSentUnackedReliable$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int m_cbSentUnackedReliable
     * }
     */
    public static int m_cbSentUnackedReliable(MemorySegment struct) {
        return struct.get(m_cbSentUnackedReliable$LAYOUT, m_cbSentUnackedReliable$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int m_cbSentUnackedReliable
     * }
     */
    public static void m_cbSentUnackedReliable(MemorySegment struct, int fieldValue) {
        struct.set(m_cbSentUnackedReliable$LAYOUT, m_cbSentUnackedReliable$OFFSET, fieldValue);
    }

    private static final OfLong m_usecQueueTime$LAYOUT = (OfLong)$LAYOUT.select(groupElement("m_usecQueueTime"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * SteamNetworkingMicroseconds m_usecQueueTime
     * }
     */
    public static final OfLong m_usecQueueTime$layout() {
        return m_usecQueueTime$LAYOUT;
    }

    private static final long m_usecQueueTime$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * SteamNetworkingMicroseconds m_usecQueueTime
     * }
     */
    public static final long m_usecQueueTime$offset() {
        return m_usecQueueTime$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * SteamNetworkingMicroseconds m_usecQueueTime
     * }
     */
    public static long m_usecQueueTime(MemorySegment struct) {
        return struct.get(m_usecQueueTime$LAYOUT, m_usecQueueTime$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * SteamNetworkingMicroseconds m_usecQueueTime
     * }
     */
    public static void m_usecQueueTime(MemorySegment struct, long fieldValue) {
        struct.set(m_usecQueueTime$LAYOUT, m_usecQueueTime$OFFSET, fieldValue);
    }

    private static final SequenceLayout reserved$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("reserved"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32 reserved[16]
     * }
     */
    public static final SequenceLayout reserved$layout() {
        return reserved$LAYOUT;
    }

    private static final long reserved$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32 reserved[16]
     * }
     */
    public static final long reserved$offset() {
        return reserved$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32 reserved[16]
     * }
     */
    public static MemorySegment reserved(MemorySegment struct) {
        return struct.asSlice(reserved$OFFSET, reserved$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32 reserved[16]
     * }
     */
    public static void reserved(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, reserved$OFFSET, reserved$LAYOUT.byteSize());
    }

    private static long[] reserved$DIMS = { 16 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * uint32 reserved[16]
     * }
     */
    public static long[] reserved$dimensions() {
        return reserved$DIMS;
    }
    private static final VarHandle reserved$ELEM_HANDLE = reserved$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * uint32 reserved[16]
     * }
     */
    public static int reserved(MemorySegment struct, long index0) {
        return (int)reserved$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * uint32 reserved[16]
     * }
     */
    public static void reserved(MemorySegment struct, long index0, int fieldValue) {
        reserved$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

