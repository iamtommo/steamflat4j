// Generated by jextract

package steamflat4j;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct FriendGameInfo_t {
 *     CGameID m_gameID;
 *     uint32 m_unGameIP;
 *     uint16 m_usGamePort;
 *     uint16 m_usQueryPort;
 *     CSteamID m_steamIDLobby;
 * }
 * }
 */
public class FriendGameInfo_t {

    FriendGameInfo_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        SteamFlat4j.C_LONG_LONG.withName("m_gameID"),
        SteamFlat4j.C_INT.withName("m_unGameIP"),
        SteamFlat4j.C_SHORT.withName("m_usGamePort"),
        SteamFlat4j.C_SHORT.withName("m_usQueryPort"),
        SteamFlat4j.C_LONG_LONG.withName("m_steamIDLobby")
    ).withName("FriendGameInfo_t");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfLong m_gameID$LAYOUT = (OfLong)$LAYOUT.select(groupElement("m_gameID"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * CGameID m_gameID
     * }
     */
    public static final OfLong m_gameID$layout() {
        return m_gameID$LAYOUT;
    }

    private static final long m_gameID$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * CGameID m_gameID
     * }
     */
    public static final long m_gameID$offset() {
        return m_gameID$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * CGameID m_gameID
     * }
     */
    public static long m_gameID(MemorySegment struct) {
        return struct.get(m_gameID$LAYOUT, m_gameID$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * CGameID m_gameID
     * }
     */
    public static void m_gameID(MemorySegment struct, long fieldValue) {
        struct.set(m_gameID$LAYOUT, m_gameID$OFFSET, fieldValue);
    }

    private static final OfInt m_unGameIP$LAYOUT = (OfInt)$LAYOUT.select(groupElement("m_unGameIP"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32 m_unGameIP
     * }
     */
    public static final OfInt m_unGameIP$layout() {
        return m_unGameIP$LAYOUT;
    }

    private static final long m_unGameIP$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32 m_unGameIP
     * }
     */
    public static final long m_unGameIP$offset() {
        return m_unGameIP$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32 m_unGameIP
     * }
     */
    public static int m_unGameIP(MemorySegment struct) {
        return struct.get(m_unGameIP$LAYOUT, m_unGameIP$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32 m_unGameIP
     * }
     */
    public static void m_unGameIP(MemorySegment struct, int fieldValue) {
        struct.set(m_unGameIP$LAYOUT, m_unGameIP$OFFSET, fieldValue);
    }

    private static final OfShort m_usGamePort$LAYOUT = (OfShort)$LAYOUT.select(groupElement("m_usGamePort"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint16 m_usGamePort
     * }
     */
    public static final OfShort m_usGamePort$layout() {
        return m_usGamePort$LAYOUT;
    }

    private static final long m_usGamePort$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint16 m_usGamePort
     * }
     */
    public static final long m_usGamePort$offset() {
        return m_usGamePort$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint16 m_usGamePort
     * }
     */
    public static short m_usGamePort(MemorySegment struct) {
        return struct.get(m_usGamePort$LAYOUT, m_usGamePort$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint16 m_usGamePort
     * }
     */
    public static void m_usGamePort(MemorySegment struct, short fieldValue) {
        struct.set(m_usGamePort$LAYOUT, m_usGamePort$OFFSET, fieldValue);
    }

    private static final OfShort m_usQueryPort$LAYOUT = (OfShort)$LAYOUT.select(groupElement("m_usQueryPort"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint16 m_usQueryPort
     * }
     */
    public static final OfShort m_usQueryPort$layout() {
        return m_usQueryPort$LAYOUT;
    }

    private static final long m_usQueryPort$OFFSET = 14;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint16 m_usQueryPort
     * }
     */
    public static final long m_usQueryPort$offset() {
        return m_usQueryPort$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint16 m_usQueryPort
     * }
     */
    public static short m_usQueryPort(MemorySegment struct) {
        return struct.get(m_usQueryPort$LAYOUT, m_usQueryPort$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint16 m_usQueryPort
     * }
     */
    public static void m_usQueryPort(MemorySegment struct, short fieldValue) {
        struct.set(m_usQueryPort$LAYOUT, m_usQueryPort$OFFSET, fieldValue);
    }

    private static final OfLong m_steamIDLobby$LAYOUT = (OfLong)$LAYOUT.select(groupElement("m_steamIDLobby"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * CSteamID m_steamIDLobby
     * }
     */
    public static final OfLong m_steamIDLobby$layout() {
        return m_steamIDLobby$LAYOUT;
    }

    private static final long m_steamIDLobby$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * CSteamID m_steamIDLobby
     * }
     */
    public static final long m_steamIDLobby$offset() {
        return m_steamIDLobby$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * CSteamID m_steamIDLobby
     * }
     */
    public static long m_steamIDLobby(MemorySegment struct) {
        return struct.get(m_steamIDLobby$LAYOUT, m_steamIDLobby$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * CSteamID m_steamIDLobby
     * }
     */
    public static void m_steamIDLobby(MemorySegment struct, long fieldValue) {
        struct.set(m_steamIDLobby$LAYOUT, m_steamIDLobby$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

