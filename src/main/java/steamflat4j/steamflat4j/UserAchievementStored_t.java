// Generated by jextract

package steamflat4j;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct UserAchievementStored_t {
 *     uint64 m_nGameID;
 *     bool m_bGroupAchievement;
 *     char m_rgchAchievementName[128];
 *     uint32 m_nCurProgress;
 *     uint32 m_nMaxProgress;
 * }
 * }
 */
public class UserAchievementStored_t {

    UserAchievementStored_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        SteamFlat4j.C_LONG_LONG.withName("m_nGameID"),
        SteamFlat4j.C_BOOL.withName("m_bGroupAchievement"),
        MemoryLayout.sequenceLayout(128, SteamFlat4j.C_CHAR).withName("m_rgchAchievementName"),
        MemoryLayout.paddingLayout(3),
        SteamFlat4j.C_INT.withName("m_nCurProgress"),
        SteamFlat4j.C_INT.withName("m_nMaxProgress"),
        MemoryLayout.paddingLayout(4)
    ).withName("UserAchievementStored_t");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfLong m_nGameID$LAYOUT = (OfLong)$LAYOUT.select(groupElement("m_nGameID"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64 m_nGameID
     * }
     */
    public static final OfLong m_nGameID$layout() {
        return m_nGameID$LAYOUT;
    }

    private static final long m_nGameID$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64 m_nGameID
     * }
     */
    public static final long m_nGameID$offset() {
        return m_nGameID$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64 m_nGameID
     * }
     */
    public static long m_nGameID(MemorySegment struct) {
        return struct.get(m_nGameID$LAYOUT, m_nGameID$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64 m_nGameID
     * }
     */
    public static void m_nGameID(MemorySegment struct, long fieldValue) {
        struct.set(m_nGameID$LAYOUT, m_nGameID$OFFSET, fieldValue);
    }

    private static final OfBoolean m_bGroupAchievement$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("m_bGroupAchievement"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool m_bGroupAchievement
     * }
     */
    public static final OfBoolean m_bGroupAchievement$layout() {
        return m_bGroupAchievement$LAYOUT;
    }

    private static final long m_bGroupAchievement$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool m_bGroupAchievement
     * }
     */
    public static final long m_bGroupAchievement$offset() {
        return m_bGroupAchievement$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool m_bGroupAchievement
     * }
     */
    public static boolean m_bGroupAchievement(MemorySegment struct) {
        return struct.get(m_bGroupAchievement$LAYOUT, m_bGroupAchievement$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool m_bGroupAchievement
     * }
     */
    public static void m_bGroupAchievement(MemorySegment struct, boolean fieldValue) {
        struct.set(m_bGroupAchievement$LAYOUT, m_bGroupAchievement$OFFSET, fieldValue);
    }

    private static final SequenceLayout m_rgchAchievementName$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("m_rgchAchievementName"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char m_rgchAchievementName[128]
     * }
     */
    public static final SequenceLayout m_rgchAchievementName$layout() {
        return m_rgchAchievementName$LAYOUT;
    }

    private static final long m_rgchAchievementName$OFFSET = 9;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char m_rgchAchievementName[128]
     * }
     */
    public static final long m_rgchAchievementName$offset() {
        return m_rgchAchievementName$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char m_rgchAchievementName[128]
     * }
     */
    public static MemorySegment m_rgchAchievementName(MemorySegment struct) {
        return struct.asSlice(m_rgchAchievementName$OFFSET, m_rgchAchievementName$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char m_rgchAchievementName[128]
     * }
     */
    public static void m_rgchAchievementName(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, m_rgchAchievementName$OFFSET, m_rgchAchievementName$LAYOUT.byteSize());
    }

    private static long[] m_rgchAchievementName$DIMS = { 128 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * char m_rgchAchievementName[128]
     * }
     */
    public static long[] m_rgchAchievementName$dimensions() {
        return m_rgchAchievementName$DIMS;
    }
    private static final VarHandle m_rgchAchievementName$ELEM_HANDLE = m_rgchAchievementName$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * char m_rgchAchievementName[128]
     * }
     */
    public static byte m_rgchAchievementName(MemorySegment struct, long index0) {
        return (byte)m_rgchAchievementName$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * char m_rgchAchievementName[128]
     * }
     */
    public static void m_rgchAchievementName(MemorySegment struct, long index0, byte fieldValue) {
        m_rgchAchievementName$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfInt m_nCurProgress$LAYOUT = (OfInt)$LAYOUT.select(groupElement("m_nCurProgress"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32 m_nCurProgress
     * }
     */
    public static final OfInt m_nCurProgress$layout() {
        return m_nCurProgress$LAYOUT;
    }

    private static final long m_nCurProgress$OFFSET = 140;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32 m_nCurProgress
     * }
     */
    public static final long m_nCurProgress$offset() {
        return m_nCurProgress$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32 m_nCurProgress
     * }
     */
    public static int m_nCurProgress(MemorySegment struct) {
        return struct.get(m_nCurProgress$LAYOUT, m_nCurProgress$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32 m_nCurProgress
     * }
     */
    public static void m_nCurProgress(MemorySegment struct, int fieldValue) {
        struct.set(m_nCurProgress$LAYOUT, m_nCurProgress$OFFSET, fieldValue);
    }

    private static final OfInt m_nMaxProgress$LAYOUT = (OfInt)$LAYOUT.select(groupElement("m_nMaxProgress"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32 m_nMaxProgress
     * }
     */
    public static final OfInt m_nMaxProgress$layout() {
        return m_nMaxProgress$LAYOUT;
    }

    private static final long m_nMaxProgress$OFFSET = 144;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32 m_nMaxProgress
     * }
     */
    public static final long m_nMaxProgress$offset() {
        return m_nMaxProgress$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32 m_nMaxProgress
     * }
     */
    public static int m_nMaxProgress(MemorySegment struct) {
        return struct.get(m_nMaxProgress$LAYOUT, m_nMaxProgress$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32 m_nMaxProgress
     * }
     */
    public static void m_nMaxProgress(MemorySegment struct, int fieldValue) {
        struct.set(m_nMaxProgress$LAYOUT, m_nMaxProgress$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

