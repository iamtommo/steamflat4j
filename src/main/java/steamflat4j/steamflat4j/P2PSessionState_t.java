// Generated by jextract

package steamflat4j;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct P2PSessionState_t {
 *     uint8 m_bConnectionActive;
 *     uint8 m_bConnecting;
 *     uint8 m_eP2PSessionError;
 *     uint8 m_bUsingRelay;
 *     int32 m_nBytesQueuedForSend;
 *     int32 m_nPacketsQueuedForSend;
 *     uint32 m_nRemoteIP;
 *     uint16 m_nRemotePort;
 * }
 * }
 */
public class P2PSessionState_t {

    P2PSessionState_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        SteamFlat4j.C_CHAR.withName("m_bConnectionActive"),
        SteamFlat4j.C_CHAR.withName("m_bConnecting"),
        SteamFlat4j.C_CHAR.withName("m_eP2PSessionError"),
        SteamFlat4j.C_CHAR.withName("m_bUsingRelay"),
        SteamFlat4j.C_INT.withName("m_nBytesQueuedForSend"),
        SteamFlat4j.C_INT.withName("m_nPacketsQueuedForSend"),
        SteamFlat4j.C_INT.withName("m_nRemoteIP"),
        SteamFlat4j.C_SHORT.withName("m_nRemotePort"),
        MemoryLayout.paddingLayout(2)
    ).withName("P2PSessionState_t");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfByte m_bConnectionActive$LAYOUT = (OfByte)$LAYOUT.select(groupElement("m_bConnectionActive"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8 m_bConnectionActive
     * }
     */
    public static final OfByte m_bConnectionActive$layout() {
        return m_bConnectionActive$LAYOUT;
    }

    private static final long m_bConnectionActive$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8 m_bConnectionActive
     * }
     */
    public static final long m_bConnectionActive$offset() {
        return m_bConnectionActive$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8 m_bConnectionActive
     * }
     */
    public static byte m_bConnectionActive(MemorySegment struct) {
        return struct.get(m_bConnectionActive$LAYOUT, m_bConnectionActive$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8 m_bConnectionActive
     * }
     */
    public static void m_bConnectionActive(MemorySegment struct, byte fieldValue) {
        struct.set(m_bConnectionActive$LAYOUT, m_bConnectionActive$OFFSET, fieldValue);
    }

    private static final OfByte m_bConnecting$LAYOUT = (OfByte)$LAYOUT.select(groupElement("m_bConnecting"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8 m_bConnecting
     * }
     */
    public static final OfByte m_bConnecting$layout() {
        return m_bConnecting$LAYOUT;
    }

    private static final long m_bConnecting$OFFSET = 1;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8 m_bConnecting
     * }
     */
    public static final long m_bConnecting$offset() {
        return m_bConnecting$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8 m_bConnecting
     * }
     */
    public static byte m_bConnecting(MemorySegment struct) {
        return struct.get(m_bConnecting$LAYOUT, m_bConnecting$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8 m_bConnecting
     * }
     */
    public static void m_bConnecting(MemorySegment struct, byte fieldValue) {
        struct.set(m_bConnecting$LAYOUT, m_bConnecting$OFFSET, fieldValue);
    }

    private static final OfByte m_eP2PSessionError$LAYOUT = (OfByte)$LAYOUT.select(groupElement("m_eP2PSessionError"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8 m_eP2PSessionError
     * }
     */
    public static final OfByte m_eP2PSessionError$layout() {
        return m_eP2PSessionError$LAYOUT;
    }

    private static final long m_eP2PSessionError$OFFSET = 2;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8 m_eP2PSessionError
     * }
     */
    public static final long m_eP2PSessionError$offset() {
        return m_eP2PSessionError$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8 m_eP2PSessionError
     * }
     */
    public static byte m_eP2PSessionError(MemorySegment struct) {
        return struct.get(m_eP2PSessionError$LAYOUT, m_eP2PSessionError$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8 m_eP2PSessionError
     * }
     */
    public static void m_eP2PSessionError(MemorySegment struct, byte fieldValue) {
        struct.set(m_eP2PSessionError$LAYOUT, m_eP2PSessionError$OFFSET, fieldValue);
    }

    private static final OfByte m_bUsingRelay$LAYOUT = (OfByte)$LAYOUT.select(groupElement("m_bUsingRelay"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8 m_bUsingRelay
     * }
     */
    public static final OfByte m_bUsingRelay$layout() {
        return m_bUsingRelay$LAYOUT;
    }

    private static final long m_bUsingRelay$OFFSET = 3;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8 m_bUsingRelay
     * }
     */
    public static final long m_bUsingRelay$offset() {
        return m_bUsingRelay$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8 m_bUsingRelay
     * }
     */
    public static byte m_bUsingRelay(MemorySegment struct) {
        return struct.get(m_bUsingRelay$LAYOUT, m_bUsingRelay$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8 m_bUsingRelay
     * }
     */
    public static void m_bUsingRelay(MemorySegment struct, byte fieldValue) {
        struct.set(m_bUsingRelay$LAYOUT, m_bUsingRelay$OFFSET, fieldValue);
    }

    private static final OfInt m_nBytesQueuedForSend$LAYOUT = (OfInt)$LAYOUT.select(groupElement("m_nBytesQueuedForSend"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32 m_nBytesQueuedForSend
     * }
     */
    public static final OfInt m_nBytesQueuedForSend$layout() {
        return m_nBytesQueuedForSend$LAYOUT;
    }

    private static final long m_nBytesQueuedForSend$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32 m_nBytesQueuedForSend
     * }
     */
    public static final long m_nBytesQueuedForSend$offset() {
        return m_nBytesQueuedForSend$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32 m_nBytesQueuedForSend
     * }
     */
    public static int m_nBytesQueuedForSend(MemorySegment struct) {
        return struct.get(m_nBytesQueuedForSend$LAYOUT, m_nBytesQueuedForSend$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32 m_nBytesQueuedForSend
     * }
     */
    public static void m_nBytesQueuedForSend(MemorySegment struct, int fieldValue) {
        struct.set(m_nBytesQueuedForSend$LAYOUT, m_nBytesQueuedForSend$OFFSET, fieldValue);
    }

    private static final OfInt m_nPacketsQueuedForSend$LAYOUT = (OfInt)$LAYOUT.select(groupElement("m_nPacketsQueuedForSend"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32 m_nPacketsQueuedForSend
     * }
     */
    public static final OfInt m_nPacketsQueuedForSend$layout() {
        return m_nPacketsQueuedForSend$LAYOUT;
    }

    private static final long m_nPacketsQueuedForSend$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32 m_nPacketsQueuedForSend
     * }
     */
    public static final long m_nPacketsQueuedForSend$offset() {
        return m_nPacketsQueuedForSend$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32 m_nPacketsQueuedForSend
     * }
     */
    public static int m_nPacketsQueuedForSend(MemorySegment struct) {
        return struct.get(m_nPacketsQueuedForSend$LAYOUT, m_nPacketsQueuedForSend$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32 m_nPacketsQueuedForSend
     * }
     */
    public static void m_nPacketsQueuedForSend(MemorySegment struct, int fieldValue) {
        struct.set(m_nPacketsQueuedForSend$LAYOUT, m_nPacketsQueuedForSend$OFFSET, fieldValue);
    }

    private static final OfInt m_nRemoteIP$LAYOUT = (OfInt)$LAYOUT.select(groupElement("m_nRemoteIP"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32 m_nRemoteIP
     * }
     */
    public static final OfInt m_nRemoteIP$layout() {
        return m_nRemoteIP$LAYOUT;
    }

    private static final long m_nRemoteIP$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32 m_nRemoteIP
     * }
     */
    public static final long m_nRemoteIP$offset() {
        return m_nRemoteIP$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32 m_nRemoteIP
     * }
     */
    public static int m_nRemoteIP(MemorySegment struct) {
        return struct.get(m_nRemoteIP$LAYOUT, m_nRemoteIP$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32 m_nRemoteIP
     * }
     */
    public static void m_nRemoteIP(MemorySegment struct, int fieldValue) {
        struct.set(m_nRemoteIP$LAYOUT, m_nRemoteIP$OFFSET, fieldValue);
    }

    private static final OfShort m_nRemotePort$LAYOUT = (OfShort)$LAYOUT.select(groupElement("m_nRemotePort"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint16 m_nRemotePort
     * }
     */
    public static final OfShort m_nRemotePort$layout() {
        return m_nRemotePort$LAYOUT;
    }

    private static final long m_nRemotePort$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint16 m_nRemotePort
     * }
     */
    public static final long m_nRemotePort$offset() {
        return m_nRemotePort$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint16 m_nRemotePort
     * }
     */
    public static short m_nRemotePort(MemorySegment struct) {
        return struct.get(m_nRemotePort$LAYOUT, m_nRemotePort$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint16 m_nRemotePort
     * }
     */
    public static void m_nRemotePort(MemorySegment struct, short fieldValue) {
        struct.set(m_nRemotePort$LAYOUT, m_nRemotePort$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

