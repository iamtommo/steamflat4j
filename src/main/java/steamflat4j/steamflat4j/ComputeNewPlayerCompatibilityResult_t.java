// Generated by jextract

package steamflat4j;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct ComputeNewPlayerCompatibilityResult_t {
 *     EResult m_eResult;
 *     int m_cPlayersThatDontLikeCandidate;
 *     int m_cPlayersThatCandidateDoesntLike;
 *     int m_cClanPlayersThatDontLikeCandidate;
 *     CSteamID m_SteamIDCandidate;
 * }
 * }
 */
public class ComputeNewPlayerCompatibilityResult_t {

    ComputeNewPlayerCompatibilityResult_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        SteamFlat4j.C_INT.withName("m_eResult"),
        SteamFlat4j.C_INT.withName("m_cPlayersThatDontLikeCandidate"),
        SteamFlat4j.C_INT.withName("m_cPlayersThatCandidateDoesntLike"),
        SteamFlat4j.C_INT.withName("m_cClanPlayersThatDontLikeCandidate"),
        SteamFlat4j.C_LONG_LONG.withName("m_SteamIDCandidate")
    ).withName("ComputeNewPlayerCompatibilityResult_t");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt m_eResult$LAYOUT = (OfInt)$LAYOUT.select(groupElement("m_eResult"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * EResult m_eResult
     * }
     */
    public static final OfInt m_eResult$layout() {
        return m_eResult$LAYOUT;
    }

    private static final long m_eResult$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * EResult m_eResult
     * }
     */
    public static final long m_eResult$offset() {
        return m_eResult$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * EResult m_eResult
     * }
     */
    public static int m_eResult(MemorySegment struct) {
        return struct.get(m_eResult$LAYOUT, m_eResult$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * EResult m_eResult
     * }
     */
    public static void m_eResult(MemorySegment struct, int fieldValue) {
        struct.set(m_eResult$LAYOUT, m_eResult$OFFSET, fieldValue);
    }

    private static final OfInt m_cPlayersThatDontLikeCandidate$LAYOUT = (OfInt)$LAYOUT.select(groupElement("m_cPlayersThatDontLikeCandidate"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int m_cPlayersThatDontLikeCandidate
     * }
     */
    public static final OfInt m_cPlayersThatDontLikeCandidate$layout() {
        return m_cPlayersThatDontLikeCandidate$LAYOUT;
    }

    private static final long m_cPlayersThatDontLikeCandidate$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int m_cPlayersThatDontLikeCandidate
     * }
     */
    public static final long m_cPlayersThatDontLikeCandidate$offset() {
        return m_cPlayersThatDontLikeCandidate$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int m_cPlayersThatDontLikeCandidate
     * }
     */
    public static int m_cPlayersThatDontLikeCandidate(MemorySegment struct) {
        return struct.get(m_cPlayersThatDontLikeCandidate$LAYOUT, m_cPlayersThatDontLikeCandidate$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int m_cPlayersThatDontLikeCandidate
     * }
     */
    public static void m_cPlayersThatDontLikeCandidate(MemorySegment struct, int fieldValue) {
        struct.set(m_cPlayersThatDontLikeCandidate$LAYOUT, m_cPlayersThatDontLikeCandidate$OFFSET, fieldValue);
    }

    private static final OfInt m_cPlayersThatCandidateDoesntLike$LAYOUT = (OfInt)$LAYOUT.select(groupElement("m_cPlayersThatCandidateDoesntLike"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int m_cPlayersThatCandidateDoesntLike
     * }
     */
    public static final OfInt m_cPlayersThatCandidateDoesntLike$layout() {
        return m_cPlayersThatCandidateDoesntLike$LAYOUT;
    }

    private static final long m_cPlayersThatCandidateDoesntLike$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int m_cPlayersThatCandidateDoesntLike
     * }
     */
    public static final long m_cPlayersThatCandidateDoesntLike$offset() {
        return m_cPlayersThatCandidateDoesntLike$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int m_cPlayersThatCandidateDoesntLike
     * }
     */
    public static int m_cPlayersThatCandidateDoesntLike(MemorySegment struct) {
        return struct.get(m_cPlayersThatCandidateDoesntLike$LAYOUT, m_cPlayersThatCandidateDoesntLike$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int m_cPlayersThatCandidateDoesntLike
     * }
     */
    public static void m_cPlayersThatCandidateDoesntLike(MemorySegment struct, int fieldValue) {
        struct.set(m_cPlayersThatCandidateDoesntLike$LAYOUT, m_cPlayersThatCandidateDoesntLike$OFFSET, fieldValue);
    }

    private static final OfInt m_cClanPlayersThatDontLikeCandidate$LAYOUT = (OfInt)$LAYOUT.select(groupElement("m_cClanPlayersThatDontLikeCandidate"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int m_cClanPlayersThatDontLikeCandidate
     * }
     */
    public static final OfInt m_cClanPlayersThatDontLikeCandidate$layout() {
        return m_cClanPlayersThatDontLikeCandidate$LAYOUT;
    }

    private static final long m_cClanPlayersThatDontLikeCandidate$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int m_cClanPlayersThatDontLikeCandidate
     * }
     */
    public static final long m_cClanPlayersThatDontLikeCandidate$offset() {
        return m_cClanPlayersThatDontLikeCandidate$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int m_cClanPlayersThatDontLikeCandidate
     * }
     */
    public static int m_cClanPlayersThatDontLikeCandidate(MemorySegment struct) {
        return struct.get(m_cClanPlayersThatDontLikeCandidate$LAYOUT, m_cClanPlayersThatDontLikeCandidate$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int m_cClanPlayersThatDontLikeCandidate
     * }
     */
    public static void m_cClanPlayersThatDontLikeCandidate(MemorySegment struct, int fieldValue) {
        struct.set(m_cClanPlayersThatDontLikeCandidate$LAYOUT, m_cClanPlayersThatDontLikeCandidate$OFFSET, fieldValue);
    }

    private static final OfLong m_SteamIDCandidate$LAYOUT = (OfLong)$LAYOUT.select(groupElement("m_SteamIDCandidate"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * CSteamID m_SteamIDCandidate
     * }
     */
    public static final OfLong m_SteamIDCandidate$layout() {
        return m_SteamIDCandidate$LAYOUT;
    }

    private static final long m_SteamIDCandidate$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * CSteamID m_SteamIDCandidate
     * }
     */
    public static final long m_SteamIDCandidate$offset() {
        return m_SteamIDCandidate$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * CSteamID m_SteamIDCandidate
     * }
     */
    public static long m_SteamIDCandidate(MemorySegment struct) {
        return struct.get(m_SteamIDCandidate$LAYOUT, m_SteamIDCandidate$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * CSteamID m_SteamIDCandidate
     * }
     */
    public static void m_SteamIDCandidate(MemorySegment struct, long fieldValue) {
        struct.set(m_SteamIDCandidate$LAYOUT, m_SteamIDCandidate$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

