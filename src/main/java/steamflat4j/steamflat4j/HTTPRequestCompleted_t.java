// Generated by jextract

package steamflat4j;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct HTTPRequestCompleted_t {
 *     HTTPRequestHandle m_hRequest;
 *     uint64 m_ulContextValue;
 *     bool m_bRequestSuccessful;
 *     EHTTPStatusCode m_eStatusCode;
 *     uint32 m_unBodySize;
 * }
 * }
 */
public class HTTPRequestCompleted_t {

    HTTPRequestCompleted_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        SteamFlat4j.C_INT.withName("m_hRequest"),
        MemoryLayout.paddingLayout(4),
        SteamFlat4j.C_LONG_LONG.withName("m_ulContextValue"),
        SteamFlat4j.C_BOOL.withName("m_bRequestSuccessful"),
        MemoryLayout.paddingLayout(3),
        SteamFlat4j.C_INT.withName("m_eStatusCode"),
        SteamFlat4j.C_INT.withName("m_unBodySize"),
        MemoryLayout.paddingLayout(4)
    ).withName("HTTPRequestCompleted_t");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt m_hRequest$LAYOUT = (OfInt)$LAYOUT.select(groupElement("m_hRequest"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HTTPRequestHandle m_hRequest
     * }
     */
    public static final OfInt m_hRequest$layout() {
        return m_hRequest$LAYOUT;
    }

    private static final long m_hRequest$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HTTPRequestHandle m_hRequest
     * }
     */
    public static final long m_hRequest$offset() {
        return m_hRequest$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HTTPRequestHandle m_hRequest
     * }
     */
    public static int m_hRequest(MemorySegment struct) {
        return struct.get(m_hRequest$LAYOUT, m_hRequest$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HTTPRequestHandle m_hRequest
     * }
     */
    public static void m_hRequest(MemorySegment struct, int fieldValue) {
        struct.set(m_hRequest$LAYOUT, m_hRequest$OFFSET, fieldValue);
    }

    private static final OfLong m_ulContextValue$LAYOUT = (OfLong)$LAYOUT.select(groupElement("m_ulContextValue"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64 m_ulContextValue
     * }
     */
    public static final OfLong m_ulContextValue$layout() {
        return m_ulContextValue$LAYOUT;
    }

    private static final long m_ulContextValue$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64 m_ulContextValue
     * }
     */
    public static final long m_ulContextValue$offset() {
        return m_ulContextValue$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64 m_ulContextValue
     * }
     */
    public static long m_ulContextValue(MemorySegment struct) {
        return struct.get(m_ulContextValue$LAYOUT, m_ulContextValue$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64 m_ulContextValue
     * }
     */
    public static void m_ulContextValue(MemorySegment struct, long fieldValue) {
        struct.set(m_ulContextValue$LAYOUT, m_ulContextValue$OFFSET, fieldValue);
    }

    private static final OfBoolean m_bRequestSuccessful$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("m_bRequestSuccessful"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool m_bRequestSuccessful
     * }
     */
    public static final OfBoolean m_bRequestSuccessful$layout() {
        return m_bRequestSuccessful$LAYOUT;
    }

    private static final long m_bRequestSuccessful$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool m_bRequestSuccessful
     * }
     */
    public static final long m_bRequestSuccessful$offset() {
        return m_bRequestSuccessful$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool m_bRequestSuccessful
     * }
     */
    public static boolean m_bRequestSuccessful(MemorySegment struct) {
        return struct.get(m_bRequestSuccessful$LAYOUT, m_bRequestSuccessful$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool m_bRequestSuccessful
     * }
     */
    public static void m_bRequestSuccessful(MemorySegment struct, boolean fieldValue) {
        struct.set(m_bRequestSuccessful$LAYOUT, m_bRequestSuccessful$OFFSET, fieldValue);
    }

    private static final OfInt m_eStatusCode$LAYOUT = (OfInt)$LAYOUT.select(groupElement("m_eStatusCode"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * EHTTPStatusCode m_eStatusCode
     * }
     */
    public static final OfInt m_eStatusCode$layout() {
        return m_eStatusCode$LAYOUT;
    }

    private static final long m_eStatusCode$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * EHTTPStatusCode m_eStatusCode
     * }
     */
    public static final long m_eStatusCode$offset() {
        return m_eStatusCode$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * EHTTPStatusCode m_eStatusCode
     * }
     */
    public static int m_eStatusCode(MemorySegment struct) {
        return struct.get(m_eStatusCode$LAYOUT, m_eStatusCode$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * EHTTPStatusCode m_eStatusCode
     * }
     */
    public static void m_eStatusCode(MemorySegment struct, int fieldValue) {
        struct.set(m_eStatusCode$LAYOUT, m_eStatusCode$OFFSET, fieldValue);
    }

    private static final OfInt m_unBodySize$LAYOUT = (OfInt)$LAYOUT.select(groupElement("m_unBodySize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32 m_unBodySize
     * }
     */
    public static final OfInt m_unBodySize$layout() {
        return m_unBodySize$LAYOUT;
    }

    private static final long m_unBodySize$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32 m_unBodySize
     * }
     */
    public static final long m_unBodySize$offset() {
        return m_unBodySize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32 m_unBodySize
     * }
     */
    public static int m_unBodySize(MemorySegment struct) {
        return struct.get(m_unBodySize$LAYOUT, m_unBodySize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32 m_unBodySize
     * }
     */
    public static void m_unBodySize(MemorySegment struct, int fieldValue) {
        struct.set(m_unBodySize$LAYOUT, m_unBodySize$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

