// Generated by jextract

package steamflat4j;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct RemoteStorageEnumerateWorkshopFilesResult_t {
 *     EResult m_eResult;
 *     int32 m_nResultsReturned;
 *     int32 m_nTotalResultCount;
 *     PublishedFileId_t m_rgPublishedFileId[50];
 *     float m_rgScore[50];
 *     AppId_t m_nAppId;
 *     uint32 m_unStartIndex;
 * }
 * }
 */
public class RemoteStorageEnumerateWorkshopFilesResult_t {

    RemoteStorageEnumerateWorkshopFilesResult_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        SteamFlat4j.C_INT.withName("m_eResult"),
        SteamFlat4j.C_INT.withName("m_nResultsReturned"),
        SteamFlat4j.C_INT.withName("m_nTotalResultCount"),
        MemoryLayout.paddingLayout(4),
        MemoryLayout.sequenceLayout(50, SteamFlat4j.C_LONG_LONG).withName("m_rgPublishedFileId"),
        MemoryLayout.sequenceLayout(50, SteamFlat4j.C_FLOAT).withName("m_rgScore"),
        SteamFlat4j.C_INT.withName("m_nAppId"),
        SteamFlat4j.C_INT.withName("m_unStartIndex")
    ).withName("RemoteStorageEnumerateWorkshopFilesResult_t");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt m_eResult$LAYOUT = (OfInt)$LAYOUT.select(groupElement("m_eResult"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * EResult m_eResult
     * }
     */
    public static final OfInt m_eResult$layout() {
        return m_eResult$LAYOUT;
    }

    private static final long m_eResult$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * EResult m_eResult
     * }
     */
    public static final long m_eResult$offset() {
        return m_eResult$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * EResult m_eResult
     * }
     */
    public static int m_eResult(MemorySegment struct) {
        return struct.get(m_eResult$LAYOUT, m_eResult$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * EResult m_eResult
     * }
     */
    public static void m_eResult(MemorySegment struct, int fieldValue) {
        struct.set(m_eResult$LAYOUT, m_eResult$OFFSET, fieldValue);
    }

    private static final OfInt m_nResultsReturned$LAYOUT = (OfInt)$LAYOUT.select(groupElement("m_nResultsReturned"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32 m_nResultsReturned
     * }
     */
    public static final OfInt m_nResultsReturned$layout() {
        return m_nResultsReturned$LAYOUT;
    }

    private static final long m_nResultsReturned$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32 m_nResultsReturned
     * }
     */
    public static final long m_nResultsReturned$offset() {
        return m_nResultsReturned$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32 m_nResultsReturned
     * }
     */
    public static int m_nResultsReturned(MemorySegment struct) {
        return struct.get(m_nResultsReturned$LAYOUT, m_nResultsReturned$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32 m_nResultsReturned
     * }
     */
    public static void m_nResultsReturned(MemorySegment struct, int fieldValue) {
        struct.set(m_nResultsReturned$LAYOUT, m_nResultsReturned$OFFSET, fieldValue);
    }

    private static final OfInt m_nTotalResultCount$LAYOUT = (OfInt)$LAYOUT.select(groupElement("m_nTotalResultCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32 m_nTotalResultCount
     * }
     */
    public static final OfInt m_nTotalResultCount$layout() {
        return m_nTotalResultCount$LAYOUT;
    }

    private static final long m_nTotalResultCount$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32 m_nTotalResultCount
     * }
     */
    public static final long m_nTotalResultCount$offset() {
        return m_nTotalResultCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32 m_nTotalResultCount
     * }
     */
    public static int m_nTotalResultCount(MemorySegment struct) {
        return struct.get(m_nTotalResultCount$LAYOUT, m_nTotalResultCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32 m_nTotalResultCount
     * }
     */
    public static void m_nTotalResultCount(MemorySegment struct, int fieldValue) {
        struct.set(m_nTotalResultCount$LAYOUT, m_nTotalResultCount$OFFSET, fieldValue);
    }

    private static final SequenceLayout m_rgPublishedFileId$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("m_rgPublishedFileId"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PublishedFileId_t m_rgPublishedFileId[50]
     * }
     */
    public static final SequenceLayout m_rgPublishedFileId$layout() {
        return m_rgPublishedFileId$LAYOUT;
    }

    private static final long m_rgPublishedFileId$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PublishedFileId_t m_rgPublishedFileId[50]
     * }
     */
    public static final long m_rgPublishedFileId$offset() {
        return m_rgPublishedFileId$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PublishedFileId_t m_rgPublishedFileId[50]
     * }
     */
    public static MemorySegment m_rgPublishedFileId(MemorySegment struct) {
        return struct.asSlice(m_rgPublishedFileId$OFFSET, m_rgPublishedFileId$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PublishedFileId_t m_rgPublishedFileId[50]
     * }
     */
    public static void m_rgPublishedFileId(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, m_rgPublishedFileId$OFFSET, m_rgPublishedFileId$LAYOUT.byteSize());
    }

    private static long[] m_rgPublishedFileId$DIMS = { 50 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * PublishedFileId_t m_rgPublishedFileId[50]
     * }
     */
    public static long[] m_rgPublishedFileId$dimensions() {
        return m_rgPublishedFileId$DIMS;
    }
    private static final VarHandle m_rgPublishedFileId$ELEM_HANDLE = m_rgPublishedFileId$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * PublishedFileId_t m_rgPublishedFileId[50]
     * }
     */
    public static long m_rgPublishedFileId(MemorySegment struct, long index0) {
        return (long)m_rgPublishedFileId$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * PublishedFileId_t m_rgPublishedFileId[50]
     * }
     */
    public static void m_rgPublishedFileId(MemorySegment struct, long index0, long fieldValue) {
        m_rgPublishedFileId$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout m_rgScore$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("m_rgScore"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float m_rgScore[50]
     * }
     */
    public static final SequenceLayout m_rgScore$layout() {
        return m_rgScore$LAYOUT;
    }

    private static final long m_rgScore$OFFSET = 416;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float m_rgScore[50]
     * }
     */
    public static final long m_rgScore$offset() {
        return m_rgScore$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float m_rgScore[50]
     * }
     */
    public static MemorySegment m_rgScore(MemorySegment struct) {
        return struct.asSlice(m_rgScore$OFFSET, m_rgScore$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float m_rgScore[50]
     * }
     */
    public static void m_rgScore(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, m_rgScore$OFFSET, m_rgScore$LAYOUT.byteSize());
    }

    private static long[] m_rgScore$DIMS = { 50 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * float m_rgScore[50]
     * }
     */
    public static long[] m_rgScore$dimensions() {
        return m_rgScore$DIMS;
    }
    private static final VarHandle m_rgScore$ELEM_HANDLE = m_rgScore$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * float m_rgScore[50]
     * }
     */
    public static float m_rgScore(MemorySegment struct, long index0) {
        return (float)m_rgScore$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * float m_rgScore[50]
     * }
     */
    public static void m_rgScore(MemorySegment struct, long index0, float fieldValue) {
        m_rgScore$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfInt m_nAppId$LAYOUT = (OfInt)$LAYOUT.select(groupElement("m_nAppId"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * AppId_t m_nAppId
     * }
     */
    public static final OfInt m_nAppId$layout() {
        return m_nAppId$LAYOUT;
    }

    private static final long m_nAppId$OFFSET = 616;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * AppId_t m_nAppId
     * }
     */
    public static final long m_nAppId$offset() {
        return m_nAppId$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * AppId_t m_nAppId
     * }
     */
    public static int m_nAppId(MemorySegment struct) {
        return struct.get(m_nAppId$LAYOUT, m_nAppId$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * AppId_t m_nAppId
     * }
     */
    public static void m_nAppId(MemorySegment struct, int fieldValue) {
        struct.set(m_nAppId$LAYOUT, m_nAppId$OFFSET, fieldValue);
    }

    private static final OfInt m_unStartIndex$LAYOUT = (OfInt)$LAYOUT.select(groupElement("m_unStartIndex"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32 m_unStartIndex
     * }
     */
    public static final OfInt m_unStartIndex$layout() {
        return m_unStartIndex$LAYOUT;
    }

    private static final long m_unStartIndex$OFFSET = 620;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32 m_unStartIndex
     * }
     */
    public static final long m_unStartIndex$offset() {
        return m_unStartIndex$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32 m_unStartIndex
     * }
     */
    public static int m_unStartIndex(MemorySegment struct) {
        return struct.get(m_unStartIndex$LAYOUT, m_unStartIndex$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32 m_unStartIndex
     * }
     */
    public static void m_unStartIndex(MemorySegment struct, int fieldValue) {
        struct.set(m_unStartIndex$LAYOUT, m_unStartIndex$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

