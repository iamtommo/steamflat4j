// Generated by jextract

package steamflat4j;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class SteamFlat4j_1 extends SteamFlat4j_2 {

    SteamFlat4j_1() {
        // Should not be called directly
    }
    private static final int dc_crosshair = (int)6L;
    /**
     * {@snippet lang=c :
     * enum EMouseCursor.dc_crosshair = 6
     * }
     */
    public static int dc_crosshair() {
        return dc_crosshair;
    }
    private static final int dc_up = (int)7L;
    /**
     * {@snippet lang=c :
     * enum EMouseCursor.dc_up = 7
     * }
     */
    public static int dc_up() {
        return dc_up;
    }
    private static final int dc_sizenw = (int)8L;
    /**
     * {@snippet lang=c :
     * enum EMouseCursor.dc_sizenw = 8
     * }
     */
    public static int dc_sizenw() {
        return dc_sizenw;
    }
    private static final int dc_sizese = (int)9L;
    /**
     * {@snippet lang=c :
     * enum EMouseCursor.dc_sizese = 9
     * }
     */
    public static int dc_sizese() {
        return dc_sizese;
    }
    private static final int dc_sizene = (int)10L;
    /**
     * {@snippet lang=c :
     * enum EMouseCursor.dc_sizene = 10
     * }
     */
    public static int dc_sizene() {
        return dc_sizene;
    }
    private static final int dc_sizesw = (int)11L;
    /**
     * {@snippet lang=c :
     * enum EMouseCursor.dc_sizesw = 11
     * }
     */
    public static int dc_sizesw() {
        return dc_sizesw;
    }
    private static final int dc_sizew = (int)12L;
    /**
     * {@snippet lang=c :
     * enum EMouseCursor.dc_sizew = 12
     * }
     */
    public static int dc_sizew() {
        return dc_sizew;
    }
    private static final int dc_sizee = (int)13L;
    /**
     * {@snippet lang=c :
     * enum EMouseCursor.dc_sizee = 13
     * }
     */
    public static int dc_sizee() {
        return dc_sizee;
    }
    private static final int dc_sizen = (int)14L;
    /**
     * {@snippet lang=c :
     * enum EMouseCursor.dc_sizen = 14
     * }
     */
    public static int dc_sizen() {
        return dc_sizen;
    }
    private static final int dc_sizes = (int)15L;
    /**
     * {@snippet lang=c :
     * enum EMouseCursor.dc_sizes = 15
     * }
     */
    public static int dc_sizes() {
        return dc_sizes;
    }
    private static final int dc_sizewe = (int)16L;
    /**
     * {@snippet lang=c :
     * enum EMouseCursor.dc_sizewe = 16
     * }
     */
    public static int dc_sizewe() {
        return dc_sizewe;
    }
    private static final int dc_sizens = (int)17L;
    /**
     * {@snippet lang=c :
     * enum EMouseCursor.dc_sizens = 17
     * }
     */
    public static int dc_sizens() {
        return dc_sizens;
    }
    private static final int dc_sizeall = (int)18L;
    /**
     * {@snippet lang=c :
     * enum EMouseCursor.dc_sizeall = 18
     * }
     */
    public static int dc_sizeall() {
        return dc_sizeall;
    }
    private static final int dc_no = (int)19L;
    /**
     * {@snippet lang=c :
     * enum EMouseCursor.dc_no = 19
     * }
     */
    public static int dc_no() {
        return dc_no;
    }
    private static final int dc_hand = (int)20L;
    /**
     * {@snippet lang=c :
     * enum EMouseCursor.dc_hand = 20
     * }
     */
    public static int dc_hand() {
        return dc_hand;
    }
    private static final int dc_blank = (int)21L;
    /**
     * {@snippet lang=c :
     * enum EMouseCursor.dc_blank = 21
     * }
     */
    public static int dc_blank() {
        return dc_blank;
    }
    private static final int dc_middle_pan = (int)22L;
    /**
     * {@snippet lang=c :
     * enum EMouseCursor.dc_middle_pan = 22
     * }
     */
    public static int dc_middle_pan() {
        return dc_middle_pan;
    }
    private static final int dc_north_pan = (int)23L;
    /**
     * {@snippet lang=c :
     * enum EMouseCursor.dc_north_pan = 23
     * }
     */
    public static int dc_north_pan() {
        return dc_north_pan;
    }
    private static final int dc_north_east_pan = (int)24L;
    /**
     * {@snippet lang=c :
     * enum EMouseCursor.dc_north_east_pan = 24
     * }
     */
    public static int dc_north_east_pan() {
        return dc_north_east_pan;
    }
    private static final int dc_east_pan = (int)25L;
    /**
     * {@snippet lang=c :
     * enum EMouseCursor.dc_east_pan = 25
     * }
     */
    public static int dc_east_pan() {
        return dc_east_pan;
    }
    private static final int dc_south_east_pan = (int)26L;
    /**
     * {@snippet lang=c :
     * enum EMouseCursor.dc_south_east_pan = 26
     * }
     */
    public static int dc_south_east_pan() {
        return dc_south_east_pan;
    }
    private static final int dc_south_pan = (int)27L;
    /**
     * {@snippet lang=c :
     * enum EMouseCursor.dc_south_pan = 27
     * }
     */
    public static int dc_south_pan() {
        return dc_south_pan;
    }
    private static final int dc_south_west_pan = (int)28L;
    /**
     * {@snippet lang=c :
     * enum EMouseCursor.dc_south_west_pan = 28
     * }
     */
    public static int dc_south_west_pan() {
        return dc_south_west_pan;
    }
    private static final int dc_west_pan = (int)29L;
    /**
     * {@snippet lang=c :
     * enum EMouseCursor.dc_west_pan = 29
     * }
     */
    public static int dc_west_pan() {
        return dc_west_pan;
    }
    private static final int dc_north_west_pan = (int)30L;
    /**
     * {@snippet lang=c :
     * enum EMouseCursor.dc_north_west_pan = 30
     * }
     */
    public static int dc_north_west_pan() {
        return dc_north_west_pan;
    }
    private static final int dc_alias = (int)31L;
    /**
     * {@snippet lang=c :
     * enum EMouseCursor.dc_alias = 31
     * }
     */
    public static int dc_alias() {
        return dc_alias;
    }
    private static final int dc_cell = (int)32L;
    /**
     * {@snippet lang=c :
     * enum EMouseCursor.dc_cell = 32
     * }
     */
    public static int dc_cell() {
        return dc_cell;
    }
    private static final int dc_colresize = (int)33L;
    /**
     * {@snippet lang=c :
     * enum EMouseCursor.dc_colresize = 33
     * }
     */
    public static int dc_colresize() {
        return dc_colresize;
    }
    private static final int dc_copycur = (int)34L;
    /**
     * {@snippet lang=c :
     * enum EMouseCursor.dc_copycur = 34
     * }
     */
    public static int dc_copycur() {
        return dc_copycur;
    }
    private static final int dc_verticaltext = (int)35L;
    /**
     * {@snippet lang=c :
     * enum EMouseCursor.dc_verticaltext = 35
     * }
     */
    public static int dc_verticaltext() {
        return dc_verticaltext;
    }
    private static final int dc_rowresize = (int)36L;
    /**
     * {@snippet lang=c :
     * enum EMouseCursor.dc_rowresize = 36
     * }
     */
    public static int dc_rowresize() {
        return dc_rowresize;
    }
    private static final int dc_zoomin = (int)37L;
    /**
     * {@snippet lang=c :
     * enum EMouseCursor.dc_zoomin = 37
     * }
     */
    public static int dc_zoomin() {
        return dc_zoomin;
    }
    private static final int dc_zoomout = (int)38L;
    /**
     * {@snippet lang=c :
     * enum EMouseCursor.dc_zoomout = 38
     * }
     */
    public static int dc_zoomout() {
        return dc_zoomout;
    }
    private static final int dc_help = (int)39L;
    /**
     * {@snippet lang=c :
     * enum EMouseCursor.dc_help = 39
     * }
     */
    public static int dc_help() {
        return dc_help;
    }
    private static final int dc_custom = (int)40L;
    /**
     * {@snippet lang=c :
     * enum EMouseCursor.dc_custom = 40
     * }
     */
    public static int dc_custom() {
        return dc_custom;
    }
    private static final int dc_last = (int)41L;
    /**
     * {@snippet lang=c :
     * enum EMouseCursor.dc_last = 41
     * }
     */
    public static int dc_last() {
        return dc_last;
    }
    private static final int k_eHTMLKeyModifier_None = (int)0L;
    /**
     * {@snippet lang=c :
     * enum EHTMLKeyModifiers.k_eHTMLKeyModifier_None = 0
     * }
     */
    public static int k_eHTMLKeyModifier_None() {
        return k_eHTMLKeyModifier_None;
    }
    private static final int k_eHTMLKeyModifier_AltDown = (int)1L;
    /**
     * {@snippet lang=c :
     * enum EHTMLKeyModifiers.k_eHTMLKeyModifier_AltDown = 1
     * }
     */
    public static int k_eHTMLKeyModifier_AltDown() {
        return k_eHTMLKeyModifier_AltDown;
    }
    private static final int k_eHTMLKeyModifier_CtrlDown = (int)2L;
    /**
     * {@snippet lang=c :
     * enum EHTMLKeyModifiers.k_eHTMLKeyModifier_CtrlDown = 2
     * }
     */
    public static int k_eHTMLKeyModifier_CtrlDown() {
        return k_eHTMLKeyModifier_CtrlDown;
    }
    private static final int k_eHTMLKeyModifier_ShiftDown = (int)4L;
    /**
     * {@snippet lang=c :
     * enum EHTMLKeyModifiers.k_eHTMLKeyModifier_ShiftDown = 4
     * }
     */
    public static int k_eHTMLKeyModifier_ShiftDown() {
        return k_eHTMLKeyModifier_ShiftDown;
    }

    private static class SteamAPI_ISteamClient_CreateSteamPipe {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamClient_CreateSteamPipe"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HSteamPipe SteamAPI_ISteamClient_CreateSteamPipe()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamClient_CreateSteamPipe$descriptor() {
        return SteamAPI_ISteamClient_CreateSteamPipe.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HSteamPipe SteamAPI_ISteamClient_CreateSteamPipe()
     * }
     */
    public static MethodHandle SteamAPI_ISteamClient_CreateSteamPipe$handle() {
        return SteamAPI_ISteamClient_CreateSteamPipe.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HSteamPipe SteamAPI_ISteamClient_CreateSteamPipe()
     * }
     */
    public static int SteamAPI_ISteamClient_CreateSteamPipe() {
        var mh$ = SteamAPI_ISteamClient_CreateSteamPipe.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamClient_CreateSteamPipe");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamClient_BReleaseSteamPipe {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamClient_BReleaseSteamPipe"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamClient_BReleaseSteamPipe(HSteamPipe hSteamPipe)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamClient_BReleaseSteamPipe$descriptor() {
        return SteamAPI_ISteamClient_BReleaseSteamPipe.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamClient_BReleaseSteamPipe(HSteamPipe hSteamPipe)
     * }
     */
    public static MethodHandle SteamAPI_ISteamClient_BReleaseSteamPipe$handle() {
        return SteamAPI_ISteamClient_BReleaseSteamPipe.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamClient_BReleaseSteamPipe(HSteamPipe hSteamPipe)
     * }
     */
    public static boolean SteamAPI_ISteamClient_BReleaseSteamPipe(int hSteamPipe) {
        var mh$ = SteamAPI_ISteamClient_BReleaseSteamPipe.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamClient_BReleaseSteamPipe", hSteamPipe);
            }
            return (boolean)mh$.invokeExact(hSteamPipe);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamClient_ConnectToGlobalUser {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamClient_ConnectToGlobalUser"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HSteamUser SteamAPI_ISteamClient_ConnectToGlobalUser(HSteamPipe hSteamPipe)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamClient_ConnectToGlobalUser$descriptor() {
        return SteamAPI_ISteamClient_ConnectToGlobalUser.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HSteamUser SteamAPI_ISteamClient_ConnectToGlobalUser(HSteamPipe hSteamPipe)
     * }
     */
    public static MethodHandle SteamAPI_ISteamClient_ConnectToGlobalUser$handle() {
        return SteamAPI_ISteamClient_ConnectToGlobalUser.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HSteamUser SteamAPI_ISteamClient_ConnectToGlobalUser(HSteamPipe hSteamPipe)
     * }
     */
    public static int SteamAPI_ISteamClient_ConnectToGlobalUser(int hSteamPipe) {
        var mh$ = SteamAPI_ISteamClient_ConnectToGlobalUser.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamClient_ConnectToGlobalUser", hSteamPipe);
            }
            return (int)mh$.invokeExact(hSteamPipe);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamClient_CreateLocalUser {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamClient_CreateLocalUser"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HSteamUser SteamAPI_ISteamClient_CreateLocalUser(HSteamPipe *phSteamPipe, EAccountType eAccountType)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamClient_CreateLocalUser$descriptor() {
        return SteamAPI_ISteamClient_CreateLocalUser.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HSteamUser SteamAPI_ISteamClient_CreateLocalUser(HSteamPipe *phSteamPipe, EAccountType eAccountType)
     * }
     */
    public static MethodHandle SteamAPI_ISteamClient_CreateLocalUser$handle() {
        return SteamAPI_ISteamClient_CreateLocalUser.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HSteamUser SteamAPI_ISteamClient_CreateLocalUser(HSteamPipe *phSteamPipe, EAccountType eAccountType)
     * }
     */
    public static int SteamAPI_ISteamClient_CreateLocalUser(MemorySegment phSteamPipe, int eAccountType) {
        var mh$ = SteamAPI_ISteamClient_CreateLocalUser.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamClient_CreateLocalUser", phSteamPipe, eAccountType);
            }
            return (int)mh$.invokeExact(phSteamPipe, eAccountType);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamClient_ReleaseUser {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamClient_ReleaseUser"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamClient_ReleaseUser(HSteamPipe hSteamPipe, HSteamUser hUser)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamClient_ReleaseUser$descriptor() {
        return SteamAPI_ISteamClient_ReleaseUser.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamClient_ReleaseUser(HSteamPipe hSteamPipe, HSteamUser hUser)
     * }
     */
    public static MethodHandle SteamAPI_ISteamClient_ReleaseUser$handle() {
        return SteamAPI_ISteamClient_ReleaseUser.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamClient_ReleaseUser(HSteamPipe hSteamPipe, HSteamUser hUser)
     * }
     */
    public static void SteamAPI_ISteamClient_ReleaseUser(int hSteamPipe, int hUser) {
        var mh$ = SteamAPI_ISteamClient_ReleaseUser.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamClient_ReleaseUser", hSteamPipe, hUser);
            }
            mh$.invokeExact(hSteamPipe, hUser);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamClient_GetISteamUser {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamClient_GetISteamUser"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ISteamUser *SteamAPI_ISteamClient_GetISteamUser(HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamClient_GetISteamUser$descriptor() {
        return SteamAPI_ISteamClient_GetISteamUser.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ISteamUser *SteamAPI_ISteamClient_GetISteamUser(HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static MethodHandle SteamAPI_ISteamClient_GetISteamUser$handle() {
        return SteamAPI_ISteamClient_GetISteamUser.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ISteamUser *SteamAPI_ISteamClient_GetISteamUser(HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static MemorySegment SteamAPI_ISteamClient_GetISteamUser(int hSteamUser, int hSteamPipe, MemorySegment pchVersion) {
        var mh$ = SteamAPI_ISteamClient_GetISteamUser.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamClient_GetISteamUser", hSteamUser, hSteamPipe, pchVersion);
            }
            return (MemorySegment)mh$.invokeExact(hSteamUser, hSteamPipe, pchVersion);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamClient_GetISteamGameServer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamClient_GetISteamGameServer"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ISteamGameServer *SteamAPI_ISteamClient_GetISteamGameServer(HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamClient_GetISteamGameServer$descriptor() {
        return SteamAPI_ISteamClient_GetISteamGameServer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ISteamGameServer *SteamAPI_ISteamClient_GetISteamGameServer(HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static MethodHandle SteamAPI_ISteamClient_GetISteamGameServer$handle() {
        return SteamAPI_ISteamClient_GetISteamGameServer.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ISteamGameServer *SteamAPI_ISteamClient_GetISteamGameServer(HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static MemorySegment SteamAPI_ISteamClient_GetISteamGameServer(int hSteamUser, int hSteamPipe, MemorySegment pchVersion) {
        var mh$ = SteamAPI_ISteamClient_GetISteamGameServer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamClient_GetISteamGameServer", hSteamUser, hSteamPipe, pchVersion);
            }
            return (MemorySegment)mh$.invokeExact(hSteamUser, hSteamPipe, pchVersion);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamClient_SetLocalIPBinding {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_SHORT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamClient_SetLocalIPBinding"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamClient_SetLocalIPBinding(const SteamIPAddress_t *unIP, uint16 usPort)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamClient_SetLocalIPBinding$descriptor() {
        return SteamAPI_ISteamClient_SetLocalIPBinding.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamClient_SetLocalIPBinding(const SteamIPAddress_t *unIP, uint16 usPort)
     * }
     */
    public static MethodHandle SteamAPI_ISteamClient_SetLocalIPBinding$handle() {
        return SteamAPI_ISteamClient_SetLocalIPBinding.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamClient_SetLocalIPBinding(const SteamIPAddress_t *unIP, uint16 usPort)
     * }
     */
    public static void SteamAPI_ISteamClient_SetLocalIPBinding(MemorySegment unIP, short usPort) {
        var mh$ = SteamAPI_ISteamClient_SetLocalIPBinding.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamClient_SetLocalIPBinding", unIP, usPort);
            }
            mh$.invokeExact(unIP, usPort);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamClient_GetISteamFriends {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamClient_GetISteamFriends"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ISteamFriends *SteamAPI_ISteamClient_GetISteamFriends(HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamClient_GetISteamFriends$descriptor() {
        return SteamAPI_ISteamClient_GetISteamFriends.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ISteamFriends *SteamAPI_ISteamClient_GetISteamFriends(HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static MethodHandle SteamAPI_ISteamClient_GetISteamFriends$handle() {
        return SteamAPI_ISteamClient_GetISteamFriends.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ISteamFriends *SteamAPI_ISteamClient_GetISteamFriends(HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static MemorySegment SteamAPI_ISteamClient_GetISteamFriends(int hSteamUser, int hSteamPipe, MemorySegment pchVersion) {
        var mh$ = SteamAPI_ISteamClient_GetISteamFriends.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamClient_GetISteamFriends", hSteamUser, hSteamPipe, pchVersion);
            }
            return (MemorySegment)mh$.invokeExact(hSteamUser, hSteamPipe, pchVersion);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamClient_GetISteamUtils {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamClient_GetISteamUtils"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ISteamUtils *SteamAPI_ISteamClient_GetISteamUtils(HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamClient_GetISteamUtils$descriptor() {
        return SteamAPI_ISteamClient_GetISteamUtils.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ISteamUtils *SteamAPI_ISteamClient_GetISteamUtils(HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static MethodHandle SteamAPI_ISteamClient_GetISteamUtils$handle() {
        return SteamAPI_ISteamClient_GetISteamUtils.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ISteamUtils *SteamAPI_ISteamClient_GetISteamUtils(HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static MemorySegment SteamAPI_ISteamClient_GetISteamUtils(int hSteamPipe, MemorySegment pchVersion) {
        var mh$ = SteamAPI_ISteamClient_GetISteamUtils.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamClient_GetISteamUtils", hSteamPipe, pchVersion);
            }
            return (MemorySegment)mh$.invokeExact(hSteamPipe, pchVersion);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamClient_GetISteamMatchmaking {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamClient_GetISteamMatchmaking"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ISteamMatchmaking *SteamAPI_ISteamClient_GetISteamMatchmaking(HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamClient_GetISteamMatchmaking$descriptor() {
        return SteamAPI_ISteamClient_GetISteamMatchmaking.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ISteamMatchmaking *SteamAPI_ISteamClient_GetISteamMatchmaking(HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static MethodHandle SteamAPI_ISteamClient_GetISteamMatchmaking$handle() {
        return SteamAPI_ISteamClient_GetISteamMatchmaking.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ISteamMatchmaking *SteamAPI_ISteamClient_GetISteamMatchmaking(HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static MemorySegment SteamAPI_ISteamClient_GetISteamMatchmaking(int hSteamUser, int hSteamPipe, MemorySegment pchVersion) {
        var mh$ = SteamAPI_ISteamClient_GetISteamMatchmaking.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamClient_GetISteamMatchmaking", hSteamUser, hSteamPipe, pchVersion);
            }
            return (MemorySegment)mh$.invokeExact(hSteamUser, hSteamPipe, pchVersion);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamClient_GetISteamMatchmakingServers {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamClient_GetISteamMatchmakingServers"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ISteamMatchmakingServers *SteamAPI_ISteamClient_GetISteamMatchmakingServers(HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamClient_GetISteamMatchmakingServers$descriptor() {
        return SteamAPI_ISteamClient_GetISteamMatchmakingServers.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ISteamMatchmakingServers *SteamAPI_ISteamClient_GetISteamMatchmakingServers(HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static MethodHandle SteamAPI_ISteamClient_GetISteamMatchmakingServers$handle() {
        return SteamAPI_ISteamClient_GetISteamMatchmakingServers.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ISteamMatchmakingServers *SteamAPI_ISteamClient_GetISteamMatchmakingServers(HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static MemorySegment SteamAPI_ISteamClient_GetISteamMatchmakingServers(int hSteamUser, int hSteamPipe, MemorySegment pchVersion) {
        var mh$ = SteamAPI_ISteamClient_GetISteamMatchmakingServers.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamClient_GetISteamMatchmakingServers", hSteamUser, hSteamPipe, pchVersion);
            }
            return (MemorySegment)mh$.invokeExact(hSteamUser, hSteamPipe, pchVersion);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamClient_GetISteamGenericInterface {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamClient_GetISteamGenericInterface"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *SteamAPI_ISteamClient_GetISteamGenericInterface(HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamClient_GetISteamGenericInterface$descriptor() {
        return SteamAPI_ISteamClient_GetISteamGenericInterface.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *SteamAPI_ISteamClient_GetISteamGenericInterface(HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static MethodHandle SteamAPI_ISteamClient_GetISteamGenericInterface$handle() {
        return SteamAPI_ISteamClient_GetISteamGenericInterface.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void *SteamAPI_ISteamClient_GetISteamGenericInterface(HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static MemorySegment SteamAPI_ISteamClient_GetISteamGenericInterface(int hSteamUser, int hSteamPipe, MemorySegment pchVersion) {
        var mh$ = SteamAPI_ISteamClient_GetISteamGenericInterface.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamClient_GetISteamGenericInterface", hSteamUser, hSteamPipe, pchVersion);
            }
            return (MemorySegment)mh$.invokeExact(hSteamUser, hSteamPipe, pchVersion);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamClient_GetISteamUserStats {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamClient_GetISteamUserStats"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ISteamUserStats *SteamAPI_ISteamClient_GetISteamUserStats(HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamClient_GetISteamUserStats$descriptor() {
        return SteamAPI_ISteamClient_GetISteamUserStats.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ISteamUserStats *SteamAPI_ISteamClient_GetISteamUserStats(HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static MethodHandle SteamAPI_ISteamClient_GetISteamUserStats$handle() {
        return SteamAPI_ISteamClient_GetISteamUserStats.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ISteamUserStats *SteamAPI_ISteamClient_GetISteamUserStats(HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static MemorySegment SteamAPI_ISteamClient_GetISteamUserStats(int hSteamUser, int hSteamPipe, MemorySegment pchVersion) {
        var mh$ = SteamAPI_ISteamClient_GetISteamUserStats.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamClient_GetISteamUserStats", hSteamUser, hSteamPipe, pchVersion);
            }
            return (MemorySegment)mh$.invokeExact(hSteamUser, hSteamPipe, pchVersion);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamClient_GetISteamGameServerStats {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamClient_GetISteamGameServerStats"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ISteamGameServerStats *SteamAPI_ISteamClient_GetISteamGameServerStats(HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamClient_GetISteamGameServerStats$descriptor() {
        return SteamAPI_ISteamClient_GetISteamGameServerStats.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ISteamGameServerStats *SteamAPI_ISteamClient_GetISteamGameServerStats(HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static MethodHandle SteamAPI_ISteamClient_GetISteamGameServerStats$handle() {
        return SteamAPI_ISteamClient_GetISteamGameServerStats.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ISteamGameServerStats *SteamAPI_ISteamClient_GetISteamGameServerStats(HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static MemorySegment SteamAPI_ISteamClient_GetISteamGameServerStats(int hSteamuser, int hSteamPipe, MemorySegment pchVersion) {
        var mh$ = SteamAPI_ISteamClient_GetISteamGameServerStats.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamClient_GetISteamGameServerStats", hSteamuser, hSteamPipe, pchVersion);
            }
            return (MemorySegment)mh$.invokeExact(hSteamuser, hSteamPipe, pchVersion);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamClient_GetISteamApps {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamClient_GetISteamApps"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ISteamApps *SteamAPI_ISteamClient_GetISteamApps(HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamClient_GetISteamApps$descriptor() {
        return SteamAPI_ISteamClient_GetISteamApps.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ISteamApps *SteamAPI_ISteamClient_GetISteamApps(HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static MethodHandle SteamAPI_ISteamClient_GetISteamApps$handle() {
        return SteamAPI_ISteamClient_GetISteamApps.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ISteamApps *SteamAPI_ISteamClient_GetISteamApps(HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static MemorySegment SteamAPI_ISteamClient_GetISteamApps(int hSteamUser, int hSteamPipe, MemorySegment pchVersion) {
        var mh$ = SteamAPI_ISteamClient_GetISteamApps.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamClient_GetISteamApps", hSteamUser, hSteamPipe, pchVersion);
            }
            return (MemorySegment)mh$.invokeExact(hSteamUser, hSteamPipe, pchVersion);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamClient_GetISteamNetworking {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamClient_GetISteamNetworking"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ISteamNetworking *SteamAPI_ISteamClient_GetISteamNetworking(HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamClient_GetISteamNetworking$descriptor() {
        return SteamAPI_ISteamClient_GetISteamNetworking.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ISteamNetworking *SteamAPI_ISteamClient_GetISteamNetworking(HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static MethodHandle SteamAPI_ISteamClient_GetISteamNetworking$handle() {
        return SteamAPI_ISteamClient_GetISteamNetworking.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ISteamNetworking *SteamAPI_ISteamClient_GetISteamNetworking(HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static MemorySegment SteamAPI_ISteamClient_GetISteamNetworking(int hSteamUser, int hSteamPipe, MemorySegment pchVersion) {
        var mh$ = SteamAPI_ISteamClient_GetISteamNetworking.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamClient_GetISteamNetworking", hSteamUser, hSteamPipe, pchVersion);
            }
            return (MemorySegment)mh$.invokeExact(hSteamUser, hSteamPipe, pchVersion);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamClient_GetISteamRemoteStorage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamClient_GetISteamRemoteStorage"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ISteamRemoteStorage *SteamAPI_ISteamClient_GetISteamRemoteStorage(HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamClient_GetISteamRemoteStorage$descriptor() {
        return SteamAPI_ISteamClient_GetISteamRemoteStorage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ISteamRemoteStorage *SteamAPI_ISteamClient_GetISteamRemoteStorage(HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static MethodHandle SteamAPI_ISteamClient_GetISteamRemoteStorage$handle() {
        return SteamAPI_ISteamClient_GetISteamRemoteStorage.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ISteamRemoteStorage *SteamAPI_ISteamClient_GetISteamRemoteStorage(HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static MemorySegment SteamAPI_ISteamClient_GetISteamRemoteStorage(int hSteamuser, int hSteamPipe, MemorySegment pchVersion) {
        var mh$ = SteamAPI_ISteamClient_GetISteamRemoteStorage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamClient_GetISteamRemoteStorage", hSteamuser, hSteamPipe, pchVersion);
            }
            return (MemorySegment)mh$.invokeExact(hSteamuser, hSteamPipe, pchVersion);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamClient_GetISteamScreenshots {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamClient_GetISteamScreenshots"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ISteamScreenshots *SteamAPI_ISteamClient_GetISteamScreenshots(HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamClient_GetISteamScreenshots$descriptor() {
        return SteamAPI_ISteamClient_GetISteamScreenshots.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ISteamScreenshots *SteamAPI_ISteamClient_GetISteamScreenshots(HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static MethodHandle SteamAPI_ISteamClient_GetISteamScreenshots$handle() {
        return SteamAPI_ISteamClient_GetISteamScreenshots.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ISteamScreenshots *SteamAPI_ISteamClient_GetISteamScreenshots(HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static MemorySegment SteamAPI_ISteamClient_GetISteamScreenshots(int hSteamuser, int hSteamPipe, MemorySegment pchVersion) {
        var mh$ = SteamAPI_ISteamClient_GetISteamScreenshots.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamClient_GetISteamScreenshots", hSteamuser, hSteamPipe, pchVersion);
            }
            return (MemorySegment)mh$.invokeExact(hSteamuser, hSteamPipe, pchVersion);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamClient_GetISteamGameSearch {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamClient_GetISteamGameSearch"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ISteamGameSearch *SteamAPI_ISteamClient_GetISteamGameSearch(HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamClient_GetISteamGameSearch$descriptor() {
        return SteamAPI_ISteamClient_GetISteamGameSearch.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ISteamGameSearch *SteamAPI_ISteamClient_GetISteamGameSearch(HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static MethodHandle SteamAPI_ISteamClient_GetISteamGameSearch$handle() {
        return SteamAPI_ISteamClient_GetISteamGameSearch.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ISteamGameSearch *SteamAPI_ISteamClient_GetISteamGameSearch(HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static MemorySegment SteamAPI_ISteamClient_GetISteamGameSearch(int hSteamuser, int hSteamPipe, MemorySegment pchVersion) {
        var mh$ = SteamAPI_ISteamClient_GetISteamGameSearch.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamClient_GetISteamGameSearch", hSteamuser, hSteamPipe, pchVersion);
            }
            return (MemorySegment)mh$.invokeExact(hSteamuser, hSteamPipe, pchVersion);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamClient_GetIPCCallCount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamClient_GetIPCCallCount"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamClient_GetIPCCallCount()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamClient_GetIPCCallCount$descriptor() {
        return SteamAPI_ISteamClient_GetIPCCallCount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamClient_GetIPCCallCount()
     * }
     */
    public static MethodHandle SteamAPI_ISteamClient_GetIPCCallCount$handle() {
        return SteamAPI_ISteamClient_GetIPCCallCount.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamClient_GetIPCCallCount()
     * }
     */
    public static int SteamAPI_ISteamClient_GetIPCCallCount() {
        var mh$ = SteamAPI_ISteamClient_GetIPCCallCount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamClient_GetIPCCallCount");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamClient_BShutdownIfAllPipesClosed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamClient_BShutdownIfAllPipesClosed"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamClient_BShutdownIfAllPipesClosed()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamClient_BShutdownIfAllPipesClosed$descriptor() {
        return SteamAPI_ISteamClient_BShutdownIfAllPipesClosed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamClient_BShutdownIfAllPipesClosed()
     * }
     */
    public static MethodHandle SteamAPI_ISteamClient_BShutdownIfAllPipesClosed$handle() {
        return SteamAPI_ISteamClient_BShutdownIfAllPipesClosed.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamClient_BShutdownIfAllPipesClosed()
     * }
     */
    public static boolean SteamAPI_ISteamClient_BShutdownIfAllPipesClosed() {
        var mh$ = SteamAPI_ISteamClient_BShutdownIfAllPipesClosed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamClient_BShutdownIfAllPipesClosed");
            }
            return (boolean)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamClient_GetISteamHTTP {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamClient_GetISteamHTTP"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ISteamHTTP *SteamAPI_ISteamClient_GetISteamHTTP(HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamClient_GetISteamHTTP$descriptor() {
        return SteamAPI_ISteamClient_GetISteamHTTP.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ISteamHTTP *SteamAPI_ISteamClient_GetISteamHTTP(HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static MethodHandle SteamAPI_ISteamClient_GetISteamHTTP$handle() {
        return SteamAPI_ISteamClient_GetISteamHTTP.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ISteamHTTP *SteamAPI_ISteamClient_GetISteamHTTP(HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static MemorySegment SteamAPI_ISteamClient_GetISteamHTTP(int hSteamuser, int hSteamPipe, MemorySegment pchVersion) {
        var mh$ = SteamAPI_ISteamClient_GetISteamHTTP.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamClient_GetISteamHTTP", hSteamuser, hSteamPipe, pchVersion);
            }
            return (MemorySegment)mh$.invokeExact(hSteamuser, hSteamPipe, pchVersion);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamClient_GetISteamController {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamClient_GetISteamController"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ISteamController *SteamAPI_ISteamClient_GetISteamController(HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamClient_GetISteamController$descriptor() {
        return SteamAPI_ISteamClient_GetISteamController.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ISteamController *SteamAPI_ISteamClient_GetISteamController(HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static MethodHandle SteamAPI_ISteamClient_GetISteamController$handle() {
        return SteamAPI_ISteamClient_GetISteamController.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ISteamController *SteamAPI_ISteamClient_GetISteamController(HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static MemorySegment SteamAPI_ISteamClient_GetISteamController(int hSteamUser, int hSteamPipe, MemorySegment pchVersion) {
        var mh$ = SteamAPI_ISteamClient_GetISteamController.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamClient_GetISteamController", hSteamUser, hSteamPipe, pchVersion);
            }
            return (MemorySegment)mh$.invokeExact(hSteamUser, hSteamPipe, pchVersion);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamClient_GetISteamUGC {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamClient_GetISteamUGC"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ISteamUGC *SteamAPI_ISteamClient_GetISteamUGC(HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamClient_GetISteamUGC$descriptor() {
        return SteamAPI_ISteamClient_GetISteamUGC.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ISteamUGC *SteamAPI_ISteamClient_GetISteamUGC(HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static MethodHandle SteamAPI_ISteamClient_GetISteamUGC$handle() {
        return SteamAPI_ISteamClient_GetISteamUGC.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ISteamUGC *SteamAPI_ISteamClient_GetISteamUGC(HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static MemorySegment SteamAPI_ISteamClient_GetISteamUGC(int hSteamUser, int hSteamPipe, MemorySegment pchVersion) {
        var mh$ = SteamAPI_ISteamClient_GetISteamUGC.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamClient_GetISteamUGC", hSteamUser, hSteamPipe, pchVersion);
            }
            return (MemorySegment)mh$.invokeExact(hSteamUser, hSteamPipe, pchVersion);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamClient_GetISteamMusic {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamClient_GetISteamMusic"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ISteamMusic *SteamAPI_ISteamClient_GetISteamMusic(HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamClient_GetISteamMusic$descriptor() {
        return SteamAPI_ISteamClient_GetISteamMusic.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ISteamMusic *SteamAPI_ISteamClient_GetISteamMusic(HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static MethodHandle SteamAPI_ISteamClient_GetISteamMusic$handle() {
        return SteamAPI_ISteamClient_GetISteamMusic.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ISteamMusic *SteamAPI_ISteamClient_GetISteamMusic(HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static MemorySegment SteamAPI_ISteamClient_GetISteamMusic(int hSteamuser, int hSteamPipe, MemorySegment pchVersion) {
        var mh$ = SteamAPI_ISteamClient_GetISteamMusic.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamClient_GetISteamMusic", hSteamuser, hSteamPipe, pchVersion);
            }
            return (MemorySegment)mh$.invokeExact(hSteamuser, hSteamPipe, pchVersion);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamClient_GetISteamMusicRemote {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamClient_GetISteamMusicRemote"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ISteamMusicRemote *SteamAPI_ISteamClient_GetISteamMusicRemote(HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamClient_GetISteamMusicRemote$descriptor() {
        return SteamAPI_ISteamClient_GetISteamMusicRemote.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ISteamMusicRemote *SteamAPI_ISteamClient_GetISteamMusicRemote(HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static MethodHandle SteamAPI_ISteamClient_GetISteamMusicRemote$handle() {
        return SteamAPI_ISteamClient_GetISteamMusicRemote.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ISteamMusicRemote *SteamAPI_ISteamClient_GetISteamMusicRemote(HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static MemorySegment SteamAPI_ISteamClient_GetISteamMusicRemote(int hSteamuser, int hSteamPipe, MemorySegment pchVersion) {
        var mh$ = SteamAPI_ISteamClient_GetISteamMusicRemote.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamClient_GetISteamMusicRemote", hSteamuser, hSteamPipe, pchVersion);
            }
            return (MemorySegment)mh$.invokeExact(hSteamuser, hSteamPipe, pchVersion);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamClient_GetISteamHTMLSurface {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamClient_GetISteamHTMLSurface"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ISteamHTMLSurface *SteamAPI_ISteamClient_GetISteamHTMLSurface(HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamClient_GetISteamHTMLSurface$descriptor() {
        return SteamAPI_ISteamClient_GetISteamHTMLSurface.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ISteamHTMLSurface *SteamAPI_ISteamClient_GetISteamHTMLSurface(HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static MethodHandle SteamAPI_ISteamClient_GetISteamHTMLSurface$handle() {
        return SteamAPI_ISteamClient_GetISteamHTMLSurface.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ISteamHTMLSurface *SteamAPI_ISteamClient_GetISteamHTMLSurface(HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static MemorySegment SteamAPI_ISteamClient_GetISteamHTMLSurface(int hSteamuser, int hSteamPipe, MemorySegment pchVersion) {
        var mh$ = SteamAPI_ISteamClient_GetISteamHTMLSurface.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamClient_GetISteamHTMLSurface", hSteamuser, hSteamPipe, pchVersion);
            }
            return (MemorySegment)mh$.invokeExact(hSteamuser, hSteamPipe, pchVersion);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamClient_GetISteamInventory {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamClient_GetISteamInventory"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ISteamInventory *SteamAPI_ISteamClient_GetISteamInventory(HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamClient_GetISteamInventory$descriptor() {
        return SteamAPI_ISteamClient_GetISteamInventory.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ISteamInventory *SteamAPI_ISteamClient_GetISteamInventory(HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static MethodHandle SteamAPI_ISteamClient_GetISteamInventory$handle() {
        return SteamAPI_ISteamClient_GetISteamInventory.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ISteamInventory *SteamAPI_ISteamClient_GetISteamInventory(HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static MemorySegment SteamAPI_ISteamClient_GetISteamInventory(int hSteamuser, int hSteamPipe, MemorySegment pchVersion) {
        var mh$ = SteamAPI_ISteamClient_GetISteamInventory.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamClient_GetISteamInventory", hSteamuser, hSteamPipe, pchVersion);
            }
            return (MemorySegment)mh$.invokeExact(hSteamuser, hSteamPipe, pchVersion);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamClient_GetISteamParentalSettings {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamClient_GetISteamParentalSettings"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ISteamParentalSettings *SteamAPI_ISteamClient_GetISteamParentalSettings(HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamClient_GetISteamParentalSettings$descriptor() {
        return SteamAPI_ISteamClient_GetISteamParentalSettings.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ISteamParentalSettings *SteamAPI_ISteamClient_GetISteamParentalSettings(HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static MethodHandle SteamAPI_ISteamClient_GetISteamParentalSettings$handle() {
        return SteamAPI_ISteamClient_GetISteamParentalSettings.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ISteamParentalSettings *SteamAPI_ISteamClient_GetISteamParentalSettings(HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static MemorySegment SteamAPI_ISteamClient_GetISteamParentalSettings(int hSteamuser, int hSteamPipe, MemorySegment pchVersion) {
        var mh$ = SteamAPI_ISteamClient_GetISteamParentalSettings.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamClient_GetISteamParentalSettings", hSteamuser, hSteamPipe, pchVersion);
            }
            return (MemorySegment)mh$.invokeExact(hSteamuser, hSteamPipe, pchVersion);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamClient_GetISteamInput {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamClient_GetISteamInput"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ISteamInput *SteamAPI_ISteamClient_GetISteamInput(HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamClient_GetISteamInput$descriptor() {
        return SteamAPI_ISteamClient_GetISteamInput.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ISteamInput *SteamAPI_ISteamClient_GetISteamInput(HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static MethodHandle SteamAPI_ISteamClient_GetISteamInput$handle() {
        return SteamAPI_ISteamClient_GetISteamInput.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ISteamInput *SteamAPI_ISteamClient_GetISteamInput(HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static MemorySegment SteamAPI_ISteamClient_GetISteamInput(int hSteamUser, int hSteamPipe, MemorySegment pchVersion) {
        var mh$ = SteamAPI_ISteamClient_GetISteamInput.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamClient_GetISteamInput", hSteamUser, hSteamPipe, pchVersion);
            }
            return (MemorySegment)mh$.invokeExact(hSteamUser, hSteamPipe, pchVersion);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamClient_GetISteamParties {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamClient_GetISteamParties"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ISteamParties *SteamAPI_ISteamClient_GetISteamParties(HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamClient_GetISteamParties$descriptor() {
        return SteamAPI_ISteamClient_GetISteamParties.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ISteamParties *SteamAPI_ISteamClient_GetISteamParties(HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static MethodHandle SteamAPI_ISteamClient_GetISteamParties$handle() {
        return SteamAPI_ISteamClient_GetISteamParties.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ISteamParties *SteamAPI_ISteamClient_GetISteamParties(HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static MemorySegment SteamAPI_ISteamClient_GetISteamParties(int hSteamUser, int hSteamPipe, MemorySegment pchVersion) {
        var mh$ = SteamAPI_ISteamClient_GetISteamParties.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamClient_GetISteamParties", hSteamUser, hSteamPipe, pchVersion);
            }
            return (MemorySegment)mh$.invokeExact(hSteamUser, hSteamPipe, pchVersion);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamClient_GetISteamRemotePlay {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamClient_GetISteamRemotePlay"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ISteamRemotePlay *SteamAPI_ISteamClient_GetISteamRemotePlay(HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamClient_GetISteamRemotePlay$descriptor() {
        return SteamAPI_ISteamClient_GetISteamRemotePlay.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ISteamRemotePlay *SteamAPI_ISteamClient_GetISteamRemotePlay(HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static MethodHandle SteamAPI_ISteamClient_GetISteamRemotePlay$handle() {
        return SteamAPI_ISteamClient_GetISteamRemotePlay.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ISteamRemotePlay *SteamAPI_ISteamClient_GetISteamRemotePlay(HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion)
     * }
     */
    public static MemorySegment SteamAPI_ISteamClient_GetISteamRemotePlay(int hSteamUser, int hSteamPipe, MemorySegment pchVersion) {
        var mh$ = SteamAPI_ISteamClient_GetISteamRemotePlay.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamClient_GetISteamRemotePlay", hSteamUser, hSteamPipe, pchVersion);
            }
            return (MemorySegment)mh$.invokeExact(hSteamUser, hSteamPipe, pchVersion);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUser_GetHSteamUser {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUser_GetHSteamUser"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HSteamUser SteamAPI_ISteamUser_GetHSteamUser()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUser_GetHSteamUser$descriptor() {
        return SteamAPI_ISteamUser_GetHSteamUser.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HSteamUser SteamAPI_ISteamUser_GetHSteamUser()
     * }
     */
    public static MethodHandle SteamAPI_ISteamUser_GetHSteamUser$handle() {
        return SteamAPI_ISteamUser_GetHSteamUser.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HSteamUser SteamAPI_ISteamUser_GetHSteamUser()
     * }
     */
    public static int SteamAPI_ISteamUser_GetHSteamUser() {
        var mh$ = SteamAPI_ISteamUser_GetHSteamUser.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUser_GetHSteamUser");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUser_BLoggedOn {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUser_BLoggedOn"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUser_BLoggedOn()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUser_BLoggedOn$descriptor() {
        return SteamAPI_ISteamUser_BLoggedOn.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUser_BLoggedOn()
     * }
     */
    public static MethodHandle SteamAPI_ISteamUser_BLoggedOn$handle() {
        return SteamAPI_ISteamUser_BLoggedOn.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUser_BLoggedOn()
     * }
     */
    public static boolean SteamAPI_ISteamUser_BLoggedOn() {
        var mh$ = SteamAPI_ISteamUser_BLoggedOn.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUser_BLoggedOn");
            }
            return (boolean)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUser_GetSteamID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_LONG_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUser_GetSteamID"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint64_steamid SteamAPI_ISteamUser_GetSteamID()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUser_GetSteamID$descriptor() {
        return SteamAPI_ISteamUser_GetSteamID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint64_steamid SteamAPI_ISteamUser_GetSteamID()
     * }
     */
    public static MethodHandle SteamAPI_ISteamUser_GetSteamID$handle() {
        return SteamAPI_ISteamUser_GetSteamID.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * uint64_steamid SteamAPI_ISteamUser_GetSteamID()
     * }
     */
    public static long SteamAPI_ISteamUser_GetSteamID() {
        var mh$ = SteamAPI_ISteamUser_GetSteamID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUser_GetSteamID");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUser_InitiateGameConnection_DEPRECATED {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_SHORT,
            SteamFlat4j.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUser_InitiateGameConnection_DEPRECATED"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamUser_InitiateGameConnection_DEPRECATED(void *pAuthBlob, int cbMaxAuthBlob, uint64_steamid steamIDGameServer, uint32 unIPServer, uint16 usPortServer, bool bSecure)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUser_InitiateGameConnection_DEPRECATED$descriptor() {
        return SteamAPI_ISteamUser_InitiateGameConnection_DEPRECATED.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamUser_InitiateGameConnection_DEPRECATED(void *pAuthBlob, int cbMaxAuthBlob, uint64_steamid steamIDGameServer, uint32 unIPServer, uint16 usPortServer, bool bSecure)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUser_InitiateGameConnection_DEPRECATED$handle() {
        return SteamAPI_ISteamUser_InitiateGameConnection_DEPRECATED.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int SteamAPI_ISteamUser_InitiateGameConnection_DEPRECATED(void *pAuthBlob, int cbMaxAuthBlob, uint64_steamid steamIDGameServer, uint32 unIPServer, uint16 usPortServer, bool bSecure)
     * }
     */
    public static int SteamAPI_ISteamUser_InitiateGameConnection_DEPRECATED(MemorySegment pAuthBlob, int cbMaxAuthBlob, long steamIDGameServer, int unIPServer, short usPortServer, boolean bSecure) {
        var mh$ = SteamAPI_ISteamUser_InitiateGameConnection_DEPRECATED.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUser_InitiateGameConnection_DEPRECATED", pAuthBlob, cbMaxAuthBlob, steamIDGameServer, unIPServer, usPortServer, bSecure);
            }
            return (int)mh$.invokeExact(pAuthBlob, cbMaxAuthBlob, steamIDGameServer, unIPServer, usPortServer, bSecure);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUser_TerminateGameConnection_DEPRECATED {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_SHORT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUser_TerminateGameConnection_DEPRECATED"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamUser_TerminateGameConnection_DEPRECATED(uint32 unIPServer, uint16 usPortServer)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUser_TerminateGameConnection_DEPRECATED$descriptor() {
        return SteamAPI_ISteamUser_TerminateGameConnection_DEPRECATED.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamUser_TerminateGameConnection_DEPRECATED(uint32 unIPServer, uint16 usPortServer)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUser_TerminateGameConnection_DEPRECATED$handle() {
        return SteamAPI_ISteamUser_TerminateGameConnection_DEPRECATED.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamUser_TerminateGameConnection_DEPRECATED(uint32 unIPServer, uint16 usPortServer)
     * }
     */
    public static void SteamAPI_ISteamUser_TerminateGameConnection_DEPRECATED(int unIPServer, short usPortServer) {
        var mh$ = SteamAPI_ISteamUser_TerminateGameConnection_DEPRECATED.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUser_TerminateGameConnection_DEPRECATED", unIPServer, usPortServer);
            }
            mh$.invokeExact(unIPServer, usPortServer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUser_TrackAppUsageEvent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUser_TrackAppUsageEvent"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamUser_TrackAppUsageEvent(uint64_gameid gameID, int eAppUsageEvent, const char *pchExtraInfo)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUser_TrackAppUsageEvent$descriptor() {
        return SteamAPI_ISteamUser_TrackAppUsageEvent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamUser_TrackAppUsageEvent(uint64_gameid gameID, int eAppUsageEvent, const char *pchExtraInfo)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUser_TrackAppUsageEvent$handle() {
        return SteamAPI_ISteamUser_TrackAppUsageEvent.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamUser_TrackAppUsageEvent(uint64_gameid gameID, int eAppUsageEvent, const char *pchExtraInfo)
     * }
     */
    public static void SteamAPI_ISteamUser_TrackAppUsageEvent(long gameID, int eAppUsageEvent, MemorySegment pchExtraInfo) {
        var mh$ = SteamAPI_ISteamUser_TrackAppUsageEvent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUser_TrackAppUsageEvent", gameID, eAppUsageEvent, pchExtraInfo);
            }
            mh$.invokeExact(gameID, eAppUsageEvent, pchExtraInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUser_GetUserDataFolder {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUser_GetUserDataFolder"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUser_GetUserDataFolder(char *pchBuffer, int cubBuffer)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUser_GetUserDataFolder$descriptor() {
        return SteamAPI_ISteamUser_GetUserDataFolder.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUser_GetUserDataFolder(char *pchBuffer, int cubBuffer)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUser_GetUserDataFolder$handle() {
        return SteamAPI_ISteamUser_GetUserDataFolder.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUser_GetUserDataFolder(char *pchBuffer, int cubBuffer)
     * }
     */
    public static boolean SteamAPI_ISteamUser_GetUserDataFolder(MemorySegment pchBuffer, int cubBuffer) {
        var mh$ = SteamAPI_ISteamUser_GetUserDataFolder.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUser_GetUserDataFolder", pchBuffer, cubBuffer);
            }
            return (boolean)mh$.invokeExact(pchBuffer, cubBuffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUser_StartVoiceRecording {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUser_StartVoiceRecording"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamUser_StartVoiceRecording()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUser_StartVoiceRecording$descriptor() {
        return SteamAPI_ISteamUser_StartVoiceRecording.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamUser_StartVoiceRecording()
     * }
     */
    public static MethodHandle SteamAPI_ISteamUser_StartVoiceRecording$handle() {
        return SteamAPI_ISteamUser_StartVoiceRecording.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamUser_StartVoiceRecording()
     * }
     */
    public static void SteamAPI_ISteamUser_StartVoiceRecording() {
        var mh$ = SteamAPI_ISteamUser_StartVoiceRecording.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUser_StartVoiceRecording");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUser_StopVoiceRecording {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUser_StopVoiceRecording"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamUser_StopVoiceRecording()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUser_StopVoiceRecording$descriptor() {
        return SteamAPI_ISteamUser_StopVoiceRecording.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamUser_StopVoiceRecording()
     * }
     */
    public static MethodHandle SteamAPI_ISteamUser_StopVoiceRecording$handle() {
        return SteamAPI_ISteamUser_StopVoiceRecording.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamUser_StopVoiceRecording()
     * }
     */
    public static void SteamAPI_ISteamUser_StopVoiceRecording() {
        var mh$ = SteamAPI_ISteamUser_StopVoiceRecording.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUser_StopVoiceRecording");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUser_GetAvailableVoice {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUser_GetAvailableVoice"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * EVoiceResult SteamAPI_ISteamUser_GetAvailableVoice(uint32 *pcbCompressed, uint32 *pcbUncompressed_Deprecated, uint32 nUncompressedVoiceDesiredSampleRate_Deprecated)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUser_GetAvailableVoice$descriptor() {
        return SteamAPI_ISteamUser_GetAvailableVoice.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * EVoiceResult SteamAPI_ISteamUser_GetAvailableVoice(uint32 *pcbCompressed, uint32 *pcbUncompressed_Deprecated, uint32 nUncompressedVoiceDesiredSampleRate_Deprecated)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUser_GetAvailableVoice$handle() {
        return SteamAPI_ISteamUser_GetAvailableVoice.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * EVoiceResult SteamAPI_ISteamUser_GetAvailableVoice(uint32 *pcbCompressed, uint32 *pcbUncompressed_Deprecated, uint32 nUncompressedVoiceDesiredSampleRate_Deprecated)
     * }
     */
    public static int SteamAPI_ISteamUser_GetAvailableVoice(MemorySegment pcbCompressed, MemorySegment pcbUncompressed_Deprecated, int nUncompressedVoiceDesiredSampleRate_Deprecated) {
        var mh$ = SteamAPI_ISteamUser_GetAvailableVoice.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUser_GetAvailableVoice", pcbCompressed, pcbUncompressed_Deprecated, nUncompressedVoiceDesiredSampleRate_Deprecated);
            }
            return (int)mh$.invokeExact(pcbCompressed, pcbUncompressed_Deprecated, nUncompressedVoiceDesiredSampleRate_Deprecated);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUser_GetVoice {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUser_GetVoice"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * EVoiceResult SteamAPI_ISteamUser_GetVoice(bool bWantCompressed, void *pDestBuffer, uint32 cbDestBufferSize, uint32 *nBytesWritten, bool bWantUncompressed_Deprecated, void *pUncompressedDestBuffer_Deprecated, uint32 cbUncompressedDestBufferSize_Deprecated, uint32 *nUncompressBytesWritten_Deprecated, uint32 nUncompressedVoiceDesiredSampleRate_Deprecated)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUser_GetVoice$descriptor() {
        return SteamAPI_ISteamUser_GetVoice.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * EVoiceResult SteamAPI_ISteamUser_GetVoice(bool bWantCompressed, void *pDestBuffer, uint32 cbDestBufferSize, uint32 *nBytesWritten, bool bWantUncompressed_Deprecated, void *pUncompressedDestBuffer_Deprecated, uint32 cbUncompressedDestBufferSize_Deprecated, uint32 *nUncompressBytesWritten_Deprecated, uint32 nUncompressedVoiceDesiredSampleRate_Deprecated)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUser_GetVoice$handle() {
        return SteamAPI_ISteamUser_GetVoice.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * EVoiceResult SteamAPI_ISteamUser_GetVoice(bool bWantCompressed, void *pDestBuffer, uint32 cbDestBufferSize, uint32 *nBytesWritten, bool bWantUncompressed_Deprecated, void *pUncompressedDestBuffer_Deprecated, uint32 cbUncompressedDestBufferSize_Deprecated, uint32 *nUncompressBytesWritten_Deprecated, uint32 nUncompressedVoiceDesiredSampleRate_Deprecated)
     * }
     */
    public static int SteamAPI_ISteamUser_GetVoice(boolean bWantCompressed, MemorySegment pDestBuffer, int cbDestBufferSize, MemorySegment nBytesWritten, boolean bWantUncompressed_Deprecated, MemorySegment pUncompressedDestBuffer_Deprecated, int cbUncompressedDestBufferSize_Deprecated, MemorySegment nUncompressBytesWritten_Deprecated, int nUncompressedVoiceDesiredSampleRate_Deprecated) {
        var mh$ = SteamAPI_ISteamUser_GetVoice.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUser_GetVoice", bWantCompressed, pDestBuffer, cbDestBufferSize, nBytesWritten, bWantUncompressed_Deprecated, pUncompressedDestBuffer_Deprecated, cbUncompressedDestBufferSize_Deprecated, nUncompressBytesWritten_Deprecated, nUncompressedVoiceDesiredSampleRate_Deprecated);
            }
            return (int)mh$.invokeExact(bWantCompressed, pDestBuffer, cbDestBufferSize, nBytesWritten, bWantUncompressed_Deprecated, pUncompressedDestBuffer_Deprecated, cbUncompressedDestBufferSize_Deprecated, nUncompressBytesWritten_Deprecated, nUncompressedVoiceDesiredSampleRate_Deprecated);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUser_DecompressVoice {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUser_DecompressVoice"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * EVoiceResult SteamAPI_ISteamUser_DecompressVoice(const void *pCompressed, uint32 cbCompressed, void *pDestBuffer, uint32 cbDestBufferSize, uint32 *nBytesWritten, uint32 nDesiredSampleRate)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUser_DecompressVoice$descriptor() {
        return SteamAPI_ISteamUser_DecompressVoice.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * EVoiceResult SteamAPI_ISteamUser_DecompressVoice(const void *pCompressed, uint32 cbCompressed, void *pDestBuffer, uint32 cbDestBufferSize, uint32 *nBytesWritten, uint32 nDesiredSampleRate)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUser_DecompressVoice$handle() {
        return SteamAPI_ISteamUser_DecompressVoice.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * EVoiceResult SteamAPI_ISteamUser_DecompressVoice(const void *pCompressed, uint32 cbCompressed, void *pDestBuffer, uint32 cbDestBufferSize, uint32 *nBytesWritten, uint32 nDesiredSampleRate)
     * }
     */
    public static int SteamAPI_ISteamUser_DecompressVoice(MemorySegment pCompressed, int cbCompressed, MemorySegment pDestBuffer, int cbDestBufferSize, MemorySegment nBytesWritten, int nDesiredSampleRate) {
        var mh$ = SteamAPI_ISteamUser_DecompressVoice.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUser_DecompressVoice", pCompressed, cbCompressed, pDestBuffer, cbDestBufferSize, nBytesWritten, nDesiredSampleRate);
            }
            return (int)mh$.invokeExact(pCompressed, cbCompressed, pDestBuffer, cbDestBufferSize, nBytesWritten, nDesiredSampleRate);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUser_GetVoiceOptimalSampleRate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUser_GetVoiceOptimalSampleRate"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamUser_GetVoiceOptimalSampleRate()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUser_GetVoiceOptimalSampleRate$descriptor() {
        return SteamAPI_ISteamUser_GetVoiceOptimalSampleRate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamUser_GetVoiceOptimalSampleRate()
     * }
     */
    public static MethodHandle SteamAPI_ISteamUser_GetVoiceOptimalSampleRate$handle() {
        return SteamAPI_ISteamUser_GetVoiceOptimalSampleRate.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamUser_GetVoiceOptimalSampleRate()
     * }
     */
    public static int SteamAPI_ISteamUser_GetVoiceOptimalSampleRate() {
        var mh$ = SteamAPI_ISteamUser_GetVoiceOptimalSampleRate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUser_GetVoiceOptimalSampleRate");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUser_GetAuthSessionTicket {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUser_GetAuthSessionTicket"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HAuthTicket SteamAPI_ISteamUser_GetAuthSessionTicket(void *pTicket, int cbMaxTicket, uint32 *pcbTicket, const SteamNetworkingIdentity *pSteamNetworkingIdentity)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUser_GetAuthSessionTicket$descriptor() {
        return SteamAPI_ISteamUser_GetAuthSessionTicket.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HAuthTicket SteamAPI_ISteamUser_GetAuthSessionTicket(void *pTicket, int cbMaxTicket, uint32 *pcbTicket, const SteamNetworkingIdentity *pSteamNetworkingIdentity)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUser_GetAuthSessionTicket$handle() {
        return SteamAPI_ISteamUser_GetAuthSessionTicket.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HAuthTicket SteamAPI_ISteamUser_GetAuthSessionTicket(void *pTicket, int cbMaxTicket, uint32 *pcbTicket, const SteamNetworkingIdentity *pSteamNetworkingIdentity)
     * }
     */
    public static int SteamAPI_ISteamUser_GetAuthSessionTicket(MemorySegment pTicket, int cbMaxTicket, MemorySegment pcbTicket, MemorySegment pSteamNetworkingIdentity) {
        var mh$ = SteamAPI_ISteamUser_GetAuthSessionTicket.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUser_GetAuthSessionTicket", pTicket, cbMaxTicket, pcbTicket, pSteamNetworkingIdentity);
            }
            return (int)mh$.invokeExact(pTicket, cbMaxTicket, pcbTicket, pSteamNetworkingIdentity);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUser_GetAuthTicketForWebApi {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUser_GetAuthTicketForWebApi"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HAuthTicket SteamAPI_ISteamUser_GetAuthTicketForWebApi(const char *pchIdentity)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUser_GetAuthTicketForWebApi$descriptor() {
        return SteamAPI_ISteamUser_GetAuthTicketForWebApi.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HAuthTicket SteamAPI_ISteamUser_GetAuthTicketForWebApi(const char *pchIdentity)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUser_GetAuthTicketForWebApi$handle() {
        return SteamAPI_ISteamUser_GetAuthTicketForWebApi.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HAuthTicket SteamAPI_ISteamUser_GetAuthTicketForWebApi(const char *pchIdentity)
     * }
     */
    public static int SteamAPI_ISteamUser_GetAuthTicketForWebApi(MemorySegment pchIdentity) {
        var mh$ = SteamAPI_ISteamUser_GetAuthTicketForWebApi.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUser_GetAuthTicketForWebApi", pchIdentity);
            }
            return (int)mh$.invokeExact(pchIdentity);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUser_BeginAuthSession {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUser_BeginAuthSession"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * EBeginAuthSessionResult SteamAPI_ISteamUser_BeginAuthSession(const void *pAuthTicket, int cbAuthTicket, uint64_steamid steamID)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUser_BeginAuthSession$descriptor() {
        return SteamAPI_ISteamUser_BeginAuthSession.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * EBeginAuthSessionResult SteamAPI_ISteamUser_BeginAuthSession(const void *pAuthTicket, int cbAuthTicket, uint64_steamid steamID)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUser_BeginAuthSession$handle() {
        return SteamAPI_ISteamUser_BeginAuthSession.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * EBeginAuthSessionResult SteamAPI_ISteamUser_BeginAuthSession(const void *pAuthTicket, int cbAuthTicket, uint64_steamid steamID)
     * }
     */
    public static int SteamAPI_ISteamUser_BeginAuthSession(MemorySegment pAuthTicket, int cbAuthTicket, long steamID) {
        var mh$ = SteamAPI_ISteamUser_BeginAuthSession.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUser_BeginAuthSession", pAuthTicket, cbAuthTicket, steamID);
            }
            return (int)mh$.invokeExact(pAuthTicket, cbAuthTicket, steamID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUser_EndAuthSession {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUser_EndAuthSession"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamUser_EndAuthSession(uint64_steamid steamID)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUser_EndAuthSession$descriptor() {
        return SteamAPI_ISteamUser_EndAuthSession.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamUser_EndAuthSession(uint64_steamid steamID)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUser_EndAuthSession$handle() {
        return SteamAPI_ISteamUser_EndAuthSession.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamUser_EndAuthSession(uint64_steamid steamID)
     * }
     */
    public static void SteamAPI_ISteamUser_EndAuthSession(long steamID) {
        var mh$ = SteamAPI_ISteamUser_EndAuthSession.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUser_EndAuthSession", steamID);
            }
            mh$.invokeExact(steamID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUser_CancelAuthTicket {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUser_CancelAuthTicket"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamUser_CancelAuthTicket(HAuthTicket hAuthTicket)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUser_CancelAuthTicket$descriptor() {
        return SteamAPI_ISteamUser_CancelAuthTicket.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamUser_CancelAuthTicket(HAuthTicket hAuthTicket)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUser_CancelAuthTicket$handle() {
        return SteamAPI_ISteamUser_CancelAuthTicket.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamUser_CancelAuthTicket(HAuthTicket hAuthTicket)
     * }
     */
    public static void SteamAPI_ISteamUser_CancelAuthTicket(int hAuthTicket) {
        var mh$ = SteamAPI_ISteamUser_CancelAuthTicket.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUser_CancelAuthTicket", hAuthTicket);
            }
            mh$.invokeExact(hAuthTicket);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUser_UserHasLicenseForApp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUser_UserHasLicenseForApp"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * EUserHasLicenseForAppResult SteamAPI_ISteamUser_UserHasLicenseForApp(uint64_steamid steamID, AppId_t appID)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUser_UserHasLicenseForApp$descriptor() {
        return SteamAPI_ISteamUser_UserHasLicenseForApp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * EUserHasLicenseForAppResult SteamAPI_ISteamUser_UserHasLicenseForApp(uint64_steamid steamID, AppId_t appID)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUser_UserHasLicenseForApp$handle() {
        return SteamAPI_ISteamUser_UserHasLicenseForApp.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * EUserHasLicenseForAppResult SteamAPI_ISteamUser_UserHasLicenseForApp(uint64_steamid steamID, AppId_t appID)
     * }
     */
    public static int SteamAPI_ISteamUser_UserHasLicenseForApp(long steamID, int appID) {
        var mh$ = SteamAPI_ISteamUser_UserHasLicenseForApp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUser_UserHasLicenseForApp", steamID, appID);
            }
            return (int)mh$.invokeExact(steamID, appID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUser_BIsBehindNAT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUser_BIsBehindNAT"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUser_BIsBehindNAT()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUser_BIsBehindNAT$descriptor() {
        return SteamAPI_ISteamUser_BIsBehindNAT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUser_BIsBehindNAT()
     * }
     */
    public static MethodHandle SteamAPI_ISteamUser_BIsBehindNAT$handle() {
        return SteamAPI_ISteamUser_BIsBehindNAT.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUser_BIsBehindNAT()
     * }
     */
    public static boolean SteamAPI_ISteamUser_BIsBehindNAT() {
        var mh$ = SteamAPI_ISteamUser_BIsBehindNAT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUser_BIsBehindNAT");
            }
            return (boolean)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUser_AdvertiseGame {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_SHORT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUser_AdvertiseGame"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamUser_AdvertiseGame(uint64_steamid steamIDGameServer, uint32 unIPServer, uint16 usPortServer)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUser_AdvertiseGame$descriptor() {
        return SteamAPI_ISteamUser_AdvertiseGame.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamUser_AdvertiseGame(uint64_steamid steamIDGameServer, uint32 unIPServer, uint16 usPortServer)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUser_AdvertiseGame$handle() {
        return SteamAPI_ISteamUser_AdvertiseGame.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamUser_AdvertiseGame(uint64_steamid steamIDGameServer, uint32 unIPServer, uint16 usPortServer)
     * }
     */
    public static void SteamAPI_ISteamUser_AdvertiseGame(long steamIDGameServer, int unIPServer, short usPortServer) {
        var mh$ = SteamAPI_ISteamUser_AdvertiseGame.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUser_AdvertiseGame", steamIDGameServer, unIPServer, usPortServer);
            }
            mh$.invokeExact(steamIDGameServer, unIPServer, usPortServer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUser_RequestEncryptedAppTicket {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUser_RequestEncryptedAppTicket"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUser_RequestEncryptedAppTicket(void *pDataToInclude, int cbDataToInclude)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUser_RequestEncryptedAppTicket$descriptor() {
        return SteamAPI_ISteamUser_RequestEncryptedAppTicket.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUser_RequestEncryptedAppTicket(void *pDataToInclude, int cbDataToInclude)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUser_RequestEncryptedAppTicket$handle() {
        return SteamAPI_ISteamUser_RequestEncryptedAppTicket.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUser_RequestEncryptedAppTicket(void *pDataToInclude, int cbDataToInclude)
     * }
     */
    public static long SteamAPI_ISteamUser_RequestEncryptedAppTicket(MemorySegment pDataToInclude, int cbDataToInclude) {
        var mh$ = SteamAPI_ISteamUser_RequestEncryptedAppTicket.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUser_RequestEncryptedAppTicket", pDataToInclude, cbDataToInclude);
            }
            return (long)mh$.invokeExact(pDataToInclude, cbDataToInclude);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUser_GetEncryptedAppTicket {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUser_GetEncryptedAppTicket"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUser_GetEncryptedAppTicket(void *pTicket, int cbMaxTicket, uint32 *pcbTicket)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUser_GetEncryptedAppTicket$descriptor() {
        return SteamAPI_ISteamUser_GetEncryptedAppTicket.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUser_GetEncryptedAppTicket(void *pTicket, int cbMaxTicket, uint32 *pcbTicket)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUser_GetEncryptedAppTicket$handle() {
        return SteamAPI_ISteamUser_GetEncryptedAppTicket.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUser_GetEncryptedAppTicket(void *pTicket, int cbMaxTicket, uint32 *pcbTicket)
     * }
     */
    public static boolean SteamAPI_ISteamUser_GetEncryptedAppTicket(MemorySegment pTicket, int cbMaxTicket, MemorySegment pcbTicket) {
        var mh$ = SteamAPI_ISteamUser_GetEncryptedAppTicket.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUser_GetEncryptedAppTicket", pTicket, cbMaxTicket, pcbTicket);
            }
            return (boolean)mh$.invokeExact(pTicket, cbMaxTicket, pcbTicket);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUser_GetGameBadgeLevel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUser_GetGameBadgeLevel"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamUser_GetGameBadgeLevel(int nSeries, bool bFoil)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUser_GetGameBadgeLevel$descriptor() {
        return SteamAPI_ISteamUser_GetGameBadgeLevel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamUser_GetGameBadgeLevel(int nSeries, bool bFoil)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUser_GetGameBadgeLevel$handle() {
        return SteamAPI_ISteamUser_GetGameBadgeLevel.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int SteamAPI_ISteamUser_GetGameBadgeLevel(int nSeries, bool bFoil)
     * }
     */
    public static int SteamAPI_ISteamUser_GetGameBadgeLevel(int nSeries, boolean bFoil) {
        var mh$ = SteamAPI_ISteamUser_GetGameBadgeLevel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUser_GetGameBadgeLevel", nSeries, bFoil);
            }
            return (int)mh$.invokeExact(nSeries, bFoil);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUser_GetPlayerSteamLevel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUser_GetPlayerSteamLevel"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamUser_GetPlayerSteamLevel()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUser_GetPlayerSteamLevel$descriptor() {
        return SteamAPI_ISteamUser_GetPlayerSteamLevel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamUser_GetPlayerSteamLevel()
     * }
     */
    public static MethodHandle SteamAPI_ISteamUser_GetPlayerSteamLevel$handle() {
        return SteamAPI_ISteamUser_GetPlayerSteamLevel.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int SteamAPI_ISteamUser_GetPlayerSteamLevel()
     * }
     */
    public static int SteamAPI_ISteamUser_GetPlayerSteamLevel() {
        var mh$ = SteamAPI_ISteamUser_GetPlayerSteamLevel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUser_GetPlayerSteamLevel");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUser_RequestStoreAuthURL {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUser_RequestStoreAuthURL"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUser_RequestStoreAuthURL(const char *pchRedirectURL)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUser_RequestStoreAuthURL$descriptor() {
        return SteamAPI_ISteamUser_RequestStoreAuthURL.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUser_RequestStoreAuthURL(const char *pchRedirectURL)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUser_RequestStoreAuthURL$handle() {
        return SteamAPI_ISteamUser_RequestStoreAuthURL.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUser_RequestStoreAuthURL(const char *pchRedirectURL)
     * }
     */
    public static long SteamAPI_ISteamUser_RequestStoreAuthURL(MemorySegment pchRedirectURL) {
        var mh$ = SteamAPI_ISteamUser_RequestStoreAuthURL.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUser_RequestStoreAuthURL", pchRedirectURL);
            }
            return (long)mh$.invokeExact(pchRedirectURL);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUser_BIsPhoneVerified {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUser_BIsPhoneVerified"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUser_BIsPhoneVerified()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUser_BIsPhoneVerified$descriptor() {
        return SteamAPI_ISteamUser_BIsPhoneVerified.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUser_BIsPhoneVerified()
     * }
     */
    public static MethodHandle SteamAPI_ISteamUser_BIsPhoneVerified$handle() {
        return SteamAPI_ISteamUser_BIsPhoneVerified.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUser_BIsPhoneVerified()
     * }
     */
    public static boolean SteamAPI_ISteamUser_BIsPhoneVerified() {
        var mh$ = SteamAPI_ISteamUser_BIsPhoneVerified.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUser_BIsPhoneVerified");
            }
            return (boolean)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUser_BIsTwoFactorEnabled {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUser_BIsTwoFactorEnabled"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUser_BIsTwoFactorEnabled()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUser_BIsTwoFactorEnabled$descriptor() {
        return SteamAPI_ISteamUser_BIsTwoFactorEnabled.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUser_BIsTwoFactorEnabled()
     * }
     */
    public static MethodHandle SteamAPI_ISteamUser_BIsTwoFactorEnabled$handle() {
        return SteamAPI_ISteamUser_BIsTwoFactorEnabled.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUser_BIsTwoFactorEnabled()
     * }
     */
    public static boolean SteamAPI_ISteamUser_BIsTwoFactorEnabled() {
        var mh$ = SteamAPI_ISteamUser_BIsTwoFactorEnabled.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUser_BIsTwoFactorEnabled");
            }
            return (boolean)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUser_BIsPhoneIdentifying {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUser_BIsPhoneIdentifying"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUser_BIsPhoneIdentifying()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUser_BIsPhoneIdentifying$descriptor() {
        return SteamAPI_ISteamUser_BIsPhoneIdentifying.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUser_BIsPhoneIdentifying()
     * }
     */
    public static MethodHandle SteamAPI_ISteamUser_BIsPhoneIdentifying$handle() {
        return SteamAPI_ISteamUser_BIsPhoneIdentifying.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUser_BIsPhoneIdentifying()
     * }
     */
    public static boolean SteamAPI_ISteamUser_BIsPhoneIdentifying() {
        var mh$ = SteamAPI_ISteamUser_BIsPhoneIdentifying.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUser_BIsPhoneIdentifying");
            }
            return (boolean)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUser_BIsPhoneRequiringVerification {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUser_BIsPhoneRequiringVerification"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUser_BIsPhoneRequiringVerification()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUser_BIsPhoneRequiringVerification$descriptor() {
        return SteamAPI_ISteamUser_BIsPhoneRequiringVerification.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUser_BIsPhoneRequiringVerification()
     * }
     */
    public static MethodHandle SteamAPI_ISteamUser_BIsPhoneRequiringVerification$handle() {
        return SteamAPI_ISteamUser_BIsPhoneRequiringVerification.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUser_BIsPhoneRequiringVerification()
     * }
     */
    public static boolean SteamAPI_ISteamUser_BIsPhoneRequiringVerification() {
        var mh$ = SteamAPI_ISteamUser_BIsPhoneRequiringVerification.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUser_BIsPhoneRequiringVerification");
            }
            return (boolean)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUser_GetMarketEligibility {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_LONG_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUser_GetMarketEligibility"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUser_GetMarketEligibility()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUser_GetMarketEligibility$descriptor() {
        return SteamAPI_ISteamUser_GetMarketEligibility.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUser_GetMarketEligibility()
     * }
     */
    public static MethodHandle SteamAPI_ISteamUser_GetMarketEligibility$handle() {
        return SteamAPI_ISteamUser_GetMarketEligibility.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUser_GetMarketEligibility()
     * }
     */
    public static long SteamAPI_ISteamUser_GetMarketEligibility() {
        var mh$ = SteamAPI_ISteamUser_GetMarketEligibility.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUser_GetMarketEligibility");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUser_GetDurationControl {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_LONG_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUser_GetDurationControl"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUser_GetDurationControl()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUser_GetDurationControl$descriptor() {
        return SteamAPI_ISteamUser_GetDurationControl.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUser_GetDurationControl()
     * }
     */
    public static MethodHandle SteamAPI_ISteamUser_GetDurationControl$handle() {
        return SteamAPI_ISteamUser_GetDurationControl.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUser_GetDurationControl()
     * }
     */
    public static long SteamAPI_ISteamUser_GetDurationControl() {
        var mh$ = SteamAPI_ISteamUser_GetDurationControl.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUser_GetDurationControl");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUser_BSetDurationControlOnlineState {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUser_BSetDurationControlOnlineState"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUser_BSetDurationControlOnlineState(EDurationControlOnlineState eNewState)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUser_BSetDurationControlOnlineState$descriptor() {
        return SteamAPI_ISteamUser_BSetDurationControlOnlineState.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUser_BSetDurationControlOnlineState(EDurationControlOnlineState eNewState)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUser_BSetDurationControlOnlineState$handle() {
        return SteamAPI_ISteamUser_BSetDurationControlOnlineState.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUser_BSetDurationControlOnlineState(EDurationControlOnlineState eNewState)
     * }
     */
    public static boolean SteamAPI_ISteamUser_BSetDurationControlOnlineState(int eNewState) {
        var mh$ = SteamAPI_ISteamUser_BSetDurationControlOnlineState.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUser_BSetDurationControlOnlineState", eNewState);
            }
            return (boolean)mh$.invokeExact(eNewState);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_GetPersonaName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamFriends_GetPersonaName"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamFriends_GetPersonaName()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_GetPersonaName$descriptor() {
        return SteamAPI_ISteamFriends_GetPersonaName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamFriends_GetPersonaName()
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_GetPersonaName$handle() {
        return SteamAPI_ISteamFriends_GetPersonaName.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamFriends_GetPersonaName()
     * }
     */
    public static MemorySegment SteamAPI_ISteamFriends_GetPersonaName() {
        var mh$ = SteamAPI_ISteamFriends_GetPersonaName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_GetPersonaName");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_SetPersonaName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamFriends_SetPersonaName"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamFriends_SetPersonaName(const char *pchPersonaName)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_SetPersonaName$descriptor() {
        return SteamAPI_ISteamFriends_SetPersonaName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamFriends_SetPersonaName(const char *pchPersonaName)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_SetPersonaName$handle() {
        return SteamAPI_ISteamFriends_SetPersonaName.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamFriends_SetPersonaName(const char *pchPersonaName)
     * }
     */
    public static long SteamAPI_ISteamFriends_SetPersonaName(MemorySegment pchPersonaName) {
        var mh$ = SteamAPI_ISteamFriends_SetPersonaName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_SetPersonaName", pchPersonaName);
            }
            return (long)mh$.invokeExact(pchPersonaName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_GetPersonaState {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamFriends_GetPersonaState"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * EPersonaState SteamAPI_ISteamFriends_GetPersonaState()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_GetPersonaState$descriptor() {
        return SteamAPI_ISteamFriends_GetPersonaState.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * EPersonaState SteamAPI_ISteamFriends_GetPersonaState()
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_GetPersonaState$handle() {
        return SteamAPI_ISteamFriends_GetPersonaState.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * EPersonaState SteamAPI_ISteamFriends_GetPersonaState()
     * }
     */
    public static int SteamAPI_ISteamFriends_GetPersonaState() {
        var mh$ = SteamAPI_ISteamFriends_GetPersonaState.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_GetPersonaState");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_GetFriendCount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamFriends_GetFriendCount"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamFriends_GetFriendCount(int iFriendFlags)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_GetFriendCount$descriptor() {
        return SteamAPI_ISteamFriends_GetFriendCount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamFriends_GetFriendCount(int iFriendFlags)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_GetFriendCount$handle() {
        return SteamAPI_ISteamFriends_GetFriendCount.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int SteamAPI_ISteamFriends_GetFriendCount(int iFriendFlags)
     * }
     */
    public static int SteamAPI_ISteamFriends_GetFriendCount(int iFriendFlags) {
        var mh$ = SteamAPI_ISteamFriends_GetFriendCount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_GetFriendCount", iFriendFlags);
            }
            return (int)mh$.invokeExact(iFriendFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_GetFriendByIndex {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamFriends_GetFriendByIndex"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint64_steamid SteamAPI_ISteamFriends_GetFriendByIndex(int iFriend, int iFriendFlags)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_GetFriendByIndex$descriptor() {
        return SteamAPI_ISteamFriends_GetFriendByIndex.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint64_steamid SteamAPI_ISteamFriends_GetFriendByIndex(int iFriend, int iFriendFlags)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_GetFriendByIndex$handle() {
        return SteamAPI_ISteamFriends_GetFriendByIndex.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * uint64_steamid SteamAPI_ISteamFriends_GetFriendByIndex(int iFriend, int iFriendFlags)
     * }
     */
    public static long SteamAPI_ISteamFriends_GetFriendByIndex(int iFriend, int iFriendFlags) {
        var mh$ = SteamAPI_ISteamFriends_GetFriendByIndex.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_GetFriendByIndex", iFriend, iFriendFlags);
            }
            return (long)mh$.invokeExact(iFriend, iFriendFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_GetFriendRelationship {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamFriends_GetFriendRelationship"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * EFriendRelationship SteamAPI_ISteamFriends_GetFriendRelationship(uint64_steamid steamIDFriend)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_GetFriendRelationship$descriptor() {
        return SteamAPI_ISteamFriends_GetFriendRelationship.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * EFriendRelationship SteamAPI_ISteamFriends_GetFriendRelationship(uint64_steamid steamIDFriend)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_GetFriendRelationship$handle() {
        return SteamAPI_ISteamFriends_GetFriendRelationship.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * EFriendRelationship SteamAPI_ISteamFriends_GetFriendRelationship(uint64_steamid steamIDFriend)
     * }
     */
    public static int SteamAPI_ISteamFriends_GetFriendRelationship(long steamIDFriend) {
        var mh$ = SteamAPI_ISteamFriends_GetFriendRelationship.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_GetFriendRelationship", steamIDFriend);
            }
            return (int)mh$.invokeExact(steamIDFriend);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_GetFriendPersonaState {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamFriends_GetFriendPersonaState"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * EPersonaState SteamAPI_ISteamFriends_GetFriendPersonaState(uint64_steamid steamIDFriend)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_GetFriendPersonaState$descriptor() {
        return SteamAPI_ISteamFriends_GetFriendPersonaState.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * EPersonaState SteamAPI_ISteamFriends_GetFriendPersonaState(uint64_steamid steamIDFriend)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_GetFriendPersonaState$handle() {
        return SteamAPI_ISteamFriends_GetFriendPersonaState.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * EPersonaState SteamAPI_ISteamFriends_GetFriendPersonaState(uint64_steamid steamIDFriend)
     * }
     */
    public static int SteamAPI_ISteamFriends_GetFriendPersonaState(long steamIDFriend) {
        var mh$ = SteamAPI_ISteamFriends_GetFriendPersonaState.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_GetFriendPersonaState", steamIDFriend);
            }
            return (int)mh$.invokeExact(steamIDFriend);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_GetFriendPersonaName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamFriends_GetFriendPersonaName"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamFriends_GetFriendPersonaName(uint64_steamid steamIDFriend)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_GetFriendPersonaName$descriptor() {
        return SteamAPI_ISteamFriends_GetFriendPersonaName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamFriends_GetFriendPersonaName(uint64_steamid steamIDFriend)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_GetFriendPersonaName$handle() {
        return SteamAPI_ISteamFriends_GetFriendPersonaName.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamFriends_GetFriendPersonaName(uint64_steamid steamIDFriend)
     * }
     */
    public static MemorySegment SteamAPI_ISteamFriends_GetFriendPersonaName(long steamIDFriend) {
        var mh$ = SteamAPI_ISteamFriends_GetFriendPersonaName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_GetFriendPersonaName", steamIDFriend);
            }
            return (MemorySegment)mh$.invokeExact(steamIDFriend);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_GetFriendGamePlayed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamFriends_GetFriendGamePlayed"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamFriends_GetFriendGamePlayed(uint64_steamid steamIDFriend, FriendGameInfo_t *pFriendGameInfo)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_GetFriendGamePlayed$descriptor() {
        return SteamAPI_ISteamFriends_GetFriendGamePlayed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamFriends_GetFriendGamePlayed(uint64_steamid steamIDFriend, FriendGameInfo_t *pFriendGameInfo)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_GetFriendGamePlayed$handle() {
        return SteamAPI_ISteamFriends_GetFriendGamePlayed.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamFriends_GetFriendGamePlayed(uint64_steamid steamIDFriend, FriendGameInfo_t *pFriendGameInfo)
     * }
     */
    public static boolean SteamAPI_ISteamFriends_GetFriendGamePlayed(long steamIDFriend, MemorySegment pFriendGameInfo) {
        var mh$ = SteamAPI_ISteamFriends_GetFriendGamePlayed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_GetFriendGamePlayed", steamIDFriend, pFriendGameInfo);
            }
            return (boolean)mh$.invokeExact(steamIDFriend, pFriendGameInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_GetFriendPersonaNameHistory {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamFriends_GetFriendPersonaNameHistory"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamFriends_GetFriendPersonaNameHistory(uint64_steamid steamIDFriend, int iPersonaName)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_GetFriendPersonaNameHistory$descriptor() {
        return SteamAPI_ISteamFriends_GetFriendPersonaNameHistory.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamFriends_GetFriendPersonaNameHistory(uint64_steamid steamIDFriend, int iPersonaName)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_GetFriendPersonaNameHistory$handle() {
        return SteamAPI_ISteamFriends_GetFriendPersonaNameHistory.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamFriends_GetFriendPersonaNameHistory(uint64_steamid steamIDFriend, int iPersonaName)
     * }
     */
    public static MemorySegment SteamAPI_ISteamFriends_GetFriendPersonaNameHistory(long steamIDFriend, int iPersonaName) {
        var mh$ = SteamAPI_ISteamFriends_GetFriendPersonaNameHistory.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_GetFriendPersonaNameHistory", steamIDFriend, iPersonaName);
            }
            return (MemorySegment)mh$.invokeExact(steamIDFriend, iPersonaName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_GetFriendSteamLevel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamFriends_GetFriendSteamLevel"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamFriends_GetFriendSteamLevel(uint64_steamid steamIDFriend)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_GetFriendSteamLevel$descriptor() {
        return SteamAPI_ISteamFriends_GetFriendSteamLevel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamFriends_GetFriendSteamLevel(uint64_steamid steamIDFriend)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_GetFriendSteamLevel$handle() {
        return SteamAPI_ISteamFriends_GetFriendSteamLevel.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int SteamAPI_ISteamFriends_GetFriendSteamLevel(uint64_steamid steamIDFriend)
     * }
     */
    public static int SteamAPI_ISteamFriends_GetFriendSteamLevel(long steamIDFriend) {
        var mh$ = SteamAPI_ISteamFriends_GetFriendSteamLevel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_GetFriendSteamLevel", steamIDFriend);
            }
            return (int)mh$.invokeExact(steamIDFriend);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_GetPlayerNickname {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamFriends_GetPlayerNickname"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamFriends_GetPlayerNickname(uint64_steamid steamIDPlayer)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_GetPlayerNickname$descriptor() {
        return SteamAPI_ISteamFriends_GetPlayerNickname.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamFriends_GetPlayerNickname(uint64_steamid steamIDPlayer)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_GetPlayerNickname$handle() {
        return SteamAPI_ISteamFriends_GetPlayerNickname.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamFriends_GetPlayerNickname(uint64_steamid steamIDPlayer)
     * }
     */
    public static MemorySegment SteamAPI_ISteamFriends_GetPlayerNickname(long steamIDPlayer) {
        var mh$ = SteamAPI_ISteamFriends_GetPlayerNickname.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_GetPlayerNickname", steamIDPlayer);
            }
            return (MemorySegment)mh$.invokeExact(steamIDPlayer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_GetFriendsGroupCount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamFriends_GetFriendsGroupCount"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamFriends_GetFriendsGroupCount()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_GetFriendsGroupCount$descriptor() {
        return SteamAPI_ISteamFriends_GetFriendsGroupCount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamFriends_GetFriendsGroupCount()
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_GetFriendsGroupCount$handle() {
        return SteamAPI_ISteamFriends_GetFriendsGroupCount.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int SteamAPI_ISteamFriends_GetFriendsGroupCount()
     * }
     */
    public static int SteamAPI_ISteamFriends_GetFriendsGroupCount() {
        var mh$ = SteamAPI_ISteamFriends_GetFriendsGroupCount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_GetFriendsGroupCount");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_GetFriendsGroupIDByIndex {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_SHORT,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamFriends_GetFriendsGroupIDByIndex"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FriendsGroupID_t SteamAPI_ISteamFriends_GetFriendsGroupIDByIndex(int iFG)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_GetFriendsGroupIDByIndex$descriptor() {
        return SteamAPI_ISteamFriends_GetFriendsGroupIDByIndex.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FriendsGroupID_t SteamAPI_ISteamFriends_GetFriendsGroupIDByIndex(int iFG)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_GetFriendsGroupIDByIndex$handle() {
        return SteamAPI_ISteamFriends_GetFriendsGroupIDByIndex.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * FriendsGroupID_t SteamAPI_ISteamFriends_GetFriendsGroupIDByIndex(int iFG)
     * }
     */
    public static short SteamAPI_ISteamFriends_GetFriendsGroupIDByIndex(int iFG) {
        var mh$ = SteamAPI_ISteamFriends_GetFriendsGroupIDByIndex.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_GetFriendsGroupIDByIndex", iFG);
            }
            return (short)mh$.invokeExact(iFG);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_GetFriendsGroupName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_SHORT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamFriends_GetFriendsGroupName"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamFriends_GetFriendsGroupName(FriendsGroupID_t friendsGroupID)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_GetFriendsGroupName$descriptor() {
        return SteamAPI_ISteamFriends_GetFriendsGroupName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamFriends_GetFriendsGroupName(FriendsGroupID_t friendsGroupID)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_GetFriendsGroupName$handle() {
        return SteamAPI_ISteamFriends_GetFriendsGroupName.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamFriends_GetFriendsGroupName(FriendsGroupID_t friendsGroupID)
     * }
     */
    public static MemorySegment SteamAPI_ISteamFriends_GetFriendsGroupName(short friendsGroupID) {
        var mh$ = SteamAPI_ISteamFriends_GetFriendsGroupName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_GetFriendsGroupName", friendsGroupID);
            }
            return (MemorySegment)mh$.invokeExact(friendsGroupID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_GetFriendsGroupMembersCount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_SHORT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamFriends_GetFriendsGroupMembersCount"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamFriends_GetFriendsGroupMembersCount(FriendsGroupID_t friendsGroupID)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_GetFriendsGroupMembersCount$descriptor() {
        return SteamAPI_ISteamFriends_GetFriendsGroupMembersCount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamFriends_GetFriendsGroupMembersCount(FriendsGroupID_t friendsGroupID)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_GetFriendsGroupMembersCount$handle() {
        return SteamAPI_ISteamFriends_GetFriendsGroupMembersCount.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int SteamAPI_ISteamFriends_GetFriendsGroupMembersCount(FriendsGroupID_t friendsGroupID)
     * }
     */
    public static int SteamAPI_ISteamFriends_GetFriendsGroupMembersCount(short friendsGroupID) {
        var mh$ = SteamAPI_ISteamFriends_GetFriendsGroupMembersCount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_GetFriendsGroupMembersCount", friendsGroupID);
            }
            return (int)mh$.invokeExact(friendsGroupID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_GetFriendsGroupMembersList {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_SHORT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamFriends_GetFriendsGroupMembersList"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamFriends_GetFriendsGroupMembersList(FriendsGroupID_t friendsGroupID, CSteamID *pOutSteamIDMembers, int nMembersCount)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_GetFriendsGroupMembersList$descriptor() {
        return SteamAPI_ISteamFriends_GetFriendsGroupMembersList.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamFriends_GetFriendsGroupMembersList(FriendsGroupID_t friendsGroupID, CSteamID *pOutSteamIDMembers, int nMembersCount)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_GetFriendsGroupMembersList$handle() {
        return SteamAPI_ISteamFriends_GetFriendsGroupMembersList.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamFriends_GetFriendsGroupMembersList(FriendsGroupID_t friendsGroupID, CSteamID *pOutSteamIDMembers, int nMembersCount)
     * }
     */
    public static void SteamAPI_ISteamFriends_GetFriendsGroupMembersList(short friendsGroupID, MemorySegment pOutSteamIDMembers, int nMembersCount) {
        var mh$ = SteamAPI_ISteamFriends_GetFriendsGroupMembersList.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_GetFriendsGroupMembersList", friendsGroupID, pOutSteamIDMembers, nMembersCount);
            }
            mh$.invokeExact(friendsGroupID, pOutSteamIDMembers, nMembersCount);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_HasFriend {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamFriends_HasFriend"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamFriends_HasFriend(uint64_steamid steamIDFriend, int iFriendFlags)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_HasFriend$descriptor() {
        return SteamAPI_ISteamFriends_HasFriend.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamFriends_HasFriend(uint64_steamid steamIDFriend, int iFriendFlags)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_HasFriend$handle() {
        return SteamAPI_ISteamFriends_HasFriend.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamFriends_HasFriend(uint64_steamid steamIDFriend, int iFriendFlags)
     * }
     */
    public static boolean SteamAPI_ISteamFriends_HasFriend(long steamIDFriend, int iFriendFlags) {
        var mh$ = SteamAPI_ISteamFriends_HasFriend.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_HasFriend", steamIDFriend, iFriendFlags);
            }
            return (boolean)mh$.invokeExact(steamIDFriend, iFriendFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_GetClanCount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamFriends_GetClanCount"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamFriends_GetClanCount()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_GetClanCount$descriptor() {
        return SteamAPI_ISteamFriends_GetClanCount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamFriends_GetClanCount()
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_GetClanCount$handle() {
        return SteamAPI_ISteamFriends_GetClanCount.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int SteamAPI_ISteamFriends_GetClanCount()
     * }
     */
    public static int SteamAPI_ISteamFriends_GetClanCount() {
        var mh$ = SteamAPI_ISteamFriends_GetClanCount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_GetClanCount");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_GetClanByIndex {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamFriends_GetClanByIndex"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint64_steamid SteamAPI_ISteamFriends_GetClanByIndex(int iClan)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_GetClanByIndex$descriptor() {
        return SteamAPI_ISteamFriends_GetClanByIndex.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint64_steamid SteamAPI_ISteamFriends_GetClanByIndex(int iClan)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_GetClanByIndex$handle() {
        return SteamAPI_ISteamFriends_GetClanByIndex.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * uint64_steamid SteamAPI_ISteamFriends_GetClanByIndex(int iClan)
     * }
     */
    public static long SteamAPI_ISteamFriends_GetClanByIndex(int iClan) {
        var mh$ = SteamAPI_ISteamFriends_GetClanByIndex.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_GetClanByIndex", iClan);
            }
            return (long)mh$.invokeExact(iClan);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_GetClanName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamFriends_GetClanName"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamFriends_GetClanName(uint64_steamid steamIDClan)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_GetClanName$descriptor() {
        return SteamAPI_ISteamFriends_GetClanName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamFriends_GetClanName(uint64_steamid steamIDClan)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_GetClanName$handle() {
        return SteamAPI_ISteamFriends_GetClanName.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamFriends_GetClanName(uint64_steamid steamIDClan)
     * }
     */
    public static MemorySegment SteamAPI_ISteamFriends_GetClanName(long steamIDClan) {
        var mh$ = SteamAPI_ISteamFriends_GetClanName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_GetClanName", steamIDClan);
            }
            return (MemorySegment)mh$.invokeExact(steamIDClan);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_GetClanTag {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamFriends_GetClanTag"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamFriends_GetClanTag(uint64_steamid steamIDClan)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_GetClanTag$descriptor() {
        return SteamAPI_ISteamFriends_GetClanTag.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamFriends_GetClanTag(uint64_steamid steamIDClan)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_GetClanTag$handle() {
        return SteamAPI_ISteamFriends_GetClanTag.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamFriends_GetClanTag(uint64_steamid steamIDClan)
     * }
     */
    public static MemorySegment SteamAPI_ISteamFriends_GetClanTag(long steamIDClan) {
        var mh$ = SteamAPI_ISteamFriends_GetClanTag.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_GetClanTag", steamIDClan);
            }
            return (MemorySegment)mh$.invokeExact(steamIDClan);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_GetClanActivityCounts {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamFriends_GetClanActivityCounts"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamFriends_GetClanActivityCounts(uint64_steamid steamIDClan, int *pnOnline, int *pnInGame, int *pnChatting)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_GetClanActivityCounts$descriptor() {
        return SteamAPI_ISteamFriends_GetClanActivityCounts.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamFriends_GetClanActivityCounts(uint64_steamid steamIDClan, int *pnOnline, int *pnInGame, int *pnChatting)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_GetClanActivityCounts$handle() {
        return SteamAPI_ISteamFriends_GetClanActivityCounts.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamFriends_GetClanActivityCounts(uint64_steamid steamIDClan, int *pnOnline, int *pnInGame, int *pnChatting)
     * }
     */
    public static boolean SteamAPI_ISteamFriends_GetClanActivityCounts(long steamIDClan, MemorySegment pnOnline, MemorySegment pnInGame, MemorySegment pnChatting) {
        var mh$ = SteamAPI_ISteamFriends_GetClanActivityCounts.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_GetClanActivityCounts", steamIDClan, pnOnline, pnInGame, pnChatting);
            }
            return (boolean)mh$.invokeExact(steamIDClan, pnOnline, pnInGame, pnChatting);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_DownloadClanActivityCounts {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamFriends_DownloadClanActivityCounts"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamFriends_DownloadClanActivityCounts(CSteamID *psteamIDClans, int cClansToRequest)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_DownloadClanActivityCounts$descriptor() {
        return SteamAPI_ISteamFriends_DownloadClanActivityCounts.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamFriends_DownloadClanActivityCounts(CSteamID *psteamIDClans, int cClansToRequest)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_DownloadClanActivityCounts$handle() {
        return SteamAPI_ISteamFriends_DownloadClanActivityCounts.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamFriends_DownloadClanActivityCounts(CSteamID *psteamIDClans, int cClansToRequest)
     * }
     */
    public static long SteamAPI_ISteamFriends_DownloadClanActivityCounts(MemorySegment psteamIDClans, int cClansToRequest) {
        var mh$ = SteamAPI_ISteamFriends_DownloadClanActivityCounts.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_DownloadClanActivityCounts", psteamIDClans, cClansToRequest);
            }
            return (long)mh$.invokeExact(psteamIDClans, cClansToRequest);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_GetFriendCountFromSource {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamFriends_GetFriendCountFromSource"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamFriends_GetFriendCountFromSource(uint64_steamid steamIDSource)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_GetFriendCountFromSource$descriptor() {
        return SteamAPI_ISteamFriends_GetFriendCountFromSource.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamFriends_GetFriendCountFromSource(uint64_steamid steamIDSource)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_GetFriendCountFromSource$handle() {
        return SteamAPI_ISteamFriends_GetFriendCountFromSource.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int SteamAPI_ISteamFriends_GetFriendCountFromSource(uint64_steamid steamIDSource)
     * }
     */
    public static int SteamAPI_ISteamFriends_GetFriendCountFromSource(long steamIDSource) {
        var mh$ = SteamAPI_ISteamFriends_GetFriendCountFromSource.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_GetFriendCountFromSource", steamIDSource);
            }
            return (int)mh$.invokeExact(steamIDSource);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_GetFriendFromSourceByIndex {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamFriends_GetFriendFromSourceByIndex"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint64_steamid SteamAPI_ISteamFriends_GetFriendFromSourceByIndex(uint64_steamid steamIDSource, int iFriend)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_GetFriendFromSourceByIndex$descriptor() {
        return SteamAPI_ISteamFriends_GetFriendFromSourceByIndex.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint64_steamid SteamAPI_ISteamFriends_GetFriendFromSourceByIndex(uint64_steamid steamIDSource, int iFriend)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_GetFriendFromSourceByIndex$handle() {
        return SteamAPI_ISteamFriends_GetFriendFromSourceByIndex.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * uint64_steamid SteamAPI_ISteamFriends_GetFriendFromSourceByIndex(uint64_steamid steamIDSource, int iFriend)
     * }
     */
    public static long SteamAPI_ISteamFriends_GetFriendFromSourceByIndex(long steamIDSource, int iFriend) {
        var mh$ = SteamAPI_ISteamFriends_GetFriendFromSourceByIndex.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_GetFriendFromSourceByIndex", steamIDSource, iFriend);
            }
            return (long)mh$.invokeExact(steamIDSource, iFriend);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_IsUserInSource {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamFriends_IsUserInSource"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamFriends_IsUserInSource(uint64_steamid steamIDUser, uint64_steamid steamIDSource)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_IsUserInSource$descriptor() {
        return SteamAPI_ISteamFriends_IsUserInSource.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamFriends_IsUserInSource(uint64_steamid steamIDUser, uint64_steamid steamIDSource)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_IsUserInSource$handle() {
        return SteamAPI_ISteamFriends_IsUserInSource.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamFriends_IsUserInSource(uint64_steamid steamIDUser, uint64_steamid steamIDSource)
     * }
     */
    public static boolean SteamAPI_ISteamFriends_IsUserInSource(long steamIDUser, long steamIDSource) {
        var mh$ = SteamAPI_ISteamFriends_IsUserInSource.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_IsUserInSource", steamIDUser, steamIDSource);
            }
            return (boolean)mh$.invokeExact(steamIDUser, steamIDSource);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_SetInGameVoiceSpeaking {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamFriends_SetInGameVoiceSpeaking"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamFriends_SetInGameVoiceSpeaking(uint64_steamid steamIDUser, bool bSpeaking)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_SetInGameVoiceSpeaking$descriptor() {
        return SteamAPI_ISteamFriends_SetInGameVoiceSpeaking.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamFriends_SetInGameVoiceSpeaking(uint64_steamid steamIDUser, bool bSpeaking)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_SetInGameVoiceSpeaking$handle() {
        return SteamAPI_ISteamFriends_SetInGameVoiceSpeaking.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamFriends_SetInGameVoiceSpeaking(uint64_steamid steamIDUser, bool bSpeaking)
     * }
     */
    public static void SteamAPI_ISteamFriends_SetInGameVoiceSpeaking(long steamIDUser, boolean bSpeaking) {
        var mh$ = SteamAPI_ISteamFriends_SetInGameVoiceSpeaking.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_SetInGameVoiceSpeaking", steamIDUser, bSpeaking);
            }
            mh$.invokeExact(steamIDUser, bSpeaking);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_ActivateGameOverlay {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamFriends_ActivateGameOverlay"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamFriends_ActivateGameOverlay(const char *pchDialog)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_ActivateGameOverlay$descriptor() {
        return SteamAPI_ISteamFriends_ActivateGameOverlay.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamFriends_ActivateGameOverlay(const char *pchDialog)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_ActivateGameOverlay$handle() {
        return SteamAPI_ISteamFriends_ActivateGameOverlay.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamFriends_ActivateGameOverlay(const char *pchDialog)
     * }
     */
    public static void SteamAPI_ISteamFriends_ActivateGameOverlay(MemorySegment pchDialog) {
        var mh$ = SteamAPI_ISteamFriends_ActivateGameOverlay.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_ActivateGameOverlay", pchDialog);
            }
            mh$.invokeExact(pchDialog);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_ActivateGameOverlayToUser {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamFriends_ActivateGameOverlayToUser"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamFriends_ActivateGameOverlayToUser(const char *pchDialog, uint64_steamid steamID)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_ActivateGameOverlayToUser$descriptor() {
        return SteamAPI_ISteamFriends_ActivateGameOverlayToUser.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamFriends_ActivateGameOverlayToUser(const char *pchDialog, uint64_steamid steamID)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_ActivateGameOverlayToUser$handle() {
        return SteamAPI_ISteamFriends_ActivateGameOverlayToUser.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamFriends_ActivateGameOverlayToUser(const char *pchDialog, uint64_steamid steamID)
     * }
     */
    public static void SteamAPI_ISteamFriends_ActivateGameOverlayToUser(MemorySegment pchDialog, long steamID) {
        var mh$ = SteamAPI_ISteamFriends_ActivateGameOverlayToUser.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_ActivateGameOverlayToUser", pchDialog, steamID);
            }
            mh$.invokeExact(pchDialog, steamID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_ActivateGameOverlayToWebPage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamFriends_ActivateGameOverlayToWebPage"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamFriends_ActivateGameOverlayToWebPage(const char *pchURL, EActivateGameOverlayToWebPageMode eMode)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_ActivateGameOverlayToWebPage$descriptor() {
        return SteamAPI_ISteamFriends_ActivateGameOverlayToWebPage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamFriends_ActivateGameOverlayToWebPage(const char *pchURL, EActivateGameOverlayToWebPageMode eMode)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_ActivateGameOverlayToWebPage$handle() {
        return SteamAPI_ISteamFriends_ActivateGameOverlayToWebPage.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamFriends_ActivateGameOverlayToWebPage(const char *pchURL, EActivateGameOverlayToWebPageMode eMode)
     * }
     */
    public static void SteamAPI_ISteamFriends_ActivateGameOverlayToWebPage(MemorySegment pchURL, int eMode) {
        var mh$ = SteamAPI_ISteamFriends_ActivateGameOverlayToWebPage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_ActivateGameOverlayToWebPage", pchURL, eMode);
            }
            mh$.invokeExact(pchURL, eMode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_ActivateGameOverlayToStore {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamFriends_ActivateGameOverlayToStore"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamFriends_ActivateGameOverlayToStore(AppId_t nAppID, EOverlayToStoreFlag eFlag)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_ActivateGameOverlayToStore$descriptor() {
        return SteamAPI_ISteamFriends_ActivateGameOverlayToStore.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamFriends_ActivateGameOverlayToStore(AppId_t nAppID, EOverlayToStoreFlag eFlag)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_ActivateGameOverlayToStore$handle() {
        return SteamAPI_ISteamFriends_ActivateGameOverlayToStore.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamFriends_ActivateGameOverlayToStore(AppId_t nAppID, EOverlayToStoreFlag eFlag)
     * }
     */
    public static void SteamAPI_ISteamFriends_ActivateGameOverlayToStore(int nAppID, int eFlag) {
        var mh$ = SteamAPI_ISteamFriends_ActivateGameOverlayToStore.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_ActivateGameOverlayToStore", nAppID, eFlag);
            }
            mh$.invokeExact(nAppID, eFlag);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_SetPlayedWith {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamFriends_SetPlayedWith"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamFriends_SetPlayedWith(uint64_steamid steamIDUserPlayedWith)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_SetPlayedWith$descriptor() {
        return SteamAPI_ISteamFriends_SetPlayedWith.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamFriends_SetPlayedWith(uint64_steamid steamIDUserPlayedWith)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_SetPlayedWith$handle() {
        return SteamAPI_ISteamFriends_SetPlayedWith.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamFriends_SetPlayedWith(uint64_steamid steamIDUserPlayedWith)
     * }
     */
    public static void SteamAPI_ISteamFriends_SetPlayedWith(long steamIDUserPlayedWith) {
        var mh$ = SteamAPI_ISteamFriends_SetPlayedWith.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_SetPlayedWith", steamIDUserPlayedWith);
            }
            mh$.invokeExact(steamIDUserPlayedWith);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_ActivateGameOverlayInviteDialog {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamFriends_ActivateGameOverlayInviteDialog"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamFriends_ActivateGameOverlayInviteDialog(uint64_steamid steamIDLobby)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_ActivateGameOverlayInviteDialog$descriptor() {
        return SteamAPI_ISteamFriends_ActivateGameOverlayInviteDialog.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamFriends_ActivateGameOverlayInviteDialog(uint64_steamid steamIDLobby)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_ActivateGameOverlayInviteDialog$handle() {
        return SteamAPI_ISteamFriends_ActivateGameOverlayInviteDialog.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamFriends_ActivateGameOverlayInviteDialog(uint64_steamid steamIDLobby)
     * }
     */
    public static void SteamAPI_ISteamFriends_ActivateGameOverlayInviteDialog(long steamIDLobby) {
        var mh$ = SteamAPI_ISteamFriends_ActivateGameOverlayInviteDialog.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_ActivateGameOverlayInviteDialog", steamIDLobby);
            }
            mh$.invokeExact(steamIDLobby);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_GetSmallFriendAvatar {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamFriends_GetSmallFriendAvatar"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamFriends_GetSmallFriendAvatar(uint64_steamid steamIDFriend)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_GetSmallFriendAvatar$descriptor() {
        return SteamAPI_ISteamFriends_GetSmallFriendAvatar.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamFriends_GetSmallFriendAvatar(uint64_steamid steamIDFriend)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_GetSmallFriendAvatar$handle() {
        return SteamAPI_ISteamFriends_GetSmallFriendAvatar.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int SteamAPI_ISteamFriends_GetSmallFriendAvatar(uint64_steamid steamIDFriend)
     * }
     */
    public static int SteamAPI_ISteamFriends_GetSmallFriendAvatar(long steamIDFriend) {
        var mh$ = SteamAPI_ISteamFriends_GetSmallFriendAvatar.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_GetSmallFriendAvatar", steamIDFriend);
            }
            return (int)mh$.invokeExact(steamIDFriend);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_GetMediumFriendAvatar {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamFriends_GetMediumFriendAvatar"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamFriends_GetMediumFriendAvatar(uint64_steamid steamIDFriend)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_GetMediumFriendAvatar$descriptor() {
        return SteamAPI_ISteamFriends_GetMediumFriendAvatar.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamFriends_GetMediumFriendAvatar(uint64_steamid steamIDFriend)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_GetMediumFriendAvatar$handle() {
        return SteamAPI_ISteamFriends_GetMediumFriendAvatar.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int SteamAPI_ISteamFriends_GetMediumFriendAvatar(uint64_steamid steamIDFriend)
     * }
     */
    public static int SteamAPI_ISteamFriends_GetMediumFriendAvatar(long steamIDFriend) {
        var mh$ = SteamAPI_ISteamFriends_GetMediumFriendAvatar.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_GetMediumFriendAvatar", steamIDFriend);
            }
            return (int)mh$.invokeExact(steamIDFriend);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_GetLargeFriendAvatar {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamFriends_GetLargeFriendAvatar"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamFriends_GetLargeFriendAvatar(uint64_steamid steamIDFriend)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_GetLargeFriendAvatar$descriptor() {
        return SteamAPI_ISteamFriends_GetLargeFriendAvatar.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamFriends_GetLargeFriendAvatar(uint64_steamid steamIDFriend)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_GetLargeFriendAvatar$handle() {
        return SteamAPI_ISteamFriends_GetLargeFriendAvatar.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int SteamAPI_ISteamFriends_GetLargeFriendAvatar(uint64_steamid steamIDFriend)
     * }
     */
    public static int SteamAPI_ISteamFriends_GetLargeFriendAvatar(long steamIDFriend) {
        var mh$ = SteamAPI_ISteamFriends_GetLargeFriendAvatar.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_GetLargeFriendAvatar", steamIDFriend);
            }
            return (int)mh$.invokeExact(steamIDFriend);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_RequestUserInformation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamFriends_RequestUserInformation"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamFriends_RequestUserInformation(uint64_steamid steamIDUser, bool bRequireNameOnly)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_RequestUserInformation$descriptor() {
        return SteamAPI_ISteamFriends_RequestUserInformation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamFriends_RequestUserInformation(uint64_steamid steamIDUser, bool bRequireNameOnly)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_RequestUserInformation$handle() {
        return SteamAPI_ISteamFriends_RequestUserInformation.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamFriends_RequestUserInformation(uint64_steamid steamIDUser, bool bRequireNameOnly)
     * }
     */
    public static boolean SteamAPI_ISteamFriends_RequestUserInformation(long steamIDUser, boolean bRequireNameOnly) {
        var mh$ = SteamAPI_ISteamFriends_RequestUserInformation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_RequestUserInformation", steamIDUser, bRequireNameOnly);
            }
            return (boolean)mh$.invokeExact(steamIDUser, bRequireNameOnly);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_RequestClanOfficerList {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamFriends_RequestClanOfficerList"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamFriends_RequestClanOfficerList(uint64_steamid steamIDClan)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_RequestClanOfficerList$descriptor() {
        return SteamAPI_ISteamFriends_RequestClanOfficerList.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamFriends_RequestClanOfficerList(uint64_steamid steamIDClan)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_RequestClanOfficerList$handle() {
        return SteamAPI_ISteamFriends_RequestClanOfficerList.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamFriends_RequestClanOfficerList(uint64_steamid steamIDClan)
     * }
     */
    public static long SteamAPI_ISteamFriends_RequestClanOfficerList(long steamIDClan) {
        var mh$ = SteamAPI_ISteamFriends_RequestClanOfficerList.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_RequestClanOfficerList", steamIDClan);
            }
            return (long)mh$.invokeExact(steamIDClan);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_GetClanOwner {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamFriends_GetClanOwner"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint64_steamid SteamAPI_ISteamFriends_GetClanOwner(uint64_steamid steamIDClan)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_GetClanOwner$descriptor() {
        return SteamAPI_ISteamFriends_GetClanOwner.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint64_steamid SteamAPI_ISteamFriends_GetClanOwner(uint64_steamid steamIDClan)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_GetClanOwner$handle() {
        return SteamAPI_ISteamFriends_GetClanOwner.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * uint64_steamid SteamAPI_ISteamFriends_GetClanOwner(uint64_steamid steamIDClan)
     * }
     */
    public static long SteamAPI_ISteamFriends_GetClanOwner(long steamIDClan) {
        var mh$ = SteamAPI_ISteamFriends_GetClanOwner.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_GetClanOwner", steamIDClan);
            }
            return (long)mh$.invokeExact(steamIDClan);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_GetClanOfficerCount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamFriends_GetClanOfficerCount"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamFriends_GetClanOfficerCount(uint64_steamid steamIDClan)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_GetClanOfficerCount$descriptor() {
        return SteamAPI_ISteamFriends_GetClanOfficerCount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamFriends_GetClanOfficerCount(uint64_steamid steamIDClan)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_GetClanOfficerCount$handle() {
        return SteamAPI_ISteamFriends_GetClanOfficerCount.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int SteamAPI_ISteamFriends_GetClanOfficerCount(uint64_steamid steamIDClan)
     * }
     */
    public static int SteamAPI_ISteamFriends_GetClanOfficerCount(long steamIDClan) {
        var mh$ = SteamAPI_ISteamFriends_GetClanOfficerCount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_GetClanOfficerCount", steamIDClan);
            }
            return (int)mh$.invokeExact(steamIDClan);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_GetClanOfficerByIndex {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamFriends_GetClanOfficerByIndex"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint64_steamid SteamAPI_ISteamFriends_GetClanOfficerByIndex(uint64_steamid steamIDClan, int iOfficer)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_GetClanOfficerByIndex$descriptor() {
        return SteamAPI_ISteamFriends_GetClanOfficerByIndex.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint64_steamid SteamAPI_ISteamFriends_GetClanOfficerByIndex(uint64_steamid steamIDClan, int iOfficer)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_GetClanOfficerByIndex$handle() {
        return SteamAPI_ISteamFriends_GetClanOfficerByIndex.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * uint64_steamid SteamAPI_ISteamFriends_GetClanOfficerByIndex(uint64_steamid steamIDClan, int iOfficer)
     * }
     */
    public static long SteamAPI_ISteamFriends_GetClanOfficerByIndex(long steamIDClan, int iOfficer) {
        var mh$ = SteamAPI_ISteamFriends_GetClanOfficerByIndex.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_GetClanOfficerByIndex", steamIDClan, iOfficer);
            }
            return (long)mh$.invokeExact(steamIDClan, iOfficer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_GetUserRestrictions {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamFriends_GetUserRestrictions"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamFriends_GetUserRestrictions()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_GetUserRestrictions$descriptor() {
        return SteamAPI_ISteamFriends_GetUserRestrictions.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamFriends_GetUserRestrictions()
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_GetUserRestrictions$handle() {
        return SteamAPI_ISteamFriends_GetUserRestrictions.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamFriends_GetUserRestrictions()
     * }
     */
    public static int SteamAPI_ISteamFriends_GetUserRestrictions() {
        var mh$ = SteamAPI_ISteamFriends_GetUserRestrictions.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_GetUserRestrictions");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_SetRichPresence {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamFriends_SetRichPresence"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamFriends_SetRichPresence(const char *pchKey, const char *pchValue)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_SetRichPresence$descriptor() {
        return SteamAPI_ISteamFriends_SetRichPresence.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamFriends_SetRichPresence(const char *pchKey, const char *pchValue)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_SetRichPresence$handle() {
        return SteamAPI_ISteamFriends_SetRichPresence.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamFriends_SetRichPresence(const char *pchKey, const char *pchValue)
     * }
     */
    public static boolean SteamAPI_ISteamFriends_SetRichPresence(MemorySegment pchKey, MemorySegment pchValue) {
        var mh$ = SteamAPI_ISteamFriends_SetRichPresence.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_SetRichPresence", pchKey, pchValue);
            }
            return (boolean)mh$.invokeExact(pchKey, pchValue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_ClearRichPresence {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamFriends_ClearRichPresence"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamFriends_ClearRichPresence()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_ClearRichPresence$descriptor() {
        return SteamAPI_ISteamFriends_ClearRichPresence.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamFriends_ClearRichPresence()
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_ClearRichPresence$handle() {
        return SteamAPI_ISteamFriends_ClearRichPresence.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamFriends_ClearRichPresence()
     * }
     */
    public static void SteamAPI_ISteamFriends_ClearRichPresence() {
        var mh$ = SteamAPI_ISteamFriends_ClearRichPresence.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_ClearRichPresence");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_GetFriendRichPresence {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamFriends_GetFriendRichPresence"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamFriends_GetFriendRichPresence(uint64_steamid steamIDFriend, const char *pchKey)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_GetFriendRichPresence$descriptor() {
        return SteamAPI_ISteamFriends_GetFriendRichPresence.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamFriends_GetFriendRichPresence(uint64_steamid steamIDFriend, const char *pchKey)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_GetFriendRichPresence$handle() {
        return SteamAPI_ISteamFriends_GetFriendRichPresence.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamFriends_GetFriendRichPresence(uint64_steamid steamIDFriend, const char *pchKey)
     * }
     */
    public static MemorySegment SteamAPI_ISteamFriends_GetFriendRichPresence(long steamIDFriend, MemorySegment pchKey) {
        var mh$ = SteamAPI_ISteamFriends_GetFriendRichPresence.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_GetFriendRichPresence", steamIDFriend, pchKey);
            }
            return (MemorySegment)mh$.invokeExact(steamIDFriend, pchKey);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_GetFriendRichPresenceKeyCount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamFriends_GetFriendRichPresenceKeyCount"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamFriends_GetFriendRichPresenceKeyCount(uint64_steamid steamIDFriend)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_GetFriendRichPresenceKeyCount$descriptor() {
        return SteamAPI_ISteamFriends_GetFriendRichPresenceKeyCount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamFriends_GetFriendRichPresenceKeyCount(uint64_steamid steamIDFriend)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_GetFriendRichPresenceKeyCount$handle() {
        return SteamAPI_ISteamFriends_GetFriendRichPresenceKeyCount.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int SteamAPI_ISteamFriends_GetFriendRichPresenceKeyCount(uint64_steamid steamIDFriend)
     * }
     */
    public static int SteamAPI_ISteamFriends_GetFriendRichPresenceKeyCount(long steamIDFriend) {
        var mh$ = SteamAPI_ISteamFriends_GetFriendRichPresenceKeyCount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_GetFriendRichPresenceKeyCount", steamIDFriend);
            }
            return (int)mh$.invokeExact(steamIDFriend);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_GetFriendRichPresenceKeyByIndex {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamFriends_GetFriendRichPresenceKeyByIndex"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamFriends_GetFriendRichPresenceKeyByIndex(uint64_steamid steamIDFriend, int iKey)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_GetFriendRichPresenceKeyByIndex$descriptor() {
        return SteamAPI_ISteamFriends_GetFriendRichPresenceKeyByIndex.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamFriends_GetFriendRichPresenceKeyByIndex(uint64_steamid steamIDFriend, int iKey)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_GetFriendRichPresenceKeyByIndex$handle() {
        return SteamAPI_ISteamFriends_GetFriendRichPresenceKeyByIndex.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamFriends_GetFriendRichPresenceKeyByIndex(uint64_steamid steamIDFriend, int iKey)
     * }
     */
    public static MemorySegment SteamAPI_ISteamFriends_GetFriendRichPresenceKeyByIndex(long steamIDFriend, int iKey) {
        var mh$ = SteamAPI_ISteamFriends_GetFriendRichPresenceKeyByIndex.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_GetFriendRichPresenceKeyByIndex", steamIDFriend, iKey);
            }
            return (MemorySegment)mh$.invokeExact(steamIDFriend, iKey);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_RequestFriendRichPresence {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamFriends_RequestFriendRichPresence"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamFriends_RequestFriendRichPresence(uint64_steamid steamIDFriend)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_RequestFriendRichPresence$descriptor() {
        return SteamAPI_ISteamFriends_RequestFriendRichPresence.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamFriends_RequestFriendRichPresence(uint64_steamid steamIDFriend)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_RequestFriendRichPresence$handle() {
        return SteamAPI_ISteamFriends_RequestFriendRichPresence.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamFriends_RequestFriendRichPresence(uint64_steamid steamIDFriend)
     * }
     */
    public static void SteamAPI_ISteamFriends_RequestFriendRichPresence(long steamIDFriend) {
        var mh$ = SteamAPI_ISteamFriends_RequestFriendRichPresence.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_RequestFriendRichPresence", steamIDFriend);
            }
            mh$.invokeExact(steamIDFriend);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_InviteUserToGame {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamFriends_InviteUserToGame"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamFriends_InviteUserToGame(uint64_steamid steamIDFriend, const char *pchConnectString)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_InviteUserToGame$descriptor() {
        return SteamAPI_ISteamFriends_InviteUserToGame.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamFriends_InviteUserToGame(uint64_steamid steamIDFriend, const char *pchConnectString)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_InviteUserToGame$handle() {
        return SteamAPI_ISteamFriends_InviteUserToGame.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamFriends_InviteUserToGame(uint64_steamid steamIDFriend, const char *pchConnectString)
     * }
     */
    public static boolean SteamAPI_ISteamFriends_InviteUserToGame(long steamIDFriend, MemorySegment pchConnectString) {
        var mh$ = SteamAPI_ISteamFriends_InviteUserToGame.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_InviteUserToGame", steamIDFriend, pchConnectString);
            }
            return (boolean)mh$.invokeExact(steamIDFriend, pchConnectString);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_GetCoplayFriendCount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamFriends_GetCoplayFriendCount"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamFriends_GetCoplayFriendCount()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_GetCoplayFriendCount$descriptor() {
        return SteamAPI_ISteamFriends_GetCoplayFriendCount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamFriends_GetCoplayFriendCount()
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_GetCoplayFriendCount$handle() {
        return SteamAPI_ISteamFriends_GetCoplayFriendCount.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int SteamAPI_ISteamFriends_GetCoplayFriendCount()
     * }
     */
    public static int SteamAPI_ISteamFriends_GetCoplayFriendCount() {
        var mh$ = SteamAPI_ISteamFriends_GetCoplayFriendCount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_GetCoplayFriendCount");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_GetCoplayFriend {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamFriends_GetCoplayFriend"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint64_steamid SteamAPI_ISteamFriends_GetCoplayFriend(int iCoplayFriend)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_GetCoplayFriend$descriptor() {
        return SteamAPI_ISteamFriends_GetCoplayFriend.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint64_steamid SteamAPI_ISteamFriends_GetCoplayFriend(int iCoplayFriend)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_GetCoplayFriend$handle() {
        return SteamAPI_ISteamFriends_GetCoplayFriend.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * uint64_steamid SteamAPI_ISteamFriends_GetCoplayFriend(int iCoplayFriend)
     * }
     */
    public static long SteamAPI_ISteamFriends_GetCoplayFriend(int iCoplayFriend) {
        var mh$ = SteamAPI_ISteamFriends_GetCoplayFriend.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_GetCoplayFriend", iCoplayFriend);
            }
            return (long)mh$.invokeExact(iCoplayFriend);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_GetFriendCoplayTime {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamFriends_GetFriendCoplayTime"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamFriends_GetFriendCoplayTime(uint64_steamid steamIDFriend)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_GetFriendCoplayTime$descriptor() {
        return SteamAPI_ISteamFriends_GetFriendCoplayTime.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamFriends_GetFriendCoplayTime(uint64_steamid steamIDFriend)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_GetFriendCoplayTime$handle() {
        return SteamAPI_ISteamFriends_GetFriendCoplayTime.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int SteamAPI_ISteamFriends_GetFriendCoplayTime(uint64_steamid steamIDFriend)
     * }
     */
    public static int SteamAPI_ISteamFriends_GetFriendCoplayTime(long steamIDFriend) {
        var mh$ = SteamAPI_ISteamFriends_GetFriendCoplayTime.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_GetFriendCoplayTime", steamIDFriend);
            }
            return (int)mh$.invokeExact(steamIDFriend);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_GetFriendCoplayGame {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamFriends_GetFriendCoplayGame"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * AppId_t SteamAPI_ISteamFriends_GetFriendCoplayGame(uint64_steamid steamIDFriend)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_GetFriendCoplayGame$descriptor() {
        return SteamAPI_ISteamFriends_GetFriendCoplayGame.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * AppId_t SteamAPI_ISteamFriends_GetFriendCoplayGame(uint64_steamid steamIDFriend)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_GetFriendCoplayGame$handle() {
        return SteamAPI_ISteamFriends_GetFriendCoplayGame.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * AppId_t SteamAPI_ISteamFriends_GetFriendCoplayGame(uint64_steamid steamIDFriend)
     * }
     */
    public static int SteamAPI_ISteamFriends_GetFriendCoplayGame(long steamIDFriend) {
        var mh$ = SteamAPI_ISteamFriends_GetFriendCoplayGame.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_GetFriendCoplayGame", steamIDFriend);
            }
            return (int)mh$.invokeExact(steamIDFriend);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_JoinClanChatRoom {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamFriends_JoinClanChatRoom"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamFriends_JoinClanChatRoom(uint64_steamid steamIDClan)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_JoinClanChatRoom$descriptor() {
        return SteamAPI_ISteamFriends_JoinClanChatRoom.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamFriends_JoinClanChatRoom(uint64_steamid steamIDClan)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_JoinClanChatRoom$handle() {
        return SteamAPI_ISteamFriends_JoinClanChatRoom.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamFriends_JoinClanChatRoom(uint64_steamid steamIDClan)
     * }
     */
    public static long SteamAPI_ISteamFriends_JoinClanChatRoom(long steamIDClan) {
        var mh$ = SteamAPI_ISteamFriends_JoinClanChatRoom.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_JoinClanChatRoom", steamIDClan);
            }
            return (long)mh$.invokeExact(steamIDClan);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_LeaveClanChatRoom {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamFriends_LeaveClanChatRoom"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamFriends_LeaveClanChatRoom(uint64_steamid steamIDClan)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_LeaveClanChatRoom$descriptor() {
        return SteamAPI_ISteamFriends_LeaveClanChatRoom.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamFriends_LeaveClanChatRoom(uint64_steamid steamIDClan)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_LeaveClanChatRoom$handle() {
        return SteamAPI_ISteamFriends_LeaveClanChatRoom.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamFriends_LeaveClanChatRoom(uint64_steamid steamIDClan)
     * }
     */
    public static boolean SteamAPI_ISteamFriends_LeaveClanChatRoom(long steamIDClan) {
        var mh$ = SteamAPI_ISteamFriends_LeaveClanChatRoom.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_LeaveClanChatRoom", steamIDClan);
            }
            return (boolean)mh$.invokeExact(steamIDClan);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_GetClanChatMemberCount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamFriends_GetClanChatMemberCount"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamFriends_GetClanChatMemberCount(uint64_steamid steamIDClan)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_GetClanChatMemberCount$descriptor() {
        return SteamAPI_ISteamFriends_GetClanChatMemberCount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamFriends_GetClanChatMemberCount(uint64_steamid steamIDClan)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_GetClanChatMemberCount$handle() {
        return SteamAPI_ISteamFriends_GetClanChatMemberCount.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int SteamAPI_ISteamFriends_GetClanChatMemberCount(uint64_steamid steamIDClan)
     * }
     */
    public static int SteamAPI_ISteamFriends_GetClanChatMemberCount(long steamIDClan) {
        var mh$ = SteamAPI_ISteamFriends_GetClanChatMemberCount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_GetClanChatMemberCount", steamIDClan);
            }
            return (int)mh$.invokeExact(steamIDClan);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_GetChatMemberByIndex {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamFriends_GetChatMemberByIndex"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint64_steamid SteamAPI_ISteamFriends_GetChatMemberByIndex(uint64_steamid steamIDClan, int iUser)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_GetChatMemberByIndex$descriptor() {
        return SteamAPI_ISteamFriends_GetChatMemberByIndex.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint64_steamid SteamAPI_ISteamFriends_GetChatMemberByIndex(uint64_steamid steamIDClan, int iUser)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_GetChatMemberByIndex$handle() {
        return SteamAPI_ISteamFriends_GetChatMemberByIndex.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * uint64_steamid SteamAPI_ISteamFriends_GetChatMemberByIndex(uint64_steamid steamIDClan, int iUser)
     * }
     */
    public static long SteamAPI_ISteamFriends_GetChatMemberByIndex(long steamIDClan, int iUser) {
        var mh$ = SteamAPI_ISteamFriends_GetChatMemberByIndex.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_GetChatMemberByIndex", steamIDClan, iUser);
            }
            return (long)mh$.invokeExact(steamIDClan, iUser);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_SendClanChatMessage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamFriends_SendClanChatMessage"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamFriends_SendClanChatMessage(uint64_steamid steamIDClanChat, const char *pchText)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_SendClanChatMessage$descriptor() {
        return SteamAPI_ISteamFriends_SendClanChatMessage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamFriends_SendClanChatMessage(uint64_steamid steamIDClanChat, const char *pchText)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_SendClanChatMessage$handle() {
        return SteamAPI_ISteamFriends_SendClanChatMessage.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamFriends_SendClanChatMessage(uint64_steamid steamIDClanChat, const char *pchText)
     * }
     */
    public static boolean SteamAPI_ISteamFriends_SendClanChatMessage(long steamIDClanChat, MemorySegment pchText) {
        var mh$ = SteamAPI_ISteamFriends_SendClanChatMessage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_SendClanChatMessage", steamIDClanChat, pchText);
            }
            return (boolean)mh$.invokeExact(steamIDClanChat, pchText);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_GetClanChatMessage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamFriends_GetClanChatMessage"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamFriends_GetClanChatMessage(uint64_steamid steamIDClanChat, int iMessage, void *prgchText, int cchTextMax, EChatEntryType *peChatEntryType, CSteamID *psteamidChatter)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_GetClanChatMessage$descriptor() {
        return SteamAPI_ISteamFriends_GetClanChatMessage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamFriends_GetClanChatMessage(uint64_steamid steamIDClanChat, int iMessage, void *prgchText, int cchTextMax, EChatEntryType *peChatEntryType, CSteamID *psteamidChatter)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_GetClanChatMessage$handle() {
        return SteamAPI_ISteamFriends_GetClanChatMessage.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int SteamAPI_ISteamFriends_GetClanChatMessage(uint64_steamid steamIDClanChat, int iMessage, void *prgchText, int cchTextMax, EChatEntryType *peChatEntryType, CSteamID *psteamidChatter)
     * }
     */
    public static int SteamAPI_ISteamFriends_GetClanChatMessage(long steamIDClanChat, int iMessage, MemorySegment prgchText, int cchTextMax, MemorySegment peChatEntryType, MemorySegment psteamidChatter) {
        var mh$ = SteamAPI_ISteamFriends_GetClanChatMessage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_GetClanChatMessage", steamIDClanChat, iMessage, prgchText, cchTextMax, peChatEntryType, psteamidChatter);
            }
            return (int)mh$.invokeExact(steamIDClanChat, iMessage, prgchText, cchTextMax, peChatEntryType, psteamidChatter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_IsClanChatAdmin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamFriends_IsClanChatAdmin"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamFriends_IsClanChatAdmin(uint64_steamid steamIDClanChat, uint64_steamid steamIDUser)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_IsClanChatAdmin$descriptor() {
        return SteamAPI_ISteamFriends_IsClanChatAdmin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamFriends_IsClanChatAdmin(uint64_steamid steamIDClanChat, uint64_steamid steamIDUser)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_IsClanChatAdmin$handle() {
        return SteamAPI_ISteamFriends_IsClanChatAdmin.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamFriends_IsClanChatAdmin(uint64_steamid steamIDClanChat, uint64_steamid steamIDUser)
     * }
     */
    public static boolean SteamAPI_ISteamFriends_IsClanChatAdmin(long steamIDClanChat, long steamIDUser) {
        var mh$ = SteamAPI_ISteamFriends_IsClanChatAdmin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_IsClanChatAdmin", steamIDClanChat, steamIDUser);
            }
            return (boolean)mh$.invokeExact(steamIDClanChat, steamIDUser);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_IsClanChatWindowOpenInSteam {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamFriends_IsClanChatWindowOpenInSteam"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamFriends_IsClanChatWindowOpenInSteam(uint64_steamid steamIDClanChat)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_IsClanChatWindowOpenInSteam$descriptor() {
        return SteamAPI_ISteamFriends_IsClanChatWindowOpenInSteam.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamFriends_IsClanChatWindowOpenInSteam(uint64_steamid steamIDClanChat)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_IsClanChatWindowOpenInSteam$handle() {
        return SteamAPI_ISteamFriends_IsClanChatWindowOpenInSteam.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamFriends_IsClanChatWindowOpenInSteam(uint64_steamid steamIDClanChat)
     * }
     */
    public static boolean SteamAPI_ISteamFriends_IsClanChatWindowOpenInSteam(long steamIDClanChat) {
        var mh$ = SteamAPI_ISteamFriends_IsClanChatWindowOpenInSteam.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_IsClanChatWindowOpenInSteam", steamIDClanChat);
            }
            return (boolean)mh$.invokeExact(steamIDClanChat);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_OpenClanChatWindowInSteam {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamFriends_OpenClanChatWindowInSteam"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamFriends_OpenClanChatWindowInSteam(uint64_steamid steamIDClanChat)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_OpenClanChatWindowInSteam$descriptor() {
        return SteamAPI_ISteamFriends_OpenClanChatWindowInSteam.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamFriends_OpenClanChatWindowInSteam(uint64_steamid steamIDClanChat)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_OpenClanChatWindowInSteam$handle() {
        return SteamAPI_ISteamFriends_OpenClanChatWindowInSteam.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamFriends_OpenClanChatWindowInSteam(uint64_steamid steamIDClanChat)
     * }
     */
    public static boolean SteamAPI_ISteamFriends_OpenClanChatWindowInSteam(long steamIDClanChat) {
        var mh$ = SteamAPI_ISteamFriends_OpenClanChatWindowInSteam.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_OpenClanChatWindowInSteam", steamIDClanChat);
            }
            return (boolean)mh$.invokeExact(steamIDClanChat);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_CloseClanChatWindowInSteam {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamFriends_CloseClanChatWindowInSteam"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamFriends_CloseClanChatWindowInSteam(uint64_steamid steamIDClanChat)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_CloseClanChatWindowInSteam$descriptor() {
        return SteamAPI_ISteamFriends_CloseClanChatWindowInSteam.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamFriends_CloseClanChatWindowInSteam(uint64_steamid steamIDClanChat)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_CloseClanChatWindowInSteam$handle() {
        return SteamAPI_ISteamFriends_CloseClanChatWindowInSteam.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamFriends_CloseClanChatWindowInSteam(uint64_steamid steamIDClanChat)
     * }
     */
    public static boolean SteamAPI_ISteamFriends_CloseClanChatWindowInSteam(long steamIDClanChat) {
        var mh$ = SteamAPI_ISteamFriends_CloseClanChatWindowInSteam.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_CloseClanChatWindowInSteam", steamIDClanChat);
            }
            return (boolean)mh$.invokeExact(steamIDClanChat);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_SetListenForFriendsMessages {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamFriends_SetListenForFriendsMessages"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamFriends_SetListenForFriendsMessages(bool bInterceptEnabled)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_SetListenForFriendsMessages$descriptor() {
        return SteamAPI_ISteamFriends_SetListenForFriendsMessages.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamFriends_SetListenForFriendsMessages(bool bInterceptEnabled)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_SetListenForFriendsMessages$handle() {
        return SteamAPI_ISteamFriends_SetListenForFriendsMessages.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamFriends_SetListenForFriendsMessages(bool bInterceptEnabled)
     * }
     */
    public static boolean SteamAPI_ISteamFriends_SetListenForFriendsMessages(boolean bInterceptEnabled) {
        var mh$ = SteamAPI_ISteamFriends_SetListenForFriendsMessages.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_SetListenForFriendsMessages", bInterceptEnabled);
            }
            return (boolean)mh$.invokeExact(bInterceptEnabled);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_ReplyToFriendMessage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamFriends_ReplyToFriendMessage"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamFriends_ReplyToFriendMessage(uint64_steamid steamIDFriend, const char *pchMsgToSend)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_ReplyToFriendMessage$descriptor() {
        return SteamAPI_ISteamFriends_ReplyToFriendMessage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamFriends_ReplyToFriendMessage(uint64_steamid steamIDFriend, const char *pchMsgToSend)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_ReplyToFriendMessage$handle() {
        return SteamAPI_ISteamFriends_ReplyToFriendMessage.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamFriends_ReplyToFriendMessage(uint64_steamid steamIDFriend, const char *pchMsgToSend)
     * }
     */
    public static boolean SteamAPI_ISteamFriends_ReplyToFriendMessage(long steamIDFriend, MemorySegment pchMsgToSend) {
        var mh$ = SteamAPI_ISteamFriends_ReplyToFriendMessage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_ReplyToFriendMessage", steamIDFriend, pchMsgToSend);
            }
            return (boolean)mh$.invokeExact(steamIDFriend, pchMsgToSend);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_GetFriendMessage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamFriends_GetFriendMessage"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamFriends_GetFriendMessage(uint64_steamid steamIDFriend, int iMessageID, void *pvData, int cubData, EChatEntryType *peChatEntryType)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_GetFriendMessage$descriptor() {
        return SteamAPI_ISteamFriends_GetFriendMessage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamFriends_GetFriendMessage(uint64_steamid steamIDFriend, int iMessageID, void *pvData, int cubData, EChatEntryType *peChatEntryType)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_GetFriendMessage$handle() {
        return SteamAPI_ISteamFriends_GetFriendMessage.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int SteamAPI_ISteamFriends_GetFriendMessage(uint64_steamid steamIDFriend, int iMessageID, void *pvData, int cubData, EChatEntryType *peChatEntryType)
     * }
     */
    public static int SteamAPI_ISteamFriends_GetFriendMessage(long steamIDFriend, int iMessageID, MemorySegment pvData, int cubData, MemorySegment peChatEntryType) {
        var mh$ = SteamAPI_ISteamFriends_GetFriendMessage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_GetFriendMessage", steamIDFriend, iMessageID, pvData, cubData, peChatEntryType);
            }
            return (int)mh$.invokeExact(steamIDFriend, iMessageID, pvData, cubData, peChatEntryType);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_GetFollowerCount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamFriends_GetFollowerCount"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamFriends_GetFollowerCount(uint64_steamid steamID)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_GetFollowerCount$descriptor() {
        return SteamAPI_ISteamFriends_GetFollowerCount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamFriends_GetFollowerCount(uint64_steamid steamID)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_GetFollowerCount$handle() {
        return SteamAPI_ISteamFriends_GetFollowerCount.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamFriends_GetFollowerCount(uint64_steamid steamID)
     * }
     */
    public static long SteamAPI_ISteamFriends_GetFollowerCount(long steamID) {
        var mh$ = SteamAPI_ISteamFriends_GetFollowerCount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_GetFollowerCount", steamID);
            }
            return (long)mh$.invokeExact(steamID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_IsFollowing {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamFriends_IsFollowing"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamFriends_IsFollowing(uint64_steamid steamID)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_IsFollowing$descriptor() {
        return SteamAPI_ISteamFriends_IsFollowing.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamFriends_IsFollowing(uint64_steamid steamID)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_IsFollowing$handle() {
        return SteamAPI_ISteamFriends_IsFollowing.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamFriends_IsFollowing(uint64_steamid steamID)
     * }
     */
    public static long SteamAPI_ISteamFriends_IsFollowing(long steamID) {
        var mh$ = SteamAPI_ISteamFriends_IsFollowing.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_IsFollowing", steamID);
            }
            return (long)mh$.invokeExact(steamID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_EnumerateFollowingList {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamFriends_EnumerateFollowingList"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamFriends_EnumerateFollowingList(uint32 unStartIndex)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_EnumerateFollowingList$descriptor() {
        return SteamAPI_ISteamFriends_EnumerateFollowingList.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamFriends_EnumerateFollowingList(uint32 unStartIndex)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_EnumerateFollowingList$handle() {
        return SteamAPI_ISteamFriends_EnumerateFollowingList.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamFriends_EnumerateFollowingList(uint32 unStartIndex)
     * }
     */
    public static long SteamAPI_ISteamFriends_EnumerateFollowingList(int unStartIndex) {
        var mh$ = SteamAPI_ISteamFriends_EnumerateFollowingList.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_EnumerateFollowingList", unStartIndex);
            }
            return (long)mh$.invokeExact(unStartIndex);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_IsClanPublic {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamFriends_IsClanPublic"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamFriends_IsClanPublic(uint64_steamid steamIDClan)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_IsClanPublic$descriptor() {
        return SteamAPI_ISteamFriends_IsClanPublic.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamFriends_IsClanPublic(uint64_steamid steamIDClan)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_IsClanPublic$handle() {
        return SteamAPI_ISteamFriends_IsClanPublic.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamFriends_IsClanPublic(uint64_steamid steamIDClan)
     * }
     */
    public static boolean SteamAPI_ISteamFriends_IsClanPublic(long steamIDClan) {
        var mh$ = SteamAPI_ISteamFriends_IsClanPublic.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_IsClanPublic", steamIDClan);
            }
            return (boolean)mh$.invokeExact(steamIDClan);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_IsClanOfficialGameGroup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamFriends_IsClanOfficialGameGroup"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamFriends_IsClanOfficialGameGroup(uint64_steamid steamIDClan)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_IsClanOfficialGameGroup$descriptor() {
        return SteamAPI_ISteamFriends_IsClanOfficialGameGroup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamFriends_IsClanOfficialGameGroup(uint64_steamid steamIDClan)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_IsClanOfficialGameGroup$handle() {
        return SteamAPI_ISteamFriends_IsClanOfficialGameGroup.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamFriends_IsClanOfficialGameGroup(uint64_steamid steamIDClan)
     * }
     */
    public static boolean SteamAPI_ISteamFriends_IsClanOfficialGameGroup(long steamIDClan) {
        var mh$ = SteamAPI_ISteamFriends_IsClanOfficialGameGroup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_IsClanOfficialGameGroup", steamIDClan);
            }
            return (boolean)mh$.invokeExact(steamIDClan);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_GetNumChatsWithUnreadPriorityMessages {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamFriends_GetNumChatsWithUnreadPriorityMessages"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamFriends_GetNumChatsWithUnreadPriorityMessages()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_GetNumChatsWithUnreadPriorityMessages$descriptor() {
        return SteamAPI_ISteamFriends_GetNumChatsWithUnreadPriorityMessages.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamFriends_GetNumChatsWithUnreadPriorityMessages()
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_GetNumChatsWithUnreadPriorityMessages$handle() {
        return SteamAPI_ISteamFriends_GetNumChatsWithUnreadPriorityMessages.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int SteamAPI_ISteamFriends_GetNumChatsWithUnreadPriorityMessages()
     * }
     */
    public static int SteamAPI_ISteamFriends_GetNumChatsWithUnreadPriorityMessages() {
        var mh$ = SteamAPI_ISteamFriends_GetNumChatsWithUnreadPriorityMessages.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_GetNumChatsWithUnreadPriorityMessages");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_ActivateGameOverlayRemotePlayTogetherInviteDialog {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamFriends_ActivateGameOverlayRemotePlayTogetherInviteDialog"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamFriends_ActivateGameOverlayRemotePlayTogetherInviteDialog(uint64_steamid steamIDLobby)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_ActivateGameOverlayRemotePlayTogetherInviteDialog$descriptor() {
        return SteamAPI_ISteamFriends_ActivateGameOverlayRemotePlayTogetherInviteDialog.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamFriends_ActivateGameOverlayRemotePlayTogetherInviteDialog(uint64_steamid steamIDLobby)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_ActivateGameOverlayRemotePlayTogetherInviteDialog$handle() {
        return SteamAPI_ISteamFriends_ActivateGameOverlayRemotePlayTogetherInviteDialog.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamFriends_ActivateGameOverlayRemotePlayTogetherInviteDialog(uint64_steamid steamIDLobby)
     * }
     */
    public static void SteamAPI_ISteamFriends_ActivateGameOverlayRemotePlayTogetherInviteDialog(long steamIDLobby) {
        var mh$ = SteamAPI_ISteamFriends_ActivateGameOverlayRemotePlayTogetherInviteDialog.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_ActivateGameOverlayRemotePlayTogetherInviteDialog", steamIDLobby);
            }
            mh$.invokeExact(steamIDLobby);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_RegisterProtocolInOverlayBrowser {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamFriends_RegisterProtocolInOverlayBrowser"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamFriends_RegisterProtocolInOverlayBrowser(const char *pchProtocol)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_RegisterProtocolInOverlayBrowser$descriptor() {
        return SteamAPI_ISteamFriends_RegisterProtocolInOverlayBrowser.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamFriends_RegisterProtocolInOverlayBrowser(const char *pchProtocol)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_RegisterProtocolInOverlayBrowser$handle() {
        return SteamAPI_ISteamFriends_RegisterProtocolInOverlayBrowser.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamFriends_RegisterProtocolInOverlayBrowser(const char *pchProtocol)
     * }
     */
    public static boolean SteamAPI_ISteamFriends_RegisterProtocolInOverlayBrowser(MemorySegment pchProtocol) {
        var mh$ = SteamAPI_ISteamFriends_RegisterProtocolInOverlayBrowser.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_RegisterProtocolInOverlayBrowser", pchProtocol);
            }
            return (boolean)mh$.invokeExact(pchProtocol);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_ActivateGameOverlayInviteDialogConnectString {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamFriends_ActivateGameOverlayInviteDialogConnectString"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamFriends_ActivateGameOverlayInviteDialogConnectString(const char *pchConnectString)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_ActivateGameOverlayInviteDialogConnectString$descriptor() {
        return SteamAPI_ISteamFriends_ActivateGameOverlayInviteDialogConnectString.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamFriends_ActivateGameOverlayInviteDialogConnectString(const char *pchConnectString)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_ActivateGameOverlayInviteDialogConnectString$handle() {
        return SteamAPI_ISteamFriends_ActivateGameOverlayInviteDialogConnectString.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamFriends_ActivateGameOverlayInviteDialogConnectString(const char *pchConnectString)
     * }
     */
    public static void SteamAPI_ISteamFriends_ActivateGameOverlayInviteDialogConnectString(MemorySegment pchConnectString) {
        var mh$ = SteamAPI_ISteamFriends_ActivateGameOverlayInviteDialogConnectString.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_ActivateGameOverlayInviteDialogConnectString", pchConnectString);
            }
            mh$.invokeExact(pchConnectString);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_RequestEquippedProfileItems {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamFriends_RequestEquippedProfileItems"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamFriends_RequestEquippedProfileItems(uint64_steamid steamID)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_RequestEquippedProfileItems$descriptor() {
        return SteamAPI_ISteamFriends_RequestEquippedProfileItems.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamFriends_RequestEquippedProfileItems(uint64_steamid steamID)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_RequestEquippedProfileItems$handle() {
        return SteamAPI_ISteamFriends_RequestEquippedProfileItems.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamFriends_RequestEquippedProfileItems(uint64_steamid steamID)
     * }
     */
    public static long SteamAPI_ISteamFriends_RequestEquippedProfileItems(long steamID) {
        var mh$ = SteamAPI_ISteamFriends_RequestEquippedProfileItems.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_RequestEquippedProfileItems", steamID);
            }
            return (long)mh$.invokeExact(steamID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_BHasEquippedProfileItem {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamFriends_BHasEquippedProfileItem"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamFriends_BHasEquippedProfileItem(uint64_steamid steamID, ECommunityProfileItemType itemType)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_BHasEquippedProfileItem$descriptor() {
        return SteamAPI_ISteamFriends_BHasEquippedProfileItem.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamFriends_BHasEquippedProfileItem(uint64_steamid steamID, ECommunityProfileItemType itemType)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_BHasEquippedProfileItem$handle() {
        return SteamAPI_ISteamFriends_BHasEquippedProfileItem.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamFriends_BHasEquippedProfileItem(uint64_steamid steamID, ECommunityProfileItemType itemType)
     * }
     */
    public static boolean SteamAPI_ISteamFriends_BHasEquippedProfileItem(long steamID, int itemType) {
        var mh$ = SteamAPI_ISteamFriends_BHasEquippedProfileItem.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_BHasEquippedProfileItem", steamID, itemType);
            }
            return (boolean)mh$.invokeExact(steamID, itemType);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_GetProfileItemPropertyString {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamFriends_GetProfileItemPropertyString"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamFriends_GetProfileItemPropertyString(uint64_steamid steamID, ECommunityProfileItemType itemType, ECommunityProfileItemProperty prop)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_GetProfileItemPropertyString$descriptor() {
        return SteamAPI_ISteamFriends_GetProfileItemPropertyString.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamFriends_GetProfileItemPropertyString(uint64_steamid steamID, ECommunityProfileItemType itemType, ECommunityProfileItemProperty prop)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_GetProfileItemPropertyString$handle() {
        return SteamAPI_ISteamFriends_GetProfileItemPropertyString.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamFriends_GetProfileItemPropertyString(uint64_steamid steamID, ECommunityProfileItemType itemType, ECommunityProfileItemProperty prop)
     * }
     */
    public static MemorySegment SteamAPI_ISteamFriends_GetProfileItemPropertyString(long steamID, int itemType, int prop) {
        var mh$ = SteamAPI_ISteamFriends_GetProfileItemPropertyString.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_GetProfileItemPropertyString", steamID, itemType, prop);
            }
            return (MemorySegment)mh$.invokeExact(steamID, itemType, prop);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamFriends_GetProfileItemPropertyUint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamFriends_GetProfileItemPropertyUint"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamFriends_GetProfileItemPropertyUint(uint64_steamid steamID, ECommunityProfileItemType itemType, ECommunityProfileItemProperty prop)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamFriends_GetProfileItemPropertyUint$descriptor() {
        return SteamAPI_ISteamFriends_GetProfileItemPropertyUint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamFriends_GetProfileItemPropertyUint(uint64_steamid steamID, ECommunityProfileItemType itemType, ECommunityProfileItemProperty prop)
     * }
     */
    public static MethodHandle SteamAPI_ISteamFriends_GetProfileItemPropertyUint$handle() {
        return SteamAPI_ISteamFriends_GetProfileItemPropertyUint.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamFriends_GetProfileItemPropertyUint(uint64_steamid steamID, ECommunityProfileItemType itemType, ECommunityProfileItemProperty prop)
     * }
     */
    public static int SteamAPI_ISteamFriends_GetProfileItemPropertyUint(long steamID, int itemType, int prop) {
        var mh$ = SteamAPI_ISteamFriends_GetProfileItemPropertyUint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamFriends_GetProfileItemPropertyUint", steamID, itemType, prop);
            }
            return (int)mh$.invokeExact(steamID, itemType, prop);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUtils_GetSecondsSinceAppActive {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUtils_GetSecondsSinceAppActive"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamUtils_GetSecondsSinceAppActive()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUtils_GetSecondsSinceAppActive$descriptor() {
        return SteamAPI_ISteamUtils_GetSecondsSinceAppActive.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamUtils_GetSecondsSinceAppActive()
     * }
     */
    public static MethodHandle SteamAPI_ISteamUtils_GetSecondsSinceAppActive$handle() {
        return SteamAPI_ISteamUtils_GetSecondsSinceAppActive.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamUtils_GetSecondsSinceAppActive()
     * }
     */
    public static int SteamAPI_ISteamUtils_GetSecondsSinceAppActive() {
        var mh$ = SteamAPI_ISteamUtils_GetSecondsSinceAppActive.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUtils_GetSecondsSinceAppActive");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUtils_GetSecondsSinceComputerActive {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUtils_GetSecondsSinceComputerActive"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamUtils_GetSecondsSinceComputerActive()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUtils_GetSecondsSinceComputerActive$descriptor() {
        return SteamAPI_ISteamUtils_GetSecondsSinceComputerActive.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamUtils_GetSecondsSinceComputerActive()
     * }
     */
    public static MethodHandle SteamAPI_ISteamUtils_GetSecondsSinceComputerActive$handle() {
        return SteamAPI_ISteamUtils_GetSecondsSinceComputerActive.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamUtils_GetSecondsSinceComputerActive()
     * }
     */
    public static int SteamAPI_ISteamUtils_GetSecondsSinceComputerActive() {
        var mh$ = SteamAPI_ISteamUtils_GetSecondsSinceComputerActive.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUtils_GetSecondsSinceComputerActive");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUtils_GetConnectedUniverse {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUtils_GetConnectedUniverse"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * EUniverse SteamAPI_ISteamUtils_GetConnectedUniverse()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUtils_GetConnectedUniverse$descriptor() {
        return SteamAPI_ISteamUtils_GetConnectedUniverse.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * EUniverse SteamAPI_ISteamUtils_GetConnectedUniverse()
     * }
     */
    public static MethodHandle SteamAPI_ISteamUtils_GetConnectedUniverse$handle() {
        return SteamAPI_ISteamUtils_GetConnectedUniverse.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * EUniverse SteamAPI_ISteamUtils_GetConnectedUniverse()
     * }
     */
    public static int SteamAPI_ISteamUtils_GetConnectedUniverse() {
        var mh$ = SteamAPI_ISteamUtils_GetConnectedUniverse.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUtils_GetConnectedUniverse");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUtils_GetServerRealTime {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUtils_GetServerRealTime"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamUtils_GetServerRealTime()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUtils_GetServerRealTime$descriptor() {
        return SteamAPI_ISteamUtils_GetServerRealTime.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamUtils_GetServerRealTime()
     * }
     */
    public static MethodHandle SteamAPI_ISteamUtils_GetServerRealTime$handle() {
        return SteamAPI_ISteamUtils_GetServerRealTime.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamUtils_GetServerRealTime()
     * }
     */
    public static int SteamAPI_ISteamUtils_GetServerRealTime() {
        var mh$ = SteamAPI_ISteamUtils_GetServerRealTime.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUtils_GetServerRealTime");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUtils_GetIPCountry {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUtils_GetIPCountry"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamUtils_GetIPCountry()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUtils_GetIPCountry$descriptor() {
        return SteamAPI_ISteamUtils_GetIPCountry.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamUtils_GetIPCountry()
     * }
     */
    public static MethodHandle SteamAPI_ISteamUtils_GetIPCountry$handle() {
        return SteamAPI_ISteamUtils_GetIPCountry.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamUtils_GetIPCountry()
     * }
     */
    public static MemorySegment SteamAPI_ISteamUtils_GetIPCountry() {
        var mh$ = SteamAPI_ISteamUtils_GetIPCountry.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUtils_GetIPCountry");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUtils_GetImageSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUtils_GetImageSize"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUtils_GetImageSize(int iImage, uint32 *pnWidth, uint32 *pnHeight)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUtils_GetImageSize$descriptor() {
        return SteamAPI_ISteamUtils_GetImageSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUtils_GetImageSize(int iImage, uint32 *pnWidth, uint32 *pnHeight)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUtils_GetImageSize$handle() {
        return SteamAPI_ISteamUtils_GetImageSize.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUtils_GetImageSize(int iImage, uint32 *pnWidth, uint32 *pnHeight)
     * }
     */
    public static boolean SteamAPI_ISteamUtils_GetImageSize(int iImage, MemorySegment pnWidth, MemorySegment pnHeight) {
        var mh$ = SteamAPI_ISteamUtils_GetImageSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUtils_GetImageSize", iImage, pnWidth, pnHeight);
            }
            return (boolean)mh$.invokeExact(iImage, pnWidth, pnHeight);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUtils_GetImageRGBA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUtils_GetImageRGBA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUtils_GetImageRGBA(int iImage, uint8 *pubDest, int nDestBufferSize)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUtils_GetImageRGBA$descriptor() {
        return SteamAPI_ISteamUtils_GetImageRGBA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUtils_GetImageRGBA(int iImage, uint8 *pubDest, int nDestBufferSize)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUtils_GetImageRGBA$handle() {
        return SteamAPI_ISteamUtils_GetImageRGBA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUtils_GetImageRGBA(int iImage, uint8 *pubDest, int nDestBufferSize)
     * }
     */
    public static boolean SteamAPI_ISteamUtils_GetImageRGBA(int iImage, MemorySegment pubDest, int nDestBufferSize) {
        var mh$ = SteamAPI_ISteamUtils_GetImageRGBA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUtils_GetImageRGBA", iImage, pubDest, nDestBufferSize);
            }
            return (boolean)mh$.invokeExact(iImage, pubDest, nDestBufferSize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUtils_GetCurrentBatteryPower {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_CHAR    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUtils_GetCurrentBatteryPower"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint8 SteamAPI_ISteamUtils_GetCurrentBatteryPower()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUtils_GetCurrentBatteryPower$descriptor() {
        return SteamAPI_ISteamUtils_GetCurrentBatteryPower.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint8 SteamAPI_ISteamUtils_GetCurrentBatteryPower()
     * }
     */
    public static MethodHandle SteamAPI_ISteamUtils_GetCurrentBatteryPower$handle() {
        return SteamAPI_ISteamUtils_GetCurrentBatteryPower.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * uint8 SteamAPI_ISteamUtils_GetCurrentBatteryPower()
     * }
     */
    public static byte SteamAPI_ISteamUtils_GetCurrentBatteryPower() {
        var mh$ = SteamAPI_ISteamUtils_GetCurrentBatteryPower.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUtils_GetCurrentBatteryPower");
            }
            return (byte)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUtils_GetAppID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUtils_GetAppID"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamUtils_GetAppID()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUtils_GetAppID$descriptor() {
        return SteamAPI_ISteamUtils_GetAppID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamUtils_GetAppID()
     * }
     */
    public static MethodHandle SteamAPI_ISteamUtils_GetAppID$handle() {
        return SteamAPI_ISteamUtils_GetAppID.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamUtils_GetAppID()
     * }
     */
    public static int SteamAPI_ISteamUtils_GetAppID() {
        var mh$ = SteamAPI_ISteamUtils_GetAppID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUtils_GetAppID");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUtils_SetOverlayNotificationPosition {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUtils_SetOverlayNotificationPosition"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamUtils_SetOverlayNotificationPosition(ENotificationPosition eNotificationPosition)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUtils_SetOverlayNotificationPosition$descriptor() {
        return SteamAPI_ISteamUtils_SetOverlayNotificationPosition.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamUtils_SetOverlayNotificationPosition(ENotificationPosition eNotificationPosition)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUtils_SetOverlayNotificationPosition$handle() {
        return SteamAPI_ISteamUtils_SetOverlayNotificationPosition.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamUtils_SetOverlayNotificationPosition(ENotificationPosition eNotificationPosition)
     * }
     */
    public static void SteamAPI_ISteamUtils_SetOverlayNotificationPosition(int eNotificationPosition) {
        var mh$ = SteamAPI_ISteamUtils_SetOverlayNotificationPosition.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUtils_SetOverlayNotificationPosition", eNotificationPosition);
            }
            mh$.invokeExact(eNotificationPosition);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUtils_IsAPICallCompleted {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUtils_IsAPICallCompleted"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUtils_IsAPICallCompleted(SteamAPICall_t hSteamAPICall, bool *pbFailed)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUtils_IsAPICallCompleted$descriptor() {
        return SteamAPI_ISteamUtils_IsAPICallCompleted.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUtils_IsAPICallCompleted(SteamAPICall_t hSteamAPICall, bool *pbFailed)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUtils_IsAPICallCompleted$handle() {
        return SteamAPI_ISteamUtils_IsAPICallCompleted.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUtils_IsAPICallCompleted(SteamAPICall_t hSteamAPICall, bool *pbFailed)
     * }
     */
    public static boolean SteamAPI_ISteamUtils_IsAPICallCompleted(long hSteamAPICall, MemorySegment pbFailed) {
        var mh$ = SteamAPI_ISteamUtils_IsAPICallCompleted.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUtils_IsAPICallCompleted", hSteamAPICall, pbFailed);
            }
            return (boolean)mh$.invokeExact(hSteamAPICall, pbFailed);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUtils_GetAPICallFailureReason {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUtils_GetAPICallFailureReason"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ESteamAPICallFailure SteamAPI_ISteamUtils_GetAPICallFailureReason(SteamAPICall_t hSteamAPICall)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUtils_GetAPICallFailureReason$descriptor() {
        return SteamAPI_ISteamUtils_GetAPICallFailureReason.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ESteamAPICallFailure SteamAPI_ISteamUtils_GetAPICallFailureReason(SteamAPICall_t hSteamAPICall)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUtils_GetAPICallFailureReason$handle() {
        return SteamAPI_ISteamUtils_GetAPICallFailureReason.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ESteamAPICallFailure SteamAPI_ISteamUtils_GetAPICallFailureReason(SteamAPICall_t hSteamAPICall)
     * }
     */
    public static int SteamAPI_ISteamUtils_GetAPICallFailureReason(long hSteamAPICall) {
        var mh$ = SteamAPI_ISteamUtils_GetAPICallFailureReason.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUtils_GetAPICallFailureReason", hSteamAPICall);
            }
            return (int)mh$.invokeExact(hSteamAPICall);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUtils_GetAPICallResult {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUtils_GetAPICallResult"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUtils_GetAPICallResult(SteamAPICall_t hSteamAPICall, void *pCallback, int cubCallback, int iCallbackExpected, bool *pbFailed)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUtils_GetAPICallResult$descriptor() {
        return SteamAPI_ISteamUtils_GetAPICallResult.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUtils_GetAPICallResult(SteamAPICall_t hSteamAPICall, void *pCallback, int cubCallback, int iCallbackExpected, bool *pbFailed)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUtils_GetAPICallResult$handle() {
        return SteamAPI_ISteamUtils_GetAPICallResult.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUtils_GetAPICallResult(SteamAPICall_t hSteamAPICall, void *pCallback, int cubCallback, int iCallbackExpected, bool *pbFailed)
     * }
     */
    public static boolean SteamAPI_ISteamUtils_GetAPICallResult(long hSteamAPICall, MemorySegment pCallback, int cubCallback, int iCallbackExpected, MemorySegment pbFailed) {
        var mh$ = SteamAPI_ISteamUtils_GetAPICallResult.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUtils_GetAPICallResult", hSteamAPICall, pCallback, cubCallback, iCallbackExpected, pbFailed);
            }
            return (boolean)mh$.invokeExact(hSteamAPICall, pCallback, cubCallback, iCallbackExpected, pbFailed);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUtils_GetIPCCallCount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUtils_GetIPCCallCount"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamUtils_GetIPCCallCount()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUtils_GetIPCCallCount$descriptor() {
        return SteamAPI_ISteamUtils_GetIPCCallCount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamUtils_GetIPCCallCount()
     * }
     */
    public static MethodHandle SteamAPI_ISteamUtils_GetIPCCallCount$handle() {
        return SteamAPI_ISteamUtils_GetIPCCallCount.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamUtils_GetIPCCallCount()
     * }
     */
    public static int SteamAPI_ISteamUtils_GetIPCCallCount() {
        var mh$ = SteamAPI_ISteamUtils_GetIPCCallCount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUtils_GetIPCCallCount");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUtils_IsOverlayEnabled {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUtils_IsOverlayEnabled"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUtils_IsOverlayEnabled()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUtils_IsOverlayEnabled$descriptor() {
        return SteamAPI_ISteamUtils_IsOverlayEnabled.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUtils_IsOverlayEnabled()
     * }
     */
    public static MethodHandle SteamAPI_ISteamUtils_IsOverlayEnabled$handle() {
        return SteamAPI_ISteamUtils_IsOverlayEnabled.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUtils_IsOverlayEnabled()
     * }
     */
    public static boolean SteamAPI_ISteamUtils_IsOverlayEnabled() {
        var mh$ = SteamAPI_ISteamUtils_IsOverlayEnabled.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUtils_IsOverlayEnabled");
            }
            return (boolean)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUtils_BOverlayNeedsPresent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUtils_BOverlayNeedsPresent"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUtils_BOverlayNeedsPresent()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUtils_BOverlayNeedsPresent$descriptor() {
        return SteamAPI_ISteamUtils_BOverlayNeedsPresent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUtils_BOverlayNeedsPresent()
     * }
     */
    public static MethodHandle SteamAPI_ISteamUtils_BOverlayNeedsPresent$handle() {
        return SteamAPI_ISteamUtils_BOverlayNeedsPresent.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUtils_BOverlayNeedsPresent()
     * }
     */
    public static boolean SteamAPI_ISteamUtils_BOverlayNeedsPresent() {
        var mh$ = SteamAPI_ISteamUtils_BOverlayNeedsPresent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUtils_BOverlayNeedsPresent");
            }
            return (boolean)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUtils_CheckFileSignature {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUtils_CheckFileSignature"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUtils_CheckFileSignature(const char *szFileName)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUtils_CheckFileSignature$descriptor() {
        return SteamAPI_ISteamUtils_CheckFileSignature.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUtils_CheckFileSignature(const char *szFileName)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUtils_CheckFileSignature$handle() {
        return SteamAPI_ISteamUtils_CheckFileSignature.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUtils_CheckFileSignature(const char *szFileName)
     * }
     */
    public static long SteamAPI_ISteamUtils_CheckFileSignature(MemorySegment szFileName) {
        var mh$ = SteamAPI_ISteamUtils_CheckFileSignature.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUtils_CheckFileSignature", szFileName);
            }
            return (long)mh$.invokeExact(szFileName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUtils_ShowGamepadTextInput {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUtils_ShowGamepadTextInput"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUtils_ShowGamepadTextInput(EGamepadTextInputMode eInputMode, EGamepadTextInputLineMode eLineInputMode, const char *pchDescription, uint32 unCharMax, const char *pchExistingText)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUtils_ShowGamepadTextInput$descriptor() {
        return SteamAPI_ISteamUtils_ShowGamepadTextInput.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUtils_ShowGamepadTextInput(EGamepadTextInputMode eInputMode, EGamepadTextInputLineMode eLineInputMode, const char *pchDescription, uint32 unCharMax, const char *pchExistingText)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUtils_ShowGamepadTextInput$handle() {
        return SteamAPI_ISteamUtils_ShowGamepadTextInput.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUtils_ShowGamepadTextInput(EGamepadTextInputMode eInputMode, EGamepadTextInputLineMode eLineInputMode, const char *pchDescription, uint32 unCharMax, const char *pchExistingText)
     * }
     */
    public static boolean SteamAPI_ISteamUtils_ShowGamepadTextInput(int eInputMode, int eLineInputMode, MemorySegment pchDescription, int unCharMax, MemorySegment pchExistingText) {
        var mh$ = SteamAPI_ISteamUtils_ShowGamepadTextInput.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUtils_ShowGamepadTextInput", eInputMode, eLineInputMode, pchDescription, unCharMax, pchExistingText);
            }
            return (boolean)mh$.invokeExact(eInputMode, eLineInputMode, pchDescription, unCharMax, pchExistingText);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUtils_GetEnteredGamepadTextLength {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUtils_GetEnteredGamepadTextLength"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamUtils_GetEnteredGamepadTextLength()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUtils_GetEnteredGamepadTextLength$descriptor() {
        return SteamAPI_ISteamUtils_GetEnteredGamepadTextLength.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamUtils_GetEnteredGamepadTextLength()
     * }
     */
    public static MethodHandle SteamAPI_ISteamUtils_GetEnteredGamepadTextLength$handle() {
        return SteamAPI_ISteamUtils_GetEnteredGamepadTextLength.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamUtils_GetEnteredGamepadTextLength()
     * }
     */
    public static int SteamAPI_ISteamUtils_GetEnteredGamepadTextLength() {
        var mh$ = SteamAPI_ISteamUtils_GetEnteredGamepadTextLength.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUtils_GetEnteredGamepadTextLength");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUtils_GetEnteredGamepadTextInput {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUtils_GetEnteredGamepadTextInput"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUtils_GetEnteredGamepadTextInput(char *pchText, uint32 cchText)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUtils_GetEnteredGamepadTextInput$descriptor() {
        return SteamAPI_ISteamUtils_GetEnteredGamepadTextInput.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUtils_GetEnteredGamepadTextInput(char *pchText, uint32 cchText)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUtils_GetEnteredGamepadTextInput$handle() {
        return SteamAPI_ISteamUtils_GetEnteredGamepadTextInput.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUtils_GetEnteredGamepadTextInput(char *pchText, uint32 cchText)
     * }
     */
    public static boolean SteamAPI_ISteamUtils_GetEnteredGamepadTextInput(MemorySegment pchText, int cchText) {
        var mh$ = SteamAPI_ISteamUtils_GetEnteredGamepadTextInput.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUtils_GetEnteredGamepadTextInput", pchText, cchText);
            }
            return (boolean)mh$.invokeExact(pchText, cchText);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUtils_GetSteamUILanguage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUtils_GetSteamUILanguage"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamUtils_GetSteamUILanguage()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUtils_GetSteamUILanguage$descriptor() {
        return SteamAPI_ISteamUtils_GetSteamUILanguage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamUtils_GetSteamUILanguage()
     * }
     */
    public static MethodHandle SteamAPI_ISteamUtils_GetSteamUILanguage$handle() {
        return SteamAPI_ISteamUtils_GetSteamUILanguage.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamUtils_GetSteamUILanguage()
     * }
     */
    public static MemorySegment SteamAPI_ISteamUtils_GetSteamUILanguage() {
        var mh$ = SteamAPI_ISteamUtils_GetSteamUILanguage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUtils_GetSteamUILanguage");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUtils_IsSteamRunningInVR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUtils_IsSteamRunningInVR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUtils_IsSteamRunningInVR()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUtils_IsSteamRunningInVR$descriptor() {
        return SteamAPI_ISteamUtils_IsSteamRunningInVR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUtils_IsSteamRunningInVR()
     * }
     */
    public static MethodHandle SteamAPI_ISteamUtils_IsSteamRunningInVR$handle() {
        return SteamAPI_ISteamUtils_IsSteamRunningInVR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUtils_IsSteamRunningInVR()
     * }
     */
    public static boolean SteamAPI_ISteamUtils_IsSteamRunningInVR() {
        var mh$ = SteamAPI_ISteamUtils_IsSteamRunningInVR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUtils_IsSteamRunningInVR");
            }
            return (boolean)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUtils_SetOverlayNotificationInset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUtils_SetOverlayNotificationInset"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamUtils_SetOverlayNotificationInset(int nHorizontalInset, int nVerticalInset)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUtils_SetOverlayNotificationInset$descriptor() {
        return SteamAPI_ISteamUtils_SetOverlayNotificationInset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamUtils_SetOverlayNotificationInset(int nHorizontalInset, int nVerticalInset)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUtils_SetOverlayNotificationInset$handle() {
        return SteamAPI_ISteamUtils_SetOverlayNotificationInset.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamUtils_SetOverlayNotificationInset(int nHorizontalInset, int nVerticalInset)
     * }
     */
    public static void SteamAPI_ISteamUtils_SetOverlayNotificationInset(int nHorizontalInset, int nVerticalInset) {
        var mh$ = SteamAPI_ISteamUtils_SetOverlayNotificationInset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUtils_SetOverlayNotificationInset", nHorizontalInset, nVerticalInset);
            }
            mh$.invokeExact(nHorizontalInset, nVerticalInset);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUtils_IsSteamInBigPictureMode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUtils_IsSteamInBigPictureMode"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUtils_IsSteamInBigPictureMode()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUtils_IsSteamInBigPictureMode$descriptor() {
        return SteamAPI_ISteamUtils_IsSteamInBigPictureMode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUtils_IsSteamInBigPictureMode()
     * }
     */
    public static MethodHandle SteamAPI_ISteamUtils_IsSteamInBigPictureMode$handle() {
        return SteamAPI_ISteamUtils_IsSteamInBigPictureMode.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUtils_IsSteamInBigPictureMode()
     * }
     */
    public static boolean SteamAPI_ISteamUtils_IsSteamInBigPictureMode() {
        var mh$ = SteamAPI_ISteamUtils_IsSteamInBigPictureMode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUtils_IsSteamInBigPictureMode");
            }
            return (boolean)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUtils_StartVRDashboard {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUtils_StartVRDashboard"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamUtils_StartVRDashboard()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUtils_StartVRDashboard$descriptor() {
        return SteamAPI_ISteamUtils_StartVRDashboard.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamUtils_StartVRDashboard()
     * }
     */
    public static MethodHandle SteamAPI_ISteamUtils_StartVRDashboard$handle() {
        return SteamAPI_ISteamUtils_StartVRDashboard.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamUtils_StartVRDashboard()
     * }
     */
    public static void SteamAPI_ISteamUtils_StartVRDashboard() {
        var mh$ = SteamAPI_ISteamUtils_StartVRDashboard.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUtils_StartVRDashboard");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUtils_IsVRHeadsetStreamingEnabled {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUtils_IsVRHeadsetStreamingEnabled"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUtils_IsVRHeadsetStreamingEnabled()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUtils_IsVRHeadsetStreamingEnabled$descriptor() {
        return SteamAPI_ISteamUtils_IsVRHeadsetStreamingEnabled.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUtils_IsVRHeadsetStreamingEnabled()
     * }
     */
    public static MethodHandle SteamAPI_ISteamUtils_IsVRHeadsetStreamingEnabled$handle() {
        return SteamAPI_ISteamUtils_IsVRHeadsetStreamingEnabled.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUtils_IsVRHeadsetStreamingEnabled()
     * }
     */
    public static boolean SteamAPI_ISteamUtils_IsVRHeadsetStreamingEnabled() {
        var mh$ = SteamAPI_ISteamUtils_IsVRHeadsetStreamingEnabled.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUtils_IsVRHeadsetStreamingEnabled");
            }
            return (boolean)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUtils_SetVRHeadsetStreamingEnabled {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUtils_SetVRHeadsetStreamingEnabled"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamUtils_SetVRHeadsetStreamingEnabled(bool bEnabled)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUtils_SetVRHeadsetStreamingEnabled$descriptor() {
        return SteamAPI_ISteamUtils_SetVRHeadsetStreamingEnabled.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamUtils_SetVRHeadsetStreamingEnabled(bool bEnabled)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUtils_SetVRHeadsetStreamingEnabled$handle() {
        return SteamAPI_ISteamUtils_SetVRHeadsetStreamingEnabled.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamUtils_SetVRHeadsetStreamingEnabled(bool bEnabled)
     * }
     */
    public static void SteamAPI_ISteamUtils_SetVRHeadsetStreamingEnabled(boolean bEnabled) {
        var mh$ = SteamAPI_ISteamUtils_SetVRHeadsetStreamingEnabled.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUtils_SetVRHeadsetStreamingEnabled", bEnabled);
            }
            mh$.invokeExact(bEnabled);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUtils_IsSteamChinaLauncher {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUtils_IsSteamChinaLauncher"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUtils_IsSteamChinaLauncher()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUtils_IsSteamChinaLauncher$descriptor() {
        return SteamAPI_ISteamUtils_IsSteamChinaLauncher.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUtils_IsSteamChinaLauncher()
     * }
     */
    public static MethodHandle SteamAPI_ISteamUtils_IsSteamChinaLauncher$handle() {
        return SteamAPI_ISteamUtils_IsSteamChinaLauncher.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUtils_IsSteamChinaLauncher()
     * }
     */
    public static boolean SteamAPI_ISteamUtils_IsSteamChinaLauncher() {
        var mh$ = SteamAPI_ISteamUtils_IsSteamChinaLauncher.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUtils_IsSteamChinaLauncher");
            }
            return (boolean)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUtils_InitFilterText {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUtils_InitFilterText"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUtils_InitFilterText(uint32 unFilterOptions)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUtils_InitFilterText$descriptor() {
        return SteamAPI_ISteamUtils_InitFilterText.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUtils_InitFilterText(uint32 unFilterOptions)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUtils_InitFilterText$handle() {
        return SteamAPI_ISteamUtils_InitFilterText.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUtils_InitFilterText(uint32 unFilterOptions)
     * }
     */
    public static boolean SteamAPI_ISteamUtils_InitFilterText(int unFilterOptions) {
        var mh$ = SteamAPI_ISteamUtils_InitFilterText.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUtils_InitFilterText", unFilterOptions);
            }
            return (boolean)mh$.invokeExact(unFilterOptions);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUtils_FilterText {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUtils_FilterText"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamUtils_FilterText(ETextFilteringContext eContext, uint64_steamid sourceSteamID, const char *pchInputMessage, char *pchOutFilteredText, uint32 nByteSizeOutFilteredText)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUtils_FilterText$descriptor() {
        return SteamAPI_ISteamUtils_FilterText.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamUtils_FilterText(ETextFilteringContext eContext, uint64_steamid sourceSteamID, const char *pchInputMessage, char *pchOutFilteredText, uint32 nByteSizeOutFilteredText)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUtils_FilterText$handle() {
        return SteamAPI_ISteamUtils_FilterText.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int SteamAPI_ISteamUtils_FilterText(ETextFilteringContext eContext, uint64_steamid sourceSteamID, const char *pchInputMessage, char *pchOutFilteredText, uint32 nByteSizeOutFilteredText)
     * }
     */
    public static int SteamAPI_ISteamUtils_FilterText(int eContext, long sourceSteamID, MemorySegment pchInputMessage, MemorySegment pchOutFilteredText, int nByteSizeOutFilteredText) {
        var mh$ = SteamAPI_ISteamUtils_FilterText.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUtils_FilterText", eContext, sourceSteamID, pchInputMessage, pchOutFilteredText, nByteSizeOutFilteredText);
            }
            return (int)mh$.invokeExact(eContext, sourceSteamID, pchInputMessage, pchOutFilteredText, nByteSizeOutFilteredText);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUtils_GetIPv6ConnectivityState {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUtils_GetIPv6ConnectivityState"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ESteamIPv6ConnectivityState SteamAPI_ISteamUtils_GetIPv6ConnectivityState(ESteamIPv6ConnectivityProtocol eProtocol)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUtils_GetIPv6ConnectivityState$descriptor() {
        return SteamAPI_ISteamUtils_GetIPv6ConnectivityState.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ESteamIPv6ConnectivityState SteamAPI_ISteamUtils_GetIPv6ConnectivityState(ESteamIPv6ConnectivityProtocol eProtocol)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUtils_GetIPv6ConnectivityState$handle() {
        return SteamAPI_ISteamUtils_GetIPv6ConnectivityState.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ESteamIPv6ConnectivityState SteamAPI_ISteamUtils_GetIPv6ConnectivityState(ESteamIPv6ConnectivityProtocol eProtocol)
     * }
     */
    public static int SteamAPI_ISteamUtils_GetIPv6ConnectivityState(int eProtocol) {
        var mh$ = SteamAPI_ISteamUtils_GetIPv6ConnectivityState.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUtils_GetIPv6ConnectivityState", eProtocol);
            }
            return (int)mh$.invokeExact(eProtocol);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUtils_IsSteamRunningOnSteamDeck {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUtils_IsSteamRunningOnSteamDeck"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUtils_IsSteamRunningOnSteamDeck()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUtils_IsSteamRunningOnSteamDeck$descriptor() {
        return SteamAPI_ISteamUtils_IsSteamRunningOnSteamDeck.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUtils_IsSteamRunningOnSteamDeck()
     * }
     */
    public static MethodHandle SteamAPI_ISteamUtils_IsSteamRunningOnSteamDeck$handle() {
        return SteamAPI_ISteamUtils_IsSteamRunningOnSteamDeck.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUtils_IsSteamRunningOnSteamDeck()
     * }
     */
    public static boolean SteamAPI_ISteamUtils_IsSteamRunningOnSteamDeck() {
        var mh$ = SteamAPI_ISteamUtils_IsSteamRunningOnSteamDeck.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUtils_IsSteamRunningOnSteamDeck");
            }
            return (boolean)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUtils_ShowFloatingGamepadTextInput {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUtils_ShowFloatingGamepadTextInput"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUtils_ShowFloatingGamepadTextInput(EFloatingGamepadTextInputMode eKeyboardMode, int nTextFieldXPosition, int nTextFieldYPosition, int nTextFieldWidth, int nTextFieldHeight)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUtils_ShowFloatingGamepadTextInput$descriptor() {
        return SteamAPI_ISteamUtils_ShowFloatingGamepadTextInput.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUtils_ShowFloatingGamepadTextInput(EFloatingGamepadTextInputMode eKeyboardMode, int nTextFieldXPosition, int nTextFieldYPosition, int nTextFieldWidth, int nTextFieldHeight)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUtils_ShowFloatingGamepadTextInput$handle() {
        return SteamAPI_ISteamUtils_ShowFloatingGamepadTextInput.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUtils_ShowFloatingGamepadTextInput(EFloatingGamepadTextInputMode eKeyboardMode, int nTextFieldXPosition, int nTextFieldYPosition, int nTextFieldWidth, int nTextFieldHeight)
     * }
     */
    public static boolean SteamAPI_ISteamUtils_ShowFloatingGamepadTextInput(int eKeyboardMode, int nTextFieldXPosition, int nTextFieldYPosition, int nTextFieldWidth, int nTextFieldHeight) {
        var mh$ = SteamAPI_ISteamUtils_ShowFloatingGamepadTextInput.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUtils_ShowFloatingGamepadTextInput", eKeyboardMode, nTextFieldXPosition, nTextFieldYPosition, nTextFieldWidth, nTextFieldHeight);
            }
            return (boolean)mh$.invokeExact(eKeyboardMode, nTextFieldXPosition, nTextFieldYPosition, nTextFieldWidth, nTextFieldHeight);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUtils_SetGameLauncherMode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUtils_SetGameLauncherMode"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamUtils_SetGameLauncherMode(bool bLauncherMode)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUtils_SetGameLauncherMode$descriptor() {
        return SteamAPI_ISteamUtils_SetGameLauncherMode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamUtils_SetGameLauncherMode(bool bLauncherMode)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUtils_SetGameLauncherMode$handle() {
        return SteamAPI_ISteamUtils_SetGameLauncherMode.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamUtils_SetGameLauncherMode(bool bLauncherMode)
     * }
     */
    public static void SteamAPI_ISteamUtils_SetGameLauncherMode(boolean bLauncherMode) {
        var mh$ = SteamAPI_ISteamUtils_SetGameLauncherMode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUtils_SetGameLauncherMode", bLauncherMode);
            }
            mh$.invokeExact(bLauncherMode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUtils_DismissFloatingGamepadTextInput {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUtils_DismissFloatingGamepadTextInput"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUtils_DismissFloatingGamepadTextInput()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUtils_DismissFloatingGamepadTextInput$descriptor() {
        return SteamAPI_ISteamUtils_DismissFloatingGamepadTextInput.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUtils_DismissFloatingGamepadTextInput()
     * }
     */
    public static MethodHandle SteamAPI_ISteamUtils_DismissFloatingGamepadTextInput$handle() {
        return SteamAPI_ISteamUtils_DismissFloatingGamepadTextInput.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUtils_DismissFloatingGamepadTextInput()
     * }
     */
    public static boolean SteamAPI_ISteamUtils_DismissFloatingGamepadTextInput() {
        var mh$ = SteamAPI_ISteamUtils_DismissFloatingGamepadTextInput.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUtils_DismissFloatingGamepadTextInput");
            }
            return (boolean)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUtils_DismissGamepadTextInput {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUtils_DismissGamepadTextInput"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUtils_DismissGamepadTextInput()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUtils_DismissGamepadTextInput$descriptor() {
        return SteamAPI_ISteamUtils_DismissGamepadTextInput.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUtils_DismissGamepadTextInput()
     * }
     */
    public static MethodHandle SteamAPI_ISteamUtils_DismissGamepadTextInput$handle() {
        return SteamAPI_ISteamUtils_DismissGamepadTextInput.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUtils_DismissGamepadTextInput()
     * }
     */
    public static boolean SteamAPI_ISteamUtils_DismissGamepadTextInput() {
        var mh$ = SteamAPI_ISteamUtils_DismissGamepadTextInput.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUtils_DismissGamepadTextInput");
            }
            return (boolean)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmaking_GetFavoriteGameCount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamMatchmaking_GetFavoriteGameCount"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamMatchmaking_GetFavoriteGameCount()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmaking_GetFavoriteGameCount$descriptor() {
        return SteamAPI_ISteamMatchmaking_GetFavoriteGameCount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamMatchmaking_GetFavoriteGameCount()
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmaking_GetFavoriteGameCount$handle() {
        return SteamAPI_ISteamMatchmaking_GetFavoriteGameCount.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int SteamAPI_ISteamMatchmaking_GetFavoriteGameCount()
     * }
     */
    public static int SteamAPI_ISteamMatchmaking_GetFavoriteGameCount() {
        var mh$ = SteamAPI_ISteamMatchmaking_GetFavoriteGameCount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmaking_GetFavoriteGameCount");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmaking_GetFavoriteGame {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamMatchmaking_GetFavoriteGame"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMatchmaking_GetFavoriteGame(int iGame, AppId_t *pnAppID, uint32 *pnIP, uint16 *pnConnPort, uint16 *pnQueryPort, uint32 *punFlags, uint32 *pRTime32LastPlayedOnServer)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmaking_GetFavoriteGame$descriptor() {
        return SteamAPI_ISteamMatchmaking_GetFavoriteGame.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMatchmaking_GetFavoriteGame(int iGame, AppId_t *pnAppID, uint32 *pnIP, uint16 *pnConnPort, uint16 *pnQueryPort, uint32 *punFlags, uint32 *pRTime32LastPlayedOnServer)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmaking_GetFavoriteGame$handle() {
        return SteamAPI_ISteamMatchmaking_GetFavoriteGame.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMatchmaking_GetFavoriteGame(int iGame, AppId_t *pnAppID, uint32 *pnIP, uint16 *pnConnPort, uint16 *pnQueryPort, uint32 *punFlags, uint32 *pRTime32LastPlayedOnServer)
     * }
     */
    public static boolean SteamAPI_ISteamMatchmaking_GetFavoriteGame(int iGame, MemorySegment pnAppID, MemorySegment pnIP, MemorySegment pnConnPort, MemorySegment pnQueryPort, MemorySegment punFlags, MemorySegment pRTime32LastPlayedOnServer) {
        var mh$ = SteamAPI_ISteamMatchmaking_GetFavoriteGame.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmaking_GetFavoriteGame", iGame, pnAppID, pnIP, pnConnPort, pnQueryPort, punFlags, pRTime32LastPlayedOnServer);
            }
            return (boolean)mh$.invokeExact(iGame, pnAppID, pnIP, pnConnPort, pnQueryPort, punFlags, pRTime32LastPlayedOnServer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmaking_AddFavoriteGame {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_SHORT,
            SteamFlat4j.C_SHORT,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamMatchmaking_AddFavoriteGame"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamMatchmaking_AddFavoriteGame(AppId_t nAppID, uint32 nIP, uint16 nConnPort, uint16 nQueryPort, uint32 unFlags, uint32 rTime32LastPlayedOnServer)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmaking_AddFavoriteGame$descriptor() {
        return SteamAPI_ISteamMatchmaking_AddFavoriteGame.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamMatchmaking_AddFavoriteGame(AppId_t nAppID, uint32 nIP, uint16 nConnPort, uint16 nQueryPort, uint32 unFlags, uint32 rTime32LastPlayedOnServer)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmaking_AddFavoriteGame$handle() {
        return SteamAPI_ISteamMatchmaking_AddFavoriteGame.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int SteamAPI_ISteamMatchmaking_AddFavoriteGame(AppId_t nAppID, uint32 nIP, uint16 nConnPort, uint16 nQueryPort, uint32 unFlags, uint32 rTime32LastPlayedOnServer)
     * }
     */
    public static int SteamAPI_ISteamMatchmaking_AddFavoriteGame(int nAppID, int nIP, short nConnPort, short nQueryPort, int unFlags, int rTime32LastPlayedOnServer) {
        var mh$ = SteamAPI_ISteamMatchmaking_AddFavoriteGame.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmaking_AddFavoriteGame", nAppID, nIP, nConnPort, nQueryPort, unFlags, rTime32LastPlayedOnServer);
            }
            return (int)mh$.invokeExact(nAppID, nIP, nConnPort, nQueryPort, unFlags, rTime32LastPlayedOnServer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmaking_RemoveFavoriteGame {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_SHORT,
            SteamFlat4j.C_SHORT,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamMatchmaking_RemoveFavoriteGame"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMatchmaking_RemoveFavoriteGame(AppId_t nAppID, uint32 nIP, uint16 nConnPort, uint16 nQueryPort, uint32 unFlags)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmaking_RemoveFavoriteGame$descriptor() {
        return SteamAPI_ISteamMatchmaking_RemoveFavoriteGame.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMatchmaking_RemoveFavoriteGame(AppId_t nAppID, uint32 nIP, uint16 nConnPort, uint16 nQueryPort, uint32 unFlags)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmaking_RemoveFavoriteGame$handle() {
        return SteamAPI_ISteamMatchmaking_RemoveFavoriteGame.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMatchmaking_RemoveFavoriteGame(AppId_t nAppID, uint32 nIP, uint16 nConnPort, uint16 nQueryPort, uint32 unFlags)
     * }
     */
    public static boolean SteamAPI_ISteamMatchmaking_RemoveFavoriteGame(int nAppID, int nIP, short nConnPort, short nQueryPort, int unFlags) {
        var mh$ = SteamAPI_ISteamMatchmaking_RemoveFavoriteGame.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmaking_RemoveFavoriteGame", nAppID, nIP, nConnPort, nQueryPort, unFlags);
            }
            return (boolean)mh$.invokeExact(nAppID, nIP, nConnPort, nQueryPort, unFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmaking_RequestLobbyList {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_LONG_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamMatchmaking_RequestLobbyList"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamMatchmaking_RequestLobbyList()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmaking_RequestLobbyList$descriptor() {
        return SteamAPI_ISteamMatchmaking_RequestLobbyList.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamMatchmaking_RequestLobbyList()
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmaking_RequestLobbyList$handle() {
        return SteamAPI_ISteamMatchmaking_RequestLobbyList.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamMatchmaking_RequestLobbyList()
     * }
     */
    public static long SteamAPI_ISteamMatchmaking_RequestLobbyList() {
        var mh$ = SteamAPI_ISteamMatchmaking_RequestLobbyList.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmaking_RequestLobbyList");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmaking_AddRequestLobbyListStringFilter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamMatchmaking_AddRequestLobbyListStringFilter"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmaking_AddRequestLobbyListStringFilter(const char *pchKeyToMatch, const char *pchValueToMatch, ELobbyComparison eComparisonType)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmaking_AddRequestLobbyListStringFilter$descriptor() {
        return SteamAPI_ISteamMatchmaking_AddRequestLobbyListStringFilter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmaking_AddRequestLobbyListStringFilter(const char *pchKeyToMatch, const char *pchValueToMatch, ELobbyComparison eComparisonType)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmaking_AddRequestLobbyListStringFilter$handle() {
        return SteamAPI_ISteamMatchmaking_AddRequestLobbyListStringFilter.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmaking_AddRequestLobbyListStringFilter(const char *pchKeyToMatch, const char *pchValueToMatch, ELobbyComparison eComparisonType)
     * }
     */
    public static void SteamAPI_ISteamMatchmaking_AddRequestLobbyListStringFilter(MemorySegment pchKeyToMatch, MemorySegment pchValueToMatch, int eComparisonType) {
        var mh$ = SteamAPI_ISteamMatchmaking_AddRequestLobbyListStringFilter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmaking_AddRequestLobbyListStringFilter", pchKeyToMatch, pchValueToMatch, eComparisonType);
            }
            mh$.invokeExact(pchKeyToMatch, pchValueToMatch, eComparisonType);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmaking_AddRequestLobbyListNumericalFilter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamMatchmaking_AddRequestLobbyListNumericalFilter"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmaking_AddRequestLobbyListNumericalFilter(const char *pchKeyToMatch, int nValueToMatch, ELobbyComparison eComparisonType)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmaking_AddRequestLobbyListNumericalFilter$descriptor() {
        return SteamAPI_ISteamMatchmaking_AddRequestLobbyListNumericalFilter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmaking_AddRequestLobbyListNumericalFilter(const char *pchKeyToMatch, int nValueToMatch, ELobbyComparison eComparisonType)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmaking_AddRequestLobbyListNumericalFilter$handle() {
        return SteamAPI_ISteamMatchmaking_AddRequestLobbyListNumericalFilter.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmaking_AddRequestLobbyListNumericalFilter(const char *pchKeyToMatch, int nValueToMatch, ELobbyComparison eComparisonType)
     * }
     */
    public static void SteamAPI_ISteamMatchmaking_AddRequestLobbyListNumericalFilter(MemorySegment pchKeyToMatch, int nValueToMatch, int eComparisonType) {
        var mh$ = SteamAPI_ISteamMatchmaking_AddRequestLobbyListNumericalFilter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmaking_AddRequestLobbyListNumericalFilter", pchKeyToMatch, nValueToMatch, eComparisonType);
            }
            mh$.invokeExact(pchKeyToMatch, nValueToMatch, eComparisonType);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmaking_AddRequestLobbyListNearValueFilter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamMatchmaking_AddRequestLobbyListNearValueFilter"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmaking_AddRequestLobbyListNearValueFilter(const char *pchKeyToMatch, int nValueToBeCloseTo)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmaking_AddRequestLobbyListNearValueFilter$descriptor() {
        return SteamAPI_ISteamMatchmaking_AddRequestLobbyListNearValueFilter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmaking_AddRequestLobbyListNearValueFilter(const char *pchKeyToMatch, int nValueToBeCloseTo)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmaking_AddRequestLobbyListNearValueFilter$handle() {
        return SteamAPI_ISteamMatchmaking_AddRequestLobbyListNearValueFilter.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmaking_AddRequestLobbyListNearValueFilter(const char *pchKeyToMatch, int nValueToBeCloseTo)
     * }
     */
    public static void SteamAPI_ISteamMatchmaking_AddRequestLobbyListNearValueFilter(MemorySegment pchKeyToMatch, int nValueToBeCloseTo) {
        var mh$ = SteamAPI_ISteamMatchmaking_AddRequestLobbyListNearValueFilter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmaking_AddRequestLobbyListNearValueFilter", pchKeyToMatch, nValueToBeCloseTo);
            }
            mh$.invokeExact(pchKeyToMatch, nValueToBeCloseTo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable(int nSlotsAvailable)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable$descriptor() {
        return SteamAPI_ISteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable(int nSlotsAvailable)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable$handle() {
        return SteamAPI_ISteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable(int nSlotsAvailable)
     * }
     */
    public static void SteamAPI_ISteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable(int nSlotsAvailable) {
        var mh$ = SteamAPI_ISteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable", nSlotsAvailable);
            }
            mh$.invokeExact(nSlotsAvailable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmaking_AddRequestLobbyListDistanceFilter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamMatchmaking_AddRequestLobbyListDistanceFilter"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmaking_AddRequestLobbyListDistanceFilter(ELobbyDistanceFilter eLobbyDistanceFilter)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmaking_AddRequestLobbyListDistanceFilter$descriptor() {
        return SteamAPI_ISteamMatchmaking_AddRequestLobbyListDistanceFilter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmaking_AddRequestLobbyListDistanceFilter(ELobbyDistanceFilter eLobbyDistanceFilter)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmaking_AddRequestLobbyListDistanceFilter$handle() {
        return SteamAPI_ISteamMatchmaking_AddRequestLobbyListDistanceFilter.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmaking_AddRequestLobbyListDistanceFilter(ELobbyDistanceFilter eLobbyDistanceFilter)
     * }
     */
    public static void SteamAPI_ISteamMatchmaking_AddRequestLobbyListDistanceFilter(int eLobbyDistanceFilter) {
        var mh$ = SteamAPI_ISteamMatchmaking_AddRequestLobbyListDistanceFilter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmaking_AddRequestLobbyListDistanceFilter", eLobbyDistanceFilter);
            }
            mh$.invokeExact(eLobbyDistanceFilter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmaking_AddRequestLobbyListResultCountFilter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamMatchmaking_AddRequestLobbyListResultCountFilter"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmaking_AddRequestLobbyListResultCountFilter(int cMaxResults)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmaking_AddRequestLobbyListResultCountFilter$descriptor() {
        return SteamAPI_ISteamMatchmaking_AddRequestLobbyListResultCountFilter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmaking_AddRequestLobbyListResultCountFilter(int cMaxResults)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmaking_AddRequestLobbyListResultCountFilter$handle() {
        return SteamAPI_ISteamMatchmaking_AddRequestLobbyListResultCountFilter.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmaking_AddRequestLobbyListResultCountFilter(int cMaxResults)
     * }
     */
    public static void SteamAPI_ISteamMatchmaking_AddRequestLobbyListResultCountFilter(int cMaxResults) {
        var mh$ = SteamAPI_ISteamMatchmaking_AddRequestLobbyListResultCountFilter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmaking_AddRequestLobbyListResultCountFilter", cMaxResults);
            }
            mh$.invokeExact(cMaxResults);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter(uint64_steamid steamIDLobby)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter$descriptor() {
        return SteamAPI_ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter(uint64_steamid steamIDLobby)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter$handle() {
        return SteamAPI_ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter(uint64_steamid steamIDLobby)
     * }
     */
    public static void SteamAPI_ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter(long steamIDLobby) {
        var mh$ = SteamAPI_ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter", steamIDLobby);
            }
            mh$.invokeExact(steamIDLobby);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmaking_GetLobbyByIndex {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamMatchmaking_GetLobbyByIndex"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint64_steamid SteamAPI_ISteamMatchmaking_GetLobbyByIndex(int iLobby)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmaking_GetLobbyByIndex$descriptor() {
        return SteamAPI_ISteamMatchmaking_GetLobbyByIndex.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint64_steamid SteamAPI_ISteamMatchmaking_GetLobbyByIndex(int iLobby)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmaking_GetLobbyByIndex$handle() {
        return SteamAPI_ISteamMatchmaking_GetLobbyByIndex.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * uint64_steamid SteamAPI_ISteamMatchmaking_GetLobbyByIndex(int iLobby)
     * }
     */
    public static long SteamAPI_ISteamMatchmaking_GetLobbyByIndex(int iLobby) {
        var mh$ = SteamAPI_ISteamMatchmaking_GetLobbyByIndex.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmaking_GetLobbyByIndex", iLobby);
            }
            return (long)mh$.invokeExact(iLobby);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmaking_CreateLobby {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamMatchmaking_CreateLobby"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamMatchmaking_CreateLobby(ELobbyType eLobbyType, int cMaxMembers)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmaking_CreateLobby$descriptor() {
        return SteamAPI_ISteamMatchmaking_CreateLobby.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamMatchmaking_CreateLobby(ELobbyType eLobbyType, int cMaxMembers)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmaking_CreateLobby$handle() {
        return SteamAPI_ISteamMatchmaking_CreateLobby.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamMatchmaking_CreateLobby(ELobbyType eLobbyType, int cMaxMembers)
     * }
     */
    public static long SteamAPI_ISteamMatchmaking_CreateLobby(int eLobbyType, int cMaxMembers) {
        var mh$ = SteamAPI_ISteamMatchmaking_CreateLobby.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmaking_CreateLobby", eLobbyType, cMaxMembers);
            }
            return (long)mh$.invokeExact(eLobbyType, cMaxMembers);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmaking_JoinLobby {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamMatchmaking_JoinLobby"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamMatchmaking_JoinLobby(uint64_steamid steamIDLobby)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmaking_JoinLobby$descriptor() {
        return SteamAPI_ISteamMatchmaking_JoinLobby.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamMatchmaking_JoinLobby(uint64_steamid steamIDLobby)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmaking_JoinLobby$handle() {
        return SteamAPI_ISteamMatchmaking_JoinLobby.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamMatchmaking_JoinLobby(uint64_steamid steamIDLobby)
     * }
     */
    public static long SteamAPI_ISteamMatchmaking_JoinLobby(long steamIDLobby) {
        var mh$ = SteamAPI_ISteamMatchmaking_JoinLobby.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmaking_JoinLobby", steamIDLobby);
            }
            return (long)mh$.invokeExact(steamIDLobby);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmaking_LeaveLobby {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamMatchmaking_LeaveLobby"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmaking_LeaveLobby(uint64_steamid steamIDLobby)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmaking_LeaveLobby$descriptor() {
        return SteamAPI_ISteamMatchmaking_LeaveLobby.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmaking_LeaveLobby(uint64_steamid steamIDLobby)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmaking_LeaveLobby$handle() {
        return SteamAPI_ISteamMatchmaking_LeaveLobby.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmaking_LeaveLobby(uint64_steamid steamIDLobby)
     * }
     */
    public static void SteamAPI_ISteamMatchmaking_LeaveLobby(long steamIDLobby) {
        var mh$ = SteamAPI_ISteamMatchmaking_LeaveLobby.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmaking_LeaveLobby", steamIDLobby);
            }
            mh$.invokeExact(steamIDLobby);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmaking_InviteUserToLobby {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamMatchmaking_InviteUserToLobby"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMatchmaking_InviteUserToLobby(uint64_steamid steamIDLobby, uint64_steamid steamIDInvitee)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmaking_InviteUserToLobby$descriptor() {
        return SteamAPI_ISteamMatchmaking_InviteUserToLobby.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMatchmaking_InviteUserToLobby(uint64_steamid steamIDLobby, uint64_steamid steamIDInvitee)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmaking_InviteUserToLobby$handle() {
        return SteamAPI_ISteamMatchmaking_InviteUserToLobby.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMatchmaking_InviteUserToLobby(uint64_steamid steamIDLobby, uint64_steamid steamIDInvitee)
     * }
     */
    public static boolean SteamAPI_ISteamMatchmaking_InviteUserToLobby(long steamIDLobby, long steamIDInvitee) {
        var mh$ = SteamAPI_ISteamMatchmaking_InviteUserToLobby.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmaking_InviteUserToLobby", steamIDLobby, steamIDInvitee);
            }
            return (boolean)mh$.invokeExact(steamIDLobby, steamIDInvitee);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmaking_GetNumLobbyMembers {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamMatchmaking_GetNumLobbyMembers"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamMatchmaking_GetNumLobbyMembers(uint64_steamid steamIDLobby)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmaking_GetNumLobbyMembers$descriptor() {
        return SteamAPI_ISteamMatchmaking_GetNumLobbyMembers.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamMatchmaking_GetNumLobbyMembers(uint64_steamid steamIDLobby)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmaking_GetNumLobbyMembers$handle() {
        return SteamAPI_ISteamMatchmaking_GetNumLobbyMembers.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int SteamAPI_ISteamMatchmaking_GetNumLobbyMembers(uint64_steamid steamIDLobby)
     * }
     */
    public static int SteamAPI_ISteamMatchmaking_GetNumLobbyMembers(long steamIDLobby) {
        var mh$ = SteamAPI_ISteamMatchmaking_GetNumLobbyMembers.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmaking_GetNumLobbyMembers", steamIDLobby);
            }
            return (int)mh$.invokeExact(steamIDLobby);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmaking_GetLobbyMemberByIndex {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamMatchmaking_GetLobbyMemberByIndex"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint64_steamid SteamAPI_ISteamMatchmaking_GetLobbyMemberByIndex(uint64_steamid steamIDLobby, int iMember)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmaking_GetLobbyMemberByIndex$descriptor() {
        return SteamAPI_ISteamMatchmaking_GetLobbyMemberByIndex.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint64_steamid SteamAPI_ISteamMatchmaking_GetLobbyMemberByIndex(uint64_steamid steamIDLobby, int iMember)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmaking_GetLobbyMemberByIndex$handle() {
        return SteamAPI_ISteamMatchmaking_GetLobbyMemberByIndex.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * uint64_steamid SteamAPI_ISteamMatchmaking_GetLobbyMemberByIndex(uint64_steamid steamIDLobby, int iMember)
     * }
     */
    public static long SteamAPI_ISteamMatchmaking_GetLobbyMemberByIndex(long steamIDLobby, int iMember) {
        var mh$ = SteamAPI_ISteamMatchmaking_GetLobbyMemberByIndex.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmaking_GetLobbyMemberByIndex", steamIDLobby, iMember);
            }
            return (long)mh$.invokeExact(steamIDLobby, iMember);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmaking_GetLobbyData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamMatchmaking_GetLobbyData"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamMatchmaking_GetLobbyData(uint64_steamid steamIDLobby, const char *pchKey)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmaking_GetLobbyData$descriptor() {
        return SteamAPI_ISteamMatchmaking_GetLobbyData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamMatchmaking_GetLobbyData(uint64_steamid steamIDLobby, const char *pchKey)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmaking_GetLobbyData$handle() {
        return SteamAPI_ISteamMatchmaking_GetLobbyData.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamMatchmaking_GetLobbyData(uint64_steamid steamIDLobby, const char *pchKey)
     * }
     */
    public static MemorySegment SteamAPI_ISteamMatchmaking_GetLobbyData(long steamIDLobby, MemorySegment pchKey) {
        var mh$ = SteamAPI_ISteamMatchmaking_GetLobbyData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmaking_GetLobbyData", steamIDLobby, pchKey);
            }
            return (MemorySegment)mh$.invokeExact(steamIDLobby, pchKey);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmaking_SetLobbyData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamMatchmaking_SetLobbyData"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMatchmaking_SetLobbyData(uint64_steamid steamIDLobby, const char *pchKey, const char *pchValue)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmaking_SetLobbyData$descriptor() {
        return SteamAPI_ISteamMatchmaking_SetLobbyData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMatchmaking_SetLobbyData(uint64_steamid steamIDLobby, const char *pchKey, const char *pchValue)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmaking_SetLobbyData$handle() {
        return SteamAPI_ISteamMatchmaking_SetLobbyData.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMatchmaking_SetLobbyData(uint64_steamid steamIDLobby, const char *pchKey, const char *pchValue)
     * }
     */
    public static boolean SteamAPI_ISteamMatchmaking_SetLobbyData(long steamIDLobby, MemorySegment pchKey, MemorySegment pchValue) {
        var mh$ = SteamAPI_ISteamMatchmaking_SetLobbyData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmaking_SetLobbyData", steamIDLobby, pchKey, pchValue);
            }
            return (boolean)mh$.invokeExact(steamIDLobby, pchKey, pchValue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmaking_GetLobbyDataCount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamMatchmaking_GetLobbyDataCount"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamMatchmaking_GetLobbyDataCount(uint64_steamid steamIDLobby)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmaking_GetLobbyDataCount$descriptor() {
        return SteamAPI_ISteamMatchmaking_GetLobbyDataCount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamMatchmaking_GetLobbyDataCount(uint64_steamid steamIDLobby)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmaking_GetLobbyDataCount$handle() {
        return SteamAPI_ISteamMatchmaking_GetLobbyDataCount.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int SteamAPI_ISteamMatchmaking_GetLobbyDataCount(uint64_steamid steamIDLobby)
     * }
     */
    public static int SteamAPI_ISteamMatchmaking_GetLobbyDataCount(long steamIDLobby) {
        var mh$ = SteamAPI_ISteamMatchmaking_GetLobbyDataCount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmaking_GetLobbyDataCount", steamIDLobby);
            }
            return (int)mh$.invokeExact(steamIDLobby);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmaking_GetLobbyDataByIndex {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamMatchmaking_GetLobbyDataByIndex"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMatchmaking_GetLobbyDataByIndex(uint64_steamid steamIDLobby, int iLobbyData, char *pchKey, int cchKeyBufferSize, char *pchValue, int cchValueBufferSize)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmaking_GetLobbyDataByIndex$descriptor() {
        return SteamAPI_ISteamMatchmaking_GetLobbyDataByIndex.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMatchmaking_GetLobbyDataByIndex(uint64_steamid steamIDLobby, int iLobbyData, char *pchKey, int cchKeyBufferSize, char *pchValue, int cchValueBufferSize)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmaking_GetLobbyDataByIndex$handle() {
        return SteamAPI_ISteamMatchmaking_GetLobbyDataByIndex.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMatchmaking_GetLobbyDataByIndex(uint64_steamid steamIDLobby, int iLobbyData, char *pchKey, int cchKeyBufferSize, char *pchValue, int cchValueBufferSize)
     * }
     */
    public static boolean SteamAPI_ISteamMatchmaking_GetLobbyDataByIndex(long steamIDLobby, int iLobbyData, MemorySegment pchKey, int cchKeyBufferSize, MemorySegment pchValue, int cchValueBufferSize) {
        var mh$ = SteamAPI_ISteamMatchmaking_GetLobbyDataByIndex.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmaking_GetLobbyDataByIndex", steamIDLobby, iLobbyData, pchKey, cchKeyBufferSize, pchValue, cchValueBufferSize);
            }
            return (boolean)mh$.invokeExact(steamIDLobby, iLobbyData, pchKey, cchKeyBufferSize, pchValue, cchValueBufferSize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmaking_DeleteLobbyData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamMatchmaking_DeleteLobbyData"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMatchmaking_DeleteLobbyData(uint64_steamid steamIDLobby, const char *pchKey)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmaking_DeleteLobbyData$descriptor() {
        return SteamAPI_ISteamMatchmaking_DeleteLobbyData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMatchmaking_DeleteLobbyData(uint64_steamid steamIDLobby, const char *pchKey)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmaking_DeleteLobbyData$handle() {
        return SteamAPI_ISteamMatchmaking_DeleteLobbyData.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMatchmaking_DeleteLobbyData(uint64_steamid steamIDLobby, const char *pchKey)
     * }
     */
    public static boolean SteamAPI_ISteamMatchmaking_DeleteLobbyData(long steamIDLobby, MemorySegment pchKey) {
        var mh$ = SteamAPI_ISteamMatchmaking_DeleteLobbyData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmaking_DeleteLobbyData", steamIDLobby, pchKey);
            }
            return (boolean)mh$.invokeExact(steamIDLobby, pchKey);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmaking_GetLobbyMemberData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamMatchmaking_GetLobbyMemberData"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamMatchmaking_GetLobbyMemberData(uint64_steamid steamIDLobby, uint64_steamid steamIDUser, const char *pchKey)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmaking_GetLobbyMemberData$descriptor() {
        return SteamAPI_ISteamMatchmaking_GetLobbyMemberData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamMatchmaking_GetLobbyMemberData(uint64_steamid steamIDLobby, uint64_steamid steamIDUser, const char *pchKey)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmaking_GetLobbyMemberData$handle() {
        return SteamAPI_ISteamMatchmaking_GetLobbyMemberData.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamMatchmaking_GetLobbyMemberData(uint64_steamid steamIDLobby, uint64_steamid steamIDUser, const char *pchKey)
     * }
     */
    public static MemorySegment SteamAPI_ISteamMatchmaking_GetLobbyMemberData(long steamIDLobby, long steamIDUser, MemorySegment pchKey) {
        var mh$ = SteamAPI_ISteamMatchmaking_GetLobbyMemberData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmaking_GetLobbyMemberData", steamIDLobby, steamIDUser, pchKey);
            }
            return (MemorySegment)mh$.invokeExact(steamIDLobby, steamIDUser, pchKey);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmaking_SetLobbyMemberData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamMatchmaking_SetLobbyMemberData"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmaking_SetLobbyMemberData(uint64_steamid steamIDLobby, const char *pchKey, const char *pchValue)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmaking_SetLobbyMemberData$descriptor() {
        return SteamAPI_ISteamMatchmaking_SetLobbyMemberData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmaking_SetLobbyMemberData(uint64_steamid steamIDLobby, const char *pchKey, const char *pchValue)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmaking_SetLobbyMemberData$handle() {
        return SteamAPI_ISteamMatchmaking_SetLobbyMemberData.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmaking_SetLobbyMemberData(uint64_steamid steamIDLobby, const char *pchKey, const char *pchValue)
     * }
     */
    public static void SteamAPI_ISteamMatchmaking_SetLobbyMemberData(long steamIDLobby, MemorySegment pchKey, MemorySegment pchValue) {
        var mh$ = SteamAPI_ISteamMatchmaking_SetLobbyMemberData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmaking_SetLobbyMemberData", steamIDLobby, pchKey, pchValue);
            }
            mh$.invokeExact(steamIDLobby, pchKey, pchValue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmaking_SendLobbyChatMsg {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamMatchmaking_SendLobbyChatMsg"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMatchmaking_SendLobbyChatMsg(uint64_steamid steamIDLobby, const void *pvMsgBody, int cubMsgBody)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmaking_SendLobbyChatMsg$descriptor() {
        return SteamAPI_ISteamMatchmaking_SendLobbyChatMsg.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMatchmaking_SendLobbyChatMsg(uint64_steamid steamIDLobby, const void *pvMsgBody, int cubMsgBody)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmaking_SendLobbyChatMsg$handle() {
        return SteamAPI_ISteamMatchmaking_SendLobbyChatMsg.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMatchmaking_SendLobbyChatMsg(uint64_steamid steamIDLobby, const void *pvMsgBody, int cubMsgBody)
     * }
     */
    public static boolean SteamAPI_ISteamMatchmaking_SendLobbyChatMsg(long steamIDLobby, MemorySegment pvMsgBody, int cubMsgBody) {
        var mh$ = SteamAPI_ISteamMatchmaking_SendLobbyChatMsg.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmaking_SendLobbyChatMsg", steamIDLobby, pvMsgBody, cubMsgBody);
            }
            return (boolean)mh$.invokeExact(steamIDLobby, pvMsgBody, cubMsgBody);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmaking_GetLobbyChatEntry {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamMatchmaking_GetLobbyChatEntry"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamMatchmaking_GetLobbyChatEntry(uint64_steamid steamIDLobby, int iChatID, CSteamID *pSteamIDUser, void *pvData, int cubData, EChatEntryType *peChatEntryType)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmaking_GetLobbyChatEntry$descriptor() {
        return SteamAPI_ISteamMatchmaking_GetLobbyChatEntry.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamMatchmaking_GetLobbyChatEntry(uint64_steamid steamIDLobby, int iChatID, CSteamID *pSteamIDUser, void *pvData, int cubData, EChatEntryType *peChatEntryType)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmaking_GetLobbyChatEntry$handle() {
        return SteamAPI_ISteamMatchmaking_GetLobbyChatEntry.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int SteamAPI_ISteamMatchmaking_GetLobbyChatEntry(uint64_steamid steamIDLobby, int iChatID, CSteamID *pSteamIDUser, void *pvData, int cubData, EChatEntryType *peChatEntryType)
     * }
     */
    public static int SteamAPI_ISteamMatchmaking_GetLobbyChatEntry(long steamIDLobby, int iChatID, MemorySegment pSteamIDUser, MemorySegment pvData, int cubData, MemorySegment peChatEntryType) {
        var mh$ = SteamAPI_ISteamMatchmaking_GetLobbyChatEntry.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmaking_GetLobbyChatEntry", steamIDLobby, iChatID, pSteamIDUser, pvData, cubData, peChatEntryType);
            }
            return (int)mh$.invokeExact(steamIDLobby, iChatID, pSteamIDUser, pvData, cubData, peChatEntryType);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmaking_RequestLobbyData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamMatchmaking_RequestLobbyData"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMatchmaking_RequestLobbyData(uint64_steamid steamIDLobby)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmaking_RequestLobbyData$descriptor() {
        return SteamAPI_ISteamMatchmaking_RequestLobbyData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMatchmaking_RequestLobbyData(uint64_steamid steamIDLobby)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmaking_RequestLobbyData$handle() {
        return SteamAPI_ISteamMatchmaking_RequestLobbyData.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMatchmaking_RequestLobbyData(uint64_steamid steamIDLobby)
     * }
     */
    public static boolean SteamAPI_ISteamMatchmaking_RequestLobbyData(long steamIDLobby) {
        var mh$ = SteamAPI_ISteamMatchmaking_RequestLobbyData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmaking_RequestLobbyData", steamIDLobby);
            }
            return (boolean)mh$.invokeExact(steamIDLobby);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmaking_SetLobbyGameServer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_SHORT,
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamMatchmaking_SetLobbyGameServer"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmaking_SetLobbyGameServer(uint64_steamid steamIDLobby, uint32 unGameServerIP, uint16 unGameServerPort, uint64_steamid steamID)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmaking_SetLobbyGameServer$descriptor() {
        return SteamAPI_ISteamMatchmaking_SetLobbyGameServer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmaking_SetLobbyGameServer(uint64_steamid steamIDLobby, uint32 unGameServerIP, uint16 unGameServerPort, uint64_steamid steamID)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmaking_SetLobbyGameServer$handle() {
        return SteamAPI_ISteamMatchmaking_SetLobbyGameServer.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmaking_SetLobbyGameServer(uint64_steamid steamIDLobby, uint32 unGameServerIP, uint16 unGameServerPort, uint64_steamid steamID)
     * }
     */
    public static void SteamAPI_ISteamMatchmaking_SetLobbyGameServer(long steamIDLobby, int unGameServerIP, short unGameServerPort, long steamID) {
        var mh$ = SteamAPI_ISteamMatchmaking_SetLobbyGameServer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmaking_SetLobbyGameServer", steamIDLobby, unGameServerIP, unGameServerPort, steamID);
            }
            mh$.invokeExact(steamIDLobby, unGameServerIP, unGameServerPort, steamID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmaking_GetLobbyGameServer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamMatchmaking_GetLobbyGameServer"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMatchmaking_GetLobbyGameServer(uint64_steamid steamIDLobby, uint32 *punGameServerIP, uint16 *punGameServerPort, CSteamID *psteamIDGameServer)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmaking_GetLobbyGameServer$descriptor() {
        return SteamAPI_ISteamMatchmaking_GetLobbyGameServer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMatchmaking_GetLobbyGameServer(uint64_steamid steamIDLobby, uint32 *punGameServerIP, uint16 *punGameServerPort, CSteamID *psteamIDGameServer)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmaking_GetLobbyGameServer$handle() {
        return SteamAPI_ISteamMatchmaking_GetLobbyGameServer.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMatchmaking_GetLobbyGameServer(uint64_steamid steamIDLobby, uint32 *punGameServerIP, uint16 *punGameServerPort, CSteamID *psteamIDGameServer)
     * }
     */
    public static boolean SteamAPI_ISteamMatchmaking_GetLobbyGameServer(long steamIDLobby, MemorySegment punGameServerIP, MemorySegment punGameServerPort, MemorySegment psteamIDGameServer) {
        var mh$ = SteamAPI_ISteamMatchmaking_GetLobbyGameServer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmaking_GetLobbyGameServer", steamIDLobby, punGameServerIP, punGameServerPort, psteamIDGameServer);
            }
            return (boolean)mh$.invokeExact(steamIDLobby, punGameServerIP, punGameServerPort, psteamIDGameServer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmaking_SetLobbyMemberLimit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamMatchmaking_SetLobbyMemberLimit"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMatchmaking_SetLobbyMemberLimit(uint64_steamid steamIDLobby, int cMaxMembers)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmaking_SetLobbyMemberLimit$descriptor() {
        return SteamAPI_ISteamMatchmaking_SetLobbyMemberLimit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMatchmaking_SetLobbyMemberLimit(uint64_steamid steamIDLobby, int cMaxMembers)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmaking_SetLobbyMemberLimit$handle() {
        return SteamAPI_ISteamMatchmaking_SetLobbyMemberLimit.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMatchmaking_SetLobbyMemberLimit(uint64_steamid steamIDLobby, int cMaxMembers)
     * }
     */
    public static boolean SteamAPI_ISteamMatchmaking_SetLobbyMemberLimit(long steamIDLobby, int cMaxMembers) {
        var mh$ = SteamAPI_ISteamMatchmaking_SetLobbyMemberLimit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmaking_SetLobbyMemberLimit", steamIDLobby, cMaxMembers);
            }
            return (boolean)mh$.invokeExact(steamIDLobby, cMaxMembers);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmaking_GetLobbyMemberLimit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamMatchmaking_GetLobbyMemberLimit"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamMatchmaking_GetLobbyMemberLimit(uint64_steamid steamIDLobby)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmaking_GetLobbyMemberLimit$descriptor() {
        return SteamAPI_ISteamMatchmaking_GetLobbyMemberLimit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamMatchmaking_GetLobbyMemberLimit(uint64_steamid steamIDLobby)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmaking_GetLobbyMemberLimit$handle() {
        return SteamAPI_ISteamMatchmaking_GetLobbyMemberLimit.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int SteamAPI_ISteamMatchmaking_GetLobbyMemberLimit(uint64_steamid steamIDLobby)
     * }
     */
    public static int SteamAPI_ISteamMatchmaking_GetLobbyMemberLimit(long steamIDLobby) {
        var mh$ = SteamAPI_ISteamMatchmaking_GetLobbyMemberLimit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmaking_GetLobbyMemberLimit", steamIDLobby);
            }
            return (int)mh$.invokeExact(steamIDLobby);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmaking_SetLobbyType {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamMatchmaking_SetLobbyType"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMatchmaking_SetLobbyType(uint64_steamid steamIDLobby, ELobbyType eLobbyType)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmaking_SetLobbyType$descriptor() {
        return SteamAPI_ISteamMatchmaking_SetLobbyType.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMatchmaking_SetLobbyType(uint64_steamid steamIDLobby, ELobbyType eLobbyType)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmaking_SetLobbyType$handle() {
        return SteamAPI_ISteamMatchmaking_SetLobbyType.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMatchmaking_SetLobbyType(uint64_steamid steamIDLobby, ELobbyType eLobbyType)
     * }
     */
    public static boolean SteamAPI_ISteamMatchmaking_SetLobbyType(long steamIDLobby, int eLobbyType) {
        var mh$ = SteamAPI_ISteamMatchmaking_SetLobbyType.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmaking_SetLobbyType", steamIDLobby, eLobbyType);
            }
            return (boolean)mh$.invokeExact(steamIDLobby, eLobbyType);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmaking_SetLobbyJoinable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamMatchmaking_SetLobbyJoinable"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMatchmaking_SetLobbyJoinable(uint64_steamid steamIDLobby, bool bLobbyJoinable)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmaking_SetLobbyJoinable$descriptor() {
        return SteamAPI_ISteamMatchmaking_SetLobbyJoinable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMatchmaking_SetLobbyJoinable(uint64_steamid steamIDLobby, bool bLobbyJoinable)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmaking_SetLobbyJoinable$handle() {
        return SteamAPI_ISteamMatchmaking_SetLobbyJoinable.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMatchmaking_SetLobbyJoinable(uint64_steamid steamIDLobby, bool bLobbyJoinable)
     * }
     */
    public static boolean SteamAPI_ISteamMatchmaking_SetLobbyJoinable(long steamIDLobby, boolean bLobbyJoinable) {
        var mh$ = SteamAPI_ISteamMatchmaking_SetLobbyJoinable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmaking_SetLobbyJoinable", steamIDLobby, bLobbyJoinable);
            }
            return (boolean)mh$.invokeExact(steamIDLobby, bLobbyJoinable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmaking_GetLobbyOwner {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamMatchmaking_GetLobbyOwner"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint64_steamid SteamAPI_ISteamMatchmaking_GetLobbyOwner(uint64_steamid steamIDLobby)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmaking_GetLobbyOwner$descriptor() {
        return SteamAPI_ISteamMatchmaking_GetLobbyOwner.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint64_steamid SteamAPI_ISteamMatchmaking_GetLobbyOwner(uint64_steamid steamIDLobby)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmaking_GetLobbyOwner$handle() {
        return SteamAPI_ISteamMatchmaking_GetLobbyOwner.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * uint64_steamid SteamAPI_ISteamMatchmaking_GetLobbyOwner(uint64_steamid steamIDLobby)
     * }
     */
    public static long SteamAPI_ISteamMatchmaking_GetLobbyOwner(long steamIDLobby) {
        var mh$ = SteamAPI_ISteamMatchmaking_GetLobbyOwner.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmaking_GetLobbyOwner", steamIDLobby);
            }
            return (long)mh$.invokeExact(steamIDLobby);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmaking_SetLobbyOwner {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamMatchmaking_SetLobbyOwner"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMatchmaking_SetLobbyOwner(uint64_steamid steamIDLobby, uint64_steamid steamIDNewOwner)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmaking_SetLobbyOwner$descriptor() {
        return SteamAPI_ISteamMatchmaking_SetLobbyOwner.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMatchmaking_SetLobbyOwner(uint64_steamid steamIDLobby, uint64_steamid steamIDNewOwner)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmaking_SetLobbyOwner$handle() {
        return SteamAPI_ISteamMatchmaking_SetLobbyOwner.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMatchmaking_SetLobbyOwner(uint64_steamid steamIDLobby, uint64_steamid steamIDNewOwner)
     * }
     */
    public static boolean SteamAPI_ISteamMatchmaking_SetLobbyOwner(long steamIDLobby, long steamIDNewOwner) {
        var mh$ = SteamAPI_ISteamMatchmaking_SetLobbyOwner.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmaking_SetLobbyOwner", steamIDLobby, steamIDNewOwner);
            }
            return (boolean)mh$.invokeExact(steamIDLobby, steamIDNewOwner);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmaking_SetLinkedLobby {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamMatchmaking_SetLinkedLobby"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMatchmaking_SetLinkedLobby(uint64_steamid steamIDLobby, uint64_steamid steamIDLobbyDependent)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmaking_SetLinkedLobby$descriptor() {
        return SteamAPI_ISteamMatchmaking_SetLinkedLobby.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMatchmaking_SetLinkedLobby(uint64_steamid steamIDLobby, uint64_steamid steamIDLobbyDependent)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmaking_SetLinkedLobby$handle() {
        return SteamAPI_ISteamMatchmaking_SetLinkedLobby.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMatchmaking_SetLinkedLobby(uint64_steamid steamIDLobby, uint64_steamid steamIDLobbyDependent)
     * }
     */
    public static boolean SteamAPI_ISteamMatchmaking_SetLinkedLobby(long steamIDLobby, long steamIDLobbyDependent) {
        var mh$ = SteamAPI_ISteamMatchmaking_SetLinkedLobby.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmaking_SetLinkedLobby", steamIDLobby, steamIDLobbyDependent);
            }
            return (boolean)mh$.invokeExact(steamIDLobby, steamIDLobbyDependent);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmakingServerListResponse_ServerResponded {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamMatchmakingServerListResponse_ServerResponded"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmakingServerListResponse_ServerResponded(HServerListRequest hRequest, int iServer)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmakingServerListResponse_ServerResponded$descriptor() {
        return SteamAPI_ISteamMatchmakingServerListResponse_ServerResponded.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmakingServerListResponse_ServerResponded(HServerListRequest hRequest, int iServer)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmakingServerListResponse_ServerResponded$handle() {
        return SteamAPI_ISteamMatchmakingServerListResponse_ServerResponded.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmakingServerListResponse_ServerResponded(HServerListRequest hRequest, int iServer)
     * }
     */
    public static void SteamAPI_ISteamMatchmakingServerListResponse_ServerResponded(MemorySegment hRequest, int iServer) {
        var mh$ = SteamAPI_ISteamMatchmakingServerListResponse_ServerResponded.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmakingServerListResponse_ServerResponded", hRequest, iServer);
            }
            mh$.invokeExact(hRequest, iServer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmakingServerListResponse_ServerFailedToRespond {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamMatchmakingServerListResponse_ServerFailedToRespond"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmakingServerListResponse_ServerFailedToRespond(HServerListRequest hRequest, int iServer)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmakingServerListResponse_ServerFailedToRespond$descriptor() {
        return SteamAPI_ISteamMatchmakingServerListResponse_ServerFailedToRespond.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmakingServerListResponse_ServerFailedToRespond(HServerListRequest hRequest, int iServer)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmakingServerListResponse_ServerFailedToRespond$handle() {
        return SteamAPI_ISteamMatchmakingServerListResponse_ServerFailedToRespond.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmakingServerListResponse_ServerFailedToRespond(HServerListRequest hRequest, int iServer)
     * }
     */
    public static void SteamAPI_ISteamMatchmakingServerListResponse_ServerFailedToRespond(MemorySegment hRequest, int iServer) {
        var mh$ = SteamAPI_ISteamMatchmakingServerListResponse_ServerFailedToRespond.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmakingServerListResponse_ServerFailedToRespond", hRequest, iServer);
            }
            mh$.invokeExact(hRequest, iServer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmakingServerListResponse_RefreshComplete {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamMatchmakingServerListResponse_RefreshComplete"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmakingServerListResponse_RefreshComplete(HServerListRequest hRequest, EMatchMakingServerResponse response)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmakingServerListResponse_RefreshComplete$descriptor() {
        return SteamAPI_ISteamMatchmakingServerListResponse_RefreshComplete.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmakingServerListResponse_RefreshComplete(HServerListRequest hRequest, EMatchMakingServerResponse response)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmakingServerListResponse_RefreshComplete$handle() {
        return SteamAPI_ISteamMatchmakingServerListResponse_RefreshComplete.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmakingServerListResponse_RefreshComplete(HServerListRequest hRequest, EMatchMakingServerResponse response)
     * }
     */
    public static void SteamAPI_ISteamMatchmakingServerListResponse_RefreshComplete(MemorySegment hRequest, int response) {
        var mh$ = SteamAPI_ISteamMatchmakingServerListResponse_RefreshComplete.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmakingServerListResponse_RefreshComplete", hRequest, response);
            }
            mh$.invokeExact(hRequest, response);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmakingPingResponse_ServerResponded {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamMatchmakingPingResponse_ServerResponded"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmakingPingResponse_ServerResponded(gameserveritem_t *server)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmakingPingResponse_ServerResponded$descriptor() {
        return SteamAPI_ISteamMatchmakingPingResponse_ServerResponded.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmakingPingResponse_ServerResponded(gameserveritem_t *server)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmakingPingResponse_ServerResponded$handle() {
        return SteamAPI_ISteamMatchmakingPingResponse_ServerResponded.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmakingPingResponse_ServerResponded(gameserveritem_t *server)
     * }
     */
    public static void SteamAPI_ISteamMatchmakingPingResponse_ServerResponded(MemorySegment server) {
        var mh$ = SteamAPI_ISteamMatchmakingPingResponse_ServerResponded.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmakingPingResponse_ServerResponded", server);
            }
            mh$.invokeExact(server);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmakingPingResponse_ServerFailedToRespond {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamMatchmakingPingResponse_ServerFailedToRespond"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmakingPingResponse_ServerFailedToRespond()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmakingPingResponse_ServerFailedToRespond$descriptor() {
        return SteamAPI_ISteamMatchmakingPingResponse_ServerFailedToRespond.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmakingPingResponse_ServerFailedToRespond()
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmakingPingResponse_ServerFailedToRespond$handle() {
        return SteamAPI_ISteamMatchmakingPingResponse_ServerFailedToRespond.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmakingPingResponse_ServerFailedToRespond()
     * }
     */
    public static void SteamAPI_ISteamMatchmakingPingResponse_ServerFailedToRespond() {
        var mh$ = SteamAPI_ISteamMatchmakingPingResponse_ServerFailedToRespond.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmakingPingResponse_ServerFailedToRespond");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmakingPlayersResponse_AddPlayerToList {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_FLOAT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamMatchmakingPlayersResponse_AddPlayerToList"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmakingPlayersResponse_AddPlayerToList(const char *pchName, int nScore, float flTimePlayed)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmakingPlayersResponse_AddPlayerToList$descriptor() {
        return SteamAPI_ISteamMatchmakingPlayersResponse_AddPlayerToList.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmakingPlayersResponse_AddPlayerToList(const char *pchName, int nScore, float flTimePlayed)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmakingPlayersResponse_AddPlayerToList$handle() {
        return SteamAPI_ISteamMatchmakingPlayersResponse_AddPlayerToList.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmakingPlayersResponse_AddPlayerToList(const char *pchName, int nScore, float flTimePlayed)
     * }
     */
    public static void SteamAPI_ISteamMatchmakingPlayersResponse_AddPlayerToList(MemorySegment pchName, int nScore, float flTimePlayed) {
        var mh$ = SteamAPI_ISteamMatchmakingPlayersResponse_AddPlayerToList.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmakingPlayersResponse_AddPlayerToList", pchName, nScore, flTimePlayed);
            }
            mh$.invokeExact(pchName, nScore, flTimePlayed);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmakingPlayersResponse_PlayersFailedToRespond {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamMatchmakingPlayersResponse_PlayersFailedToRespond"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmakingPlayersResponse_PlayersFailedToRespond()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmakingPlayersResponse_PlayersFailedToRespond$descriptor() {
        return SteamAPI_ISteamMatchmakingPlayersResponse_PlayersFailedToRespond.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmakingPlayersResponse_PlayersFailedToRespond()
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmakingPlayersResponse_PlayersFailedToRespond$handle() {
        return SteamAPI_ISteamMatchmakingPlayersResponse_PlayersFailedToRespond.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmakingPlayersResponse_PlayersFailedToRespond()
     * }
     */
    public static void SteamAPI_ISteamMatchmakingPlayersResponse_PlayersFailedToRespond() {
        var mh$ = SteamAPI_ISteamMatchmakingPlayersResponse_PlayersFailedToRespond.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmakingPlayersResponse_PlayersFailedToRespond");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmakingPlayersResponse_PlayersRefreshComplete {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamMatchmakingPlayersResponse_PlayersRefreshComplete"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmakingPlayersResponse_PlayersRefreshComplete()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmakingPlayersResponse_PlayersRefreshComplete$descriptor() {
        return SteamAPI_ISteamMatchmakingPlayersResponse_PlayersRefreshComplete.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmakingPlayersResponse_PlayersRefreshComplete()
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmakingPlayersResponse_PlayersRefreshComplete$handle() {
        return SteamAPI_ISteamMatchmakingPlayersResponse_PlayersRefreshComplete.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmakingPlayersResponse_PlayersRefreshComplete()
     * }
     */
    public static void SteamAPI_ISteamMatchmakingPlayersResponse_PlayersRefreshComplete() {
        var mh$ = SteamAPI_ISteamMatchmakingPlayersResponse_PlayersRefreshComplete.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmakingPlayersResponse_PlayersRefreshComplete");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmakingRulesResponse_RulesResponded {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamMatchmakingRulesResponse_RulesResponded"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmakingRulesResponse_RulesResponded(const char *pchRule, const char *pchValue)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmakingRulesResponse_RulesResponded$descriptor() {
        return SteamAPI_ISteamMatchmakingRulesResponse_RulesResponded.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmakingRulesResponse_RulesResponded(const char *pchRule, const char *pchValue)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmakingRulesResponse_RulesResponded$handle() {
        return SteamAPI_ISteamMatchmakingRulesResponse_RulesResponded.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmakingRulesResponse_RulesResponded(const char *pchRule, const char *pchValue)
     * }
     */
    public static void SteamAPI_ISteamMatchmakingRulesResponse_RulesResponded(MemorySegment pchRule, MemorySegment pchValue) {
        var mh$ = SteamAPI_ISteamMatchmakingRulesResponse_RulesResponded.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmakingRulesResponse_RulesResponded", pchRule, pchValue);
            }
            mh$.invokeExact(pchRule, pchValue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmakingRulesResponse_RulesFailedToRespond {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamMatchmakingRulesResponse_RulesFailedToRespond"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmakingRulesResponse_RulesFailedToRespond()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmakingRulesResponse_RulesFailedToRespond$descriptor() {
        return SteamAPI_ISteamMatchmakingRulesResponse_RulesFailedToRespond.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmakingRulesResponse_RulesFailedToRespond()
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmakingRulesResponse_RulesFailedToRespond$handle() {
        return SteamAPI_ISteamMatchmakingRulesResponse_RulesFailedToRespond.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmakingRulesResponse_RulesFailedToRespond()
     * }
     */
    public static void SteamAPI_ISteamMatchmakingRulesResponse_RulesFailedToRespond() {
        var mh$ = SteamAPI_ISteamMatchmakingRulesResponse_RulesFailedToRespond.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmakingRulesResponse_RulesFailedToRespond");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmakingRulesResponse_RulesRefreshComplete {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamMatchmakingRulesResponse_RulesRefreshComplete"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmakingRulesResponse_RulesRefreshComplete()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmakingRulesResponse_RulesRefreshComplete$descriptor() {
        return SteamAPI_ISteamMatchmakingRulesResponse_RulesRefreshComplete.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmakingRulesResponse_RulesRefreshComplete()
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmakingRulesResponse_RulesRefreshComplete$handle() {
        return SteamAPI_ISteamMatchmakingRulesResponse_RulesRefreshComplete.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmakingRulesResponse_RulesRefreshComplete()
     * }
     */
    public static void SteamAPI_ISteamMatchmakingRulesResponse_RulesRefreshComplete() {
        var mh$ = SteamAPI_ISteamMatchmakingRulesResponse_RulesRefreshComplete.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmakingRulesResponse_RulesRefreshComplete");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmakingServers_RequestInternetServerList {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamMatchmakingServers_RequestInternetServerList"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestInternetServerList(AppId_t iApp, MatchMakingKeyValuePair_t **ppchFilters, uint32 nFilters, ISteamMatchmakingServerListResponse *pRequestServersResponse)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmakingServers_RequestInternetServerList$descriptor() {
        return SteamAPI_ISteamMatchmakingServers_RequestInternetServerList.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestInternetServerList(AppId_t iApp, MatchMakingKeyValuePair_t **ppchFilters, uint32 nFilters, ISteamMatchmakingServerListResponse *pRequestServersResponse)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmakingServers_RequestInternetServerList$handle() {
        return SteamAPI_ISteamMatchmakingServers_RequestInternetServerList.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestInternetServerList(AppId_t iApp, MatchMakingKeyValuePair_t **ppchFilters, uint32 nFilters, ISteamMatchmakingServerListResponse *pRequestServersResponse)
     * }
     */
    public static MemorySegment SteamAPI_ISteamMatchmakingServers_RequestInternetServerList(int iApp, MemorySegment ppchFilters, int nFilters, MemorySegment pRequestServersResponse) {
        var mh$ = SteamAPI_ISteamMatchmakingServers_RequestInternetServerList.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmakingServers_RequestInternetServerList", iApp, ppchFilters, nFilters, pRequestServersResponse);
            }
            return (MemorySegment)mh$.invokeExact(iApp, ppchFilters, nFilters, pRequestServersResponse);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmakingServers_RequestLANServerList {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamMatchmakingServers_RequestLANServerList"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestLANServerList(AppId_t iApp, ISteamMatchmakingServerListResponse *pRequestServersResponse)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmakingServers_RequestLANServerList$descriptor() {
        return SteamAPI_ISteamMatchmakingServers_RequestLANServerList.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestLANServerList(AppId_t iApp, ISteamMatchmakingServerListResponse *pRequestServersResponse)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmakingServers_RequestLANServerList$handle() {
        return SteamAPI_ISteamMatchmakingServers_RequestLANServerList.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestLANServerList(AppId_t iApp, ISteamMatchmakingServerListResponse *pRequestServersResponse)
     * }
     */
    public static MemorySegment SteamAPI_ISteamMatchmakingServers_RequestLANServerList(int iApp, MemorySegment pRequestServersResponse) {
        var mh$ = SteamAPI_ISteamMatchmakingServers_RequestLANServerList.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmakingServers_RequestLANServerList", iApp, pRequestServersResponse);
            }
            return (MemorySegment)mh$.invokeExact(iApp, pRequestServersResponse);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmakingServers_RequestFriendsServerList {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamMatchmakingServers_RequestFriendsServerList"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestFriendsServerList(AppId_t iApp, MatchMakingKeyValuePair_t **ppchFilters, uint32 nFilters, ISteamMatchmakingServerListResponse *pRequestServersResponse)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmakingServers_RequestFriendsServerList$descriptor() {
        return SteamAPI_ISteamMatchmakingServers_RequestFriendsServerList.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestFriendsServerList(AppId_t iApp, MatchMakingKeyValuePair_t **ppchFilters, uint32 nFilters, ISteamMatchmakingServerListResponse *pRequestServersResponse)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmakingServers_RequestFriendsServerList$handle() {
        return SteamAPI_ISteamMatchmakingServers_RequestFriendsServerList.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestFriendsServerList(AppId_t iApp, MatchMakingKeyValuePair_t **ppchFilters, uint32 nFilters, ISteamMatchmakingServerListResponse *pRequestServersResponse)
     * }
     */
    public static MemorySegment SteamAPI_ISteamMatchmakingServers_RequestFriendsServerList(int iApp, MemorySegment ppchFilters, int nFilters, MemorySegment pRequestServersResponse) {
        var mh$ = SteamAPI_ISteamMatchmakingServers_RequestFriendsServerList.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmakingServers_RequestFriendsServerList", iApp, ppchFilters, nFilters, pRequestServersResponse);
            }
            return (MemorySegment)mh$.invokeExact(iApp, ppchFilters, nFilters, pRequestServersResponse);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmakingServers_RequestFavoritesServerList {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamMatchmakingServers_RequestFavoritesServerList"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestFavoritesServerList(AppId_t iApp, MatchMakingKeyValuePair_t **ppchFilters, uint32 nFilters, ISteamMatchmakingServerListResponse *pRequestServersResponse)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmakingServers_RequestFavoritesServerList$descriptor() {
        return SteamAPI_ISteamMatchmakingServers_RequestFavoritesServerList.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestFavoritesServerList(AppId_t iApp, MatchMakingKeyValuePair_t **ppchFilters, uint32 nFilters, ISteamMatchmakingServerListResponse *pRequestServersResponse)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmakingServers_RequestFavoritesServerList$handle() {
        return SteamAPI_ISteamMatchmakingServers_RequestFavoritesServerList.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestFavoritesServerList(AppId_t iApp, MatchMakingKeyValuePair_t **ppchFilters, uint32 nFilters, ISteamMatchmakingServerListResponse *pRequestServersResponse)
     * }
     */
    public static MemorySegment SteamAPI_ISteamMatchmakingServers_RequestFavoritesServerList(int iApp, MemorySegment ppchFilters, int nFilters, MemorySegment pRequestServersResponse) {
        var mh$ = SteamAPI_ISteamMatchmakingServers_RequestFavoritesServerList.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmakingServers_RequestFavoritesServerList", iApp, ppchFilters, nFilters, pRequestServersResponse);
            }
            return (MemorySegment)mh$.invokeExact(iApp, ppchFilters, nFilters, pRequestServersResponse);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmakingServers_RequestHistoryServerList {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamMatchmakingServers_RequestHistoryServerList"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestHistoryServerList(AppId_t iApp, MatchMakingKeyValuePair_t **ppchFilters, uint32 nFilters, ISteamMatchmakingServerListResponse *pRequestServersResponse)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmakingServers_RequestHistoryServerList$descriptor() {
        return SteamAPI_ISteamMatchmakingServers_RequestHistoryServerList.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestHistoryServerList(AppId_t iApp, MatchMakingKeyValuePair_t **ppchFilters, uint32 nFilters, ISteamMatchmakingServerListResponse *pRequestServersResponse)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmakingServers_RequestHistoryServerList$handle() {
        return SteamAPI_ISteamMatchmakingServers_RequestHistoryServerList.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestHistoryServerList(AppId_t iApp, MatchMakingKeyValuePair_t **ppchFilters, uint32 nFilters, ISteamMatchmakingServerListResponse *pRequestServersResponse)
     * }
     */
    public static MemorySegment SteamAPI_ISteamMatchmakingServers_RequestHistoryServerList(int iApp, MemorySegment ppchFilters, int nFilters, MemorySegment pRequestServersResponse) {
        var mh$ = SteamAPI_ISteamMatchmakingServers_RequestHistoryServerList.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmakingServers_RequestHistoryServerList", iApp, ppchFilters, nFilters, pRequestServersResponse);
            }
            return (MemorySegment)mh$.invokeExact(iApp, ppchFilters, nFilters, pRequestServersResponse);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmakingServers_RequestSpectatorServerList {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamMatchmakingServers_RequestSpectatorServerList"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestSpectatorServerList(AppId_t iApp, MatchMakingKeyValuePair_t **ppchFilters, uint32 nFilters, ISteamMatchmakingServerListResponse *pRequestServersResponse)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmakingServers_RequestSpectatorServerList$descriptor() {
        return SteamAPI_ISteamMatchmakingServers_RequestSpectatorServerList.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestSpectatorServerList(AppId_t iApp, MatchMakingKeyValuePair_t **ppchFilters, uint32 nFilters, ISteamMatchmakingServerListResponse *pRequestServersResponse)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmakingServers_RequestSpectatorServerList$handle() {
        return SteamAPI_ISteamMatchmakingServers_RequestSpectatorServerList.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestSpectatorServerList(AppId_t iApp, MatchMakingKeyValuePair_t **ppchFilters, uint32 nFilters, ISteamMatchmakingServerListResponse *pRequestServersResponse)
     * }
     */
    public static MemorySegment SteamAPI_ISteamMatchmakingServers_RequestSpectatorServerList(int iApp, MemorySegment ppchFilters, int nFilters, MemorySegment pRequestServersResponse) {
        var mh$ = SteamAPI_ISteamMatchmakingServers_RequestSpectatorServerList.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmakingServers_RequestSpectatorServerList", iApp, ppchFilters, nFilters, pRequestServersResponse);
            }
            return (MemorySegment)mh$.invokeExact(iApp, ppchFilters, nFilters, pRequestServersResponse);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmakingServers_ReleaseRequest {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamMatchmakingServers_ReleaseRequest"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmakingServers_ReleaseRequest(HServerListRequest hServerListRequest)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmakingServers_ReleaseRequest$descriptor() {
        return SteamAPI_ISteamMatchmakingServers_ReleaseRequest.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmakingServers_ReleaseRequest(HServerListRequest hServerListRequest)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmakingServers_ReleaseRequest$handle() {
        return SteamAPI_ISteamMatchmakingServers_ReleaseRequest.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmakingServers_ReleaseRequest(HServerListRequest hServerListRequest)
     * }
     */
    public static void SteamAPI_ISteamMatchmakingServers_ReleaseRequest(MemorySegment hServerListRequest) {
        var mh$ = SteamAPI_ISteamMatchmakingServers_ReleaseRequest.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmakingServers_ReleaseRequest", hServerListRequest);
            }
            mh$.invokeExact(hServerListRequest);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmakingServers_GetServerDetails {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamMatchmakingServers_GetServerDetails"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * gameserveritem_t *SteamAPI_ISteamMatchmakingServers_GetServerDetails(HServerListRequest hRequest, int iServer)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmakingServers_GetServerDetails$descriptor() {
        return SteamAPI_ISteamMatchmakingServers_GetServerDetails.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * gameserveritem_t *SteamAPI_ISteamMatchmakingServers_GetServerDetails(HServerListRequest hRequest, int iServer)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmakingServers_GetServerDetails$handle() {
        return SteamAPI_ISteamMatchmakingServers_GetServerDetails.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * gameserveritem_t *SteamAPI_ISteamMatchmakingServers_GetServerDetails(HServerListRequest hRequest, int iServer)
     * }
     */
    public static MemorySegment SteamAPI_ISteamMatchmakingServers_GetServerDetails(MemorySegment hRequest, int iServer) {
        var mh$ = SteamAPI_ISteamMatchmakingServers_GetServerDetails.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmakingServers_GetServerDetails", hRequest, iServer);
            }
            return (MemorySegment)mh$.invokeExact(hRequest, iServer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmakingServers_CancelQuery {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamMatchmakingServers_CancelQuery"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmakingServers_CancelQuery(HServerListRequest hRequest)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmakingServers_CancelQuery$descriptor() {
        return SteamAPI_ISteamMatchmakingServers_CancelQuery.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmakingServers_CancelQuery(HServerListRequest hRequest)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmakingServers_CancelQuery$handle() {
        return SteamAPI_ISteamMatchmakingServers_CancelQuery.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmakingServers_CancelQuery(HServerListRequest hRequest)
     * }
     */
    public static void SteamAPI_ISteamMatchmakingServers_CancelQuery(MemorySegment hRequest) {
        var mh$ = SteamAPI_ISteamMatchmakingServers_CancelQuery.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmakingServers_CancelQuery", hRequest);
            }
            mh$.invokeExact(hRequest);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmakingServers_RefreshQuery {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamMatchmakingServers_RefreshQuery"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmakingServers_RefreshQuery(HServerListRequest hRequest)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmakingServers_RefreshQuery$descriptor() {
        return SteamAPI_ISteamMatchmakingServers_RefreshQuery.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmakingServers_RefreshQuery(HServerListRequest hRequest)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmakingServers_RefreshQuery$handle() {
        return SteamAPI_ISteamMatchmakingServers_RefreshQuery.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmakingServers_RefreshQuery(HServerListRequest hRequest)
     * }
     */
    public static void SteamAPI_ISteamMatchmakingServers_RefreshQuery(MemorySegment hRequest) {
        var mh$ = SteamAPI_ISteamMatchmakingServers_RefreshQuery.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmakingServers_RefreshQuery", hRequest);
            }
            mh$.invokeExact(hRequest);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmakingServers_IsRefreshing {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamMatchmakingServers_IsRefreshing"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMatchmakingServers_IsRefreshing(HServerListRequest hRequest)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmakingServers_IsRefreshing$descriptor() {
        return SteamAPI_ISteamMatchmakingServers_IsRefreshing.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMatchmakingServers_IsRefreshing(HServerListRequest hRequest)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmakingServers_IsRefreshing$handle() {
        return SteamAPI_ISteamMatchmakingServers_IsRefreshing.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMatchmakingServers_IsRefreshing(HServerListRequest hRequest)
     * }
     */
    public static boolean SteamAPI_ISteamMatchmakingServers_IsRefreshing(MemorySegment hRequest) {
        var mh$ = SteamAPI_ISteamMatchmakingServers_IsRefreshing.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmakingServers_IsRefreshing", hRequest);
            }
            return (boolean)mh$.invokeExact(hRequest);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmakingServers_GetServerCount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamMatchmakingServers_GetServerCount"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamMatchmakingServers_GetServerCount(HServerListRequest hRequest)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmakingServers_GetServerCount$descriptor() {
        return SteamAPI_ISteamMatchmakingServers_GetServerCount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamMatchmakingServers_GetServerCount(HServerListRequest hRequest)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmakingServers_GetServerCount$handle() {
        return SteamAPI_ISteamMatchmakingServers_GetServerCount.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int SteamAPI_ISteamMatchmakingServers_GetServerCount(HServerListRequest hRequest)
     * }
     */
    public static int SteamAPI_ISteamMatchmakingServers_GetServerCount(MemorySegment hRequest) {
        var mh$ = SteamAPI_ISteamMatchmakingServers_GetServerCount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmakingServers_GetServerCount", hRequest);
            }
            return (int)mh$.invokeExact(hRequest);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmakingServers_RefreshServer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamMatchmakingServers_RefreshServer"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmakingServers_RefreshServer(HServerListRequest hRequest, int iServer)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmakingServers_RefreshServer$descriptor() {
        return SteamAPI_ISteamMatchmakingServers_RefreshServer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmakingServers_RefreshServer(HServerListRequest hRequest, int iServer)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmakingServers_RefreshServer$handle() {
        return SteamAPI_ISteamMatchmakingServers_RefreshServer.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmakingServers_RefreshServer(HServerListRequest hRequest, int iServer)
     * }
     */
    public static void SteamAPI_ISteamMatchmakingServers_RefreshServer(MemorySegment hRequest, int iServer) {
        var mh$ = SteamAPI_ISteamMatchmakingServers_RefreshServer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmakingServers_RefreshServer", hRequest, iServer);
            }
            mh$.invokeExact(hRequest, iServer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmakingServers_PingServer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_SHORT,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamMatchmakingServers_PingServer"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HServerQuery SteamAPI_ISteamMatchmakingServers_PingServer(uint32 unIP, uint16 usPort, ISteamMatchmakingPingResponse *pRequestServersResponse)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmakingServers_PingServer$descriptor() {
        return SteamAPI_ISteamMatchmakingServers_PingServer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HServerQuery SteamAPI_ISteamMatchmakingServers_PingServer(uint32 unIP, uint16 usPort, ISteamMatchmakingPingResponse *pRequestServersResponse)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmakingServers_PingServer$handle() {
        return SteamAPI_ISteamMatchmakingServers_PingServer.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HServerQuery SteamAPI_ISteamMatchmakingServers_PingServer(uint32 unIP, uint16 usPort, ISteamMatchmakingPingResponse *pRequestServersResponse)
     * }
     */
    public static int SteamAPI_ISteamMatchmakingServers_PingServer(int unIP, short usPort, MemorySegment pRequestServersResponse) {
        var mh$ = SteamAPI_ISteamMatchmakingServers_PingServer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmakingServers_PingServer", unIP, usPort, pRequestServersResponse);
            }
            return (int)mh$.invokeExact(unIP, usPort, pRequestServersResponse);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmakingServers_PlayerDetails {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_SHORT,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamMatchmakingServers_PlayerDetails"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HServerQuery SteamAPI_ISteamMatchmakingServers_PlayerDetails(uint32 unIP, uint16 usPort, ISteamMatchmakingPlayersResponse *pRequestServersResponse)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmakingServers_PlayerDetails$descriptor() {
        return SteamAPI_ISteamMatchmakingServers_PlayerDetails.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HServerQuery SteamAPI_ISteamMatchmakingServers_PlayerDetails(uint32 unIP, uint16 usPort, ISteamMatchmakingPlayersResponse *pRequestServersResponse)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmakingServers_PlayerDetails$handle() {
        return SteamAPI_ISteamMatchmakingServers_PlayerDetails.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HServerQuery SteamAPI_ISteamMatchmakingServers_PlayerDetails(uint32 unIP, uint16 usPort, ISteamMatchmakingPlayersResponse *pRequestServersResponse)
     * }
     */
    public static int SteamAPI_ISteamMatchmakingServers_PlayerDetails(int unIP, short usPort, MemorySegment pRequestServersResponse) {
        var mh$ = SteamAPI_ISteamMatchmakingServers_PlayerDetails.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmakingServers_PlayerDetails", unIP, usPort, pRequestServersResponse);
            }
            return (int)mh$.invokeExact(unIP, usPort, pRequestServersResponse);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmakingServers_ServerRules {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_SHORT,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamMatchmakingServers_ServerRules"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HServerQuery SteamAPI_ISteamMatchmakingServers_ServerRules(uint32 unIP, uint16 usPort, ISteamMatchmakingRulesResponse *pRequestServersResponse)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmakingServers_ServerRules$descriptor() {
        return SteamAPI_ISteamMatchmakingServers_ServerRules.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HServerQuery SteamAPI_ISteamMatchmakingServers_ServerRules(uint32 unIP, uint16 usPort, ISteamMatchmakingRulesResponse *pRequestServersResponse)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmakingServers_ServerRules$handle() {
        return SteamAPI_ISteamMatchmakingServers_ServerRules.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HServerQuery SteamAPI_ISteamMatchmakingServers_ServerRules(uint32 unIP, uint16 usPort, ISteamMatchmakingRulesResponse *pRequestServersResponse)
     * }
     */
    public static int SteamAPI_ISteamMatchmakingServers_ServerRules(int unIP, short usPort, MemorySegment pRequestServersResponse) {
        var mh$ = SteamAPI_ISteamMatchmakingServers_ServerRules.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmakingServers_ServerRules", unIP, usPort, pRequestServersResponse);
            }
            return (int)mh$.invokeExact(unIP, usPort, pRequestServersResponse);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMatchmakingServers_CancelServerQuery {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamMatchmakingServers_CancelServerQuery"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmakingServers_CancelServerQuery(HServerQuery hServerQuery)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMatchmakingServers_CancelServerQuery$descriptor() {
        return SteamAPI_ISteamMatchmakingServers_CancelServerQuery.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmakingServers_CancelServerQuery(HServerQuery hServerQuery)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMatchmakingServers_CancelServerQuery$handle() {
        return SteamAPI_ISteamMatchmakingServers_CancelServerQuery.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamMatchmakingServers_CancelServerQuery(HServerQuery hServerQuery)
     * }
     */
    public static void SteamAPI_ISteamMatchmakingServers_CancelServerQuery(int hServerQuery) {
        var mh$ = SteamAPI_ISteamMatchmakingServers_CancelServerQuery.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMatchmakingServers_CancelServerQuery", hServerQuery);
            }
            mh$.invokeExact(hServerQuery);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameSearch_AddGameSearchParams {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamGameSearch_AddGameSearchParams"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * EGameSearchErrorCode_t SteamAPI_ISteamGameSearch_AddGameSearchParams(const char *pchKeyToFind, const char *pchValuesToFind)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameSearch_AddGameSearchParams$descriptor() {
        return SteamAPI_ISteamGameSearch_AddGameSearchParams.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * EGameSearchErrorCode_t SteamAPI_ISteamGameSearch_AddGameSearchParams(const char *pchKeyToFind, const char *pchValuesToFind)
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameSearch_AddGameSearchParams$handle() {
        return SteamAPI_ISteamGameSearch_AddGameSearchParams.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * EGameSearchErrorCode_t SteamAPI_ISteamGameSearch_AddGameSearchParams(const char *pchKeyToFind, const char *pchValuesToFind)
     * }
     */
    public static int SteamAPI_ISteamGameSearch_AddGameSearchParams(MemorySegment pchKeyToFind, MemorySegment pchValuesToFind) {
        var mh$ = SteamAPI_ISteamGameSearch_AddGameSearchParams.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameSearch_AddGameSearchParams", pchKeyToFind, pchValuesToFind);
            }
            return (int)mh$.invokeExact(pchKeyToFind, pchValuesToFind);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameSearch_SearchForGameWithLobby {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamGameSearch_SearchForGameWithLobby"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * EGameSearchErrorCode_t SteamAPI_ISteamGameSearch_SearchForGameWithLobby(uint64_steamid steamIDLobby, int nPlayerMin, int nPlayerMax)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameSearch_SearchForGameWithLobby$descriptor() {
        return SteamAPI_ISteamGameSearch_SearchForGameWithLobby.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * EGameSearchErrorCode_t SteamAPI_ISteamGameSearch_SearchForGameWithLobby(uint64_steamid steamIDLobby, int nPlayerMin, int nPlayerMax)
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameSearch_SearchForGameWithLobby$handle() {
        return SteamAPI_ISteamGameSearch_SearchForGameWithLobby.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * EGameSearchErrorCode_t SteamAPI_ISteamGameSearch_SearchForGameWithLobby(uint64_steamid steamIDLobby, int nPlayerMin, int nPlayerMax)
     * }
     */
    public static int SteamAPI_ISteamGameSearch_SearchForGameWithLobby(long steamIDLobby, int nPlayerMin, int nPlayerMax) {
        var mh$ = SteamAPI_ISteamGameSearch_SearchForGameWithLobby.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameSearch_SearchForGameWithLobby", steamIDLobby, nPlayerMin, nPlayerMax);
            }
            return (int)mh$.invokeExact(steamIDLobby, nPlayerMin, nPlayerMax);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameSearch_SearchForGameSolo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamGameSearch_SearchForGameSolo"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * EGameSearchErrorCode_t SteamAPI_ISteamGameSearch_SearchForGameSolo(int nPlayerMin, int nPlayerMax)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameSearch_SearchForGameSolo$descriptor() {
        return SteamAPI_ISteamGameSearch_SearchForGameSolo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * EGameSearchErrorCode_t SteamAPI_ISteamGameSearch_SearchForGameSolo(int nPlayerMin, int nPlayerMax)
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameSearch_SearchForGameSolo$handle() {
        return SteamAPI_ISteamGameSearch_SearchForGameSolo.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * EGameSearchErrorCode_t SteamAPI_ISteamGameSearch_SearchForGameSolo(int nPlayerMin, int nPlayerMax)
     * }
     */
    public static int SteamAPI_ISteamGameSearch_SearchForGameSolo(int nPlayerMin, int nPlayerMax) {
        var mh$ = SteamAPI_ISteamGameSearch_SearchForGameSolo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameSearch_SearchForGameSolo", nPlayerMin, nPlayerMax);
            }
            return (int)mh$.invokeExact(nPlayerMin, nPlayerMax);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameSearch_AcceptGame {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamGameSearch_AcceptGame"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * EGameSearchErrorCode_t SteamAPI_ISteamGameSearch_AcceptGame()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameSearch_AcceptGame$descriptor() {
        return SteamAPI_ISteamGameSearch_AcceptGame.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * EGameSearchErrorCode_t SteamAPI_ISteamGameSearch_AcceptGame()
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameSearch_AcceptGame$handle() {
        return SteamAPI_ISteamGameSearch_AcceptGame.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * EGameSearchErrorCode_t SteamAPI_ISteamGameSearch_AcceptGame()
     * }
     */
    public static int SteamAPI_ISteamGameSearch_AcceptGame() {
        var mh$ = SteamAPI_ISteamGameSearch_AcceptGame.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameSearch_AcceptGame");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameSearch_DeclineGame {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamGameSearch_DeclineGame"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * EGameSearchErrorCode_t SteamAPI_ISteamGameSearch_DeclineGame()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameSearch_DeclineGame$descriptor() {
        return SteamAPI_ISteamGameSearch_DeclineGame.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * EGameSearchErrorCode_t SteamAPI_ISteamGameSearch_DeclineGame()
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameSearch_DeclineGame$handle() {
        return SteamAPI_ISteamGameSearch_DeclineGame.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * EGameSearchErrorCode_t SteamAPI_ISteamGameSearch_DeclineGame()
     * }
     */
    public static int SteamAPI_ISteamGameSearch_DeclineGame() {
        var mh$ = SteamAPI_ISteamGameSearch_DeclineGame.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameSearch_DeclineGame");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameSearch_RetrieveConnectionDetails {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamGameSearch_RetrieveConnectionDetails"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * EGameSearchErrorCode_t SteamAPI_ISteamGameSearch_RetrieveConnectionDetails(uint64_steamid steamIDHost, char *pchConnectionDetails, int cubConnectionDetails)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameSearch_RetrieveConnectionDetails$descriptor() {
        return SteamAPI_ISteamGameSearch_RetrieveConnectionDetails.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * EGameSearchErrorCode_t SteamAPI_ISteamGameSearch_RetrieveConnectionDetails(uint64_steamid steamIDHost, char *pchConnectionDetails, int cubConnectionDetails)
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameSearch_RetrieveConnectionDetails$handle() {
        return SteamAPI_ISteamGameSearch_RetrieveConnectionDetails.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * EGameSearchErrorCode_t SteamAPI_ISteamGameSearch_RetrieveConnectionDetails(uint64_steamid steamIDHost, char *pchConnectionDetails, int cubConnectionDetails)
     * }
     */
    public static int SteamAPI_ISteamGameSearch_RetrieveConnectionDetails(long steamIDHost, MemorySegment pchConnectionDetails, int cubConnectionDetails) {
        var mh$ = SteamAPI_ISteamGameSearch_RetrieveConnectionDetails.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameSearch_RetrieveConnectionDetails", steamIDHost, pchConnectionDetails, cubConnectionDetails);
            }
            return (int)mh$.invokeExact(steamIDHost, pchConnectionDetails, cubConnectionDetails);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameSearch_EndGameSearch {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamGameSearch_EndGameSearch"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * EGameSearchErrorCode_t SteamAPI_ISteamGameSearch_EndGameSearch()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameSearch_EndGameSearch$descriptor() {
        return SteamAPI_ISteamGameSearch_EndGameSearch.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * EGameSearchErrorCode_t SteamAPI_ISteamGameSearch_EndGameSearch()
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameSearch_EndGameSearch$handle() {
        return SteamAPI_ISteamGameSearch_EndGameSearch.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * EGameSearchErrorCode_t SteamAPI_ISteamGameSearch_EndGameSearch()
     * }
     */
    public static int SteamAPI_ISteamGameSearch_EndGameSearch() {
        var mh$ = SteamAPI_ISteamGameSearch_EndGameSearch.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameSearch_EndGameSearch");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameSearch_SetGameHostParams {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamGameSearch_SetGameHostParams"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * EGameSearchErrorCode_t SteamAPI_ISteamGameSearch_SetGameHostParams(const char *pchKey, const char *pchValue)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameSearch_SetGameHostParams$descriptor() {
        return SteamAPI_ISteamGameSearch_SetGameHostParams.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * EGameSearchErrorCode_t SteamAPI_ISteamGameSearch_SetGameHostParams(const char *pchKey, const char *pchValue)
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameSearch_SetGameHostParams$handle() {
        return SteamAPI_ISteamGameSearch_SetGameHostParams.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * EGameSearchErrorCode_t SteamAPI_ISteamGameSearch_SetGameHostParams(const char *pchKey, const char *pchValue)
     * }
     */
    public static int SteamAPI_ISteamGameSearch_SetGameHostParams(MemorySegment pchKey, MemorySegment pchValue) {
        var mh$ = SteamAPI_ISteamGameSearch_SetGameHostParams.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameSearch_SetGameHostParams", pchKey, pchValue);
            }
            return (int)mh$.invokeExact(pchKey, pchValue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameSearch_SetConnectionDetails {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamGameSearch_SetConnectionDetails"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * EGameSearchErrorCode_t SteamAPI_ISteamGameSearch_SetConnectionDetails(const char *pchConnectionDetails, int cubConnectionDetails)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameSearch_SetConnectionDetails$descriptor() {
        return SteamAPI_ISteamGameSearch_SetConnectionDetails.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * EGameSearchErrorCode_t SteamAPI_ISteamGameSearch_SetConnectionDetails(const char *pchConnectionDetails, int cubConnectionDetails)
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameSearch_SetConnectionDetails$handle() {
        return SteamAPI_ISteamGameSearch_SetConnectionDetails.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * EGameSearchErrorCode_t SteamAPI_ISteamGameSearch_SetConnectionDetails(const char *pchConnectionDetails, int cubConnectionDetails)
     * }
     */
    public static int SteamAPI_ISteamGameSearch_SetConnectionDetails(MemorySegment pchConnectionDetails, int cubConnectionDetails) {
        var mh$ = SteamAPI_ISteamGameSearch_SetConnectionDetails.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameSearch_SetConnectionDetails", pchConnectionDetails, cubConnectionDetails);
            }
            return (int)mh$.invokeExact(pchConnectionDetails, cubConnectionDetails);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameSearch_RequestPlayersForGame {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamGameSearch_RequestPlayersForGame"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * EGameSearchErrorCode_t SteamAPI_ISteamGameSearch_RequestPlayersForGame(int nPlayerMin, int nPlayerMax, int nMaxTeamSize)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameSearch_RequestPlayersForGame$descriptor() {
        return SteamAPI_ISteamGameSearch_RequestPlayersForGame.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * EGameSearchErrorCode_t SteamAPI_ISteamGameSearch_RequestPlayersForGame(int nPlayerMin, int nPlayerMax, int nMaxTeamSize)
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameSearch_RequestPlayersForGame$handle() {
        return SteamAPI_ISteamGameSearch_RequestPlayersForGame.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * EGameSearchErrorCode_t SteamAPI_ISteamGameSearch_RequestPlayersForGame(int nPlayerMin, int nPlayerMax, int nMaxTeamSize)
     * }
     */
    public static int SteamAPI_ISteamGameSearch_RequestPlayersForGame(int nPlayerMin, int nPlayerMax, int nMaxTeamSize) {
        var mh$ = SteamAPI_ISteamGameSearch_RequestPlayersForGame.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameSearch_RequestPlayersForGame", nPlayerMin, nPlayerMax, nMaxTeamSize);
            }
            return (int)mh$.invokeExact(nPlayerMin, nPlayerMax, nMaxTeamSize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameSearch_HostConfirmGameStart {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamGameSearch_HostConfirmGameStart"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * EGameSearchErrorCode_t SteamAPI_ISteamGameSearch_HostConfirmGameStart(uint64 ullUniqueGameID)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameSearch_HostConfirmGameStart$descriptor() {
        return SteamAPI_ISteamGameSearch_HostConfirmGameStart.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * EGameSearchErrorCode_t SteamAPI_ISteamGameSearch_HostConfirmGameStart(uint64 ullUniqueGameID)
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameSearch_HostConfirmGameStart$handle() {
        return SteamAPI_ISteamGameSearch_HostConfirmGameStart.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * EGameSearchErrorCode_t SteamAPI_ISteamGameSearch_HostConfirmGameStart(uint64 ullUniqueGameID)
     * }
     */
    public static int SteamAPI_ISteamGameSearch_HostConfirmGameStart(long ullUniqueGameID) {
        var mh$ = SteamAPI_ISteamGameSearch_HostConfirmGameStart.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameSearch_HostConfirmGameStart", ullUniqueGameID);
            }
            return (int)mh$.invokeExact(ullUniqueGameID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameSearch_CancelRequestPlayersForGame {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamGameSearch_CancelRequestPlayersForGame"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * EGameSearchErrorCode_t SteamAPI_ISteamGameSearch_CancelRequestPlayersForGame()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameSearch_CancelRequestPlayersForGame$descriptor() {
        return SteamAPI_ISteamGameSearch_CancelRequestPlayersForGame.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * EGameSearchErrorCode_t SteamAPI_ISteamGameSearch_CancelRequestPlayersForGame()
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameSearch_CancelRequestPlayersForGame$handle() {
        return SteamAPI_ISteamGameSearch_CancelRequestPlayersForGame.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * EGameSearchErrorCode_t SteamAPI_ISteamGameSearch_CancelRequestPlayersForGame()
     * }
     */
    public static int SteamAPI_ISteamGameSearch_CancelRequestPlayersForGame() {
        var mh$ = SteamAPI_ISteamGameSearch_CancelRequestPlayersForGame.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameSearch_CancelRequestPlayersForGame");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameSearch_SubmitPlayerResult {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamGameSearch_SubmitPlayerResult"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * EGameSearchErrorCode_t SteamAPI_ISteamGameSearch_SubmitPlayerResult(uint64 ullUniqueGameID, uint64_steamid steamIDPlayer, EPlayerResult_t EPlayerResult)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameSearch_SubmitPlayerResult$descriptor() {
        return SteamAPI_ISteamGameSearch_SubmitPlayerResult.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * EGameSearchErrorCode_t SteamAPI_ISteamGameSearch_SubmitPlayerResult(uint64 ullUniqueGameID, uint64_steamid steamIDPlayer, EPlayerResult_t EPlayerResult)
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameSearch_SubmitPlayerResult$handle() {
        return SteamAPI_ISteamGameSearch_SubmitPlayerResult.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * EGameSearchErrorCode_t SteamAPI_ISteamGameSearch_SubmitPlayerResult(uint64 ullUniqueGameID, uint64_steamid steamIDPlayer, EPlayerResult_t EPlayerResult)
     * }
     */
    public static int SteamAPI_ISteamGameSearch_SubmitPlayerResult(long ullUniqueGameID, long steamIDPlayer, int EPlayerResult) {
        var mh$ = SteamAPI_ISteamGameSearch_SubmitPlayerResult.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameSearch_SubmitPlayerResult", ullUniqueGameID, steamIDPlayer, EPlayerResult);
            }
            return (int)mh$.invokeExact(ullUniqueGameID, steamIDPlayer, EPlayerResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameSearch_EndGame {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamGameSearch_EndGame"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * EGameSearchErrorCode_t SteamAPI_ISteamGameSearch_EndGame(uint64 ullUniqueGameID)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameSearch_EndGame$descriptor() {
        return SteamAPI_ISteamGameSearch_EndGame.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * EGameSearchErrorCode_t SteamAPI_ISteamGameSearch_EndGame(uint64 ullUniqueGameID)
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameSearch_EndGame$handle() {
        return SteamAPI_ISteamGameSearch_EndGame.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * EGameSearchErrorCode_t SteamAPI_ISteamGameSearch_EndGame(uint64 ullUniqueGameID)
     * }
     */
    public static int SteamAPI_ISteamGameSearch_EndGame(long ullUniqueGameID) {
        var mh$ = SteamAPI_ISteamGameSearch_EndGame.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameSearch_EndGame", ullUniqueGameID);
            }
            return (int)mh$.invokeExact(ullUniqueGameID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamParties_GetNumActiveBeacons {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamParties_GetNumActiveBeacons"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamParties_GetNumActiveBeacons()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamParties_GetNumActiveBeacons$descriptor() {
        return SteamAPI_ISteamParties_GetNumActiveBeacons.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamParties_GetNumActiveBeacons()
     * }
     */
    public static MethodHandle SteamAPI_ISteamParties_GetNumActiveBeacons$handle() {
        return SteamAPI_ISteamParties_GetNumActiveBeacons.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamParties_GetNumActiveBeacons()
     * }
     */
    public static int SteamAPI_ISteamParties_GetNumActiveBeacons() {
        var mh$ = SteamAPI_ISteamParties_GetNumActiveBeacons.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamParties_GetNumActiveBeacons");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamParties_GetBeaconByIndex {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamParties_GetBeaconByIndex"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * PartyBeaconID_t SteamAPI_ISteamParties_GetBeaconByIndex(uint32 unIndex)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamParties_GetBeaconByIndex$descriptor() {
        return SteamAPI_ISteamParties_GetBeaconByIndex.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * PartyBeaconID_t SteamAPI_ISteamParties_GetBeaconByIndex(uint32 unIndex)
     * }
     */
    public static MethodHandle SteamAPI_ISteamParties_GetBeaconByIndex$handle() {
        return SteamAPI_ISteamParties_GetBeaconByIndex.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * PartyBeaconID_t SteamAPI_ISteamParties_GetBeaconByIndex(uint32 unIndex)
     * }
     */
    public static long SteamAPI_ISteamParties_GetBeaconByIndex(int unIndex) {
        var mh$ = SteamAPI_ISteamParties_GetBeaconByIndex.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamParties_GetBeaconByIndex", unIndex);
            }
            return (long)mh$.invokeExact(unIndex);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamParties_GetBeaconDetails {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamParties_GetBeaconDetails"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamParties_GetBeaconDetails(PartyBeaconID_t ulBeaconID, CSteamID *pSteamIDBeaconOwner, SteamPartyBeaconLocation_t *pLocation, char *pchMetadata, int cchMetadata)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamParties_GetBeaconDetails$descriptor() {
        return SteamAPI_ISteamParties_GetBeaconDetails.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamParties_GetBeaconDetails(PartyBeaconID_t ulBeaconID, CSteamID *pSteamIDBeaconOwner, SteamPartyBeaconLocation_t *pLocation, char *pchMetadata, int cchMetadata)
     * }
     */
    public static MethodHandle SteamAPI_ISteamParties_GetBeaconDetails$handle() {
        return SteamAPI_ISteamParties_GetBeaconDetails.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamParties_GetBeaconDetails(PartyBeaconID_t ulBeaconID, CSteamID *pSteamIDBeaconOwner, SteamPartyBeaconLocation_t *pLocation, char *pchMetadata, int cchMetadata)
     * }
     */
    public static boolean SteamAPI_ISteamParties_GetBeaconDetails(long ulBeaconID, MemorySegment pSteamIDBeaconOwner, MemorySegment pLocation, MemorySegment pchMetadata, int cchMetadata) {
        var mh$ = SteamAPI_ISteamParties_GetBeaconDetails.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamParties_GetBeaconDetails", ulBeaconID, pSteamIDBeaconOwner, pLocation, pchMetadata, cchMetadata);
            }
            return (boolean)mh$.invokeExact(ulBeaconID, pSteamIDBeaconOwner, pLocation, pchMetadata, cchMetadata);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamParties_JoinParty {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamParties_JoinParty"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamParties_JoinParty(PartyBeaconID_t ulBeaconID)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamParties_JoinParty$descriptor() {
        return SteamAPI_ISteamParties_JoinParty.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamParties_JoinParty(PartyBeaconID_t ulBeaconID)
     * }
     */
    public static MethodHandle SteamAPI_ISteamParties_JoinParty$handle() {
        return SteamAPI_ISteamParties_JoinParty.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamParties_JoinParty(PartyBeaconID_t ulBeaconID)
     * }
     */
    public static long SteamAPI_ISteamParties_JoinParty(long ulBeaconID) {
        var mh$ = SteamAPI_ISteamParties_JoinParty.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamParties_JoinParty", ulBeaconID);
            }
            return (long)mh$.invokeExact(ulBeaconID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamParties_GetNumAvailableBeaconLocations {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamParties_GetNumAvailableBeaconLocations"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamParties_GetNumAvailableBeaconLocations(uint32 *puNumLocations)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamParties_GetNumAvailableBeaconLocations$descriptor() {
        return SteamAPI_ISteamParties_GetNumAvailableBeaconLocations.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamParties_GetNumAvailableBeaconLocations(uint32 *puNumLocations)
     * }
     */
    public static MethodHandle SteamAPI_ISteamParties_GetNumAvailableBeaconLocations$handle() {
        return SteamAPI_ISteamParties_GetNumAvailableBeaconLocations.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamParties_GetNumAvailableBeaconLocations(uint32 *puNumLocations)
     * }
     */
    public static boolean SteamAPI_ISteamParties_GetNumAvailableBeaconLocations(MemorySegment puNumLocations) {
        var mh$ = SteamAPI_ISteamParties_GetNumAvailableBeaconLocations.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamParties_GetNumAvailableBeaconLocations", puNumLocations);
            }
            return (boolean)mh$.invokeExact(puNumLocations);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamParties_GetAvailableBeaconLocations {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamParties_GetAvailableBeaconLocations"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamParties_GetAvailableBeaconLocations(SteamPartyBeaconLocation_t *pLocationList, uint32 uMaxNumLocations)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamParties_GetAvailableBeaconLocations$descriptor() {
        return SteamAPI_ISteamParties_GetAvailableBeaconLocations.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamParties_GetAvailableBeaconLocations(SteamPartyBeaconLocation_t *pLocationList, uint32 uMaxNumLocations)
     * }
     */
    public static MethodHandle SteamAPI_ISteamParties_GetAvailableBeaconLocations$handle() {
        return SteamAPI_ISteamParties_GetAvailableBeaconLocations.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamParties_GetAvailableBeaconLocations(SteamPartyBeaconLocation_t *pLocationList, uint32 uMaxNumLocations)
     * }
     */
    public static boolean SteamAPI_ISteamParties_GetAvailableBeaconLocations(MemorySegment pLocationList, int uMaxNumLocations) {
        var mh$ = SteamAPI_ISteamParties_GetAvailableBeaconLocations.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamParties_GetAvailableBeaconLocations", pLocationList, uMaxNumLocations);
            }
            return (boolean)mh$.invokeExact(pLocationList, uMaxNumLocations);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamParties_CreateBeacon {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamParties_CreateBeacon"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamParties_CreateBeacon(uint32 unOpenSlots, SteamPartyBeaconLocation_t *pBeaconLocation, const char *pchConnectString, const char *pchMetadata)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamParties_CreateBeacon$descriptor() {
        return SteamAPI_ISteamParties_CreateBeacon.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamParties_CreateBeacon(uint32 unOpenSlots, SteamPartyBeaconLocation_t *pBeaconLocation, const char *pchConnectString, const char *pchMetadata)
     * }
     */
    public static MethodHandle SteamAPI_ISteamParties_CreateBeacon$handle() {
        return SteamAPI_ISteamParties_CreateBeacon.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamParties_CreateBeacon(uint32 unOpenSlots, SteamPartyBeaconLocation_t *pBeaconLocation, const char *pchConnectString, const char *pchMetadata)
     * }
     */
    public static long SteamAPI_ISteamParties_CreateBeacon(int unOpenSlots, MemorySegment pBeaconLocation, MemorySegment pchConnectString, MemorySegment pchMetadata) {
        var mh$ = SteamAPI_ISteamParties_CreateBeacon.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamParties_CreateBeacon", unOpenSlots, pBeaconLocation, pchConnectString, pchMetadata);
            }
            return (long)mh$.invokeExact(unOpenSlots, pBeaconLocation, pchConnectString, pchMetadata);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamParties_OnReservationCompleted {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamParties_OnReservationCompleted"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamParties_OnReservationCompleted(PartyBeaconID_t ulBeacon, uint64_steamid steamIDUser)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamParties_OnReservationCompleted$descriptor() {
        return SteamAPI_ISteamParties_OnReservationCompleted.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamParties_OnReservationCompleted(PartyBeaconID_t ulBeacon, uint64_steamid steamIDUser)
     * }
     */
    public static MethodHandle SteamAPI_ISteamParties_OnReservationCompleted$handle() {
        return SteamAPI_ISteamParties_OnReservationCompleted.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamParties_OnReservationCompleted(PartyBeaconID_t ulBeacon, uint64_steamid steamIDUser)
     * }
     */
    public static void SteamAPI_ISteamParties_OnReservationCompleted(long ulBeacon, long steamIDUser) {
        var mh$ = SteamAPI_ISteamParties_OnReservationCompleted.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamParties_OnReservationCompleted", ulBeacon, steamIDUser);
            }
            mh$.invokeExact(ulBeacon, steamIDUser);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamParties_CancelReservation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamParties_CancelReservation"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamParties_CancelReservation(PartyBeaconID_t ulBeacon, uint64_steamid steamIDUser)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamParties_CancelReservation$descriptor() {
        return SteamAPI_ISteamParties_CancelReservation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamParties_CancelReservation(PartyBeaconID_t ulBeacon, uint64_steamid steamIDUser)
     * }
     */
    public static MethodHandle SteamAPI_ISteamParties_CancelReservation$handle() {
        return SteamAPI_ISteamParties_CancelReservation.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamParties_CancelReservation(PartyBeaconID_t ulBeacon, uint64_steamid steamIDUser)
     * }
     */
    public static void SteamAPI_ISteamParties_CancelReservation(long ulBeacon, long steamIDUser) {
        var mh$ = SteamAPI_ISteamParties_CancelReservation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamParties_CancelReservation", ulBeacon, steamIDUser);
            }
            mh$.invokeExact(ulBeacon, steamIDUser);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamParties_ChangeNumOpenSlots {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamParties_ChangeNumOpenSlots"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamParties_ChangeNumOpenSlots(PartyBeaconID_t ulBeacon, uint32 unOpenSlots)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamParties_ChangeNumOpenSlots$descriptor() {
        return SteamAPI_ISteamParties_ChangeNumOpenSlots.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamParties_ChangeNumOpenSlots(PartyBeaconID_t ulBeacon, uint32 unOpenSlots)
     * }
     */
    public static MethodHandle SteamAPI_ISteamParties_ChangeNumOpenSlots$handle() {
        return SteamAPI_ISteamParties_ChangeNumOpenSlots.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamParties_ChangeNumOpenSlots(PartyBeaconID_t ulBeacon, uint32 unOpenSlots)
     * }
     */
    public static long SteamAPI_ISteamParties_ChangeNumOpenSlots(long ulBeacon, int unOpenSlots) {
        var mh$ = SteamAPI_ISteamParties_ChangeNumOpenSlots.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamParties_ChangeNumOpenSlots", ulBeacon, unOpenSlots);
            }
            return (long)mh$.invokeExact(ulBeacon, unOpenSlots);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamParties_DestroyBeacon {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamParties_DestroyBeacon"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamParties_DestroyBeacon(PartyBeaconID_t ulBeacon)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamParties_DestroyBeacon$descriptor() {
        return SteamAPI_ISteamParties_DestroyBeacon.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamParties_DestroyBeacon(PartyBeaconID_t ulBeacon)
     * }
     */
    public static MethodHandle SteamAPI_ISteamParties_DestroyBeacon$handle() {
        return SteamAPI_ISteamParties_DestroyBeacon.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamParties_DestroyBeacon(PartyBeaconID_t ulBeacon)
     * }
     */
    public static boolean SteamAPI_ISteamParties_DestroyBeacon(long ulBeacon) {
        var mh$ = SteamAPI_ISteamParties_DestroyBeacon.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamParties_DestroyBeacon", ulBeacon);
            }
            return (boolean)mh$.invokeExact(ulBeacon);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamParties_GetBeaconLocationData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamPartyBeaconLocation_t.layout(),
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamParties_GetBeaconLocationData"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamParties_GetBeaconLocationData(SteamPartyBeaconLocation_t BeaconLocation, ESteamPartyBeaconLocationData eData, char *pchDataStringOut, int cchDataStringOut)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamParties_GetBeaconLocationData$descriptor() {
        return SteamAPI_ISteamParties_GetBeaconLocationData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamParties_GetBeaconLocationData(SteamPartyBeaconLocation_t BeaconLocation, ESteamPartyBeaconLocationData eData, char *pchDataStringOut, int cchDataStringOut)
     * }
     */
    public static MethodHandle SteamAPI_ISteamParties_GetBeaconLocationData$handle() {
        return SteamAPI_ISteamParties_GetBeaconLocationData.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamParties_GetBeaconLocationData(SteamPartyBeaconLocation_t BeaconLocation, ESteamPartyBeaconLocationData eData, char *pchDataStringOut, int cchDataStringOut)
     * }
     */
    public static boolean SteamAPI_ISteamParties_GetBeaconLocationData(MemorySegment BeaconLocation, int eData, MemorySegment pchDataStringOut, int cchDataStringOut) {
        var mh$ = SteamAPI_ISteamParties_GetBeaconLocationData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamParties_GetBeaconLocationData", BeaconLocation, eData, pchDataStringOut, cchDataStringOut);
            }
            return (boolean)mh$.invokeExact(BeaconLocation, eData, pchDataStringOut, cchDataStringOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemoteStorage_FileWrite {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamRemoteStorage_FileWrite"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_FileWrite(const char *pchFile, const void *pvData, int32 cubData)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemoteStorage_FileWrite$descriptor() {
        return SteamAPI_ISteamRemoteStorage_FileWrite.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_FileWrite(const char *pchFile, const void *pvData, int32 cubData)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemoteStorage_FileWrite$handle() {
        return SteamAPI_ISteamRemoteStorage_FileWrite.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_FileWrite(const char *pchFile, const void *pvData, int32 cubData)
     * }
     */
    public static boolean SteamAPI_ISteamRemoteStorage_FileWrite(MemorySegment pchFile, MemorySegment pvData, int cubData) {
        var mh$ = SteamAPI_ISteamRemoteStorage_FileWrite.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemoteStorage_FileWrite", pchFile, pvData, cubData);
            }
            return (boolean)mh$.invokeExact(pchFile, pvData, cubData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemoteStorage_FileRead {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamRemoteStorage_FileRead"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int32 SteamAPI_ISteamRemoteStorage_FileRead(const char *pchFile, void *pvData, int32 cubDataToRead)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemoteStorage_FileRead$descriptor() {
        return SteamAPI_ISteamRemoteStorage_FileRead.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int32 SteamAPI_ISteamRemoteStorage_FileRead(const char *pchFile, void *pvData, int32 cubDataToRead)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemoteStorage_FileRead$handle() {
        return SteamAPI_ISteamRemoteStorage_FileRead.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int32 SteamAPI_ISteamRemoteStorage_FileRead(const char *pchFile, void *pvData, int32 cubDataToRead)
     * }
     */
    public static int SteamAPI_ISteamRemoteStorage_FileRead(MemorySegment pchFile, MemorySegment pvData, int cubDataToRead) {
        var mh$ = SteamAPI_ISteamRemoteStorage_FileRead.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemoteStorage_FileRead", pchFile, pvData, cubDataToRead);
            }
            return (int)mh$.invokeExact(pchFile, pvData, cubDataToRead);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemoteStorage_FileWriteAsync {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamRemoteStorage_FileWriteAsync"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_FileWriteAsync(const char *pchFile, const void *pvData, uint32 cubData)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemoteStorage_FileWriteAsync$descriptor() {
        return SteamAPI_ISteamRemoteStorage_FileWriteAsync.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_FileWriteAsync(const char *pchFile, const void *pvData, uint32 cubData)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemoteStorage_FileWriteAsync$handle() {
        return SteamAPI_ISteamRemoteStorage_FileWriteAsync.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_FileWriteAsync(const char *pchFile, const void *pvData, uint32 cubData)
     * }
     */
    public static long SteamAPI_ISteamRemoteStorage_FileWriteAsync(MemorySegment pchFile, MemorySegment pvData, int cubData) {
        var mh$ = SteamAPI_ISteamRemoteStorage_FileWriteAsync.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemoteStorage_FileWriteAsync", pchFile, pvData, cubData);
            }
            return (long)mh$.invokeExact(pchFile, pvData, cubData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemoteStorage_FileReadAsync {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamRemoteStorage_FileReadAsync"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_FileReadAsync(const char *pchFile, uint32 nOffset, uint32 cubToRead)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemoteStorage_FileReadAsync$descriptor() {
        return SteamAPI_ISteamRemoteStorage_FileReadAsync.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_FileReadAsync(const char *pchFile, uint32 nOffset, uint32 cubToRead)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemoteStorage_FileReadAsync$handle() {
        return SteamAPI_ISteamRemoteStorage_FileReadAsync.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_FileReadAsync(const char *pchFile, uint32 nOffset, uint32 cubToRead)
     * }
     */
    public static long SteamAPI_ISteamRemoteStorage_FileReadAsync(MemorySegment pchFile, int nOffset, int cubToRead) {
        var mh$ = SteamAPI_ISteamRemoteStorage_FileReadAsync.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemoteStorage_FileReadAsync", pchFile, nOffset, cubToRead);
            }
            return (long)mh$.invokeExact(pchFile, nOffset, cubToRead);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemoteStorage_FileReadAsyncComplete {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamRemoteStorage_FileReadAsyncComplete"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_FileReadAsyncComplete(SteamAPICall_t hReadCall, void *pvBuffer, uint32 cubToRead)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemoteStorage_FileReadAsyncComplete$descriptor() {
        return SteamAPI_ISteamRemoteStorage_FileReadAsyncComplete.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_FileReadAsyncComplete(SteamAPICall_t hReadCall, void *pvBuffer, uint32 cubToRead)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemoteStorage_FileReadAsyncComplete$handle() {
        return SteamAPI_ISteamRemoteStorage_FileReadAsyncComplete.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_FileReadAsyncComplete(SteamAPICall_t hReadCall, void *pvBuffer, uint32 cubToRead)
     * }
     */
    public static boolean SteamAPI_ISteamRemoteStorage_FileReadAsyncComplete(long hReadCall, MemorySegment pvBuffer, int cubToRead) {
        var mh$ = SteamAPI_ISteamRemoteStorage_FileReadAsyncComplete.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemoteStorage_FileReadAsyncComplete", hReadCall, pvBuffer, cubToRead);
            }
            return (boolean)mh$.invokeExact(hReadCall, pvBuffer, cubToRead);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemoteStorage_FileForget {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamRemoteStorage_FileForget"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_FileForget(const char *pchFile)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemoteStorage_FileForget$descriptor() {
        return SteamAPI_ISteamRemoteStorage_FileForget.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_FileForget(const char *pchFile)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemoteStorage_FileForget$handle() {
        return SteamAPI_ISteamRemoteStorage_FileForget.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_FileForget(const char *pchFile)
     * }
     */
    public static boolean SteamAPI_ISteamRemoteStorage_FileForget(MemorySegment pchFile) {
        var mh$ = SteamAPI_ISteamRemoteStorage_FileForget.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemoteStorage_FileForget", pchFile);
            }
            return (boolean)mh$.invokeExact(pchFile);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemoteStorage_FileDelete {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamRemoteStorage_FileDelete"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_FileDelete(const char *pchFile)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemoteStorage_FileDelete$descriptor() {
        return SteamAPI_ISteamRemoteStorage_FileDelete.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_FileDelete(const char *pchFile)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemoteStorage_FileDelete$handle() {
        return SteamAPI_ISteamRemoteStorage_FileDelete.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_FileDelete(const char *pchFile)
     * }
     */
    public static boolean SteamAPI_ISteamRemoteStorage_FileDelete(MemorySegment pchFile) {
        var mh$ = SteamAPI_ISteamRemoteStorage_FileDelete.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemoteStorage_FileDelete", pchFile);
            }
            return (boolean)mh$.invokeExact(pchFile);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemoteStorage_FileShare {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamRemoteStorage_FileShare"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_FileShare(const char *pchFile)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemoteStorage_FileShare$descriptor() {
        return SteamAPI_ISteamRemoteStorage_FileShare.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_FileShare(const char *pchFile)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemoteStorage_FileShare$handle() {
        return SteamAPI_ISteamRemoteStorage_FileShare.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_FileShare(const char *pchFile)
     * }
     */
    public static long SteamAPI_ISteamRemoteStorage_FileShare(MemorySegment pchFile) {
        var mh$ = SteamAPI_ISteamRemoteStorage_FileShare.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemoteStorage_FileShare", pchFile);
            }
            return (long)mh$.invokeExact(pchFile);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemoteStorage_SetSyncPlatforms {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamRemoteStorage_SetSyncPlatforms"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_SetSyncPlatforms(const char *pchFile, ERemoteStoragePlatform eRemoteStoragePlatform)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemoteStorage_SetSyncPlatforms$descriptor() {
        return SteamAPI_ISteamRemoteStorage_SetSyncPlatforms.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_SetSyncPlatforms(const char *pchFile, ERemoteStoragePlatform eRemoteStoragePlatform)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemoteStorage_SetSyncPlatforms$handle() {
        return SteamAPI_ISteamRemoteStorage_SetSyncPlatforms.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_SetSyncPlatforms(const char *pchFile, ERemoteStoragePlatform eRemoteStoragePlatform)
     * }
     */
    public static boolean SteamAPI_ISteamRemoteStorage_SetSyncPlatforms(MemorySegment pchFile, int eRemoteStoragePlatform) {
        var mh$ = SteamAPI_ISteamRemoteStorage_SetSyncPlatforms.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemoteStorage_SetSyncPlatforms", pchFile, eRemoteStoragePlatform);
            }
            return (boolean)mh$.invokeExact(pchFile, eRemoteStoragePlatform);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemoteStorage_FileWriteStreamOpen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamRemoteStorage_FileWriteStreamOpen"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * UGCFileWriteStreamHandle_t SteamAPI_ISteamRemoteStorage_FileWriteStreamOpen(const char *pchFile)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemoteStorage_FileWriteStreamOpen$descriptor() {
        return SteamAPI_ISteamRemoteStorage_FileWriteStreamOpen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * UGCFileWriteStreamHandle_t SteamAPI_ISteamRemoteStorage_FileWriteStreamOpen(const char *pchFile)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemoteStorage_FileWriteStreamOpen$handle() {
        return SteamAPI_ISteamRemoteStorage_FileWriteStreamOpen.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * UGCFileWriteStreamHandle_t SteamAPI_ISteamRemoteStorage_FileWriteStreamOpen(const char *pchFile)
     * }
     */
    public static long SteamAPI_ISteamRemoteStorage_FileWriteStreamOpen(MemorySegment pchFile) {
        var mh$ = SteamAPI_ISteamRemoteStorage_FileWriteStreamOpen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemoteStorage_FileWriteStreamOpen", pchFile);
            }
            return (long)mh$.invokeExact(pchFile);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemoteStorage_FileWriteStreamWriteChunk {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamRemoteStorage_FileWriteStreamWriteChunk"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_FileWriteStreamWriteChunk(UGCFileWriteStreamHandle_t writeHandle, const void *pvData, int32 cubData)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemoteStorage_FileWriteStreamWriteChunk$descriptor() {
        return SteamAPI_ISteamRemoteStorage_FileWriteStreamWriteChunk.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_FileWriteStreamWriteChunk(UGCFileWriteStreamHandle_t writeHandle, const void *pvData, int32 cubData)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemoteStorage_FileWriteStreamWriteChunk$handle() {
        return SteamAPI_ISteamRemoteStorage_FileWriteStreamWriteChunk.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_FileWriteStreamWriteChunk(UGCFileWriteStreamHandle_t writeHandle, const void *pvData, int32 cubData)
     * }
     */
    public static boolean SteamAPI_ISteamRemoteStorage_FileWriteStreamWriteChunk(long writeHandle, MemorySegment pvData, int cubData) {
        var mh$ = SteamAPI_ISteamRemoteStorage_FileWriteStreamWriteChunk.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemoteStorage_FileWriteStreamWriteChunk", writeHandle, pvData, cubData);
            }
            return (boolean)mh$.invokeExact(writeHandle, pvData, cubData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemoteStorage_FileWriteStreamClose {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamRemoteStorage_FileWriteStreamClose"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_FileWriteStreamClose(UGCFileWriteStreamHandle_t writeHandle)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemoteStorage_FileWriteStreamClose$descriptor() {
        return SteamAPI_ISteamRemoteStorage_FileWriteStreamClose.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_FileWriteStreamClose(UGCFileWriteStreamHandle_t writeHandle)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemoteStorage_FileWriteStreamClose$handle() {
        return SteamAPI_ISteamRemoteStorage_FileWriteStreamClose.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_FileWriteStreamClose(UGCFileWriteStreamHandle_t writeHandle)
     * }
     */
    public static boolean SteamAPI_ISteamRemoteStorage_FileWriteStreamClose(long writeHandle) {
        var mh$ = SteamAPI_ISteamRemoteStorage_FileWriteStreamClose.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemoteStorage_FileWriteStreamClose", writeHandle);
            }
            return (boolean)mh$.invokeExact(writeHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemoteStorage_FileWriteStreamCancel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamRemoteStorage_FileWriteStreamCancel"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_FileWriteStreamCancel(UGCFileWriteStreamHandle_t writeHandle)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemoteStorage_FileWriteStreamCancel$descriptor() {
        return SteamAPI_ISteamRemoteStorage_FileWriteStreamCancel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_FileWriteStreamCancel(UGCFileWriteStreamHandle_t writeHandle)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemoteStorage_FileWriteStreamCancel$handle() {
        return SteamAPI_ISteamRemoteStorage_FileWriteStreamCancel.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_FileWriteStreamCancel(UGCFileWriteStreamHandle_t writeHandle)
     * }
     */
    public static boolean SteamAPI_ISteamRemoteStorage_FileWriteStreamCancel(long writeHandle) {
        var mh$ = SteamAPI_ISteamRemoteStorage_FileWriteStreamCancel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemoteStorage_FileWriteStreamCancel", writeHandle);
            }
            return (boolean)mh$.invokeExact(writeHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemoteStorage_FileExists {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamRemoteStorage_FileExists"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_FileExists(const char *pchFile)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemoteStorage_FileExists$descriptor() {
        return SteamAPI_ISteamRemoteStorage_FileExists.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_FileExists(const char *pchFile)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemoteStorage_FileExists$handle() {
        return SteamAPI_ISteamRemoteStorage_FileExists.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_FileExists(const char *pchFile)
     * }
     */
    public static boolean SteamAPI_ISteamRemoteStorage_FileExists(MemorySegment pchFile) {
        var mh$ = SteamAPI_ISteamRemoteStorage_FileExists.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemoteStorage_FileExists", pchFile);
            }
            return (boolean)mh$.invokeExact(pchFile);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemoteStorage_FilePersisted {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamRemoteStorage_FilePersisted"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_FilePersisted(const char *pchFile)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemoteStorage_FilePersisted$descriptor() {
        return SteamAPI_ISteamRemoteStorage_FilePersisted.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_FilePersisted(const char *pchFile)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemoteStorage_FilePersisted$handle() {
        return SteamAPI_ISteamRemoteStorage_FilePersisted.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_FilePersisted(const char *pchFile)
     * }
     */
    public static boolean SteamAPI_ISteamRemoteStorage_FilePersisted(MemorySegment pchFile) {
        var mh$ = SteamAPI_ISteamRemoteStorage_FilePersisted.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemoteStorage_FilePersisted", pchFile);
            }
            return (boolean)mh$.invokeExact(pchFile);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemoteStorage_GetFileSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamRemoteStorage_GetFileSize"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int32 SteamAPI_ISteamRemoteStorage_GetFileSize(const char *pchFile)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemoteStorage_GetFileSize$descriptor() {
        return SteamAPI_ISteamRemoteStorage_GetFileSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int32 SteamAPI_ISteamRemoteStorage_GetFileSize(const char *pchFile)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemoteStorage_GetFileSize$handle() {
        return SteamAPI_ISteamRemoteStorage_GetFileSize.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int32 SteamAPI_ISteamRemoteStorage_GetFileSize(const char *pchFile)
     * }
     */
    public static int SteamAPI_ISteamRemoteStorage_GetFileSize(MemorySegment pchFile) {
        var mh$ = SteamAPI_ISteamRemoteStorage_GetFileSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemoteStorage_GetFileSize", pchFile);
            }
            return (int)mh$.invokeExact(pchFile);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemoteStorage_GetFileTimestamp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamRemoteStorage_GetFileTimestamp"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int64 SteamAPI_ISteamRemoteStorage_GetFileTimestamp(const char *pchFile)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemoteStorage_GetFileTimestamp$descriptor() {
        return SteamAPI_ISteamRemoteStorage_GetFileTimestamp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int64 SteamAPI_ISteamRemoteStorage_GetFileTimestamp(const char *pchFile)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemoteStorage_GetFileTimestamp$handle() {
        return SteamAPI_ISteamRemoteStorage_GetFileTimestamp.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int64 SteamAPI_ISteamRemoteStorage_GetFileTimestamp(const char *pchFile)
     * }
     */
    public static long SteamAPI_ISteamRemoteStorage_GetFileTimestamp(MemorySegment pchFile) {
        var mh$ = SteamAPI_ISteamRemoteStorage_GetFileTimestamp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemoteStorage_GetFileTimestamp", pchFile);
            }
            return (long)mh$.invokeExact(pchFile);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemoteStorage_GetSyncPlatforms {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamRemoteStorage_GetSyncPlatforms"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ERemoteStoragePlatform SteamAPI_ISteamRemoteStorage_GetSyncPlatforms(const char *pchFile)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemoteStorage_GetSyncPlatforms$descriptor() {
        return SteamAPI_ISteamRemoteStorage_GetSyncPlatforms.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ERemoteStoragePlatform SteamAPI_ISteamRemoteStorage_GetSyncPlatforms(const char *pchFile)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemoteStorage_GetSyncPlatforms$handle() {
        return SteamAPI_ISteamRemoteStorage_GetSyncPlatforms.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ERemoteStoragePlatform SteamAPI_ISteamRemoteStorage_GetSyncPlatforms(const char *pchFile)
     * }
     */
    public static int SteamAPI_ISteamRemoteStorage_GetSyncPlatforms(MemorySegment pchFile) {
        var mh$ = SteamAPI_ISteamRemoteStorage_GetSyncPlatforms.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemoteStorage_GetSyncPlatforms", pchFile);
            }
            return (int)mh$.invokeExact(pchFile);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemoteStorage_GetFileCount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamRemoteStorage_GetFileCount"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int32 SteamAPI_ISteamRemoteStorage_GetFileCount()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemoteStorage_GetFileCount$descriptor() {
        return SteamAPI_ISteamRemoteStorage_GetFileCount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int32 SteamAPI_ISteamRemoteStorage_GetFileCount()
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemoteStorage_GetFileCount$handle() {
        return SteamAPI_ISteamRemoteStorage_GetFileCount.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int32 SteamAPI_ISteamRemoteStorage_GetFileCount()
     * }
     */
    public static int SteamAPI_ISteamRemoteStorage_GetFileCount() {
        var mh$ = SteamAPI_ISteamRemoteStorage_GetFileCount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemoteStorage_GetFileCount");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemoteStorage_GetFileNameAndSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamRemoteStorage_GetFileNameAndSize"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamRemoteStorage_GetFileNameAndSize(int iFile, int32 *pnFileSizeInBytes)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemoteStorage_GetFileNameAndSize$descriptor() {
        return SteamAPI_ISteamRemoteStorage_GetFileNameAndSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamRemoteStorage_GetFileNameAndSize(int iFile, int32 *pnFileSizeInBytes)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemoteStorage_GetFileNameAndSize$handle() {
        return SteamAPI_ISteamRemoteStorage_GetFileNameAndSize.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamRemoteStorage_GetFileNameAndSize(int iFile, int32 *pnFileSizeInBytes)
     * }
     */
    public static MemorySegment SteamAPI_ISteamRemoteStorage_GetFileNameAndSize(int iFile, MemorySegment pnFileSizeInBytes) {
        var mh$ = SteamAPI_ISteamRemoteStorage_GetFileNameAndSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemoteStorage_GetFileNameAndSize", iFile, pnFileSizeInBytes);
            }
            return (MemorySegment)mh$.invokeExact(iFile, pnFileSizeInBytes);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemoteStorage_GetQuota {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamRemoteStorage_GetQuota"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_GetQuota(uint64 *pnTotalBytes, uint64 *puAvailableBytes)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemoteStorage_GetQuota$descriptor() {
        return SteamAPI_ISteamRemoteStorage_GetQuota.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_GetQuota(uint64 *pnTotalBytes, uint64 *puAvailableBytes)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemoteStorage_GetQuota$handle() {
        return SteamAPI_ISteamRemoteStorage_GetQuota.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_GetQuota(uint64 *pnTotalBytes, uint64 *puAvailableBytes)
     * }
     */
    public static boolean SteamAPI_ISteamRemoteStorage_GetQuota(MemorySegment pnTotalBytes, MemorySegment puAvailableBytes) {
        var mh$ = SteamAPI_ISteamRemoteStorage_GetQuota.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemoteStorage_GetQuota", pnTotalBytes, puAvailableBytes);
            }
            return (boolean)mh$.invokeExact(pnTotalBytes, puAvailableBytes);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemoteStorage_IsCloudEnabledForAccount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamRemoteStorage_IsCloudEnabledForAccount"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_IsCloudEnabledForAccount()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemoteStorage_IsCloudEnabledForAccount$descriptor() {
        return SteamAPI_ISteamRemoteStorage_IsCloudEnabledForAccount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_IsCloudEnabledForAccount()
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemoteStorage_IsCloudEnabledForAccount$handle() {
        return SteamAPI_ISteamRemoteStorage_IsCloudEnabledForAccount.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_IsCloudEnabledForAccount()
     * }
     */
    public static boolean SteamAPI_ISteamRemoteStorage_IsCloudEnabledForAccount() {
        var mh$ = SteamAPI_ISteamRemoteStorage_IsCloudEnabledForAccount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemoteStorage_IsCloudEnabledForAccount");
            }
            return (boolean)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemoteStorage_IsCloudEnabledForApp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamRemoteStorage_IsCloudEnabledForApp"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_IsCloudEnabledForApp()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemoteStorage_IsCloudEnabledForApp$descriptor() {
        return SteamAPI_ISteamRemoteStorage_IsCloudEnabledForApp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_IsCloudEnabledForApp()
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemoteStorage_IsCloudEnabledForApp$handle() {
        return SteamAPI_ISteamRemoteStorage_IsCloudEnabledForApp.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_IsCloudEnabledForApp()
     * }
     */
    public static boolean SteamAPI_ISteamRemoteStorage_IsCloudEnabledForApp() {
        var mh$ = SteamAPI_ISteamRemoteStorage_IsCloudEnabledForApp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemoteStorage_IsCloudEnabledForApp");
            }
            return (boolean)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemoteStorage_SetCloudEnabledForApp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamRemoteStorage_SetCloudEnabledForApp"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamRemoteStorage_SetCloudEnabledForApp(bool bEnabled)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemoteStorage_SetCloudEnabledForApp$descriptor() {
        return SteamAPI_ISteamRemoteStorage_SetCloudEnabledForApp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamRemoteStorage_SetCloudEnabledForApp(bool bEnabled)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemoteStorage_SetCloudEnabledForApp$handle() {
        return SteamAPI_ISteamRemoteStorage_SetCloudEnabledForApp.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamRemoteStorage_SetCloudEnabledForApp(bool bEnabled)
     * }
     */
    public static void SteamAPI_ISteamRemoteStorage_SetCloudEnabledForApp(boolean bEnabled) {
        var mh$ = SteamAPI_ISteamRemoteStorage_SetCloudEnabledForApp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemoteStorage_SetCloudEnabledForApp", bEnabled);
            }
            mh$.invokeExact(bEnabled);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemoteStorage_UGCDownload {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamRemoteStorage_UGCDownload"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_UGCDownload(UGCHandle_t hContent, uint32 unPriority)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemoteStorage_UGCDownload$descriptor() {
        return SteamAPI_ISteamRemoteStorage_UGCDownload.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_UGCDownload(UGCHandle_t hContent, uint32 unPriority)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemoteStorage_UGCDownload$handle() {
        return SteamAPI_ISteamRemoteStorage_UGCDownload.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_UGCDownload(UGCHandle_t hContent, uint32 unPriority)
     * }
     */
    public static long SteamAPI_ISteamRemoteStorage_UGCDownload(long hContent, int unPriority) {
        var mh$ = SteamAPI_ISteamRemoteStorage_UGCDownload.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemoteStorage_UGCDownload", hContent, unPriority);
            }
            return (long)mh$.invokeExact(hContent, unPriority);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemoteStorage_GetUGCDownloadProgress {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamRemoteStorage_GetUGCDownloadProgress"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_GetUGCDownloadProgress(UGCHandle_t hContent, int32 *pnBytesDownloaded, int32 *pnBytesExpected)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemoteStorage_GetUGCDownloadProgress$descriptor() {
        return SteamAPI_ISteamRemoteStorage_GetUGCDownloadProgress.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_GetUGCDownloadProgress(UGCHandle_t hContent, int32 *pnBytesDownloaded, int32 *pnBytesExpected)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemoteStorage_GetUGCDownloadProgress$handle() {
        return SteamAPI_ISteamRemoteStorage_GetUGCDownloadProgress.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_GetUGCDownloadProgress(UGCHandle_t hContent, int32 *pnBytesDownloaded, int32 *pnBytesExpected)
     * }
     */
    public static boolean SteamAPI_ISteamRemoteStorage_GetUGCDownloadProgress(long hContent, MemorySegment pnBytesDownloaded, MemorySegment pnBytesExpected) {
        var mh$ = SteamAPI_ISteamRemoteStorage_GetUGCDownloadProgress.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemoteStorage_GetUGCDownloadProgress", hContent, pnBytesDownloaded, pnBytesExpected);
            }
            return (boolean)mh$.invokeExact(hContent, pnBytesDownloaded, pnBytesExpected);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemoteStorage_GetUGCDetails {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamRemoteStorage_GetUGCDetails"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_GetUGCDetails(UGCHandle_t hContent, AppId_t *pnAppID, char **ppchName, int32 *pnFileSizeInBytes, CSteamID *pSteamIDOwner)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemoteStorage_GetUGCDetails$descriptor() {
        return SteamAPI_ISteamRemoteStorage_GetUGCDetails.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_GetUGCDetails(UGCHandle_t hContent, AppId_t *pnAppID, char **ppchName, int32 *pnFileSizeInBytes, CSteamID *pSteamIDOwner)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemoteStorage_GetUGCDetails$handle() {
        return SteamAPI_ISteamRemoteStorage_GetUGCDetails.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_GetUGCDetails(UGCHandle_t hContent, AppId_t *pnAppID, char **ppchName, int32 *pnFileSizeInBytes, CSteamID *pSteamIDOwner)
     * }
     */
    public static boolean SteamAPI_ISteamRemoteStorage_GetUGCDetails(long hContent, MemorySegment pnAppID, MemorySegment ppchName, MemorySegment pnFileSizeInBytes, MemorySegment pSteamIDOwner) {
        var mh$ = SteamAPI_ISteamRemoteStorage_GetUGCDetails.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemoteStorage_GetUGCDetails", hContent, pnAppID, ppchName, pnFileSizeInBytes, pSteamIDOwner);
            }
            return (boolean)mh$.invokeExact(hContent, pnAppID, ppchName, pnFileSizeInBytes, pSteamIDOwner);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemoteStorage_UGCRead {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamRemoteStorage_UGCRead"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int32 SteamAPI_ISteamRemoteStorage_UGCRead(UGCHandle_t hContent, void *pvData, int32 cubDataToRead, uint32 cOffset, EUGCReadAction eAction)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemoteStorage_UGCRead$descriptor() {
        return SteamAPI_ISteamRemoteStorage_UGCRead.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int32 SteamAPI_ISteamRemoteStorage_UGCRead(UGCHandle_t hContent, void *pvData, int32 cubDataToRead, uint32 cOffset, EUGCReadAction eAction)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemoteStorage_UGCRead$handle() {
        return SteamAPI_ISteamRemoteStorage_UGCRead.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int32 SteamAPI_ISteamRemoteStorage_UGCRead(UGCHandle_t hContent, void *pvData, int32 cubDataToRead, uint32 cOffset, EUGCReadAction eAction)
     * }
     */
    public static int SteamAPI_ISteamRemoteStorage_UGCRead(long hContent, MemorySegment pvData, int cubDataToRead, int cOffset, int eAction) {
        var mh$ = SteamAPI_ISteamRemoteStorage_UGCRead.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemoteStorage_UGCRead", hContent, pvData, cubDataToRead, cOffset, eAction);
            }
            return (int)mh$.invokeExact(hContent, pvData, cubDataToRead, cOffset, eAction);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemoteStorage_GetCachedUGCCount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamRemoteStorage_GetCachedUGCCount"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int32 SteamAPI_ISteamRemoteStorage_GetCachedUGCCount()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemoteStorage_GetCachedUGCCount$descriptor() {
        return SteamAPI_ISteamRemoteStorage_GetCachedUGCCount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int32 SteamAPI_ISteamRemoteStorage_GetCachedUGCCount()
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemoteStorage_GetCachedUGCCount$handle() {
        return SteamAPI_ISteamRemoteStorage_GetCachedUGCCount.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int32 SteamAPI_ISteamRemoteStorage_GetCachedUGCCount()
     * }
     */
    public static int SteamAPI_ISteamRemoteStorage_GetCachedUGCCount() {
        var mh$ = SteamAPI_ISteamRemoteStorage_GetCachedUGCCount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemoteStorage_GetCachedUGCCount");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemoteStorage_GetCachedUGCHandle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamRemoteStorage_GetCachedUGCHandle"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * UGCHandle_t SteamAPI_ISteamRemoteStorage_GetCachedUGCHandle(int32 iCachedContent)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemoteStorage_GetCachedUGCHandle$descriptor() {
        return SteamAPI_ISteamRemoteStorage_GetCachedUGCHandle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * UGCHandle_t SteamAPI_ISteamRemoteStorage_GetCachedUGCHandle(int32 iCachedContent)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemoteStorage_GetCachedUGCHandle$handle() {
        return SteamAPI_ISteamRemoteStorage_GetCachedUGCHandle.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * UGCHandle_t SteamAPI_ISteamRemoteStorage_GetCachedUGCHandle(int32 iCachedContent)
     * }
     */
    public static long SteamAPI_ISteamRemoteStorage_GetCachedUGCHandle(int iCachedContent) {
        var mh$ = SteamAPI_ISteamRemoteStorage_GetCachedUGCHandle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemoteStorage_GetCachedUGCHandle", iCachedContent);
            }
            return (long)mh$.invokeExact(iCachedContent);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemoteStorage_PublishWorkshopFile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamRemoteStorage_PublishWorkshopFile"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_PublishWorkshopFile(const char *pchFile, const char *pchPreviewFile, AppId_t nConsumerAppId, const char *pchTitle, const char *pchDescription, ERemoteStoragePublishedFileVisibility eVisibility, SteamParamStringArray_t *pTags, EWorkshopFileType eWorkshopFileType)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemoteStorage_PublishWorkshopFile$descriptor() {
        return SteamAPI_ISteamRemoteStorage_PublishWorkshopFile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_PublishWorkshopFile(const char *pchFile, const char *pchPreviewFile, AppId_t nConsumerAppId, const char *pchTitle, const char *pchDescription, ERemoteStoragePublishedFileVisibility eVisibility, SteamParamStringArray_t *pTags, EWorkshopFileType eWorkshopFileType)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemoteStorage_PublishWorkshopFile$handle() {
        return SteamAPI_ISteamRemoteStorage_PublishWorkshopFile.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_PublishWorkshopFile(const char *pchFile, const char *pchPreviewFile, AppId_t nConsumerAppId, const char *pchTitle, const char *pchDescription, ERemoteStoragePublishedFileVisibility eVisibility, SteamParamStringArray_t *pTags, EWorkshopFileType eWorkshopFileType)
     * }
     */
    public static long SteamAPI_ISteamRemoteStorage_PublishWorkshopFile(MemorySegment pchFile, MemorySegment pchPreviewFile, int nConsumerAppId, MemorySegment pchTitle, MemorySegment pchDescription, int eVisibility, MemorySegment pTags, int eWorkshopFileType) {
        var mh$ = SteamAPI_ISteamRemoteStorage_PublishWorkshopFile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemoteStorage_PublishWorkshopFile", pchFile, pchPreviewFile, nConsumerAppId, pchTitle, pchDescription, eVisibility, pTags, eWorkshopFileType);
            }
            return (long)mh$.invokeExact(pchFile, pchPreviewFile, nConsumerAppId, pchTitle, pchDescription, eVisibility, pTags, eWorkshopFileType);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemoteStorage_CreatePublishedFileUpdateRequest {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamRemoteStorage_CreatePublishedFileUpdateRequest"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * PublishedFileUpdateHandle_t SteamAPI_ISteamRemoteStorage_CreatePublishedFileUpdateRequest(PublishedFileId_t unPublishedFileId)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemoteStorage_CreatePublishedFileUpdateRequest$descriptor() {
        return SteamAPI_ISteamRemoteStorage_CreatePublishedFileUpdateRequest.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * PublishedFileUpdateHandle_t SteamAPI_ISteamRemoteStorage_CreatePublishedFileUpdateRequest(PublishedFileId_t unPublishedFileId)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemoteStorage_CreatePublishedFileUpdateRequest$handle() {
        return SteamAPI_ISteamRemoteStorage_CreatePublishedFileUpdateRequest.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * PublishedFileUpdateHandle_t SteamAPI_ISteamRemoteStorage_CreatePublishedFileUpdateRequest(PublishedFileId_t unPublishedFileId)
     * }
     */
    public static long SteamAPI_ISteamRemoteStorage_CreatePublishedFileUpdateRequest(long unPublishedFileId) {
        var mh$ = SteamAPI_ISteamRemoteStorage_CreatePublishedFileUpdateRequest.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemoteStorage_CreatePublishedFileUpdateRequest", unPublishedFileId);
            }
            return (long)mh$.invokeExact(unPublishedFileId);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemoteStorage_UpdatePublishedFileFile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamRemoteStorage_UpdatePublishedFileFile"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileFile(PublishedFileUpdateHandle_t updateHandle, const char *pchFile)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemoteStorage_UpdatePublishedFileFile$descriptor() {
        return SteamAPI_ISteamRemoteStorage_UpdatePublishedFileFile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileFile(PublishedFileUpdateHandle_t updateHandle, const char *pchFile)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemoteStorage_UpdatePublishedFileFile$handle() {
        return SteamAPI_ISteamRemoteStorage_UpdatePublishedFileFile.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileFile(PublishedFileUpdateHandle_t updateHandle, const char *pchFile)
     * }
     */
    public static boolean SteamAPI_ISteamRemoteStorage_UpdatePublishedFileFile(long updateHandle, MemorySegment pchFile) {
        var mh$ = SteamAPI_ISteamRemoteStorage_UpdatePublishedFileFile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemoteStorage_UpdatePublishedFileFile", updateHandle, pchFile);
            }
            return (boolean)mh$.invokeExact(updateHandle, pchFile);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemoteStorage_UpdatePublishedFilePreviewFile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamRemoteStorage_UpdatePublishedFilePreviewFile"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFilePreviewFile(PublishedFileUpdateHandle_t updateHandle, const char *pchPreviewFile)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemoteStorage_UpdatePublishedFilePreviewFile$descriptor() {
        return SteamAPI_ISteamRemoteStorage_UpdatePublishedFilePreviewFile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFilePreviewFile(PublishedFileUpdateHandle_t updateHandle, const char *pchPreviewFile)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemoteStorage_UpdatePublishedFilePreviewFile$handle() {
        return SteamAPI_ISteamRemoteStorage_UpdatePublishedFilePreviewFile.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFilePreviewFile(PublishedFileUpdateHandle_t updateHandle, const char *pchPreviewFile)
     * }
     */
    public static boolean SteamAPI_ISteamRemoteStorage_UpdatePublishedFilePreviewFile(long updateHandle, MemorySegment pchPreviewFile) {
        var mh$ = SteamAPI_ISteamRemoteStorage_UpdatePublishedFilePreviewFile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemoteStorage_UpdatePublishedFilePreviewFile", updateHandle, pchPreviewFile);
            }
            return (boolean)mh$.invokeExact(updateHandle, pchPreviewFile);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTitle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTitle"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTitle(PublishedFileUpdateHandle_t updateHandle, const char *pchTitle)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTitle$descriptor() {
        return SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTitle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTitle(PublishedFileUpdateHandle_t updateHandle, const char *pchTitle)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTitle$handle() {
        return SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTitle.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTitle(PublishedFileUpdateHandle_t updateHandle, const char *pchTitle)
     * }
     */
    public static boolean SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTitle(long updateHandle, MemorySegment pchTitle) {
        var mh$ = SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTitle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTitle", updateHandle, pchTitle);
            }
            return (boolean)mh$.invokeExact(updateHandle, pchTitle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemoteStorage_UpdatePublishedFileDescription {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamRemoteStorage_UpdatePublishedFileDescription"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileDescription(PublishedFileUpdateHandle_t updateHandle, const char *pchDescription)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemoteStorage_UpdatePublishedFileDescription$descriptor() {
        return SteamAPI_ISteamRemoteStorage_UpdatePublishedFileDescription.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileDescription(PublishedFileUpdateHandle_t updateHandle, const char *pchDescription)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemoteStorage_UpdatePublishedFileDescription$handle() {
        return SteamAPI_ISteamRemoteStorage_UpdatePublishedFileDescription.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileDescription(PublishedFileUpdateHandle_t updateHandle, const char *pchDescription)
     * }
     */
    public static boolean SteamAPI_ISteamRemoteStorage_UpdatePublishedFileDescription(long updateHandle, MemorySegment pchDescription) {
        var mh$ = SteamAPI_ISteamRemoteStorage_UpdatePublishedFileDescription.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemoteStorage_UpdatePublishedFileDescription", updateHandle, pchDescription);
            }
            return (boolean)mh$.invokeExact(updateHandle, pchDescription);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemoteStorage_UpdatePublishedFileVisibility {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamRemoteStorage_UpdatePublishedFileVisibility"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileVisibility(PublishedFileUpdateHandle_t updateHandle, ERemoteStoragePublishedFileVisibility eVisibility)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemoteStorage_UpdatePublishedFileVisibility$descriptor() {
        return SteamAPI_ISteamRemoteStorage_UpdatePublishedFileVisibility.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileVisibility(PublishedFileUpdateHandle_t updateHandle, ERemoteStoragePublishedFileVisibility eVisibility)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemoteStorage_UpdatePublishedFileVisibility$handle() {
        return SteamAPI_ISteamRemoteStorage_UpdatePublishedFileVisibility.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileVisibility(PublishedFileUpdateHandle_t updateHandle, ERemoteStoragePublishedFileVisibility eVisibility)
     * }
     */
    public static boolean SteamAPI_ISteamRemoteStorage_UpdatePublishedFileVisibility(long updateHandle, int eVisibility) {
        var mh$ = SteamAPI_ISteamRemoteStorage_UpdatePublishedFileVisibility.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemoteStorage_UpdatePublishedFileVisibility", updateHandle, eVisibility);
            }
            return (boolean)mh$.invokeExact(updateHandle, eVisibility);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTags"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTags(PublishedFileUpdateHandle_t updateHandle, SteamParamStringArray_t *pTags)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTags$descriptor() {
        return SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTags(PublishedFileUpdateHandle_t updateHandle, SteamParamStringArray_t *pTags)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTags$handle() {
        return SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTags.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTags(PublishedFileUpdateHandle_t updateHandle, SteamParamStringArray_t *pTags)
     * }
     */
    public static boolean SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTags(long updateHandle, MemorySegment pTags) {
        var mh$ = SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTags", updateHandle, pTags);
            }
            return (boolean)mh$.invokeExact(updateHandle, pTags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemoteStorage_CommitPublishedFileUpdate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamRemoteStorage_CommitPublishedFileUpdate"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_CommitPublishedFileUpdate(PublishedFileUpdateHandle_t updateHandle)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemoteStorage_CommitPublishedFileUpdate$descriptor() {
        return SteamAPI_ISteamRemoteStorage_CommitPublishedFileUpdate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_CommitPublishedFileUpdate(PublishedFileUpdateHandle_t updateHandle)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemoteStorage_CommitPublishedFileUpdate$handle() {
        return SteamAPI_ISteamRemoteStorage_CommitPublishedFileUpdate.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_CommitPublishedFileUpdate(PublishedFileUpdateHandle_t updateHandle)
     * }
     */
    public static long SteamAPI_ISteamRemoteStorage_CommitPublishedFileUpdate(long updateHandle) {
        var mh$ = SteamAPI_ISteamRemoteStorage_CommitPublishedFileUpdate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemoteStorage_CommitPublishedFileUpdate", updateHandle);
            }
            return (long)mh$.invokeExact(updateHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemoteStorage_GetPublishedFileDetails {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamRemoteStorage_GetPublishedFileDetails"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_GetPublishedFileDetails(PublishedFileId_t unPublishedFileId, uint32 unMaxSecondsOld)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemoteStorage_GetPublishedFileDetails$descriptor() {
        return SteamAPI_ISteamRemoteStorage_GetPublishedFileDetails.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_GetPublishedFileDetails(PublishedFileId_t unPublishedFileId, uint32 unMaxSecondsOld)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemoteStorage_GetPublishedFileDetails$handle() {
        return SteamAPI_ISteamRemoteStorage_GetPublishedFileDetails.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_GetPublishedFileDetails(PublishedFileId_t unPublishedFileId, uint32 unMaxSecondsOld)
     * }
     */
    public static long SteamAPI_ISteamRemoteStorage_GetPublishedFileDetails(long unPublishedFileId, int unMaxSecondsOld) {
        var mh$ = SteamAPI_ISteamRemoteStorage_GetPublishedFileDetails.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemoteStorage_GetPublishedFileDetails", unPublishedFileId, unMaxSecondsOld);
            }
            return (long)mh$.invokeExact(unPublishedFileId, unMaxSecondsOld);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemoteStorage_DeletePublishedFile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamRemoteStorage_DeletePublishedFile"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_DeletePublishedFile(PublishedFileId_t unPublishedFileId)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemoteStorage_DeletePublishedFile$descriptor() {
        return SteamAPI_ISteamRemoteStorage_DeletePublishedFile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_DeletePublishedFile(PublishedFileId_t unPublishedFileId)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemoteStorage_DeletePublishedFile$handle() {
        return SteamAPI_ISteamRemoteStorage_DeletePublishedFile.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_DeletePublishedFile(PublishedFileId_t unPublishedFileId)
     * }
     */
    public static long SteamAPI_ISteamRemoteStorage_DeletePublishedFile(long unPublishedFileId) {
        var mh$ = SteamAPI_ISteamRemoteStorage_DeletePublishedFile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemoteStorage_DeletePublishedFile", unPublishedFileId);
            }
            return (long)mh$.invokeExact(unPublishedFileId);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemoteStorage_EnumerateUserPublishedFiles {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamRemoteStorage_EnumerateUserPublishedFiles"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumerateUserPublishedFiles(uint32 unStartIndex)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemoteStorage_EnumerateUserPublishedFiles$descriptor() {
        return SteamAPI_ISteamRemoteStorage_EnumerateUserPublishedFiles.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumerateUserPublishedFiles(uint32 unStartIndex)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemoteStorage_EnumerateUserPublishedFiles$handle() {
        return SteamAPI_ISteamRemoteStorage_EnumerateUserPublishedFiles.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumerateUserPublishedFiles(uint32 unStartIndex)
     * }
     */
    public static long SteamAPI_ISteamRemoteStorage_EnumerateUserPublishedFiles(int unStartIndex) {
        var mh$ = SteamAPI_ISteamRemoteStorage_EnumerateUserPublishedFiles.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemoteStorage_EnumerateUserPublishedFiles", unStartIndex);
            }
            return (long)mh$.invokeExact(unStartIndex);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemoteStorage_SubscribePublishedFile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamRemoteStorage_SubscribePublishedFile"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_SubscribePublishedFile(PublishedFileId_t unPublishedFileId)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemoteStorage_SubscribePublishedFile$descriptor() {
        return SteamAPI_ISteamRemoteStorage_SubscribePublishedFile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_SubscribePublishedFile(PublishedFileId_t unPublishedFileId)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemoteStorage_SubscribePublishedFile$handle() {
        return SteamAPI_ISteamRemoteStorage_SubscribePublishedFile.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_SubscribePublishedFile(PublishedFileId_t unPublishedFileId)
     * }
     */
    public static long SteamAPI_ISteamRemoteStorage_SubscribePublishedFile(long unPublishedFileId) {
        var mh$ = SteamAPI_ISteamRemoteStorage_SubscribePublishedFile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemoteStorage_SubscribePublishedFile", unPublishedFileId);
            }
            return (long)mh$.invokeExact(unPublishedFileId);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemoteStorage_EnumerateUserSubscribedFiles {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamRemoteStorage_EnumerateUserSubscribedFiles"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumerateUserSubscribedFiles(uint32 unStartIndex)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemoteStorage_EnumerateUserSubscribedFiles$descriptor() {
        return SteamAPI_ISteamRemoteStorage_EnumerateUserSubscribedFiles.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumerateUserSubscribedFiles(uint32 unStartIndex)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemoteStorage_EnumerateUserSubscribedFiles$handle() {
        return SteamAPI_ISteamRemoteStorage_EnumerateUserSubscribedFiles.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumerateUserSubscribedFiles(uint32 unStartIndex)
     * }
     */
    public static long SteamAPI_ISteamRemoteStorage_EnumerateUserSubscribedFiles(int unStartIndex) {
        var mh$ = SteamAPI_ISteamRemoteStorage_EnumerateUserSubscribedFiles.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemoteStorage_EnumerateUserSubscribedFiles", unStartIndex);
            }
            return (long)mh$.invokeExact(unStartIndex);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemoteStorage_UnsubscribePublishedFile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamRemoteStorage_UnsubscribePublishedFile"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_UnsubscribePublishedFile(PublishedFileId_t unPublishedFileId)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemoteStorage_UnsubscribePublishedFile$descriptor() {
        return SteamAPI_ISteamRemoteStorage_UnsubscribePublishedFile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_UnsubscribePublishedFile(PublishedFileId_t unPublishedFileId)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemoteStorage_UnsubscribePublishedFile$handle() {
        return SteamAPI_ISteamRemoteStorage_UnsubscribePublishedFile.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_UnsubscribePublishedFile(PublishedFileId_t unPublishedFileId)
     * }
     */
    public static long SteamAPI_ISteamRemoteStorage_UnsubscribePublishedFile(long unPublishedFileId) {
        var mh$ = SteamAPI_ISteamRemoteStorage_UnsubscribePublishedFile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemoteStorage_UnsubscribePublishedFile", unPublishedFileId);
            }
            return (long)mh$.invokeExact(unPublishedFileId);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemoteStorage_UpdatePublishedFileSetChangeDescription {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamRemoteStorage_UpdatePublishedFileSetChangeDescription"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileSetChangeDescription(PublishedFileUpdateHandle_t updateHandle, const char *pchChangeDescription)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemoteStorage_UpdatePublishedFileSetChangeDescription$descriptor() {
        return SteamAPI_ISteamRemoteStorage_UpdatePublishedFileSetChangeDescription.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileSetChangeDescription(PublishedFileUpdateHandle_t updateHandle, const char *pchChangeDescription)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemoteStorage_UpdatePublishedFileSetChangeDescription$handle() {
        return SteamAPI_ISteamRemoteStorage_UpdatePublishedFileSetChangeDescription.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileSetChangeDescription(PublishedFileUpdateHandle_t updateHandle, const char *pchChangeDescription)
     * }
     */
    public static boolean SteamAPI_ISteamRemoteStorage_UpdatePublishedFileSetChangeDescription(long updateHandle, MemorySegment pchChangeDescription) {
        var mh$ = SteamAPI_ISteamRemoteStorage_UpdatePublishedFileSetChangeDescription.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemoteStorage_UpdatePublishedFileSetChangeDescription", updateHandle, pchChangeDescription);
            }
            return (boolean)mh$.invokeExact(updateHandle, pchChangeDescription);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemoteStorage_GetPublishedItemVoteDetails {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamRemoteStorage_GetPublishedItemVoteDetails"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_GetPublishedItemVoteDetails(PublishedFileId_t unPublishedFileId)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemoteStorage_GetPublishedItemVoteDetails$descriptor() {
        return SteamAPI_ISteamRemoteStorage_GetPublishedItemVoteDetails.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_GetPublishedItemVoteDetails(PublishedFileId_t unPublishedFileId)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemoteStorage_GetPublishedItemVoteDetails$handle() {
        return SteamAPI_ISteamRemoteStorage_GetPublishedItemVoteDetails.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_GetPublishedItemVoteDetails(PublishedFileId_t unPublishedFileId)
     * }
     */
    public static long SteamAPI_ISteamRemoteStorage_GetPublishedItemVoteDetails(long unPublishedFileId) {
        var mh$ = SteamAPI_ISteamRemoteStorage_GetPublishedItemVoteDetails.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemoteStorage_GetPublishedItemVoteDetails", unPublishedFileId);
            }
            return (long)mh$.invokeExact(unPublishedFileId);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemoteStorage_UpdateUserPublishedItemVote {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamRemoteStorage_UpdateUserPublishedItemVote"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_UpdateUserPublishedItemVote(PublishedFileId_t unPublishedFileId, bool bVoteUp)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemoteStorage_UpdateUserPublishedItemVote$descriptor() {
        return SteamAPI_ISteamRemoteStorage_UpdateUserPublishedItemVote.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_UpdateUserPublishedItemVote(PublishedFileId_t unPublishedFileId, bool bVoteUp)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemoteStorage_UpdateUserPublishedItemVote$handle() {
        return SteamAPI_ISteamRemoteStorage_UpdateUserPublishedItemVote.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_UpdateUserPublishedItemVote(PublishedFileId_t unPublishedFileId, bool bVoteUp)
     * }
     */
    public static long SteamAPI_ISteamRemoteStorage_UpdateUserPublishedItemVote(long unPublishedFileId, boolean bVoteUp) {
        var mh$ = SteamAPI_ISteamRemoteStorage_UpdateUserPublishedItemVote.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemoteStorage_UpdateUserPublishedItemVote", unPublishedFileId, bVoteUp);
            }
            return (long)mh$.invokeExact(unPublishedFileId, bVoteUp);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemoteStorage_GetUserPublishedItemVoteDetails {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamRemoteStorage_GetUserPublishedItemVoteDetails"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_GetUserPublishedItemVoteDetails(PublishedFileId_t unPublishedFileId)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemoteStorage_GetUserPublishedItemVoteDetails$descriptor() {
        return SteamAPI_ISteamRemoteStorage_GetUserPublishedItemVoteDetails.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_GetUserPublishedItemVoteDetails(PublishedFileId_t unPublishedFileId)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemoteStorage_GetUserPublishedItemVoteDetails$handle() {
        return SteamAPI_ISteamRemoteStorage_GetUserPublishedItemVoteDetails.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_GetUserPublishedItemVoteDetails(PublishedFileId_t unPublishedFileId)
     * }
     */
    public static long SteamAPI_ISteamRemoteStorage_GetUserPublishedItemVoteDetails(long unPublishedFileId) {
        var mh$ = SteamAPI_ISteamRemoteStorage_GetUserPublishedItemVoteDetails.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemoteStorage_GetUserPublishedItemVoteDetails", unPublishedFileId);
            }
            return (long)mh$.invokeExact(unPublishedFileId);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemoteStorage_EnumerateUserSharedWorkshopFiles {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamRemoteStorage_EnumerateUserSharedWorkshopFiles"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumerateUserSharedWorkshopFiles(uint64_steamid steamId, uint32 unStartIndex, SteamParamStringArray_t *pRequiredTags, SteamParamStringArray_t *pExcludedTags)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemoteStorage_EnumerateUserSharedWorkshopFiles$descriptor() {
        return SteamAPI_ISteamRemoteStorage_EnumerateUserSharedWorkshopFiles.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumerateUserSharedWorkshopFiles(uint64_steamid steamId, uint32 unStartIndex, SteamParamStringArray_t *pRequiredTags, SteamParamStringArray_t *pExcludedTags)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemoteStorage_EnumerateUserSharedWorkshopFiles$handle() {
        return SteamAPI_ISteamRemoteStorage_EnumerateUserSharedWorkshopFiles.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumerateUserSharedWorkshopFiles(uint64_steamid steamId, uint32 unStartIndex, SteamParamStringArray_t *pRequiredTags, SteamParamStringArray_t *pExcludedTags)
     * }
     */
    public static long SteamAPI_ISteamRemoteStorage_EnumerateUserSharedWorkshopFiles(long steamId, int unStartIndex, MemorySegment pRequiredTags, MemorySegment pExcludedTags) {
        var mh$ = SteamAPI_ISteamRemoteStorage_EnumerateUserSharedWorkshopFiles.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemoteStorage_EnumerateUserSharedWorkshopFiles", steamId, unStartIndex, pRequiredTags, pExcludedTags);
            }
            return (long)mh$.invokeExact(steamId, unStartIndex, pRequiredTags, pExcludedTags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemoteStorage_PublishVideo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamRemoteStorage_PublishVideo"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_PublishVideo(EWorkshopVideoProvider eVideoProvider, const char *pchVideoAccount, const char *pchVideoIdentifier, const char *pchPreviewFile, AppId_t nConsumerAppId, const char *pchTitle, const char *pchDescription, ERemoteStoragePublishedFileVisibility eVisibility, SteamParamStringArray_t *pTags)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemoteStorage_PublishVideo$descriptor() {
        return SteamAPI_ISteamRemoteStorage_PublishVideo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_PublishVideo(EWorkshopVideoProvider eVideoProvider, const char *pchVideoAccount, const char *pchVideoIdentifier, const char *pchPreviewFile, AppId_t nConsumerAppId, const char *pchTitle, const char *pchDescription, ERemoteStoragePublishedFileVisibility eVisibility, SteamParamStringArray_t *pTags)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemoteStorage_PublishVideo$handle() {
        return SteamAPI_ISteamRemoteStorage_PublishVideo.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_PublishVideo(EWorkshopVideoProvider eVideoProvider, const char *pchVideoAccount, const char *pchVideoIdentifier, const char *pchPreviewFile, AppId_t nConsumerAppId, const char *pchTitle, const char *pchDescription, ERemoteStoragePublishedFileVisibility eVisibility, SteamParamStringArray_t *pTags)
     * }
     */
    public static long SteamAPI_ISteamRemoteStorage_PublishVideo(int eVideoProvider, MemorySegment pchVideoAccount, MemorySegment pchVideoIdentifier, MemorySegment pchPreviewFile, int nConsumerAppId, MemorySegment pchTitle, MemorySegment pchDescription, int eVisibility, MemorySegment pTags) {
        var mh$ = SteamAPI_ISteamRemoteStorage_PublishVideo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemoteStorage_PublishVideo", eVideoProvider, pchVideoAccount, pchVideoIdentifier, pchPreviewFile, nConsumerAppId, pchTitle, pchDescription, eVisibility, pTags);
            }
            return (long)mh$.invokeExact(eVideoProvider, pchVideoAccount, pchVideoIdentifier, pchPreviewFile, nConsumerAppId, pchTitle, pchDescription, eVisibility, pTags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemoteStorage_SetUserPublishedFileAction {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamRemoteStorage_SetUserPublishedFileAction"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_SetUserPublishedFileAction(PublishedFileId_t unPublishedFileId, EWorkshopFileAction eAction)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemoteStorage_SetUserPublishedFileAction$descriptor() {
        return SteamAPI_ISteamRemoteStorage_SetUserPublishedFileAction.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_SetUserPublishedFileAction(PublishedFileId_t unPublishedFileId, EWorkshopFileAction eAction)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemoteStorage_SetUserPublishedFileAction$handle() {
        return SteamAPI_ISteamRemoteStorage_SetUserPublishedFileAction.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_SetUserPublishedFileAction(PublishedFileId_t unPublishedFileId, EWorkshopFileAction eAction)
     * }
     */
    public static long SteamAPI_ISteamRemoteStorage_SetUserPublishedFileAction(long unPublishedFileId, int eAction) {
        var mh$ = SteamAPI_ISteamRemoteStorage_SetUserPublishedFileAction.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemoteStorage_SetUserPublishedFileAction", unPublishedFileId, eAction);
            }
            return (long)mh$.invokeExact(unPublishedFileId, eAction);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemoteStorage_EnumeratePublishedFilesByUserAction {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamRemoteStorage_EnumeratePublishedFilesByUserAction"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumeratePublishedFilesByUserAction(EWorkshopFileAction eAction, uint32 unStartIndex)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemoteStorage_EnumeratePublishedFilesByUserAction$descriptor() {
        return SteamAPI_ISteamRemoteStorage_EnumeratePublishedFilesByUserAction.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumeratePublishedFilesByUserAction(EWorkshopFileAction eAction, uint32 unStartIndex)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemoteStorage_EnumeratePublishedFilesByUserAction$handle() {
        return SteamAPI_ISteamRemoteStorage_EnumeratePublishedFilesByUserAction.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumeratePublishedFilesByUserAction(EWorkshopFileAction eAction, uint32 unStartIndex)
     * }
     */
    public static long SteamAPI_ISteamRemoteStorage_EnumeratePublishedFilesByUserAction(int eAction, int unStartIndex) {
        var mh$ = SteamAPI_ISteamRemoteStorage_EnumeratePublishedFilesByUserAction.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemoteStorage_EnumeratePublishedFilesByUserAction", eAction, unStartIndex);
            }
            return (long)mh$.invokeExact(eAction, unStartIndex);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemoteStorage_EnumeratePublishedWorkshopFiles {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamRemoteStorage_EnumeratePublishedWorkshopFiles"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumeratePublishedWorkshopFiles(EWorkshopEnumerationType eEnumerationType, uint32 unStartIndex, uint32 unCount, uint32 unDays, SteamParamStringArray_t *pTags, SteamParamStringArray_t *pUserTags)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemoteStorage_EnumeratePublishedWorkshopFiles$descriptor() {
        return SteamAPI_ISteamRemoteStorage_EnumeratePublishedWorkshopFiles.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumeratePublishedWorkshopFiles(EWorkshopEnumerationType eEnumerationType, uint32 unStartIndex, uint32 unCount, uint32 unDays, SteamParamStringArray_t *pTags, SteamParamStringArray_t *pUserTags)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemoteStorage_EnumeratePublishedWorkshopFiles$handle() {
        return SteamAPI_ISteamRemoteStorage_EnumeratePublishedWorkshopFiles.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumeratePublishedWorkshopFiles(EWorkshopEnumerationType eEnumerationType, uint32 unStartIndex, uint32 unCount, uint32 unDays, SteamParamStringArray_t *pTags, SteamParamStringArray_t *pUserTags)
     * }
     */
    public static long SteamAPI_ISteamRemoteStorage_EnumeratePublishedWorkshopFiles(int eEnumerationType, int unStartIndex, int unCount, int unDays, MemorySegment pTags, MemorySegment pUserTags) {
        var mh$ = SteamAPI_ISteamRemoteStorage_EnumeratePublishedWorkshopFiles.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemoteStorage_EnumeratePublishedWorkshopFiles", eEnumerationType, unStartIndex, unCount, unDays, pTags, pUserTags);
            }
            return (long)mh$.invokeExact(eEnumerationType, unStartIndex, unCount, unDays, pTags, pUserTags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemoteStorage_UGCDownloadToLocation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamRemoteStorage_UGCDownloadToLocation"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_UGCDownloadToLocation(UGCHandle_t hContent, const char *pchLocation, uint32 unPriority)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemoteStorage_UGCDownloadToLocation$descriptor() {
        return SteamAPI_ISteamRemoteStorage_UGCDownloadToLocation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_UGCDownloadToLocation(UGCHandle_t hContent, const char *pchLocation, uint32 unPriority)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemoteStorage_UGCDownloadToLocation$handle() {
        return SteamAPI_ISteamRemoteStorage_UGCDownloadToLocation.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamRemoteStorage_UGCDownloadToLocation(UGCHandle_t hContent, const char *pchLocation, uint32 unPriority)
     * }
     */
    public static long SteamAPI_ISteamRemoteStorage_UGCDownloadToLocation(long hContent, MemorySegment pchLocation, int unPriority) {
        var mh$ = SteamAPI_ISteamRemoteStorage_UGCDownloadToLocation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemoteStorage_UGCDownloadToLocation", hContent, pchLocation, unPriority);
            }
            return (long)mh$.invokeExact(hContent, pchLocation, unPriority);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemoteStorage_GetLocalFileChangeCount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamRemoteStorage_GetLocalFileChangeCount"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int32 SteamAPI_ISteamRemoteStorage_GetLocalFileChangeCount()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemoteStorage_GetLocalFileChangeCount$descriptor() {
        return SteamAPI_ISteamRemoteStorage_GetLocalFileChangeCount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int32 SteamAPI_ISteamRemoteStorage_GetLocalFileChangeCount()
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemoteStorage_GetLocalFileChangeCount$handle() {
        return SteamAPI_ISteamRemoteStorage_GetLocalFileChangeCount.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int32 SteamAPI_ISteamRemoteStorage_GetLocalFileChangeCount()
     * }
     */
    public static int SteamAPI_ISteamRemoteStorage_GetLocalFileChangeCount() {
        var mh$ = SteamAPI_ISteamRemoteStorage_GetLocalFileChangeCount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemoteStorage_GetLocalFileChangeCount");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemoteStorage_GetLocalFileChange {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamRemoteStorage_GetLocalFileChange"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamRemoteStorage_GetLocalFileChange(int iFile, ERemoteStorageLocalFileChange *pEChangeType, ERemoteStorageFilePathType *pEFilePathType)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemoteStorage_GetLocalFileChange$descriptor() {
        return SteamAPI_ISteamRemoteStorage_GetLocalFileChange.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamRemoteStorage_GetLocalFileChange(int iFile, ERemoteStorageLocalFileChange *pEChangeType, ERemoteStorageFilePathType *pEFilePathType)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemoteStorage_GetLocalFileChange$handle() {
        return SteamAPI_ISteamRemoteStorage_GetLocalFileChange.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamRemoteStorage_GetLocalFileChange(int iFile, ERemoteStorageLocalFileChange *pEChangeType, ERemoteStorageFilePathType *pEFilePathType)
     * }
     */
    public static MemorySegment SteamAPI_ISteamRemoteStorage_GetLocalFileChange(int iFile, MemorySegment pEChangeType, MemorySegment pEFilePathType) {
        var mh$ = SteamAPI_ISteamRemoteStorage_GetLocalFileChange.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemoteStorage_GetLocalFileChange", iFile, pEChangeType, pEFilePathType);
            }
            return (MemorySegment)mh$.invokeExact(iFile, pEChangeType, pEFilePathType);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemoteStorage_BeginFileWriteBatch {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamRemoteStorage_BeginFileWriteBatch"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_BeginFileWriteBatch()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemoteStorage_BeginFileWriteBatch$descriptor() {
        return SteamAPI_ISteamRemoteStorage_BeginFileWriteBatch.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_BeginFileWriteBatch()
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemoteStorage_BeginFileWriteBatch$handle() {
        return SteamAPI_ISteamRemoteStorage_BeginFileWriteBatch.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_BeginFileWriteBatch()
     * }
     */
    public static boolean SteamAPI_ISteamRemoteStorage_BeginFileWriteBatch() {
        var mh$ = SteamAPI_ISteamRemoteStorage_BeginFileWriteBatch.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemoteStorage_BeginFileWriteBatch");
            }
            return (boolean)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemoteStorage_EndFileWriteBatch {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamRemoteStorage_EndFileWriteBatch"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_EndFileWriteBatch()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemoteStorage_EndFileWriteBatch$descriptor() {
        return SteamAPI_ISteamRemoteStorage_EndFileWriteBatch.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_EndFileWriteBatch()
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemoteStorage_EndFileWriteBatch$handle() {
        return SteamAPI_ISteamRemoteStorage_EndFileWriteBatch.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemoteStorage_EndFileWriteBatch()
     * }
     */
    public static boolean SteamAPI_ISteamRemoteStorage_EndFileWriteBatch() {
        var mh$ = SteamAPI_ISteamRemoteStorage_EndFileWriteBatch.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemoteStorage_EndFileWriteBatch");
            }
            return (boolean)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUserStats_RequestCurrentStats {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUserStats_RequestCurrentStats"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_RequestCurrentStats()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUserStats_RequestCurrentStats$descriptor() {
        return SteamAPI_ISteamUserStats_RequestCurrentStats.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_RequestCurrentStats()
     * }
     */
    public static MethodHandle SteamAPI_ISteamUserStats_RequestCurrentStats$handle() {
        return SteamAPI_ISteamUserStats_RequestCurrentStats.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_RequestCurrentStats()
     * }
     */
    public static boolean SteamAPI_ISteamUserStats_RequestCurrentStats() {
        var mh$ = SteamAPI_ISteamUserStats_RequestCurrentStats.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUserStats_RequestCurrentStats");
            }
            return (boolean)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUserStats_GetStatInt32 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUserStats_GetStatInt32"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_GetStatInt32(const char *pchName, int32 *pData)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUserStats_GetStatInt32$descriptor() {
        return SteamAPI_ISteamUserStats_GetStatInt32.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_GetStatInt32(const char *pchName, int32 *pData)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUserStats_GetStatInt32$handle() {
        return SteamAPI_ISteamUserStats_GetStatInt32.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_GetStatInt32(const char *pchName, int32 *pData)
     * }
     */
    public static boolean SteamAPI_ISteamUserStats_GetStatInt32(MemorySegment pchName, MemorySegment pData) {
        var mh$ = SteamAPI_ISteamUserStats_GetStatInt32.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUserStats_GetStatInt32", pchName, pData);
            }
            return (boolean)mh$.invokeExact(pchName, pData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUserStats_GetStatFloat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUserStats_GetStatFloat"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_GetStatFloat(const char *pchName, float *pData)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUserStats_GetStatFloat$descriptor() {
        return SteamAPI_ISteamUserStats_GetStatFloat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_GetStatFloat(const char *pchName, float *pData)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUserStats_GetStatFloat$handle() {
        return SteamAPI_ISteamUserStats_GetStatFloat.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_GetStatFloat(const char *pchName, float *pData)
     * }
     */
    public static boolean SteamAPI_ISteamUserStats_GetStatFloat(MemorySegment pchName, MemorySegment pData) {
        var mh$ = SteamAPI_ISteamUserStats_GetStatFloat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUserStats_GetStatFloat", pchName, pData);
            }
            return (boolean)mh$.invokeExact(pchName, pData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUserStats_SetStatInt32 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUserStats_SetStatInt32"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_SetStatInt32(const char *pchName, int32 nData)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUserStats_SetStatInt32$descriptor() {
        return SteamAPI_ISteamUserStats_SetStatInt32.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_SetStatInt32(const char *pchName, int32 nData)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUserStats_SetStatInt32$handle() {
        return SteamAPI_ISteamUserStats_SetStatInt32.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_SetStatInt32(const char *pchName, int32 nData)
     * }
     */
    public static boolean SteamAPI_ISteamUserStats_SetStatInt32(MemorySegment pchName, int nData) {
        var mh$ = SteamAPI_ISteamUserStats_SetStatInt32.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUserStats_SetStatInt32", pchName, nData);
            }
            return (boolean)mh$.invokeExact(pchName, nData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUserStats_SetStatFloat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_FLOAT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUserStats_SetStatFloat"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_SetStatFloat(const char *pchName, float fData)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUserStats_SetStatFloat$descriptor() {
        return SteamAPI_ISteamUserStats_SetStatFloat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_SetStatFloat(const char *pchName, float fData)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUserStats_SetStatFloat$handle() {
        return SteamAPI_ISteamUserStats_SetStatFloat.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_SetStatFloat(const char *pchName, float fData)
     * }
     */
    public static boolean SteamAPI_ISteamUserStats_SetStatFloat(MemorySegment pchName, float fData) {
        var mh$ = SteamAPI_ISteamUserStats_SetStatFloat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUserStats_SetStatFloat", pchName, fData);
            }
            return (boolean)mh$.invokeExact(pchName, fData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUserStats_UpdateAvgRateStat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_FLOAT,
            SteamFlat4j.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUserStats_UpdateAvgRateStat"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_UpdateAvgRateStat(const char *pchName, float flCountThisSession, double dSessionLength)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUserStats_UpdateAvgRateStat$descriptor() {
        return SteamAPI_ISteamUserStats_UpdateAvgRateStat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_UpdateAvgRateStat(const char *pchName, float flCountThisSession, double dSessionLength)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUserStats_UpdateAvgRateStat$handle() {
        return SteamAPI_ISteamUserStats_UpdateAvgRateStat.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_UpdateAvgRateStat(const char *pchName, float flCountThisSession, double dSessionLength)
     * }
     */
    public static boolean SteamAPI_ISteamUserStats_UpdateAvgRateStat(MemorySegment pchName, float flCountThisSession, double dSessionLength) {
        var mh$ = SteamAPI_ISteamUserStats_UpdateAvgRateStat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUserStats_UpdateAvgRateStat", pchName, flCountThisSession, dSessionLength);
            }
            return (boolean)mh$.invokeExact(pchName, flCountThisSession, dSessionLength);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUserStats_GetAchievement {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUserStats_GetAchievement"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_GetAchievement(const char *pchName, bool *pbAchieved)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUserStats_GetAchievement$descriptor() {
        return SteamAPI_ISteamUserStats_GetAchievement.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_GetAchievement(const char *pchName, bool *pbAchieved)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUserStats_GetAchievement$handle() {
        return SteamAPI_ISteamUserStats_GetAchievement.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_GetAchievement(const char *pchName, bool *pbAchieved)
     * }
     */
    public static boolean SteamAPI_ISteamUserStats_GetAchievement(MemorySegment pchName, MemorySegment pbAchieved) {
        var mh$ = SteamAPI_ISteamUserStats_GetAchievement.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUserStats_GetAchievement", pchName, pbAchieved);
            }
            return (boolean)mh$.invokeExact(pchName, pbAchieved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUserStats_SetAchievement {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUserStats_SetAchievement"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_SetAchievement(const char *pchName)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUserStats_SetAchievement$descriptor() {
        return SteamAPI_ISteamUserStats_SetAchievement.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_SetAchievement(const char *pchName)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUserStats_SetAchievement$handle() {
        return SteamAPI_ISteamUserStats_SetAchievement.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_SetAchievement(const char *pchName)
     * }
     */
    public static boolean SteamAPI_ISteamUserStats_SetAchievement(MemorySegment pchName) {
        var mh$ = SteamAPI_ISteamUserStats_SetAchievement.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUserStats_SetAchievement", pchName);
            }
            return (boolean)mh$.invokeExact(pchName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUserStats_ClearAchievement {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUserStats_ClearAchievement"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_ClearAchievement(const char *pchName)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUserStats_ClearAchievement$descriptor() {
        return SteamAPI_ISteamUserStats_ClearAchievement.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_ClearAchievement(const char *pchName)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUserStats_ClearAchievement$handle() {
        return SteamAPI_ISteamUserStats_ClearAchievement.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_ClearAchievement(const char *pchName)
     * }
     */
    public static boolean SteamAPI_ISteamUserStats_ClearAchievement(MemorySegment pchName) {
        var mh$ = SteamAPI_ISteamUserStats_ClearAchievement.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUserStats_ClearAchievement", pchName);
            }
            return (boolean)mh$.invokeExact(pchName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUserStats_GetAchievementAndUnlockTime {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUserStats_GetAchievementAndUnlockTime"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_GetAchievementAndUnlockTime(const char *pchName, bool *pbAchieved, uint32 *punUnlockTime)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUserStats_GetAchievementAndUnlockTime$descriptor() {
        return SteamAPI_ISteamUserStats_GetAchievementAndUnlockTime.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_GetAchievementAndUnlockTime(const char *pchName, bool *pbAchieved, uint32 *punUnlockTime)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUserStats_GetAchievementAndUnlockTime$handle() {
        return SteamAPI_ISteamUserStats_GetAchievementAndUnlockTime.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_GetAchievementAndUnlockTime(const char *pchName, bool *pbAchieved, uint32 *punUnlockTime)
     * }
     */
    public static boolean SteamAPI_ISteamUserStats_GetAchievementAndUnlockTime(MemorySegment pchName, MemorySegment pbAchieved, MemorySegment punUnlockTime) {
        var mh$ = SteamAPI_ISteamUserStats_GetAchievementAndUnlockTime.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUserStats_GetAchievementAndUnlockTime", pchName, pbAchieved, punUnlockTime);
            }
            return (boolean)mh$.invokeExact(pchName, pbAchieved, punUnlockTime);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUserStats_StoreStats {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUserStats_StoreStats"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_StoreStats()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUserStats_StoreStats$descriptor() {
        return SteamAPI_ISteamUserStats_StoreStats.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_StoreStats()
     * }
     */
    public static MethodHandle SteamAPI_ISteamUserStats_StoreStats$handle() {
        return SteamAPI_ISteamUserStats_StoreStats.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_StoreStats()
     * }
     */
    public static boolean SteamAPI_ISteamUserStats_StoreStats() {
        var mh$ = SteamAPI_ISteamUserStats_StoreStats.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUserStats_StoreStats");
            }
            return (boolean)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUserStats_GetAchievementIcon {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUserStats_GetAchievementIcon"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamUserStats_GetAchievementIcon(const char *pchName)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUserStats_GetAchievementIcon$descriptor() {
        return SteamAPI_ISteamUserStats_GetAchievementIcon.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamUserStats_GetAchievementIcon(const char *pchName)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUserStats_GetAchievementIcon$handle() {
        return SteamAPI_ISteamUserStats_GetAchievementIcon.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int SteamAPI_ISteamUserStats_GetAchievementIcon(const char *pchName)
     * }
     */
    public static int SteamAPI_ISteamUserStats_GetAchievementIcon(MemorySegment pchName) {
        var mh$ = SteamAPI_ISteamUserStats_GetAchievementIcon.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUserStats_GetAchievementIcon", pchName);
            }
            return (int)mh$.invokeExact(pchName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUserStats_GetAchievementDisplayAttribute {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUserStats_GetAchievementDisplayAttribute"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamUserStats_GetAchievementDisplayAttribute(const char *pchName, const char *pchKey)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUserStats_GetAchievementDisplayAttribute$descriptor() {
        return SteamAPI_ISteamUserStats_GetAchievementDisplayAttribute.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamUserStats_GetAchievementDisplayAttribute(const char *pchName, const char *pchKey)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUserStats_GetAchievementDisplayAttribute$handle() {
        return SteamAPI_ISteamUserStats_GetAchievementDisplayAttribute.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamUserStats_GetAchievementDisplayAttribute(const char *pchName, const char *pchKey)
     * }
     */
    public static MemorySegment SteamAPI_ISteamUserStats_GetAchievementDisplayAttribute(MemorySegment pchName, MemorySegment pchKey) {
        var mh$ = SteamAPI_ISteamUserStats_GetAchievementDisplayAttribute.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUserStats_GetAchievementDisplayAttribute", pchName, pchKey);
            }
            return (MemorySegment)mh$.invokeExact(pchName, pchKey);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUserStats_IndicateAchievementProgress {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUserStats_IndicateAchievementProgress"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_IndicateAchievementProgress(const char *pchName, uint32 nCurProgress, uint32 nMaxProgress)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUserStats_IndicateAchievementProgress$descriptor() {
        return SteamAPI_ISteamUserStats_IndicateAchievementProgress.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_IndicateAchievementProgress(const char *pchName, uint32 nCurProgress, uint32 nMaxProgress)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUserStats_IndicateAchievementProgress$handle() {
        return SteamAPI_ISteamUserStats_IndicateAchievementProgress.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_IndicateAchievementProgress(const char *pchName, uint32 nCurProgress, uint32 nMaxProgress)
     * }
     */
    public static boolean SteamAPI_ISteamUserStats_IndicateAchievementProgress(MemorySegment pchName, int nCurProgress, int nMaxProgress) {
        var mh$ = SteamAPI_ISteamUserStats_IndicateAchievementProgress.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUserStats_IndicateAchievementProgress", pchName, nCurProgress, nMaxProgress);
            }
            return (boolean)mh$.invokeExact(pchName, nCurProgress, nMaxProgress);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUserStats_GetNumAchievements {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUserStats_GetNumAchievements"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamUserStats_GetNumAchievements()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUserStats_GetNumAchievements$descriptor() {
        return SteamAPI_ISteamUserStats_GetNumAchievements.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamUserStats_GetNumAchievements()
     * }
     */
    public static MethodHandle SteamAPI_ISteamUserStats_GetNumAchievements$handle() {
        return SteamAPI_ISteamUserStats_GetNumAchievements.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamUserStats_GetNumAchievements()
     * }
     */
    public static int SteamAPI_ISteamUserStats_GetNumAchievements() {
        var mh$ = SteamAPI_ISteamUserStats_GetNumAchievements.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUserStats_GetNumAchievements");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUserStats_GetAchievementName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUserStats_GetAchievementName"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamUserStats_GetAchievementName(uint32 iAchievement)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUserStats_GetAchievementName$descriptor() {
        return SteamAPI_ISteamUserStats_GetAchievementName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamUserStats_GetAchievementName(uint32 iAchievement)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUserStats_GetAchievementName$handle() {
        return SteamAPI_ISteamUserStats_GetAchievementName.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamUserStats_GetAchievementName(uint32 iAchievement)
     * }
     */
    public static MemorySegment SteamAPI_ISteamUserStats_GetAchievementName(int iAchievement) {
        var mh$ = SteamAPI_ISteamUserStats_GetAchievementName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUserStats_GetAchievementName", iAchievement);
            }
            return (MemorySegment)mh$.invokeExact(iAchievement);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUserStats_RequestUserStats {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUserStats_RequestUserStats"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUserStats_RequestUserStats(uint64_steamid steamIDUser)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUserStats_RequestUserStats$descriptor() {
        return SteamAPI_ISteamUserStats_RequestUserStats.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUserStats_RequestUserStats(uint64_steamid steamIDUser)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUserStats_RequestUserStats$handle() {
        return SteamAPI_ISteamUserStats_RequestUserStats.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUserStats_RequestUserStats(uint64_steamid steamIDUser)
     * }
     */
    public static long SteamAPI_ISteamUserStats_RequestUserStats(long steamIDUser) {
        var mh$ = SteamAPI_ISteamUserStats_RequestUserStats.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUserStats_RequestUserStats", steamIDUser);
            }
            return (long)mh$.invokeExact(steamIDUser);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUserStats_GetUserStatInt32 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUserStats_GetUserStatInt32"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_GetUserStatInt32(uint64_steamid steamIDUser, const char *pchName, int32 *pData)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUserStats_GetUserStatInt32$descriptor() {
        return SteamAPI_ISteamUserStats_GetUserStatInt32.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_GetUserStatInt32(uint64_steamid steamIDUser, const char *pchName, int32 *pData)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUserStats_GetUserStatInt32$handle() {
        return SteamAPI_ISteamUserStats_GetUserStatInt32.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_GetUserStatInt32(uint64_steamid steamIDUser, const char *pchName, int32 *pData)
     * }
     */
    public static boolean SteamAPI_ISteamUserStats_GetUserStatInt32(long steamIDUser, MemorySegment pchName, MemorySegment pData) {
        var mh$ = SteamAPI_ISteamUserStats_GetUserStatInt32.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUserStats_GetUserStatInt32", steamIDUser, pchName, pData);
            }
            return (boolean)mh$.invokeExact(steamIDUser, pchName, pData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUserStats_GetUserStatFloat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUserStats_GetUserStatFloat"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_GetUserStatFloat(uint64_steamid steamIDUser, const char *pchName, float *pData)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUserStats_GetUserStatFloat$descriptor() {
        return SteamAPI_ISteamUserStats_GetUserStatFloat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_GetUserStatFloat(uint64_steamid steamIDUser, const char *pchName, float *pData)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUserStats_GetUserStatFloat$handle() {
        return SteamAPI_ISteamUserStats_GetUserStatFloat.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_GetUserStatFloat(uint64_steamid steamIDUser, const char *pchName, float *pData)
     * }
     */
    public static boolean SteamAPI_ISteamUserStats_GetUserStatFloat(long steamIDUser, MemorySegment pchName, MemorySegment pData) {
        var mh$ = SteamAPI_ISteamUserStats_GetUserStatFloat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUserStats_GetUserStatFloat", steamIDUser, pchName, pData);
            }
            return (boolean)mh$.invokeExact(steamIDUser, pchName, pData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUserStats_GetUserAchievement {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUserStats_GetUserAchievement"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_GetUserAchievement(uint64_steamid steamIDUser, const char *pchName, bool *pbAchieved)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUserStats_GetUserAchievement$descriptor() {
        return SteamAPI_ISteamUserStats_GetUserAchievement.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_GetUserAchievement(uint64_steamid steamIDUser, const char *pchName, bool *pbAchieved)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUserStats_GetUserAchievement$handle() {
        return SteamAPI_ISteamUserStats_GetUserAchievement.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_GetUserAchievement(uint64_steamid steamIDUser, const char *pchName, bool *pbAchieved)
     * }
     */
    public static boolean SteamAPI_ISteamUserStats_GetUserAchievement(long steamIDUser, MemorySegment pchName, MemorySegment pbAchieved) {
        var mh$ = SteamAPI_ISteamUserStats_GetUserAchievement.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUserStats_GetUserAchievement", steamIDUser, pchName, pbAchieved);
            }
            return (boolean)mh$.invokeExact(steamIDUser, pchName, pbAchieved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUserStats_GetUserAchievementAndUnlockTime {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUserStats_GetUserAchievementAndUnlockTime"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_GetUserAchievementAndUnlockTime(uint64_steamid steamIDUser, const char *pchName, bool *pbAchieved, uint32 *punUnlockTime)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUserStats_GetUserAchievementAndUnlockTime$descriptor() {
        return SteamAPI_ISteamUserStats_GetUserAchievementAndUnlockTime.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_GetUserAchievementAndUnlockTime(uint64_steamid steamIDUser, const char *pchName, bool *pbAchieved, uint32 *punUnlockTime)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUserStats_GetUserAchievementAndUnlockTime$handle() {
        return SteamAPI_ISteamUserStats_GetUserAchievementAndUnlockTime.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_GetUserAchievementAndUnlockTime(uint64_steamid steamIDUser, const char *pchName, bool *pbAchieved, uint32 *punUnlockTime)
     * }
     */
    public static boolean SteamAPI_ISteamUserStats_GetUserAchievementAndUnlockTime(long steamIDUser, MemorySegment pchName, MemorySegment pbAchieved, MemorySegment punUnlockTime) {
        var mh$ = SteamAPI_ISteamUserStats_GetUserAchievementAndUnlockTime.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUserStats_GetUserAchievementAndUnlockTime", steamIDUser, pchName, pbAchieved, punUnlockTime);
            }
            return (boolean)mh$.invokeExact(steamIDUser, pchName, pbAchieved, punUnlockTime);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUserStats_ResetAllStats {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUserStats_ResetAllStats"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_ResetAllStats(bool bAchievementsToo)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUserStats_ResetAllStats$descriptor() {
        return SteamAPI_ISteamUserStats_ResetAllStats.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_ResetAllStats(bool bAchievementsToo)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUserStats_ResetAllStats$handle() {
        return SteamAPI_ISteamUserStats_ResetAllStats.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_ResetAllStats(bool bAchievementsToo)
     * }
     */
    public static boolean SteamAPI_ISteamUserStats_ResetAllStats(boolean bAchievementsToo) {
        var mh$ = SteamAPI_ISteamUserStats_ResetAllStats.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUserStats_ResetAllStats", bAchievementsToo);
            }
            return (boolean)mh$.invokeExact(bAchievementsToo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUserStats_FindOrCreateLeaderboard {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUserStats_FindOrCreateLeaderboard"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUserStats_FindOrCreateLeaderboard(const char *pchLeaderboardName, ELeaderboardSortMethod eLeaderboardSortMethod, ELeaderboardDisplayType eLeaderboardDisplayType)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUserStats_FindOrCreateLeaderboard$descriptor() {
        return SteamAPI_ISteamUserStats_FindOrCreateLeaderboard.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUserStats_FindOrCreateLeaderboard(const char *pchLeaderboardName, ELeaderboardSortMethod eLeaderboardSortMethod, ELeaderboardDisplayType eLeaderboardDisplayType)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUserStats_FindOrCreateLeaderboard$handle() {
        return SteamAPI_ISteamUserStats_FindOrCreateLeaderboard.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUserStats_FindOrCreateLeaderboard(const char *pchLeaderboardName, ELeaderboardSortMethod eLeaderboardSortMethod, ELeaderboardDisplayType eLeaderboardDisplayType)
     * }
     */
    public static long SteamAPI_ISteamUserStats_FindOrCreateLeaderboard(MemorySegment pchLeaderboardName, int eLeaderboardSortMethod, int eLeaderboardDisplayType) {
        var mh$ = SteamAPI_ISteamUserStats_FindOrCreateLeaderboard.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUserStats_FindOrCreateLeaderboard", pchLeaderboardName, eLeaderboardSortMethod, eLeaderboardDisplayType);
            }
            return (long)mh$.invokeExact(pchLeaderboardName, eLeaderboardSortMethod, eLeaderboardDisplayType);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUserStats_FindLeaderboard {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUserStats_FindLeaderboard"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUserStats_FindLeaderboard(const char *pchLeaderboardName)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUserStats_FindLeaderboard$descriptor() {
        return SteamAPI_ISteamUserStats_FindLeaderboard.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUserStats_FindLeaderboard(const char *pchLeaderboardName)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUserStats_FindLeaderboard$handle() {
        return SteamAPI_ISteamUserStats_FindLeaderboard.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUserStats_FindLeaderboard(const char *pchLeaderboardName)
     * }
     */
    public static long SteamAPI_ISteamUserStats_FindLeaderboard(MemorySegment pchLeaderboardName) {
        var mh$ = SteamAPI_ISteamUserStats_FindLeaderboard.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUserStats_FindLeaderboard", pchLeaderboardName);
            }
            return (long)mh$.invokeExact(pchLeaderboardName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUserStats_GetLeaderboardName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUserStats_GetLeaderboardName"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamUserStats_GetLeaderboardName(SteamLeaderboard_t hSteamLeaderboard)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUserStats_GetLeaderboardName$descriptor() {
        return SteamAPI_ISteamUserStats_GetLeaderboardName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamUserStats_GetLeaderboardName(SteamLeaderboard_t hSteamLeaderboard)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUserStats_GetLeaderboardName$handle() {
        return SteamAPI_ISteamUserStats_GetLeaderboardName.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamUserStats_GetLeaderboardName(SteamLeaderboard_t hSteamLeaderboard)
     * }
     */
    public static MemorySegment SteamAPI_ISteamUserStats_GetLeaderboardName(long hSteamLeaderboard) {
        var mh$ = SteamAPI_ISteamUserStats_GetLeaderboardName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUserStats_GetLeaderboardName", hSteamLeaderboard);
            }
            return (MemorySegment)mh$.invokeExact(hSteamLeaderboard);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUserStats_GetLeaderboardEntryCount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUserStats_GetLeaderboardEntryCount"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamUserStats_GetLeaderboardEntryCount(SteamLeaderboard_t hSteamLeaderboard)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUserStats_GetLeaderboardEntryCount$descriptor() {
        return SteamAPI_ISteamUserStats_GetLeaderboardEntryCount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamUserStats_GetLeaderboardEntryCount(SteamLeaderboard_t hSteamLeaderboard)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUserStats_GetLeaderboardEntryCount$handle() {
        return SteamAPI_ISteamUserStats_GetLeaderboardEntryCount.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int SteamAPI_ISteamUserStats_GetLeaderboardEntryCount(SteamLeaderboard_t hSteamLeaderboard)
     * }
     */
    public static int SteamAPI_ISteamUserStats_GetLeaderboardEntryCount(long hSteamLeaderboard) {
        var mh$ = SteamAPI_ISteamUserStats_GetLeaderboardEntryCount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUserStats_GetLeaderboardEntryCount", hSteamLeaderboard);
            }
            return (int)mh$.invokeExact(hSteamLeaderboard);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUserStats_GetLeaderboardSortMethod {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUserStats_GetLeaderboardSortMethod"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ELeaderboardSortMethod SteamAPI_ISteamUserStats_GetLeaderboardSortMethod(SteamLeaderboard_t hSteamLeaderboard)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUserStats_GetLeaderboardSortMethod$descriptor() {
        return SteamAPI_ISteamUserStats_GetLeaderboardSortMethod.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ELeaderboardSortMethod SteamAPI_ISteamUserStats_GetLeaderboardSortMethod(SteamLeaderboard_t hSteamLeaderboard)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUserStats_GetLeaderboardSortMethod$handle() {
        return SteamAPI_ISteamUserStats_GetLeaderboardSortMethod.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ELeaderboardSortMethod SteamAPI_ISteamUserStats_GetLeaderboardSortMethod(SteamLeaderboard_t hSteamLeaderboard)
     * }
     */
    public static int SteamAPI_ISteamUserStats_GetLeaderboardSortMethod(long hSteamLeaderboard) {
        var mh$ = SteamAPI_ISteamUserStats_GetLeaderboardSortMethod.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUserStats_GetLeaderboardSortMethod", hSteamLeaderboard);
            }
            return (int)mh$.invokeExact(hSteamLeaderboard);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUserStats_GetLeaderboardDisplayType {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUserStats_GetLeaderboardDisplayType"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ELeaderboardDisplayType SteamAPI_ISteamUserStats_GetLeaderboardDisplayType(SteamLeaderboard_t hSteamLeaderboard)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUserStats_GetLeaderboardDisplayType$descriptor() {
        return SteamAPI_ISteamUserStats_GetLeaderboardDisplayType.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ELeaderboardDisplayType SteamAPI_ISteamUserStats_GetLeaderboardDisplayType(SteamLeaderboard_t hSteamLeaderboard)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUserStats_GetLeaderboardDisplayType$handle() {
        return SteamAPI_ISteamUserStats_GetLeaderboardDisplayType.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ELeaderboardDisplayType SteamAPI_ISteamUserStats_GetLeaderboardDisplayType(SteamLeaderboard_t hSteamLeaderboard)
     * }
     */
    public static int SteamAPI_ISteamUserStats_GetLeaderboardDisplayType(long hSteamLeaderboard) {
        var mh$ = SteamAPI_ISteamUserStats_GetLeaderboardDisplayType.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUserStats_GetLeaderboardDisplayType", hSteamLeaderboard);
            }
            return (int)mh$.invokeExact(hSteamLeaderboard);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUserStats_DownloadLeaderboardEntries {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUserStats_DownloadLeaderboardEntries"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUserStats_DownloadLeaderboardEntries(SteamLeaderboard_t hSteamLeaderboard, ELeaderboardDataRequest eLeaderboardDataRequest, int nRangeStart, int nRangeEnd)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUserStats_DownloadLeaderboardEntries$descriptor() {
        return SteamAPI_ISteamUserStats_DownloadLeaderboardEntries.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUserStats_DownloadLeaderboardEntries(SteamLeaderboard_t hSteamLeaderboard, ELeaderboardDataRequest eLeaderboardDataRequest, int nRangeStart, int nRangeEnd)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUserStats_DownloadLeaderboardEntries$handle() {
        return SteamAPI_ISteamUserStats_DownloadLeaderboardEntries.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUserStats_DownloadLeaderboardEntries(SteamLeaderboard_t hSteamLeaderboard, ELeaderboardDataRequest eLeaderboardDataRequest, int nRangeStart, int nRangeEnd)
     * }
     */
    public static long SteamAPI_ISteamUserStats_DownloadLeaderboardEntries(long hSteamLeaderboard, int eLeaderboardDataRequest, int nRangeStart, int nRangeEnd) {
        var mh$ = SteamAPI_ISteamUserStats_DownloadLeaderboardEntries.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUserStats_DownloadLeaderboardEntries", hSteamLeaderboard, eLeaderboardDataRequest, nRangeStart, nRangeEnd);
            }
            return (long)mh$.invokeExact(hSteamLeaderboard, eLeaderboardDataRequest, nRangeStart, nRangeEnd);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUserStats_DownloadLeaderboardEntriesForUsers {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUserStats_DownloadLeaderboardEntriesForUsers"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUserStats_DownloadLeaderboardEntriesForUsers(SteamLeaderboard_t hSteamLeaderboard, CSteamID *prgUsers, int cUsers)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUserStats_DownloadLeaderboardEntriesForUsers$descriptor() {
        return SteamAPI_ISteamUserStats_DownloadLeaderboardEntriesForUsers.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUserStats_DownloadLeaderboardEntriesForUsers(SteamLeaderboard_t hSteamLeaderboard, CSteamID *prgUsers, int cUsers)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUserStats_DownloadLeaderboardEntriesForUsers$handle() {
        return SteamAPI_ISteamUserStats_DownloadLeaderboardEntriesForUsers.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUserStats_DownloadLeaderboardEntriesForUsers(SteamLeaderboard_t hSteamLeaderboard, CSteamID *prgUsers, int cUsers)
     * }
     */
    public static long SteamAPI_ISteamUserStats_DownloadLeaderboardEntriesForUsers(long hSteamLeaderboard, MemorySegment prgUsers, int cUsers) {
        var mh$ = SteamAPI_ISteamUserStats_DownloadLeaderboardEntriesForUsers.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUserStats_DownloadLeaderboardEntriesForUsers", hSteamLeaderboard, prgUsers, cUsers);
            }
            return (long)mh$.invokeExact(hSteamLeaderboard, prgUsers, cUsers);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUserStats_GetDownloadedLeaderboardEntry {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUserStats_GetDownloadedLeaderboardEntry"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_GetDownloadedLeaderboardEntry(SteamLeaderboardEntries_t hSteamLeaderboardEntries, int index, LeaderboardEntry_t *pLeaderboardEntry, int32 *pDetails, int cDetailsMax)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUserStats_GetDownloadedLeaderboardEntry$descriptor() {
        return SteamAPI_ISteamUserStats_GetDownloadedLeaderboardEntry.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_GetDownloadedLeaderboardEntry(SteamLeaderboardEntries_t hSteamLeaderboardEntries, int index, LeaderboardEntry_t *pLeaderboardEntry, int32 *pDetails, int cDetailsMax)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUserStats_GetDownloadedLeaderboardEntry$handle() {
        return SteamAPI_ISteamUserStats_GetDownloadedLeaderboardEntry.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_GetDownloadedLeaderboardEntry(SteamLeaderboardEntries_t hSteamLeaderboardEntries, int index, LeaderboardEntry_t *pLeaderboardEntry, int32 *pDetails, int cDetailsMax)
     * }
     */
    public static boolean SteamAPI_ISteamUserStats_GetDownloadedLeaderboardEntry(long hSteamLeaderboardEntries, int index, MemorySegment pLeaderboardEntry, MemorySegment pDetails, int cDetailsMax) {
        var mh$ = SteamAPI_ISteamUserStats_GetDownloadedLeaderboardEntry.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUserStats_GetDownloadedLeaderboardEntry", hSteamLeaderboardEntries, index, pLeaderboardEntry, pDetails, cDetailsMax);
            }
            return (boolean)mh$.invokeExact(hSteamLeaderboardEntries, index, pLeaderboardEntry, pDetails, cDetailsMax);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUserStats_UploadLeaderboardScore {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUserStats_UploadLeaderboardScore"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUserStats_UploadLeaderboardScore(SteamLeaderboard_t hSteamLeaderboard, ELeaderboardUploadScoreMethod eLeaderboardUploadScoreMethod, int32 nScore, const int32 *pScoreDetails, int cScoreDetailsCount)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUserStats_UploadLeaderboardScore$descriptor() {
        return SteamAPI_ISteamUserStats_UploadLeaderboardScore.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUserStats_UploadLeaderboardScore(SteamLeaderboard_t hSteamLeaderboard, ELeaderboardUploadScoreMethod eLeaderboardUploadScoreMethod, int32 nScore, const int32 *pScoreDetails, int cScoreDetailsCount)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUserStats_UploadLeaderboardScore$handle() {
        return SteamAPI_ISteamUserStats_UploadLeaderboardScore.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUserStats_UploadLeaderboardScore(SteamLeaderboard_t hSteamLeaderboard, ELeaderboardUploadScoreMethod eLeaderboardUploadScoreMethod, int32 nScore, const int32 *pScoreDetails, int cScoreDetailsCount)
     * }
     */
    public static long SteamAPI_ISteamUserStats_UploadLeaderboardScore(long hSteamLeaderboard, int eLeaderboardUploadScoreMethod, int nScore, MemorySegment pScoreDetails, int cScoreDetailsCount) {
        var mh$ = SteamAPI_ISteamUserStats_UploadLeaderboardScore.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUserStats_UploadLeaderboardScore", hSteamLeaderboard, eLeaderboardUploadScoreMethod, nScore, pScoreDetails, cScoreDetailsCount);
            }
            return (long)mh$.invokeExact(hSteamLeaderboard, eLeaderboardUploadScoreMethod, nScore, pScoreDetails, cScoreDetailsCount);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUserStats_AttachLeaderboardUGC {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUserStats_AttachLeaderboardUGC"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUserStats_AttachLeaderboardUGC(SteamLeaderboard_t hSteamLeaderboard, UGCHandle_t hUGC)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUserStats_AttachLeaderboardUGC$descriptor() {
        return SteamAPI_ISteamUserStats_AttachLeaderboardUGC.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUserStats_AttachLeaderboardUGC(SteamLeaderboard_t hSteamLeaderboard, UGCHandle_t hUGC)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUserStats_AttachLeaderboardUGC$handle() {
        return SteamAPI_ISteamUserStats_AttachLeaderboardUGC.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUserStats_AttachLeaderboardUGC(SteamLeaderboard_t hSteamLeaderboard, UGCHandle_t hUGC)
     * }
     */
    public static long SteamAPI_ISteamUserStats_AttachLeaderboardUGC(long hSteamLeaderboard, long hUGC) {
        var mh$ = SteamAPI_ISteamUserStats_AttachLeaderboardUGC.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUserStats_AttachLeaderboardUGC", hSteamLeaderboard, hUGC);
            }
            return (long)mh$.invokeExact(hSteamLeaderboard, hUGC);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUserStats_GetNumberOfCurrentPlayers {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_LONG_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUserStats_GetNumberOfCurrentPlayers"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUserStats_GetNumberOfCurrentPlayers()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUserStats_GetNumberOfCurrentPlayers$descriptor() {
        return SteamAPI_ISteamUserStats_GetNumberOfCurrentPlayers.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUserStats_GetNumberOfCurrentPlayers()
     * }
     */
    public static MethodHandle SteamAPI_ISteamUserStats_GetNumberOfCurrentPlayers$handle() {
        return SteamAPI_ISteamUserStats_GetNumberOfCurrentPlayers.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUserStats_GetNumberOfCurrentPlayers()
     * }
     */
    public static long SteamAPI_ISteamUserStats_GetNumberOfCurrentPlayers() {
        var mh$ = SteamAPI_ISteamUserStats_GetNumberOfCurrentPlayers.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUserStats_GetNumberOfCurrentPlayers");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUserStats_RequestGlobalAchievementPercentages {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_LONG_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUserStats_RequestGlobalAchievementPercentages"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUserStats_RequestGlobalAchievementPercentages()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUserStats_RequestGlobalAchievementPercentages$descriptor() {
        return SteamAPI_ISteamUserStats_RequestGlobalAchievementPercentages.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUserStats_RequestGlobalAchievementPercentages()
     * }
     */
    public static MethodHandle SteamAPI_ISteamUserStats_RequestGlobalAchievementPercentages$handle() {
        return SteamAPI_ISteamUserStats_RequestGlobalAchievementPercentages.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUserStats_RequestGlobalAchievementPercentages()
     * }
     */
    public static long SteamAPI_ISteamUserStats_RequestGlobalAchievementPercentages() {
        var mh$ = SteamAPI_ISteamUserStats_RequestGlobalAchievementPercentages.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUserStats_RequestGlobalAchievementPercentages");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUserStats_GetMostAchievedAchievementInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUserStats_GetMostAchievedAchievementInfo"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamUserStats_GetMostAchievedAchievementInfo(char *pchName, uint32 unNameBufLen, float *pflPercent, bool *pbAchieved)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUserStats_GetMostAchievedAchievementInfo$descriptor() {
        return SteamAPI_ISteamUserStats_GetMostAchievedAchievementInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamUserStats_GetMostAchievedAchievementInfo(char *pchName, uint32 unNameBufLen, float *pflPercent, bool *pbAchieved)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUserStats_GetMostAchievedAchievementInfo$handle() {
        return SteamAPI_ISteamUserStats_GetMostAchievedAchievementInfo.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int SteamAPI_ISteamUserStats_GetMostAchievedAchievementInfo(char *pchName, uint32 unNameBufLen, float *pflPercent, bool *pbAchieved)
     * }
     */
    public static int SteamAPI_ISteamUserStats_GetMostAchievedAchievementInfo(MemorySegment pchName, int unNameBufLen, MemorySegment pflPercent, MemorySegment pbAchieved) {
        var mh$ = SteamAPI_ISteamUserStats_GetMostAchievedAchievementInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUserStats_GetMostAchievedAchievementInfo", pchName, unNameBufLen, pflPercent, pbAchieved);
            }
            return (int)mh$.invokeExact(pchName, unNameBufLen, pflPercent, pbAchieved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUserStats_GetNextMostAchievedAchievementInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUserStats_GetNextMostAchievedAchievementInfo"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamUserStats_GetNextMostAchievedAchievementInfo(int iIteratorPrevious, char *pchName, uint32 unNameBufLen, float *pflPercent, bool *pbAchieved)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUserStats_GetNextMostAchievedAchievementInfo$descriptor() {
        return SteamAPI_ISteamUserStats_GetNextMostAchievedAchievementInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamUserStats_GetNextMostAchievedAchievementInfo(int iIteratorPrevious, char *pchName, uint32 unNameBufLen, float *pflPercent, bool *pbAchieved)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUserStats_GetNextMostAchievedAchievementInfo$handle() {
        return SteamAPI_ISteamUserStats_GetNextMostAchievedAchievementInfo.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int SteamAPI_ISteamUserStats_GetNextMostAchievedAchievementInfo(int iIteratorPrevious, char *pchName, uint32 unNameBufLen, float *pflPercent, bool *pbAchieved)
     * }
     */
    public static int SteamAPI_ISteamUserStats_GetNextMostAchievedAchievementInfo(int iIteratorPrevious, MemorySegment pchName, int unNameBufLen, MemorySegment pflPercent, MemorySegment pbAchieved) {
        var mh$ = SteamAPI_ISteamUserStats_GetNextMostAchievedAchievementInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUserStats_GetNextMostAchievedAchievementInfo", iIteratorPrevious, pchName, unNameBufLen, pflPercent, pbAchieved);
            }
            return (int)mh$.invokeExact(iIteratorPrevious, pchName, unNameBufLen, pflPercent, pbAchieved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUserStats_GetAchievementAchievedPercent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUserStats_GetAchievementAchievedPercent"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_GetAchievementAchievedPercent(const char *pchName, float *pflPercent)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUserStats_GetAchievementAchievedPercent$descriptor() {
        return SteamAPI_ISteamUserStats_GetAchievementAchievedPercent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_GetAchievementAchievedPercent(const char *pchName, float *pflPercent)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUserStats_GetAchievementAchievedPercent$handle() {
        return SteamAPI_ISteamUserStats_GetAchievementAchievedPercent.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_GetAchievementAchievedPercent(const char *pchName, float *pflPercent)
     * }
     */
    public static boolean SteamAPI_ISteamUserStats_GetAchievementAchievedPercent(MemorySegment pchName, MemorySegment pflPercent) {
        var mh$ = SteamAPI_ISteamUserStats_GetAchievementAchievedPercent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUserStats_GetAchievementAchievedPercent", pchName, pflPercent);
            }
            return (boolean)mh$.invokeExact(pchName, pflPercent);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUserStats_RequestGlobalStats {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUserStats_RequestGlobalStats"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUserStats_RequestGlobalStats(int nHistoryDays)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUserStats_RequestGlobalStats$descriptor() {
        return SteamAPI_ISteamUserStats_RequestGlobalStats.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUserStats_RequestGlobalStats(int nHistoryDays)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUserStats_RequestGlobalStats$handle() {
        return SteamAPI_ISteamUserStats_RequestGlobalStats.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUserStats_RequestGlobalStats(int nHistoryDays)
     * }
     */
    public static long SteamAPI_ISteamUserStats_RequestGlobalStats(int nHistoryDays) {
        var mh$ = SteamAPI_ISteamUserStats_RequestGlobalStats.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUserStats_RequestGlobalStats", nHistoryDays);
            }
            return (long)mh$.invokeExact(nHistoryDays);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUserStats_GetGlobalStatInt64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUserStats_GetGlobalStatInt64"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_GetGlobalStatInt64(const char *pchStatName, int64 *pData)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUserStats_GetGlobalStatInt64$descriptor() {
        return SteamAPI_ISteamUserStats_GetGlobalStatInt64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_GetGlobalStatInt64(const char *pchStatName, int64 *pData)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUserStats_GetGlobalStatInt64$handle() {
        return SteamAPI_ISteamUserStats_GetGlobalStatInt64.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_GetGlobalStatInt64(const char *pchStatName, int64 *pData)
     * }
     */
    public static boolean SteamAPI_ISteamUserStats_GetGlobalStatInt64(MemorySegment pchStatName, MemorySegment pData) {
        var mh$ = SteamAPI_ISteamUserStats_GetGlobalStatInt64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUserStats_GetGlobalStatInt64", pchStatName, pData);
            }
            return (boolean)mh$.invokeExact(pchStatName, pData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUserStats_GetGlobalStatDouble {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUserStats_GetGlobalStatDouble"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_GetGlobalStatDouble(const char *pchStatName, double *pData)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUserStats_GetGlobalStatDouble$descriptor() {
        return SteamAPI_ISteamUserStats_GetGlobalStatDouble.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_GetGlobalStatDouble(const char *pchStatName, double *pData)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUserStats_GetGlobalStatDouble$handle() {
        return SteamAPI_ISteamUserStats_GetGlobalStatDouble.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_GetGlobalStatDouble(const char *pchStatName, double *pData)
     * }
     */
    public static boolean SteamAPI_ISteamUserStats_GetGlobalStatDouble(MemorySegment pchStatName, MemorySegment pData) {
        var mh$ = SteamAPI_ISteamUserStats_GetGlobalStatDouble.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUserStats_GetGlobalStatDouble", pchStatName, pData);
            }
            return (boolean)mh$.invokeExact(pchStatName, pData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUserStats_GetGlobalStatHistoryInt64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUserStats_GetGlobalStatHistoryInt64"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int32 SteamAPI_ISteamUserStats_GetGlobalStatHistoryInt64(const char *pchStatName, int64 *pData, uint32 cubData)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUserStats_GetGlobalStatHistoryInt64$descriptor() {
        return SteamAPI_ISteamUserStats_GetGlobalStatHistoryInt64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int32 SteamAPI_ISteamUserStats_GetGlobalStatHistoryInt64(const char *pchStatName, int64 *pData, uint32 cubData)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUserStats_GetGlobalStatHistoryInt64$handle() {
        return SteamAPI_ISteamUserStats_GetGlobalStatHistoryInt64.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int32 SteamAPI_ISteamUserStats_GetGlobalStatHistoryInt64(const char *pchStatName, int64 *pData, uint32 cubData)
     * }
     */
    public static int SteamAPI_ISteamUserStats_GetGlobalStatHistoryInt64(MemorySegment pchStatName, MemorySegment pData, int cubData) {
        var mh$ = SteamAPI_ISteamUserStats_GetGlobalStatHistoryInt64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUserStats_GetGlobalStatHistoryInt64", pchStatName, pData, cubData);
            }
            return (int)mh$.invokeExact(pchStatName, pData, cubData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUserStats_GetGlobalStatHistoryDouble {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUserStats_GetGlobalStatHistoryDouble"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int32 SteamAPI_ISteamUserStats_GetGlobalStatHistoryDouble(const char *pchStatName, double *pData, uint32 cubData)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUserStats_GetGlobalStatHistoryDouble$descriptor() {
        return SteamAPI_ISteamUserStats_GetGlobalStatHistoryDouble.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int32 SteamAPI_ISteamUserStats_GetGlobalStatHistoryDouble(const char *pchStatName, double *pData, uint32 cubData)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUserStats_GetGlobalStatHistoryDouble$handle() {
        return SteamAPI_ISteamUserStats_GetGlobalStatHistoryDouble.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int32 SteamAPI_ISteamUserStats_GetGlobalStatHistoryDouble(const char *pchStatName, double *pData, uint32 cubData)
     * }
     */
    public static int SteamAPI_ISteamUserStats_GetGlobalStatHistoryDouble(MemorySegment pchStatName, MemorySegment pData, int cubData) {
        var mh$ = SteamAPI_ISteamUserStats_GetGlobalStatHistoryDouble.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUserStats_GetGlobalStatHistoryDouble", pchStatName, pData, cubData);
            }
            return (int)mh$.invokeExact(pchStatName, pData, cubData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUserStats_GetAchievementProgressLimitsInt32 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUserStats_GetAchievementProgressLimitsInt32"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_GetAchievementProgressLimitsInt32(const char *pchName, int32 *pnMinProgress, int32 *pnMaxProgress)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUserStats_GetAchievementProgressLimitsInt32$descriptor() {
        return SteamAPI_ISteamUserStats_GetAchievementProgressLimitsInt32.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_GetAchievementProgressLimitsInt32(const char *pchName, int32 *pnMinProgress, int32 *pnMaxProgress)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUserStats_GetAchievementProgressLimitsInt32$handle() {
        return SteamAPI_ISteamUserStats_GetAchievementProgressLimitsInt32.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_GetAchievementProgressLimitsInt32(const char *pchName, int32 *pnMinProgress, int32 *pnMaxProgress)
     * }
     */
    public static boolean SteamAPI_ISteamUserStats_GetAchievementProgressLimitsInt32(MemorySegment pchName, MemorySegment pnMinProgress, MemorySegment pnMaxProgress) {
        var mh$ = SteamAPI_ISteamUserStats_GetAchievementProgressLimitsInt32.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUserStats_GetAchievementProgressLimitsInt32", pchName, pnMinProgress, pnMaxProgress);
            }
            return (boolean)mh$.invokeExact(pchName, pnMinProgress, pnMaxProgress);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUserStats_GetAchievementProgressLimitsFloat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUserStats_GetAchievementProgressLimitsFloat"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_GetAchievementProgressLimitsFloat(const char *pchName, float *pfMinProgress, float *pfMaxProgress)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUserStats_GetAchievementProgressLimitsFloat$descriptor() {
        return SteamAPI_ISteamUserStats_GetAchievementProgressLimitsFloat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_GetAchievementProgressLimitsFloat(const char *pchName, float *pfMinProgress, float *pfMaxProgress)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUserStats_GetAchievementProgressLimitsFloat$handle() {
        return SteamAPI_ISteamUserStats_GetAchievementProgressLimitsFloat.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUserStats_GetAchievementProgressLimitsFloat(const char *pchName, float *pfMinProgress, float *pfMaxProgress)
     * }
     */
    public static boolean SteamAPI_ISteamUserStats_GetAchievementProgressLimitsFloat(MemorySegment pchName, MemorySegment pfMinProgress, MemorySegment pfMaxProgress) {
        var mh$ = SteamAPI_ISteamUserStats_GetAchievementProgressLimitsFloat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUserStats_GetAchievementProgressLimitsFloat", pchName, pfMinProgress, pfMaxProgress);
            }
            return (boolean)mh$.invokeExact(pchName, pfMinProgress, pfMaxProgress);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamApps_BIsSubscribed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamApps_BIsSubscribed"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamApps_BIsSubscribed()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamApps_BIsSubscribed$descriptor() {
        return SteamAPI_ISteamApps_BIsSubscribed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamApps_BIsSubscribed()
     * }
     */
    public static MethodHandle SteamAPI_ISteamApps_BIsSubscribed$handle() {
        return SteamAPI_ISteamApps_BIsSubscribed.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamApps_BIsSubscribed()
     * }
     */
    public static boolean SteamAPI_ISteamApps_BIsSubscribed() {
        var mh$ = SteamAPI_ISteamApps_BIsSubscribed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamApps_BIsSubscribed");
            }
            return (boolean)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamApps_BIsLowViolence {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamApps_BIsLowViolence"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamApps_BIsLowViolence()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamApps_BIsLowViolence$descriptor() {
        return SteamAPI_ISteamApps_BIsLowViolence.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamApps_BIsLowViolence()
     * }
     */
    public static MethodHandle SteamAPI_ISteamApps_BIsLowViolence$handle() {
        return SteamAPI_ISteamApps_BIsLowViolence.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamApps_BIsLowViolence()
     * }
     */
    public static boolean SteamAPI_ISteamApps_BIsLowViolence() {
        var mh$ = SteamAPI_ISteamApps_BIsLowViolence.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamApps_BIsLowViolence");
            }
            return (boolean)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamApps_BIsCybercafe {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamApps_BIsCybercafe"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamApps_BIsCybercafe()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamApps_BIsCybercafe$descriptor() {
        return SteamAPI_ISteamApps_BIsCybercafe.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamApps_BIsCybercafe()
     * }
     */
    public static MethodHandle SteamAPI_ISteamApps_BIsCybercafe$handle() {
        return SteamAPI_ISteamApps_BIsCybercafe.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamApps_BIsCybercafe()
     * }
     */
    public static boolean SteamAPI_ISteamApps_BIsCybercafe() {
        var mh$ = SteamAPI_ISteamApps_BIsCybercafe.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamApps_BIsCybercafe");
            }
            return (boolean)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamApps_BIsVACBanned {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamApps_BIsVACBanned"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamApps_BIsVACBanned()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamApps_BIsVACBanned$descriptor() {
        return SteamAPI_ISteamApps_BIsVACBanned.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamApps_BIsVACBanned()
     * }
     */
    public static MethodHandle SteamAPI_ISteamApps_BIsVACBanned$handle() {
        return SteamAPI_ISteamApps_BIsVACBanned.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamApps_BIsVACBanned()
     * }
     */
    public static boolean SteamAPI_ISteamApps_BIsVACBanned() {
        var mh$ = SteamAPI_ISteamApps_BIsVACBanned.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamApps_BIsVACBanned");
            }
            return (boolean)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamApps_GetCurrentGameLanguage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamApps_GetCurrentGameLanguage"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamApps_GetCurrentGameLanguage()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamApps_GetCurrentGameLanguage$descriptor() {
        return SteamAPI_ISteamApps_GetCurrentGameLanguage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamApps_GetCurrentGameLanguage()
     * }
     */
    public static MethodHandle SteamAPI_ISteamApps_GetCurrentGameLanguage$handle() {
        return SteamAPI_ISteamApps_GetCurrentGameLanguage.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamApps_GetCurrentGameLanguage()
     * }
     */
    public static MemorySegment SteamAPI_ISteamApps_GetCurrentGameLanguage() {
        var mh$ = SteamAPI_ISteamApps_GetCurrentGameLanguage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamApps_GetCurrentGameLanguage");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamApps_GetAvailableGameLanguages {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamApps_GetAvailableGameLanguages"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamApps_GetAvailableGameLanguages()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamApps_GetAvailableGameLanguages$descriptor() {
        return SteamAPI_ISteamApps_GetAvailableGameLanguages.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamApps_GetAvailableGameLanguages()
     * }
     */
    public static MethodHandle SteamAPI_ISteamApps_GetAvailableGameLanguages$handle() {
        return SteamAPI_ISteamApps_GetAvailableGameLanguages.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamApps_GetAvailableGameLanguages()
     * }
     */
    public static MemorySegment SteamAPI_ISteamApps_GetAvailableGameLanguages() {
        var mh$ = SteamAPI_ISteamApps_GetAvailableGameLanguages.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamApps_GetAvailableGameLanguages");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamApps_BIsSubscribedApp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamApps_BIsSubscribedApp"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamApps_BIsSubscribedApp(AppId_t appID)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamApps_BIsSubscribedApp$descriptor() {
        return SteamAPI_ISteamApps_BIsSubscribedApp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamApps_BIsSubscribedApp(AppId_t appID)
     * }
     */
    public static MethodHandle SteamAPI_ISteamApps_BIsSubscribedApp$handle() {
        return SteamAPI_ISteamApps_BIsSubscribedApp.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamApps_BIsSubscribedApp(AppId_t appID)
     * }
     */
    public static boolean SteamAPI_ISteamApps_BIsSubscribedApp(int appID) {
        var mh$ = SteamAPI_ISteamApps_BIsSubscribedApp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamApps_BIsSubscribedApp", appID);
            }
            return (boolean)mh$.invokeExact(appID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamApps_BIsDlcInstalled {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamApps_BIsDlcInstalled"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamApps_BIsDlcInstalled(AppId_t appID)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamApps_BIsDlcInstalled$descriptor() {
        return SteamAPI_ISteamApps_BIsDlcInstalled.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamApps_BIsDlcInstalled(AppId_t appID)
     * }
     */
    public static MethodHandle SteamAPI_ISteamApps_BIsDlcInstalled$handle() {
        return SteamAPI_ISteamApps_BIsDlcInstalled.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamApps_BIsDlcInstalled(AppId_t appID)
     * }
     */
    public static boolean SteamAPI_ISteamApps_BIsDlcInstalled(int appID) {
        var mh$ = SteamAPI_ISteamApps_BIsDlcInstalled.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamApps_BIsDlcInstalled", appID);
            }
            return (boolean)mh$.invokeExact(appID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamApps_GetEarliestPurchaseUnixTime {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamApps_GetEarliestPurchaseUnixTime"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamApps_GetEarliestPurchaseUnixTime(AppId_t nAppID)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamApps_GetEarliestPurchaseUnixTime$descriptor() {
        return SteamAPI_ISteamApps_GetEarliestPurchaseUnixTime.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamApps_GetEarliestPurchaseUnixTime(AppId_t nAppID)
     * }
     */
    public static MethodHandle SteamAPI_ISteamApps_GetEarliestPurchaseUnixTime$handle() {
        return SteamAPI_ISteamApps_GetEarliestPurchaseUnixTime.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamApps_GetEarliestPurchaseUnixTime(AppId_t nAppID)
     * }
     */
    public static int SteamAPI_ISteamApps_GetEarliestPurchaseUnixTime(int nAppID) {
        var mh$ = SteamAPI_ISteamApps_GetEarliestPurchaseUnixTime.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamApps_GetEarliestPurchaseUnixTime", nAppID);
            }
            return (int)mh$.invokeExact(nAppID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamApps_BIsSubscribedFromFreeWeekend {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamApps_BIsSubscribedFromFreeWeekend"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamApps_BIsSubscribedFromFreeWeekend()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamApps_BIsSubscribedFromFreeWeekend$descriptor() {
        return SteamAPI_ISteamApps_BIsSubscribedFromFreeWeekend.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamApps_BIsSubscribedFromFreeWeekend()
     * }
     */
    public static MethodHandle SteamAPI_ISteamApps_BIsSubscribedFromFreeWeekend$handle() {
        return SteamAPI_ISteamApps_BIsSubscribedFromFreeWeekend.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamApps_BIsSubscribedFromFreeWeekend()
     * }
     */
    public static boolean SteamAPI_ISteamApps_BIsSubscribedFromFreeWeekend() {
        var mh$ = SteamAPI_ISteamApps_BIsSubscribedFromFreeWeekend.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamApps_BIsSubscribedFromFreeWeekend");
            }
            return (boolean)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamApps_GetDLCCount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamApps_GetDLCCount"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamApps_GetDLCCount()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamApps_GetDLCCount$descriptor() {
        return SteamAPI_ISteamApps_GetDLCCount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamApps_GetDLCCount()
     * }
     */
    public static MethodHandle SteamAPI_ISteamApps_GetDLCCount$handle() {
        return SteamAPI_ISteamApps_GetDLCCount.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int SteamAPI_ISteamApps_GetDLCCount()
     * }
     */
    public static int SteamAPI_ISteamApps_GetDLCCount() {
        var mh$ = SteamAPI_ISteamApps_GetDLCCount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamApps_GetDLCCount");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamApps_BGetDLCDataByIndex {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamApps_BGetDLCDataByIndex"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamApps_BGetDLCDataByIndex(int iDLC, AppId_t *pAppID, bool *pbAvailable, char *pchName, int cchNameBufferSize)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamApps_BGetDLCDataByIndex$descriptor() {
        return SteamAPI_ISteamApps_BGetDLCDataByIndex.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamApps_BGetDLCDataByIndex(int iDLC, AppId_t *pAppID, bool *pbAvailable, char *pchName, int cchNameBufferSize)
     * }
     */
    public static MethodHandle SteamAPI_ISteamApps_BGetDLCDataByIndex$handle() {
        return SteamAPI_ISteamApps_BGetDLCDataByIndex.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamApps_BGetDLCDataByIndex(int iDLC, AppId_t *pAppID, bool *pbAvailable, char *pchName, int cchNameBufferSize)
     * }
     */
    public static boolean SteamAPI_ISteamApps_BGetDLCDataByIndex(int iDLC, MemorySegment pAppID, MemorySegment pbAvailable, MemorySegment pchName, int cchNameBufferSize) {
        var mh$ = SteamAPI_ISteamApps_BGetDLCDataByIndex.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamApps_BGetDLCDataByIndex", iDLC, pAppID, pbAvailable, pchName, cchNameBufferSize);
            }
            return (boolean)mh$.invokeExact(iDLC, pAppID, pbAvailable, pchName, cchNameBufferSize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamApps_InstallDLC {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamApps_InstallDLC"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamApps_InstallDLC(AppId_t nAppID)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamApps_InstallDLC$descriptor() {
        return SteamAPI_ISteamApps_InstallDLC.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamApps_InstallDLC(AppId_t nAppID)
     * }
     */
    public static MethodHandle SteamAPI_ISteamApps_InstallDLC$handle() {
        return SteamAPI_ISteamApps_InstallDLC.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamApps_InstallDLC(AppId_t nAppID)
     * }
     */
    public static void SteamAPI_ISteamApps_InstallDLC(int nAppID) {
        var mh$ = SteamAPI_ISteamApps_InstallDLC.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamApps_InstallDLC", nAppID);
            }
            mh$.invokeExact(nAppID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamApps_UninstallDLC {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamApps_UninstallDLC"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamApps_UninstallDLC(AppId_t nAppID)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamApps_UninstallDLC$descriptor() {
        return SteamAPI_ISteamApps_UninstallDLC.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamApps_UninstallDLC(AppId_t nAppID)
     * }
     */
    public static MethodHandle SteamAPI_ISteamApps_UninstallDLC$handle() {
        return SteamAPI_ISteamApps_UninstallDLC.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamApps_UninstallDLC(AppId_t nAppID)
     * }
     */
    public static void SteamAPI_ISteamApps_UninstallDLC(int nAppID) {
        var mh$ = SteamAPI_ISteamApps_UninstallDLC.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamApps_UninstallDLC", nAppID);
            }
            mh$.invokeExact(nAppID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamApps_RequestAppProofOfPurchaseKey {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamApps_RequestAppProofOfPurchaseKey"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamApps_RequestAppProofOfPurchaseKey(AppId_t nAppID)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamApps_RequestAppProofOfPurchaseKey$descriptor() {
        return SteamAPI_ISteamApps_RequestAppProofOfPurchaseKey.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamApps_RequestAppProofOfPurchaseKey(AppId_t nAppID)
     * }
     */
    public static MethodHandle SteamAPI_ISteamApps_RequestAppProofOfPurchaseKey$handle() {
        return SteamAPI_ISteamApps_RequestAppProofOfPurchaseKey.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamApps_RequestAppProofOfPurchaseKey(AppId_t nAppID)
     * }
     */
    public static void SteamAPI_ISteamApps_RequestAppProofOfPurchaseKey(int nAppID) {
        var mh$ = SteamAPI_ISteamApps_RequestAppProofOfPurchaseKey.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamApps_RequestAppProofOfPurchaseKey", nAppID);
            }
            mh$.invokeExact(nAppID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamApps_GetCurrentBetaName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamApps_GetCurrentBetaName"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamApps_GetCurrentBetaName(char *pchName, int cchNameBufferSize)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamApps_GetCurrentBetaName$descriptor() {
        return SteamAPI_ISteamApps_GetCurrentBetaName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamApps_GetCurrentBetaName(char *pchName, int cchNameBufferSize)
     * }
     */
    public static MethodHandle SteamAPI_ISteamApps_GetCurrentBetaName$handle() {
        return SteamAPI_ISteamApps_GetCurrentBetaName.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamApps_GetCurrentBetaName(char *pchName, int cchNameBufferSize)
     * }
     */
    public static boolean SteamAPI_ISteamApps_GetCurrentBetaName(MemorySegment pchName, int cchNameBufferSize) {
        var mh$ = SteamAPI_ISteamApps_GetCurrentBetaName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamApps_GetCurrentBetaName", pchName, cchNameBufferSize);
            }
            return (boolean)mh$.invokeExact(pchName, cchNameBufferSize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamApps_MarkContentCorrupt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamApps_MarkContentCorrupt"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamApps_MarkContentCorrupt(bool bMissingFilesOnly)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamApps_MarkContentCorrupt$descriptor() {
        return SteamAPI_ISteamApps_MarkContentCorrupt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamApps_MarkContentCorrupt(bool bMissingFilesOnly)
     * }
     */
    public static MethodHandle SteamAPI_ISteamApps_MarkContentCorrupt$handle() {
        return SteamAPI_ISteamApps_MarkContentCorrupt.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamApps_MarkContentCorrupt(bool bMissingFilesOnly)
     * }
     */
    public static boolean SteamAPI_ISteamApps_MarkContentCorrupt(boolean bMissingFilesOnly) {
        var mh$ = SteamAPI_ISteamApps_MarkContentCorrupt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamApps_MarkContentCorrupt", bMissingFilesOnly);
            }
            return (boolean)mh$.invokeExact(bMissingFilesOnly);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamApps_GetInstalledDepots {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamApps_GetInstalledDepots"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamApps_GetInstalledDepots(AppId_t appID, DepotId_t *pvecDepots, uint32 cMaxDepots)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamApps_GetInstalledDepots$descriptor() {
        return SteamAPI_ISteamApps_GetInstalledDepots.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamApps_GetInstalledDepots(AppId_t appID, DepotId_t *pvecDepots, uint32 cMaxDepots)
     * }
     */
    public static MethodHandle SteamAPI_ISteamApps_GetInstalledDepots$handle() {
        return SteamAPI_ISteamApps_GetInstalledDepots.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamApps_GetInstalledDepots(AppId_t appID, DepotId_t *pvecDepots, uint32 cMaxDepots)
     * }
     */
    public static int SteamAPI_ISteamApps_GetInstalledDepots(int appID, MemorySegment pvecDepots, int cMaxDepots) {
        var mh$ = SteamAPI_ISteamApps_GetInstalledDepots.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamApps_GetInstalledDepots", appID, pvecDepots, cMaxDepots);
            }
            return (int)mh$.invokeExact(appID, pvecDepots, cMaxDepots);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamApps_GetAppInstallDir {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamApps_GetAppInstallDir"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamApps_GetAppInstallDir(AppId_t appID, char *pchFolder, uint32 cchFolderBufferSize)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamApps_GetAppInstallDir$descriptor() {
        return SteamAPI_ISteamApps_GetAppInstallDir.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamApps_GetAppInstallDir(AppId_t appID, char *pchFolder, uint32 cchFolderBufferSize)
     * }
     */
    public static MethodHandle SteamAPI_ISteamApps_GetAppInstallDir$handle() {
        return SteamAPI_ISteamApps_GetAppInstallDir.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamApps_GetAppInstallDir(AppId_t appID, char *pchFolder, uint32 cchFolderBufferSize)
     * }
     */
    public static int SteamAPI_ISteamApps_GetAppInstallDir(int appID, MemorySegment pchFolder, int cchFolderBufferSize) {
        var mh$ = SteamAPI_ISteamApps_GetAppInstallDir.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamApps_GetAppInstallDir", appID, pchFolder, cchFolderBufferSize);
            }
            return (int)mh$.invokeExact(appID, pchFolder, cchFolderBufferSize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamApps_BIsAppInstalled {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamApps_BIsAppInstalled"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamApps_BIsAppInstalled(AppId_t appID)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamApps_BIsAppInstalled$descriptor() {
        return SteamAPI_ISteamApps_BIsAppInstalled.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamApps_BIsAppInstalled(AppId_t appID)
     * }
     */
    public static MethodHandle SteamAPI_ISteamApps_BIsAppInstalled$handle() {
        return SteamAPI_ISteamApps_BIsAppInstalled.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamApps_BIsAppInstalled(AppId_t appID)
     * }
     */
    public static boolean SteamAPI_ISteamApps_BIsAppInstalled(int appID) {
        var mh$ = SteamAPI_ISteamApps_BIsAppInstalled.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamApps_BIsAppInstalled", appID);
            }
            return (boolean)mh$.invokeExact(appID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamApps_GetAppOwner {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_LONG_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamApps_GetAppOwner"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint64_steamid SteamAPI_ISteamApps_GetAppOwner()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamApps_GetAppOwner$descriptor() {
        return SteamAPI_ISteamApps_GetAppOwner.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint64_steamid SteamAPI_ISteamApps_GetAppOwner()
     * }
     */
    public static MethodHandle SteamAPI_ISteamApps_GetAppOwner$handle() {
        return SteamAPI_ISteamApps_GetAppOwner.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * uint64_steamid SteamAPI_ISteamApps_GetAppOwner()
     * }
     */
    public static long SteamAPI_ISteamApps_GetAppOwner() {
        var mh$ = SteamAPI_ISteamApps_GetAppOwner.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamApps_GetAppOwner");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamApps_GetLaunchQueryParam {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamApps_GetLaunchQueryParam"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamApps_GetLaunchQueryParam(const char *pchKey)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamApps_GetLaunchQueryParam$descriptor() {
        return SteamAPI_ISteamApps_GetLaunchQueryParam.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamApps_GetLaunchQueryParam(const char *pchKey)
     * }
     */
    public static MethodHandle SteamAPI_ISteamApps_GetLaunchQueryParam$handle() {
        return SteamAPI_ISteamApps_GetLaunchQueryParam.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamApps_GetLaunchQueryParam(const char *pchKey)
     * }
     */
    public static MemorySegment SteamAPI_ISteamApps_GetLaunchQueryParam(MemorySegment pchKey) {
        var mh$ = SteamAPI_ISteamApps_GetLaunchQueryParam.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamApps_GetLaunchQueryParam", pchKey);
            }
            return (MemorySegment)mh$.invokeExact(pchKey);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamApps_GetDlcDownloadProgress {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamApps_GetDlcDownloadProgress"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamApps_GetDlcDownloadProgress(AppId_t nAppID, uint64 *punBytesDownloaded, uint64 *punBytesTotal)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamApps_GetDlcDownloadProgress$descriptor() {
        return SteamAPI_ISteamApps_GetDlcDownloadProgress.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamApps_GetDlcDownloadProgress(AppId_t nAppID, uint64 *punBytesDownloaded, uint64 *punBytesTotal)
     * }
     */
    public static MethodHandle SteamAPI_ISteamApps_GetDlcDownloadProgress$handle() {
        return SteamAPI_ISteamApps_GetDlcDownloadProgress.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamApps_GetDlcDownloadProgress(AppId_t nAppID, uint64 *punBytesDownloaded, uint64 *punBytesTotal)
     * }
     */
    public static boolean SteamAPI_ISteamApps_GetDlcDownloadProgress(int nAppID, MemorySegment punBytesDownloaded, MemorySegment punBytesTotal) {
        var mh$ = SteamAPI_ISteamApps_GetDlcDownloadProgress.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamApps_GetDlcDownloadProgress", nAppID, punBytesDownloaded, punBytesTotal);
            }
            return (boolean)mh$.invokeExact(nAppID, punBytesDownloaded, punBytesTotal);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamApps_GetAppBuildId {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamApps_GetAppBuildId"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamApps_GetAppBuildId()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamApps_GetAppBuildId$descriptor() {
        return SteamAPI_ISteamApps_GetAppBuildId.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamApps_GetAppBuildId()
     * }
     */
    public static MethodHandle SteamAPI_ISteamApps_GetAppBuildId$handle() {
        return SteamAPI_ISteamApps_GetAppBuildId.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int SteamAPI_ISteamApps_GetAppBuildId()
     * }
     */
    public static int SteamAPI_ISteamApps_GetAppBuildId() {
        var mh$ = SteamAPI_ISteamApps_GetAppBuildId.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamApps_GetAppBuildId");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamApps_RequestAllProofOfPurchaseKeys {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamApps_RequestAllProofOfPurchaseKeys"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamApps_RequestAllProofOfPurchaseKeys()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamApps_RequestAllProofOfPurchaseKeys$descriptor() {
        return SteamAPI_ISteamApps_RequestAllProofOfPurchaseKeys.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamApps_RequestAllProofOfPurchaseKeys()
     * }
     */
    public static MethodHandle SteamAPI_ISteamApps_RequestAllProofOfPurchaseKeys$handle() {
        return SteamAPI_ISteamApps_RequestAllProofOfPurchaseKeys.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamApps_RequestAllProofOfPurchaseKeys()
     * }
     */
    public static void SteamAPI_ISteamApps_RequestAllProofOfPurchaseKeys() {
        var mh$ = SteamAPI_ISteamApps_RequestAllProofOfPurchaseKeys.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamApps_RequestAllProofOfPurchaseKeys");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamApps_GetFileDetails {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamApps_GetFileDetails"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamApps_GetFileDetails(const char *pszFileName)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamApps_GetFileDetails$descriptor() {
        return SteamAPI_ISteamApps_GetFileDetails.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamApps_GetFileDetails(const char *pszFileName)
     * }
     */
    public static MethodHandle SteamAPI_ISteamApps_GetFileDetails$handle() {
        return SteamAPI_ISteamApps_GetFileDetails.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamApps_GetFileDetails(const char *pszFileName)
     * }
     */
    public static long SteamAPI_ISteamApps_GetFileDetails(MemorySegment pszFileName) {
        var mh$ = SteamAPI_ISteamApps_GetFileDetails.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamApps_GetFileDetails", pszFileName);
            }
            return (long)mh$.invokeExact(pszFileName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamApps_GetLaunchCommandLine {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamApps_GetLaunchCommandLine"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamApps_GetLaunchCommandLine(char *pszCommandLine, int cubCommandLine)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamApps_GetLaunchCommandLine$descriptor() {
        return SteamAPI_ISteamApps_GetLaunchCommandLine.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamApps_GetLaunchCommandLine(char *pszCommandLine, int cubCommandLine)
     * }
     */
    public static MethodHandle SteamAPI_ISteamApps_GetLaunchCommandLine$handle() {
        return SteamAPI_ISteamApps_GetLaunchCommandLine.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int SteamAPI_ISteamApps_GetLaunchCommandLine(char *pszCommandLine, int cubCommandLine)
     * }
     */
    public static int SteamAPI_ISteamApps_GetLaunchCommandLine(MemorySegment pszCommandLine, int cubCommandLine) {
        var mh$ = SteamAPI_ISteamApps_GetLaunchCommandLine.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamApps_GetLaunchCommandLine", pszCommandLine, cubCommandLine);
            }
            return (int)mh$.invokeExact(pszCommandLine, cubCommandLine);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamApps_BIsSubscribedFromFamilySharing {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamApps_BIsSubscribedFromFamilySharing"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamApps_BIsSubscribedFromFamilySharing()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamApps_BIsSubscribedFromFamilySharing$descriptor() {
        return SteamAPI_ISteamApps_BIsSubscribedFromFamilySharing.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamApps_BIsSubscribedFromFamilySharing()
     * }
     */
    public static MethodHandle SteamAPI_ISteamApps_BIsSubscribedFromFamilySharing$handle() {
        return SteamAPI_ISteamApps_BIsSubscribedFromFamilySharing.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamApps_BIsSubscribedFromFamilySharing()
     * }
     */
    public static boolean SteamAPI_ISteamApps_BIsSubscribedFromFamilySharing() {
        var mh$ = SteamAPI_ISteamApps_BIsSubscribedFromFamilySharing.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamApps_BIsSubscribedFromFamilySharing");
            }
            return (boolean)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamApps_BIsTimedTrial {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamApps_BIsTimedTrial"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamApps_BIsTimedTrial(uint32 *punSecondsAllowed, uint32 *punSecondsPlayed)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamApps_BIsTimedTrial$descriptor() {
        return SteamAPI_ISteamApps_BIsTimedTrial.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamApps_BIsTimedTrial(uint32 *punSecondsAllowed, uint32 *punSecondsPlayed)
     * }
     */
    public static MethodHandle SteamAPI_ISteamApps_BIsTimedTrial$handle() {
        return SteamAPI_ISteamApps_BIsTimedTrial.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamApps_BIsTimedTrial(uint32 *punSecondsAllowed, uint32 *punSecondsPlayed)
     * }
     */
    public static boolean SteamAPI_ISteamApps_BIsTimedTrial(MemorySegment punSecondsAllowed, MemorySegment punSecondsPlayed) {
        var mh$ = SteamAPI_ISteamApps_BIsTimedTrial.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamApps_BIsTimedTrial", punSecondsAllowed, punSecondsPlayed);
            }
            return (boolean)mh$.invokeExact(punSecondsAllowed, punSecondsPlayed);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamApps_SetDlcContext {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamApps_SetDlcContext"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamApps_SetDlcContext(AppId_t nAppID)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamApps_SetDlcContext$descriptor() {
        return SteamAPI_ISteamApps_SetDlcContext.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamApps_SetDlcContext(AppId_t nAppID)
     * }
     */
    public static MethodHandle SteamAPI_ISteamApps_SetDlcContext$handle() {
        return SteamAPI_ISteamApps_SetDlcContext.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamApps_SetDlcContext(AppId_t nAppID)
     * }
     */
    public static boolean SteamAPI_ISteamApps_SetDlcContext(int nAppID) {
        var mh$ = SteamAPI_ISteamApps_SetDlcContext.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamApps_SetDlcContext", nAppID);
            }
            return (boolean)mh$.invokeExact(nAppID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworking_SendP2PPacket {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamNetworking_SendP2PPacket"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworking_SendP2PPacket(uint64_steamid steamIDRemote, const void *pubData, uint32 cubData, EP2PSend eP2PSendType, int nChannel)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworking_SendP2PPacket$descriptor() {
        return SteamAPI_ISteamNetworking_SendP2PPacket.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworking_SendP2PPacket(uint64_steamid steamIDRemote, const void *pubData, uint32 cubData, EP2PSend eP2PSendType, int nChannel)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworking_SendP2PPacket$handle() {
        return SteamAPI_ISteamNetworking_SendP2PPacket.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworking_SendP2PPacket(uint64_steamid steamIDRemote, const void *pubData, uint32 cubData, EP2PSend eP2PSendType, int nChannel)
     * }
     */
    public static boolean SteamAPI_ISteamNetworking_SendP2PPacket(long steamIDRemote, MemorySegment pubData, int cubData, int eP2PSendType, int nChannel) {
        var mh$ = SteamAPI_ISteamNetworking_SendP2PPacket.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworking_SendP2PPacket", steamIDRemote, pubData, cubData, eP2PSendType, nChannel);
            }
            return (boolean)mh$.invokeExact(steamIDRemote, pubData, cubData, eP2PSendType, nChannel);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworking_IsP2PPacketAvailable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamNetworking_IsP2PPacketAvailable"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworking_IsP2PPacketAvailable(uint32 *pcubMsgSize, int nChannel)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworking_IsP2PPacketAvailable$descriptor() {
        return SteamAPI_ISteamNetworking_IsP2PPacketAvailable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworking_IsP2PPacketAvailable(uint32 *pcubMsgSize, int nChannel)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworking_IsP2PPacketAvailable$handle() {
        return SteamAPI_ISteamNetworking_IsP2PPacketAvailable.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworking_IsP2PPacketAvailable(uint32 *pcubMsgSize, int nChannel)
     * }
     */
    public static boolean SteamAPI_ISteamNetworking_IsP2PPacketAvailable(MemorySegment pcubMsgSize, int nChannel) {
        var mh$ = SteamAPI_ISteamNetworking_IsP2PPacketAvailable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworking_IsP2PPacketAvailable", pcubMsgSize, nChannel);
            }
            return (boolean)mh$.invokeExact(pcubMsgSize, nChannel);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworking_ReadP2PPacket {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamNetworking_ReadP2PPacket"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworking_ReadP2PPacket(void *pubDest, uint32 cubDest, uint32 *pcubMsgSize, CSteamID *psteamIDRemote, int nChannel)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworking_ReadP2PPacket$descriptor() {
        return SteamAPI_ISteamNetworking_ReadP2PPacket.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworking_ReadP2PPacket(void *pubDest, uint32 cubDest, uint32 *pcubMsgSize, CSteamID *psteamIDRemote, int nChannel)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworking_ReadP2PPacket$handle() {
        return SteamAPI_ISteamNetworking_ReadP2PPacket.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworking_ReadP2PPacket(void *pubDest, uint32 cubDest, uint32 *pcubMsgSize, CSteamID *psteamIDRemote, int nChannel)
     * }
     */
    public static boolean SteamAPI_ISteamNetworking_ReadP2PPacket(MemorySegment pubDest, int cubDest, MemorySegment pcubMsgSize, MemorySegment psteamIDRemote, int nChannel) {
        var mh$ = SteamAPI_ISteamNetworking_ReadP2PPacket.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworking_ReadP2PPacket", pubDest, cubDest, pcubMsgSize, psteamIDRemote, nChannel);
            }
            return (boolean)mh$.invokeExact(pubDest, cubDest, pcubMsgSize, psteamIDRemote, nChannel);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworking_AcceptP2PSessionWithUser {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamNetworking_AcceptP2PSessionWithUser"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworking_AcceptP2PSessionWithUser(uint64_steamid steamIDRemote)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworking_AcceptP2PSessionWithUser$descriptor() {
        return SteamAPI_ISteamNetworking_AcceptP2PSessionWithUser.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworking_AcceptP2PSessionWithUser(uint64_steamid steamIDRemote)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworking_AcceptP2PSessionWithUser$handle() {
        return SteamAPI_ISteamNetworking_AcceptP2PSessionWithUser.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworking_AcceptP2PSessionWithUser(uint64_steamid steamIDRemote)
     * }
     */
    public static boolean SteamAPI_ISteamNetworking_AcceptP2PSessionWithUser(long steamIDRemote) {
        var mh$ = SteamAPI_ISteamNetworking_AcceptP2PSessionWithUser.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworking_AcceptP2PSessionWithUser", steamIDRemote);
            }
            return (boolean)mh$.invokeExact(steamIDRemote);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworking_CloseP2PSessionWithUser {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamNetworking_CloseP2PSessionWithUser"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworking_CloseP2PSessionWithUser(uint64_steamid steamIDRemote)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworking_CloseP2PSessionWithUser$descriptor() {
        return SteamAPI_ISteamNetworking_CloseP2PSessionWithUser.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworking_CloseP2PSessionWithUser(uint64_steamid steamIDRemote)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworking_CloseP2PSessionWithUser$handle() {
        return SteamAPI_ISteamNetworking_CloseP2PSessionWithUser.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworking_CloseP2PSessionWithUser(uint64_steamid steamIDRemote)
     * }
     */
    public static boolean SteamAPI_ISteamNetworking_CloseP2PSessionWithUser(long steamIDRemote) {
        var mh$ = SteamAPI_ISteamNetworking_CloseP2PSessionWithUser.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworking_CloseP2PSessionWithUser", steamIDRemote);
            }
            return (boolean)mh$.invokeExact(steamIDRemote);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworking_CloseP2PChannelWithUser {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamNetworking_CloseP2PChannelWithUser"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworking_CloseP2PChannelWithUser(uint64_steamid steamIDRemote, int nChannel)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworking_CloseP2PChannelWithUser$descriptor() {
        return SteamAPI_ISteamNetworking_CloseP2PChannelWithUser.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworking_CloseP2PChannelWithUser(uint64_steamid steamIDRemote, int nChannel)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworking_CloseP2PChannelWithUser$handle() {
        return SteamAPI_ISteamNetworking_CloseP2PChannelWithUser.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworking_CloseP2PChannelWithUser(uint64_steamid steamIDRemote, int nChannel)
     * }
     */
    public static boolean SteamAPI_ISteamNetworking_CloseP2PChannelWithUser(long steamIDRemote, int nChannel) {
        var mh$ = SteamAPI_ISteamNetworking_CloseP2PChannelWithUser.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworking_CloseP2PChannelWithUser", steamIDRemote, nChannel);
            }
            return (boolean)mh$.invokeExact(steamIDRemote, nChannel);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworking_GetP2PSessionState {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamNetworking_GetP2PSessionState"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworking_GetP2PSessionState(uint64_steamid steamIDRemote, P2PSessionState_t *pConnectionState)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworking_GetP2PSessionState$descriptor() {
        return SteamAPI_ISteamNetworking_GetP2PSessionState.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworking_GetP2PSessionState(uint64_steamid steamIDRemote, P2PSessionState_t *pConnectionState)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworking_GetP2PSessionState$handle() {
        return SteamAPI_ISteamNetworking_GetP2PSessionState.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworking_GetP2PSessionState(uint64_steamid steamIDRemote, P2PSessionState_t *pConnectionState)
     * }
     */
    public static boolean SteamAPI_ISteamNetworking_GetP2PSessionState(long steamIDRemote, MemorySegment pConnectionState) {
        var mh$ = SteamAPI_ISteamNetworking_GetP2PSessionState.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworking_GetP2PSessionState", steamIDRemote, pConnectionState);
            }
            return (boolean)mh$.invokeExact(steamIDRemote, pConnectionState);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworking_AllowP2PPacketRelay {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamNetworking_AllowP2PPacketRelay"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworking_AllowP2PPacketRelay(bool bAllow)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworking_AllowP2PPacketRelay$descriptor() {
        return SteamAPI_ISteamNetworking_AllowP2PPacketRelay.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworking_AllowP2PPacketRelay(bool bAllow)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworking_AllowP2PPacketRelay$handle() {
        return SteamAPI_ISteamNetworking_AllowP2PPacketRelay.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworking_AllowP2PPacketRelay(bool bAllow)
     * }
     */
    public static boolean SteamAPI_ISteamNetworking_AllowP2PPacketRelay(boolean bAllow) {
        var mh$ = SteamAPI_ISteamNetworking_AllowP2PPacketRelay.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworking_AllowP2PPacketRelay", bAllow);
            }
            return (boolean)mh$.invokeExact(bAllow);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworking_CreateListenSocket {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT,
            SteamIPAddress_t.layout(),
            SteamFlat4j.C_SHORT,
            SteamFlat4j.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamNetworking_CreateListenSocket"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SNetListenSocket_t SteamAPI_ISteamNetworking_CreateListenSocket(int nVirtualP2PPort, SteamIPAddress_t nIP, uint16 nPort, bool bAllowUseOfPacketRelay)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworking_CreateListenSocket$descriptor() {
        return SteamAPI_ISteamNetworking_CreateListenSocket.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SNetListenSocket_t SteamAPI_ISteamNetworking_CreateListenSocket(int nVirtualP2PPort, SteamIPAddress_t nIP, uint16 nPort, bool bAllowUseOfPacketRelay)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworking_CreateListenSocket$handle() {
        return SteamAPI_ISteamNetworking_CreateListenSocket.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SNetListenSocket_t SteamAPI_ISteamNetworking_CreateListenSocket(int nVirtualP2PPort, SteamIPAddress_t nIP, uint16 nPort, bool bAllowUseOfPacketRelay)
     * }
     */
    public static int SteamAPI_ISteamNetworking_CreateListenSocket(int nVirtualP2PPort, MemorySegment nIP, short nPort, boolean bAllowUseOfPacketRelay) {
        var mh$ = SteamAPI_ISteamNetworking_CreateListenSocket.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworking_CreateListenSocket", nVirtualP2PPort, nIP, nPort, bAllowUseOfPacketRelay);
            }
            return (int)mh$.invokeExact(nVirtualP2PPort, nIP, nPort, bAllowUseOfPacketRelay);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworking_CreateP2PConnectionSocket {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamNetworking_CreateP2PConnectionSocket"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SNetSocket_t SteamAPI_ISteamNetworking_CreateP2PConnectionSocket(uint64_steamid steamIDTarget, int nVirtualPort, int nTimeoutSec, bool bAllowUseOfPacketRelay)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworking_CreateP2PConnectionSocket$descriptor() {
        return SteamAPI_ISteamNetworking_CreateP2PConnectionSocket.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SNetSocket_t SteamAPI_ISteamNetworking_CreateP2PConnectionSocket(uint64_steamid steamIDTarget, int nVirtualPort, int nTimeoutSec, bool bAllowUseOfPacketRelay)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworking_CreateP2PConnectionSocket$handle() {
        return SteamAPI_ISteamNetworking_CreateP2PConnectionSocket.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SNetSocket_t SteamAPI_ISteamNetworking_CreateP2PConnectionSocket(uint64_steamid steamIDTarget, int nVirtualPort, int nTimeoutSec, bool bAllowUseOfPacketRelay)
     * }
     */
    public static int SteamAPI_ISteamNetworking_CreateP2PConnectionSocket(long steamIDTarget, int nVirtualPort, int nTimeoutSec, boolean bAllowUseOfPacketRelay) {
        var mh$ = SteamAPI_ISteamNetworking_CreateP2PConnectionSocket.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworking_CreateP2PConnectionSocket", steamIDTarget, nVirtualPort, nTimeoutSec, bAllowUseOfPacketRelay);
            }
            return (int)mh$.invokeExact(steamIDTarget, nVirtualPort, nTimeoutSec, bAllowUseOfPacketRelay);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworking_CreateConnectionSocket {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamIPAddress_t.layout(),
            SteamFlat4j.C_SHORT,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamNetworking_CreateConnectionSocket"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SNetSocket_t SteamAPI_ISteamNetworking_CreateConnectionSocket(SteamIPAddress_t nIP, uint16 nPort, int nTimeoutSec)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworking_CreateConnectionSocket$descriptor() {
        return SteamAPI_ISteamNetworking_CreateConnectionSocket.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SNetSocket_t SteamAPI_ISteamNetworking_CreateConnectionSocket(SteamIPAddress_t nIP, uint16 nPort, int nTimeoutSec)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworking_CreateConnectionSocket$handle() {
        return SteamAPI_ISteamNetworking_CreateConnectionSocket.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SNetSocket_t SteamAPI_ISteamNetworking_CreateConnectionSocket(SteamIPAddress_t nIP, uint16 nPort, int nTimeoutSec)
     * }
     */
    public static int SteamAPI_ISteamNetworking_CreateConnectionSocket(MemorySegment nIP, short nPort, int nTimeoutSec) {
        var mh$ = SteamAPI_ISteamNetworking_CreateConnectionSocket.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworking_CreateConnectionSocket", nIP, nPort, nTimeoutSec);
            }
            return (int)mh$.invokeExact(nIP, nPort, nTimeoutSec);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworking_DestroySocket {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamNetworking_DestroySocket"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworking_DestroySocket(SNetSocket_t hSocket, bool bNotifyRemoteEnd)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworking_DestroySocket$descriptor() {
        return SteamAPI_ISteamNetworking_DestroySocket.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworking_DestroySocket(SNetSocket_t hSocket, bool bNotifyRemoteEnd)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworking_DestroySocket$handle() {
        return SteamAPI_ISteamNetworking_DestroySocket.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworking_DestroySocket(SNetSocket_t hSocket, bool bNotifyRemoteEnd)
     * }
     */
    public static boolean SteamAPI_ISteamNetworking_DestroySocket(int hSocket, boolean bNotifyRemoteEnd) {
        var mh$ = SteamAPI_ISteamNetworking_DestroySocket.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworking_DestroySocket", hSocket, bNotifyRemoteEnd);
            }
            return (boolean)mh$.invokeExact(hSocket, bNotifyRemoteEnd);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworking_DestroyListenSocket {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamNetworking_DestroyListenSocket"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworking_DestroyListenSocket(SNetListenSocket_t hSocket, bool bNotifyRemoteEnd)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworking_DestroyListenSocket$descriptor() {
        return SteamAPI_ISteamNetworking_DestroyListenSocket.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworking_DestroyListenSocket(SNetListenSocket_t hSocket, bool bNotifyRemoteEnd)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworking_DestroyListenSocket$handle() {
        return SteamAPI_ISteamNetworking_DestroyListenSocket.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworking_DestroyListenSocket(SNetListenSocket_t hSocket, bool bNotifyRemoteEnd)
     * }
     */
    public static boolean SteamAPI_ISteamNetworking_DestroyListenSocket(int hSocket, boolean bNotifyRemoteEnd) {
        var mh$ = SteamAPI_ISteamNetworking_DestroyListenSocket.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworking_DestroyListenSocket", hSocket, bNotifyRemoteEnd);
            }
            return (boolean)mh$.invokeExact(hSocket, bNotifyRemoteEnd);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworking_SendDataOnSocket {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamNetworking_SendDataOnSocket"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworking_SendDataOnSocket(SNetSocket_t hSocket, void *pubData, uint32 cubData, bool bReliable)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworking_SendDataOnSocket$descriptor() {
        return SteamAPI_ISteamNetworking_SendDataOnSocket.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworking_SendDataOnSocket(SNetSocket_t hSocket, void *pubData, uint32 cubData, bool bReliable)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworking_SendDataOnSocket$handle() {
        return SteamAPI_ISteamNetworking_SendDataOnSocket.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworking_SendDataOnSocket(SNetSocket_t hSocket, void *pubData, uint32 cubData, bool bReliable)
     * }
     */
    public static boolean SteamAPI_ISteamNetworking_SendDataOnSocket(int hSocket, MemorySegment pubData, int cubData, boolean bReliable) {
        var mh$ = SteamAPI_ISteamNetworking_SendDataOnSocket.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworking_SendDataOnSocket", hSocket, pubData, cubData, bReliable);
            }
            return (boolean)mh$.invokeExact(hSocket, pubData, cubData, bReliable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworking_IsDataAvailableOnSocket {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamNetworking_IsDataAvailableOnSocket"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworking_IsDataAvailableOnSocket(SNetSocket_t hSocket, uint32 *pcubMsgSize)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworking_IsDataAvailableOnSocket$descriptor() {
        return SteamAPI_ISteamNetworking_IsDataAvailableOnSocket.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworking_IsDataAvailableOnSocket(SNetSocket_t hSocket, uint32 *pcubMsgSize)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworking_IsDataAvailableOnSocket$handle() {
        return SteamAPI_ISteamNetworking_IsDataAvailableOnSocket.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworking_IsDataAvailableOnSocket(SNetSocket_t hSocket, uint32 *pcubMsgSize)
     * }
     */
    public static boolean SteamAPI_ISteamNetworking_IsDataAvailableOnSocket(int hSocket, MemorySegment pcubMsgSize) {
        var mh$ = SteamAPI_ISteamNetworking_IsDataAvailableOnSocket.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworking_IsDataAvailableOnSocket", hSocket, pcubMsgSize);
            }
            return (boolean)mh$.invokeExact(hSocket, pcubMsgSize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworking_RetrieveDataFromSocket {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamNetworking_RetrieveDataFromSocket"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworking_RetrieveDataFromSocket(SNetSocket_t hSocket, void *pubDest, uint32 cubDest, uint32 *pcubMsgSize)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworking_RetrieveDataFromSocket$descriptor() {
        return SteamAPI_ISteamNetworking_RetrieveDataFromSocket.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworking_RetrieveDataFromSocket(SNetSocket_t hSocket, void *pubDest, uint32 cubDest, uint32 *pcubMsgSize)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworking_RetrieveDataFromSocket$handle() {
        return SteamAPI_ISteamNetworking_RetrieveDataFromSocket.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworking_RetrieveDataFromSocket(SNetSocket_t hSocket, void *pubDest, uint32 cubDest, uint32 *pcubMsgSize)
     * }
     */
    public static boolean SteamAPI_ISteamNetworking_RetrieveDataFromSocket(int hSocket, MemorySegment pubDest, int cubDest, MemorySegment pcubMsgSize) {
        var mh$ = SteamAPI_ISteamNetworking_RetrieveDataFromSocket.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworking_RetrieveDataFromSocket", hSocket, pubDest, cubDest, pcubMsgSize);
            }
            return (boolean)mh$.invokeExact(hSocket, pubDest, cubDest, pcubMsgSize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworking_IsDataAvailable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamNetworking_IsDataAvailable"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworking_IsDataAvailable(SNetListenSocket_t hListenSocket, uint32 *pcubMsgSize, SNetSocket_t *phSocket)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworking_IsDataAvailable$descriptor() {
        return SteamAPI_ISteamNetworking_IsDataAvailable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworking_IsDataAvailable(SNetListenSocket_t hListenSocket, uint32 *pcubMsgSize, SNetSocket_t *phSocket)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworking_IsDataAvailable$handle() {
        return SteamAPI_ISteamNetworking_IsDataAvailable.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworking_IsDataAvailable(SNetListenSocket_t hListenSocket, uint32 *pcubMsgSize, SNetSocket_t *phSocket)
     * }
     */
    public static boolean SteamAPI_ISteamNetworking_IsDataAvailable(int hListenSocket, MemorySegment pcubMsgSize, MemorySegment phSocket) {
        var mh$ = SteamAPI_ISteamNetworking_IsDataAvailable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworking_IsDataAvailable", hListenSocket, pcubMsgSize, phSocket);
            }
            return (boolean)mh$.invokeExact(hListenSocket, pcubMsgSize, phSocket);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworking_RetrieveData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamNetworking_RetrieveData"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworking_RetrieveData(SNetListenSocket_t hListenSocket, void *pubDest, uint32 cubDest, uint32 *pcubMsgSize, SNetSocket_t *phSocket)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworking_RetrieveData$descriptor() {
        return SteamAPI_ISteamNetworking_RetrieveData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworking_RetrieveData(SNetListenSocket_t hListenSocket, void *pubDest, uint32 cubDest, uint32 *pcubMsgSize, SNetSocket_t *phSocket)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworking_RetrieveData$handle() {
        return SteamAPI_ISteamNetworking_RetrieveData.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworking_RetrieveData(SNetListenSocket_t hListenSocket, void *pubDest, uint32 cubDest, uint32 *pcubMsgSize, SNetSocket_t *phSocket)
     * }
     */
    public static boolean SteamAPI_ISteamNetworking_RetrieveData(int hListenSocket, MemorySegment pubDest, int cubDest, MemorySegment pcubMsgSize, MemorySegment phSocket) {
        var mh$ = SteamAPI_ISteamNetworking_RetrieveData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworking_RetrieveData", hListenSocket, pubDest, cubDest, pcubMsgSize, phSocket);
            }
            return (boolean)mh$.invokeExact(hListenSocket, pubDest, cubDest, pcubMsgSize, phSocket);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworking_GetSocketInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamNetworking_GetSocketInfo"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworking_GetSocketInfo(SNetSocket_t hSocket, CSteamID *pSteamIDRemote, int *peSocketStatus, SteamIPAddress_t *punIPRemote, uint16 *punPortRemote)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworking_GetSocketInfo$descriptor() {
        return SteamAPI_ISteamNetworking_GetSocketInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworking_GetSocketInfo(SNetSocket_t hSocket, CSteamID *pSteamIDRemote, int *peSocketStatus, SteamIPAddress_t *punIPRemote, uint16 *punPortRemote)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworking_GetSocketInfo$handle() {
        return SteamAPI_ISteamNetworking_GetSocketInfo.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworking_GetSocketInfo(SNetSocket_t hSocket, CSteamID *pSteamIDRemote, int *peSocketStatus, SteamIPAddress_t *punIPRemote, uint16 *punPortRemote)
     * }
     */
    public static boolean SteamAPI_ISteamNetworking_GetSocketInfo(int hSocket, MemorySegment pSteamIDRemote, MemorySegment peSocketStatus, MemorySegment punIPRemote, MemorySegment punPortRemote) {
        var mh$ = SteamAPI_ISteamNetworking_GetSocketInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworking_GetSocketInfo", hSocket, pSteamIDRemote, peSocketStatus, punIPRemote, punPortRemote);
            }
            return (boolean)mh$.invokeExact(hSocket, pSteamIDRemote, peSocketStatus, punIPRemote, punPortRemote);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworking_GetListenSocketInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamNetworking_GetListenSocketInfo"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworking_GetListenSocketInfo(SNetListenSocket_t hListenSocket, SteamIPAddress_t *pnIP, uint16 *pnPort)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworking_GetListenSocketInfo$descriptor() {
        return SteamAPI_ISteamNetworking_GetListenSocketInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworking_GetListenSocketInfo(SNetListenSocket_t hListenSocket, SteamIPAddress_t *pnIP, uint16 *pnPort)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworking_GetListenSocketInfo$handle() {
        return SteamAPI_ISteamNetworking_GetListenSocketInfo.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworking_GetListenSocketInfo(SNetListenSocket_t hListenSocket, SteamIPAddress_t *pnIP, uint16 *pnPort)
     * }
     */
    public static boolean SteamAPI_ISteamNetworking_GetListenSocketInfo(int hListenSocket, MemorySegment pnIP, MemorySegment pnPort) {
        var mh$ = SteamAPI_ISteamNetworking_GetListenSocketInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworking_GetListenSocketInfo", hListenSocket, pnIP, pnPort);
            }
            return (boolean)mh$.invokeExact(hListenSocket, pnIP, pnPort);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworking_GetSocketConnectionType {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamNetworking_GetSocketConnectionType"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ESNetSocketConnectionType SteamAPI_ISteamNetworking_GetSocketConnectionType(SNetSocket_t hSocket)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworking_GetSocketConnectionType$descriptor() {
        return SteamAPI_ISteamNetworking_GetSocketConnectionType.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ESNetSocketConnectionType SteamAPI_ISteamNetworking_GetSocketConnectionType(SNetSocket_t hSocket)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworking_GetSocketConnectionType$handle() {
        return SteamAPI_ISteamNetworking_GetSocketConnectionType.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ESNetSocketConnectionType SteamAPI_ISteamNetworking_GetSocketConnectionType(SNetSocket_t hSocket)
     * }
     */
    public static int SteamAPI_ISteamNetworking_GetSocketConnectionType(int hSocket) {
        var mh$ = SteamAPI_ISteamNetworking_GetSocketConnectionType.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworking_GetSocketConnectionType", hSocket);
            }
            return (int)mh$.invokeExact(hSocket);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworking_GetMaxPacketSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamNetworking_GetMaxPacketSize"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamNetworking_GetMaxPacketSize(SNetSocket_t hSocket)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworking_GetMaxPacketSize$descriptor() {
        return SteamAPI_ISteamNetworking_GetMaxPacketSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamNetworking_GetMaxPacketSize(SNetSocket_t hSocket)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworking_GetMaxPacketSize$handle() {
        return SteamAPI_ISteamNetworking_GetMaxPacketSize.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int SteamAPI_ISteamNetworking_GetMaxPacketSize(SNetSocket_t hSocket)
     * }
     */
    public static int SteamAPI_ISteamNetworking_GetMaxPacketSize(int hSocket) {
        var mh$ = SteamAPI_ISteamNetworking_GetMaxPacketSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworking_GetMaxPacketSize", hSocket);
            }
            return (int)mh$.invokeExact(hSocket);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamScreenshots_WriteScreenshot {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamScreenshots_WriteScreenshot"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ScreenshotHandle SteamAPI_ISteamScreenshots_WriteScreenshot(void *pubRGB, uint32 cubRGB, int nWidth, int nHeight)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamScreenshots_WriteScreenshot$descriptor() {
        return SteamAPI_ISteamScreenshots_WriteScreenshot.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ScreenshotHandle SteamAPI_ISteamScreenshots_WriteScreenshot(void *pubRGB, uint32 cubRGB, int nWidth, int nHeight)
     * }
     */
    public static MethodHandle SteamAPI_ISteamScreenshots_WriteScreenshot$handle() {
        return SteamAPI_ISteamScreenshots_WriteScreenshot.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ScreenshotHandle SteamAPI_ISteamScreenshots_WriteScreenshot(void *pubRGB, uint32 cubRGB, int nWidth, int nHeight)
     * }
     */
    public static int SteamAPI_ISteamScreenshots_WriteScreenshot(MemorySegment pubRGB, int cubRGB, int nWidth, int nHeight) {
        var mh$ = SteamAPI_ISteamScreenshots_WriteScreenshot.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamScreenshots_WriteScreenshot", pubRGB, cubRGB, nWidth, nHeight);
            }
            return (int)mh$.invokeExact(pubRGB, cubRGB, nWidth, nHeight);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamScreenshots_AddScreenshotToLibrary {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamScreenshots_AddScreenshotToLibrary"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ScreenshotHandle SteamAPI_ISteamScreenshots_AddScreenshotToLibrary(const char *pchFilename, const char *pchThumbnailFilename, int nWidth, int nHeight)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamScreenshots_AddScreenshotToLibrary$descriptor() {
        return SteamAPI_ISteamScreenshots_AddScreenshotToLibrary.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ScreenshotHandle SteamAPI_ISteamScreenshots_AddScreenshotToLibrary(const char *pchFilename, const char *pchThumbnailFilename, int nWidth, int nHeight)
     * }
     */
    public static MethodHandle SteamAPI_ISteamScreenshots_AddScreenshotToLibrary$handle() {
        return SteamAPI_ISteamScreenshots_AddScreenshotToLibrary.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ScreenshotHandle SteamAPI_ISteamScreenshots_AddScreenshotToLibrary(const char *pchFilename, const char *pchThumbnailFilename, int nWidth, int nHeight)
     * }
     */
    public static int SteamAPI_ISteamScreenshots_AddScreenshotToLibrary(MemorySegment pchFilename, MemorySegment pchThumbnailFilename, int nWidth, int nHeight) {
        var mh$ = SteamAPI_ISteamScreenshots_AddScreenshotToLibrary.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamScreenshots_AddScreenshotToLibrary", pchFilename, pchThumbnailFilename, nWidth, nHeight);
            }
            return (int)mh$.invokeExact(pchFilename, pchThumbnailFilename, nWidth, nHeight);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamScreenshots_TriggerScreenshot {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamScreenshots_TriggerScreenshot"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamScreenshots_TriggerScreenshot()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamScreenshots_TriggerScreenshot$descriptor() {
        return SteamAPI_ISteamScreenshots_TriggerScreenshot.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamScreenshots_TriggerScreenshot()
     * }
     */
    public static MethodHandle SteamAPI_ISteamScreenshots_TriggerScreenshot$handle() {
        return SteamAPI_ISteamScreenshots_TriggerScreenshot.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamScreenshots_TriggerScreenshot()
     * }
     */
    public static void SteamAPI_ISteamScreenshots_TriggerScreenshot() {
        var mh$ = SteamAPI_ISteamScreenshots_TriggerScreenshot.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamScreenshots_TriggerScreenshot");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamScreenshots_HookScreenshots {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamScreenshots_HookScreenshots"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamScreenshots_HookScreenshots(bool bHook)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamScreenshots_HookScreenshots$descriptor() {
        return SteamAPI_ISteamScreenshots_HookScreenshots.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamScreenshots_HookScreenshots(bool bHook)
     * }
     */
    public static MethodHandle SteamAPI_ISteamScreenshots_HookScreenshots$handle() {
        return SteamAPI_ISteamScreenshots_HookScreenshots.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamScreenshots_HookScreenshots(bool bHook)
     * }
     */
    public static void SteamAPI_ISteamScreenshots_HookScreenshots(boolean bHook) {
        var mh$ = SteamAPI_ISteamScreenshots_HookScreenshots.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamScreenshots_HookScreenshots", bHook);
            }
            mh$.invokeExact(bHook);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamScreenshots_SetLocation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamScreenshots_SetLocation"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamScreenshots_SetLocation(ScreenshotHandle hScreenshot, const char *pchLocation)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamScreenshots_SetLocation$descriptor() {
        return SteamAPI_ISteamScreenshots_SetLocation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamScreenshots_SetLocation(ScreenshotHandle hScreenshot, const char *pchLocation)
     * }
     */
    public static MethodHandle SteamAPI_ISteamScreenshots_SetLocation$handle() {
        return SteamAPI_ISteamScreenshots_SetLocation.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamScreenshots_SetLocation(ScreenshotHandle hScreenshot, const char *pchLocation)
     * }
     */
    public static boolean SteamAPI_ISteamScreenshots_SetLocation(int hScreenshot, MemorySegment pchLocation) {
        var mh$ = SteamAPI_ISteamScreenshots_SetLocation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamScreenshots_SetLocation", hScreenshot, pchLocation);
            }
            return (boolean)mh$.invokeExact(hScreenshot, pchLocation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamScreenshots_TagUser {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamScreenshots_TagUser"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamScreenshots_TagUser(ScreenshotHandle hScreenshot, uint64_steamid steamID)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamScreenshots_TagUser$descriptor() {
        return SteamAPI_ISteamScreenshots_TagUser.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamScreenshots_TagUser(ScreenshotHandle hScreenshot, uint64_steamid steamID)
     * }
     */
    public static MethodHandle SteamAPI_ISteamScreenshots_TagUser$handle() {
        return SteamAPI_ISteamScreenshots_TagUser.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamScreenshots_TagUser(ScreenshotHandle hScreenshot, uint64_steamid steamID)
     * }
     */
    public static boolean SteamAPI_ISteamScreenshots_TagUser(int hScreenshot, long steamID) {
        var mh$ = SteamAPI_ISteamScreenshots_TagUser.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamScreenshots_TagUser", hScreenshot, steamID);
            }
            return (boolean)mh$.invokeExact(hScreenshot, steamID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamScreenshots_TagPublishedFile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamScreenshots_TagPublishedFile"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamScreenshots_TagPublishedFile(ScreenshotHandle hScreenshot, PublishedFileId_t unPublishedFileID)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamScreenshots_TagPublishedFile$descriptor() {
        return SteamAPI_ISteamScreenshots_TagPublishedFile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamScreenshots_TagPublishedFile(ScreenshotHandle hScreenshot, PublishedFileId_t unPublishedFileID)
     * }
     */
    public static MethodHandle SteamAPI_ISteamScreenshots_TagPublishedFile$handle() {
        return SteamAPI_ISteamScreenshots_TagPublishedFile.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamScreenshots_TagPublishedFile(ScreenshotHandle hScreenshot, PublishedFileId_t unPublishedFileID)
     * }
     */
    public static boolean SteamAPI_ISteamScreenshots_TagPublishedFile(int hScreenshot, long unPublishedFileID) {
        var mh$ = SteamAPI_ISteamScreenshots_TagPublishedFile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamScreenshots_TagPublishedFile", hScreenshot, unPublishedFileID);
            }
            return (boolean)mh$.invokeExact(hScreenshot, unPublishedFileID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamScreenshots_IsScreenshotsHooked {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamScreenshots_IsScreenshotsHooked"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamScreenshots_IsScreenshotsHooked()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamScreenshots_IsScreenshotsHooked$descriptor() {
        return SteamAPI_ISteamScreenshots_IsScreenshotsHooked.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamScreenshots_IsScreenshotsHooked()
     * }
     */
    public static MethodHandle SteamAPI_ISteamScreenshots_IsScreenshotsHooked$handle() {
        return SteamAPI_ISteamScreenshots_IsScreenshotsHooked.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamScreenshots_IsScreenshotsHooked()
     * }
     */
    public static boolean SteamAPI_ISteamScreenshots_IsScreenshotsHooked() {
        var mh$ = SteamAPI_ISteamScreenshots_IsScreenshotsHooked.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamScreenshots_IsScreenshotsHooked");
            }
            return (boolean)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamScreenshots_AddVRScreenshotToLibrary {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamScreenshots_AddVRScreenshotToLibrary"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ScreenshotHandle SteamAPI_ISteamScreenshots_AddVRScreenshotToLibrary(EVRScreenshotType eType, const char *pchFilename, const char *pchVRFilename)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamScreenshots_AddVRScreenshotToLibrary$descriptor() {
        return SteamAPI_ISteamScreenshots_AddVRScreenshotToLibrary.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ScreenshotHandle SteamAPI_ISteamScreenshots_AddVRScreenshotToLibrary(EVRScreenshotType eType, const char *pchFilename, const char *pchVRFilename)
     * }
     */
    public static MethodHandle SteamAPI_ISteamScreenshots_AddVRScreenshotToLibrary$handle() {
        return SteamAPI_ISteamScreenshots_AddVRScreenshotToLibrary.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ScreenshotHandle SteamAPI_ISteamScreenshots_AddVRScreenshotToLibrary(EVRScreenshotType eType, const char *pchFilename, const char *pchVRFilename)
     * }
     */
    public static int SteamAPI_ISteamScreenshots_AddVRScreenshotToLibrary(int eType, MemorySegment pchFilename, MemorySegment pchVRFilename) {
        var mh$ = SteamAPI_ISteamScreenshots_AddVRScreenshotToLibrary.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamScreenshots_AddVRScreenshotToLibrary", eType, pchFilename, pchVRFilename);
            }
            return (int)mh$.invokeExact(eType, pchFilename, pchVRFilename);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMusic_BIsEnabled {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamMusic_BIsEnabled"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusic_BIsEnabled()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMusic_BIsEnabled$descriptor() {
        return SteamAPI_ISteamMusic_BIsEnabled.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusic_BIsEnabled()
     * }
     */
    public static MethodHandle SteamAPI_ISteamMusic_BIsEnabled$handle() {
        return SteamAPI_ISteamMusic_BIsEnabled.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusic_BIsEnabled()
     * }
     */
    public static boolean SteamAPI_ISteamMusic_BIsEnabled() {
        var mh$ = SteamAPI_ISteamMusic_BIsEnabled.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMusic_BIsEnabled");
            }
            return (boolean)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMusic_BIsPlaying {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamMusic_BIsPlaying"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusic_BIsPlaying()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMusic_BIsPlaying$descriptor() {
        return SteamAPI_ISteamMusic_BIsPlaying.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusic_BIsPlaying()
     * }
     */
    public static MethodHandle SteamAPI_ISteamMusic_BIsPlaying$handle() {
        return SteamAPI_ISteamMusic_BIsPlaying.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusic_BIsPlaying()
     * }
     */
    public static boolean SteamAPI_ISteamMusic_BIsPlaying() {
        var mh$ = SteamAPI_ISteamMusic_BIsPlaying.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMusic_BIsPlaying");
            }
            return (boolean)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMusic_GetPlaybackStatus {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamMusic_GetPlaybackStatus"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * AudioPlayback_Status SteamAPI_ISteamMusic_GetPlaybackStatus()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMusic_GetPlaybackStatus$descriptor() {
        return SteamAPI_ISteamMusic_GetPlaybackStatus.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * AudioPlayback_Status SteamAPI_ISteamMusic_GetPlaybackStatus()
     * }
     */
    public static MethodHandle SteamAPI_ISteamMusic_GetPlaybackStatus$handle() {
        return SteamAPI_ISteamMusic_GetPlaybackStatus.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * AudioPlayback_Status SteamAPI_ISteamMusic_GetPlaybackStatus()
     * }
     */
    public static int SteamAPI_ISteamMusic_GetPlaybackStatus() {
        var mh$ = SteamAPI_ISteamMusic_GetPlaybackStatus.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMusic_GetPlaybackStatus");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMusic_Play {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamMusic_Play"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMusic_Play()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMusic_Play$descriptor() {
        return SteamAPI_ISteamMusic_Play.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMusic_Play()
     * }
     */
    public static MethodHandle SteamAPI_ISteamMusic_Play$handle() {
        return SteamAPI_ISteamMusic_Play.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamMusic_Play()
     * }
     */
    public static void SteamAPI_ISteamMusic_Play() {
        var mh$ = SteamAPI_ISteamMusic_Play.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMusic_Play");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMusic_Pause {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamMusic_Pause"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMusic_Pause()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMusic_Pause$descriptor() {
        return SteamAPI_ISteamMusic_Pause.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMusic_Pause()
     * }
     */
    public static MethodHandle SteamAPI_ISteamMusic_Pause$handle() {
        return SteamAPI_ISteamMusic_Pause.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamMusic_Pause()
     * }
     */
    public static void SteamAPI_ISteamMusic_Pause() {
        var mh$ = SteamAPI_ISteamMusic_Pause.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMusic_Pause");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMusic_PlayPrevious {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamMusic_PlayPrevious"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMusic_PlayPrevious()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMusic_PlayPrevious$descriptor() {
        return SteamAPI_ISteamMusic_PlayPrevious.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMusic_PlayPrevious()
     * }
     */
    public static MethodHandle SteamAPI_ISteamMusic_PlayPrevious$handle() {
        return SteamAPI_ISteamMusic_PlayPrevious.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamMusic_PlayPrevious()
     * }
     */
    public static void SteamAPI_ISteamMusic_PlayPrevious() {
        var mh$ = SteamAPI_ISteamMusic_PlayPrevious.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMusic_PlayPrevious");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMusic_PlayNext {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamMusic_PlayNext"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMusic_PlayNext()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMusic_PlayNext$descriptor() {
        return SteamAPI_ISteamMusic_PlayNext.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMusic_PlayNext()
     * }
     */
    public static MethodHandle SteamAPI_ISteamMusic_PlayNext$handle() {
        return SteamAPI_ISteamMusic_PlayNext.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamMusic_PlayNext()
     * }
     */
    public static void SteamAPI_ISteamMusic_PlayNext() {
        var mh$ = SteamAPI_ISteamMusic_PlayNext.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMusic_PlayNext");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMusic_SetVolume {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_FLOAT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamMusic_SetVolume"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMusic_SetVolume(float flVolume)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMusic_SetVolume$descriptor() {
        return SteamAPI_ISteamMusic_SetVolume.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamMusic_SetVolume(float flVolume)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMusic_SetVolume$handle() {
        return SteamAPI_ISteamMusic_SetVolume.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamMusic_SetVolume(float flVolume)
     * }
     */
    public static void SteamAPI_ISteamMusic_SetVolume(float flVolume) {
        var mh$ = SteamAPI_ISteamMusic_SetVolume.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMusic_SetVolume", flVolume);
            }
            mh$.invokeExact(flVolume);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMusic_GetVolume {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_FLOAT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamMusic_GetVolume"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * float SteamAPI_ISteamMusic_GetVolume()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMusic_GetVolume$descriptor() {
        return SteamAPI_ISteamMusic_GetVolume.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * float SteamAPI_ISteamMusic_GetVolume()
     * }
     */
    public static MethodHandle SteamAPI_ISteamMusic_GetVolume$handle() {
        return SteamAPI_ISteamMusic_GetVolume.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * float SteamAPI_ISteamMusic_GetVolume()
     * }
     */
    public static float SteamAPI_ISteamMusic_GetVolume() {
        var mh$ = SteamAPI_ISteamMusic_GetVolume.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMusic_GetVolume");
            }
            return (float)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMusicRemote_RegisterSteamMusicRemote {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamMusicRemote_RegisterSteamMusicRemote"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_RegisterSteamMusicRemote(const char *pchName)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMusicRemote_RegisterSteamMusicRemote$descriptor() {
        return SteamAPI_ISteamMusicRemote_RegisterSteamMusicRemote.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_RegisterSteamMusicRemote(const char *pchName)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMusicRemote_RegisterSteamMusicRemote$handle() {
        return SteamAPI_ISteamMusicRemote_RegisterSteamMusicRemote.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_RegisterSteamMusicRemote(const char *pchName)
     * }
     */
    public static boolean SteamAPI_ISteamMusicRemote_RegisterSteamMusicRemote(MemorySegment pchName) {
        var mh$ = SteamAPI_ISteamMusicRemote_RegisterSteamMusicRemote.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMusicRemote_RegisterSteamMusicRemote", pchName);
            }
            return (boolean)mh$.invokeExact(pchName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMusicRemote_DeregisterSteamMusicRemote {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamMusicRemote_DeregisterSteamMusicRemote"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_DeregisterSteamMusicRemote()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMusicRemote_DeregisterSteamMusicRemote$descriptor() {
        return SteamAPI_ISteamMusicRemote_DeregisterSteamMusicRemote.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_DeregisterSteamMusicRemote()
     * }
     */
    public static MethodHandle SteamAPI_ISteamMusicRemote_DeregisterSteamMusicRemote$handle() {
        return SteamAPI_ISteamMusicRemote_DeregisterSteamMusicRemote.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_DeregisterSteamMusicRemote()
     * }
     */
    public static boolean SteamAPI_ISteamMusicRemote_DeregisterSteamMusicRemote() {
        var mh$ = SteamAPI_ISteamMusicRemote_DeregisterSteamMusicRemote.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMusicRemote_DeregisterSteamMusicRemote");
            }
            return (boolean)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMusicRemote_BIsCurrentMusicRemote {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamMusicRemote_BIsCurrentMusicRemote"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_BIsCurrentMusicRemote()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMusicRemote_BIsCurrentMusicRemote$descriptor() {
        return SteamAPI_ISteamMusicRemote_BIsCurrentMusicRemote.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_BIsCurrentMusicRemote()
     * }
     */
    public static MethodHandle SteamAPI_ISteamMusicRemote_BIsCurrentMusicRemote$handle() {
        return SteamAPI_ISteamMusicRemote_BIsCurrentMusicRemote.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_BIsCurrentMusicRemote()
     * }
     */
    public static boolean SteamAPI_ISteamMusicRemote_BIsCurrentMusicRemote() {
        var mh$ = SteamAPI_ISteamMusicRemote_BIsCurrentMusicRemote.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMusicRemote_BIsCurrentMusicRemote");
            }
            return (boolean)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMusicRemote_BActivationSuccess {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamMusicRemote_BActivationSuccess"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_BActivationSuccess(bool bValue)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMusicRemote_BActivationSuccess$descriptor() {
        return SteamAPI_ISteamMusicRemote_BActivationSuccess.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_BActivationSuccess(bool bValue)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMusicRemote_BActivationSuccess$handle() {
        return SteamAPI_ISteamMusicRemote_BActivationSuccess.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_BActivationSuccess(bool bValue)
     * }
     */
    public static boolean SteamAPI_ISteamMusicRemote_BActivationSuccess(boolean bValue) {
        var mh$ = SteamAPI_ISteamMusicRemote_BActivationSuccess.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMusicRemote_BActivationSuccess", bValue);
            }
            return (boolean)mh$.invokeExact(bValue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMusicRemote_SetDisplayName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamMusicRemote_SetDisplayName"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_SetDisplayName(const char *pchDisplayName)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMusicRemote_SetDisplayName$descriptor() {
        return SteamAPI_ISteamMusicRemote_SetDisplayName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_SetDisplayName(const char *pchDisplayName)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMusicRemote_SetDisplayName$handle() {
        return SteamAPI_ISteamMusicRemote_SetDisplayName.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_SetDisplayName(const char *pchDisplayName)
     * }
     */
    public static boolean SteamAPI_ISteamMusicRemote_SetDisplayName(MemorySegment pchDisplayName) {
        var mh$ = SteamAPI_ISteamMusicRemote_SetDisplayName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMusicRemote_SetDisplayName", pchDisplayName);
            }
            return (boolean)mh$.invokeExact(pchDisplayName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMusicRemote_SetPNGIcon_64x64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamMusicRemote_SetPNGIcon_64x64"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_SetPNGIcon_64x64(void *pvBuffer, uint32 cbBufferLength)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMusicRemote_SetPNGIcon_64x64$descriptor() {
        return SteamAPI_ISteamMusicRemote_SetPNGIcon_64x64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_SetPNGIcon_64x64(void *pvBuffer, uint32 cbBufferLength)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMusicRemote_SetPNGIcon_64x64$handle() {
        return SteamAPI_ISteamMusicRemote_SetPNGIcon_64x64.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_SetPNGIcon_64x64(void *pvBuffer, uint32 cbBufferLength)
     * }
     */
    public static boolean SteamAPI_ISteamMusicRemote_SetPNGIcon_64x64(MemorySegment pvBuffer, int cbBufferLength) {
        var mh$ = SteamAPI_ISteamMusicRemote_SetPNGIcon_64x64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMusicRemote_SetPNGIcon_64x64", pvBuffer, cbBufferLength);
            }
            return (boolean)mh$.invokeExact(pvBuffer, cbBufferLength);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMusicRemote_EnablePlayPrevious {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamMusicRemote_EnablePlayPrevious"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_EnablePlayPrevious(bool bValue)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMusicRemote_EnablePlayPrevious$descriptor() {
        return SteamAPI_ISteamMusicRemote_EnablePlayPrevious.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_EnablePlayPrevious(bool bValue)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMusicRemote_EnablePlayPrevious$handle() {
        return SteamAPI_ISteamMusicRemote_EnablePlayPrevious.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_EnablePlayPrevious(bool bValue)
     * }
     */
    public static boolean SteamAPI_ISteamMusicRemote_EnablePlayPrevious(boolean bValue) {
        var mh$ = SteamAPI_ISteamMusicRemote_EnablePlayPrevious.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMusicRemote_EnablePlayPrevious", bValue);
            }
            return (boolean)mh$.invokeExact(bValue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMusicRemote_EnablePlayNext {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamMusicRemote_EnablePlayNext"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_EnablePlayNext(bool bValue)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMusicRemote_EnablePlayNext$descriptor() {
        return SteamAPI_ISteamMusicRemote_EnablePlayNext.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_EnablePlayNext(bool bValue)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMusicRemote_EnablePlayNext$handle() {
        return SteamAPI_ISteamMusicRemote_EnablePlayNext.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_EnablePlayNext(bool bValue)
     * }
     */
    public static boolean SteamAPI_ISteamMusicRemote_EnablePlayNext(boolean bValue) {
        var mh$ = SteamAPI_ISteamMusicRemote_EnablePlayNext.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMusicRemote_EnablePlayNext", bValue);
            }
            return (boolean)mh$.invokeExact(bValue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMusicRemote_EnableShuffled {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamMusicRemote_EnableShuffled"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_EnableShuffled(bool bValue)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMusicRemote_EnableShuffled$descriptor() {
        return SteamAPI_ISteamMusicRemote_EnableShuffled.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_EnableShuffled(bool bValue)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMusicRemote_EnableShuffled$handle() {
        return SteamAPI_ISteamMusicRemote_EnableShuffled.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_EnableShuffled(bool bValue)
     * }
     */
    public static boolean SteamAPI_ISteamMusicRemote_EnableShuffled(boolean bValue) {
        var mh$ = SteamAPI_ISteamMusicRemote_EnableShuffled.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMusicRemote_EnableShuffled", bValue);
            }
            return (boolean)mh$.invokeExact(bValue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMusicRemote_EnableLooped {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamMusicRemote_EnableLooped"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_EnableLooped(bool bValue)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMusicRemote_EnableLooped$descriptor() {
        return SteamAPI_ISteamMusicRemote_EnableLooped.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_EnableLooped(bool bValue)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMusicRemote_EnableLooped$handle() {
        return SteamAPI_ISteamMusicRemote_EnableLooped.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_EnableLooped(bool bValue)
     * }
     */
    public static boolean SteamAPI_ISteamMusicRemote_EnableLooped(boolean bValue) {
        var mh$ = SteamAPI_ISteamMusicRemote_EnableLooped.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMusicRemote_EnableLooped", bValue);
            }
            return (boolean)mh$.invokeExact(bValue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMusicRemote_EnableQueue {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamMusicRemote_EnableQueue"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_EnableQueue(bool bValue)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMusicRemote_EnableQueue$descriptor() {
        return SteamAPI_ISteamMusicRemote_EnableQueue.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_EnableQueue(bool bValue)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMusicRemote_EnableQueue$handle() {
        return SteamAPI_ISteamMusicRemote_EnableQueue.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_EnableQueue(bool bValue)
     * }
     */
    public static boolean SteamAPI_ISteamMusicRemote_EnableQueue(boolean bValue) {
        var mh$ = SteamAPI_ISteamMusicRemote_EnableQueue.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMusicRemote_EnableQueue", bValue);
            }
            return (boolean)mh$.invokeExact(bValue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMusicRemote_EnablePlaylists {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamMusicRemote_EnablePlaylists"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_EnablePlaylists(bool bValue)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMusicRemote_EnablePlaylists$descriptor() {
        return SteamAPI_ISteamMusicRemote_EnablePlaylists.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_EnablePlaylists(bool bValue)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMusicRemote_EnablePlaylists$handle() {
        return SteamAPI_ISteamMusicRemote_EnablePlaylists.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_EnablePlaylists(bool bValue)
     * }
     */
    public static boolean SteamAPI_ISteamMusicRemote_EnablePlaylists(boolean bValue) {
        var mh$ = SteamAPI_ISteamMusicRemote_EnablePlaylists.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMusicRemote_EnablePlaylists", bValue);
            }
            return (boolean)mh$.invokeExact(bValue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMusicRemote_UpdatePlaybackStatus {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamMusicRemote_UpdatePlaybackStatus"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_UpdatePlaybackStatus(AudioPlayback_Status nStatus)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMusicRemote_UpdatePlaybackStatus$descriptor() {
        return SteamAPI_ISteamMusicRemote_UpdatePlaybackStatus.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_UpdatePlaybackStatus(AudioPlayback_Status nStatus)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMusicRemote_UpdatePlaybackStatus$handle() {
        return SteamAPI_ISteamMusicRemote_UpdatePlaybackStatus.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_UpdatePlaybackStatus(AudioPlayback_Status nStatus)
     * }
     */
    public static boolean SteamAPI_ISteamMusicRemote_UpdatePlaybackStatus(int nStatus) {
        var mh$ = SteamAPI_ISteamMusicRemote_UpdatePlaybackStatus.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMusicRemote_UpdatePlaybackStatus", nStatus);
            }
            return (boolean)mh$.invokeExact(nStatus);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMusicRemote_UpdateShuffled {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamMusicRemote_UpdateShuffled"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_UpdateShuffled(bool bValue)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMusicRemote_UpdateShuffled$descriptor() {
        return SteamAPI_ISteamMusicRemote_UpdateShuffled.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_UpdateShuffled(bool bValue)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMusicRemote_UpdateShuffled$handle() {
        return SteamAPI_ISteamMusicRemote_UpdateShuffled.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_UpdateShuffled(bool bValue)
     * }
     */
    public static boolean SteamAPI_ISteamMusicRemote_UpdateShuffled(boolean bValue) {
        var mh$ = SteamAPI_ISteamMusicRemote_UpdateShuffled.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMusicRemote_UpdateShuffled", bValue);
            }
            return (boolean)mh$.invokeExact(bValue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMusicRemote_UpdateLooped {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamMusicRemote_UpdateLooped"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_UpdateLooped(bool bValue)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMusicRemote_UpdateLooped$descriptor() {
        return SteamAPI_ISteamMusicRemote_UpdateLooped.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_UpdateLooped(bool bValue)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMusicRemote_UpdateLooped$handle() {
        return SteamAPI_ISteamMusicRemote_UpdateLooped.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_UpdateLooped(bool bValue)
     * }
     */
    public static boolean SteamAPI_ISteamMusicRemote_UpdateLooped(boolean bValue) {
        var mh$ = SteamAPI_ISteamMusicRemote_UpdateLooped.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMusicRemote_UpdateLooped", bValue);
            }
            return (boolean)mh$.invokeExact(bValue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMusicRemote_UpdateVolume {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_FLOAT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamMusicRemote_UpdateVolume"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_UpdateVolume(float flValue)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMusicRemote_UpdateVolume$descriptor() {
        return SteamAPI_ISteamMusicRemote_UpdateVolume.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_UpdateVolume(float flValue)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMusicRemote_UpdateVolume$handle() {
        return SteamAPI_ISteamMusicRemote_UpdateVolume.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_UpdateVolume(float flValue)
     * }
     */
    public static boolean SteamAPI_ISteamMusicRemote_UpdateVolume(float flValue) {
        var mh$ = SteamAPI_ISteamMusicRemote_UpdateVolume.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMusicRemote_UpdateVolume", flValue);
            }
            return (boolean)mh$.invokeExact(flValue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMusicRemote_CurrentEntryWillChange {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamMusicRemote_CurrentEntryWillChange"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_CurrentEntryWillChange()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMusicRemote_CurrentEntryWillChange$descriptor() {
        return SteamAPI_ISteamMusicRemote_CurrentEntryWillChange.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_CurrentEntryWillChange()
     * }
     */
    public static MethodHandle SteamAPI_ISteamMusicRemote_CurrentEntryWillChange$handle() {
        return SteamAPI_ISteamMusicRemote_CurrentEntryWillChange.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_CurrentEntryWillChange()
     * }
     */
    public static boolean SteamAPI_ISteamMusicRemote_CurrentEntryWillChange() {
        var mh$ = SteamAPI_ISteamMusicRemote_CurrentEntryWillChange.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMusicRemote_CurrentEntryWillChange");
            }
            return (boolean)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMusicRemote_CurrentEntryIsAvailable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamMusicRemote_CurrentEntryIsAvailable"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_CurrentEntryIsAvailable(bool bAvailable)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMusicRemote_CurrentEntryIsAvailable$descriptor() {
        return SteamAPI_ISteamMusicRemote_CurrentEntryIsAvailable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_CurrentEntryIsAvailable(bool bAvailable)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMusicRemote_CurrentEntryIsAvailable$handle() {
        return SteamAPI_ISteamMusicRemote_CurrentEntryIsAvailable.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_CurrentEntryIsAvailable(bool bAvailable)
     * }
     */
    public static boolean SteamAPI_ISteamMusicRemote_CurrentEntryIsAvailable(boolean bAvailable) {
        var mh$ = SteamAPI_ISteamMusicRemote_CurrentEntryIsAvailable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMusicRemote_CurrentEntryIsAvailable", bAvailable);
            }
            return (boolean)mh$.invokeExact(bAvailable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMusicRemote_UpdateCurrentEntryText {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamMusicRemote_UpdateCurrentEntryText"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_UpdateCurrentEntryText(const char *pchText)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMusicRemote_UpdateCurrentEntryText$descriptor() {
        return SteamAPI_ISteamMusicRemote_UpdateCurrentEntryText.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_UpdateCurrentEntryText(const char *pchText)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMusicRemote_UpdateCurrentEntryText$handle() {
        return SteamAPI_ISteamMusicRemote_UpdateCurrentEntryText.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_UpdateCurrentEntryText(const char *pchText)
     * }
     */
    public static boolean SteamAPI_ISteamMusicRemote_UpdateCurrentEntryText(MemorySegment pchText) {
        var mh$ = SteamAPI_ISteamMusicRemote_UpdateCurrentEntryText.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMusicRemote_UpdateCurrentEntryText", pchText);
            }
            return (boolean)mh$.invokeExact(pchText);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMusicRemote_UpdateCurrentEntryElapsedSeconds {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamMusicRemote_UpdateCurrentEntryElapsedSeconds"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_UpdateCurrentEntryElapsedSeconds(int nValue)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMusicRemote_UpdateCurrentEntryElapsedSeconds$descriptor() {
        return SteamAPI_ISteamMusicRemote_UpdateCurrentEntryElapsedSeconds.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_UpdateCurrentEntryElapsedSeconds(int nValue)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMusicRemote_UpdateCurrentEntryElapsedSeconds$handle() {
        return SteamAPI_ISteamMusicRemote_UpdateCurrentEntryElapsedSeconds.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_UpdateCurrentEntryElapsedSeconds(int nValue)
     * }
     */
    public static boolean SteamAPI_ISteamMusicRemote_UpdateCurrentEntryElapsedSeconds(int nValue) {
        var mh$ = SteamAPI_ISteamMusicRemote_UpdateCurrentEntryElapsedSeconds.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMusicRemote_UpdateCurrentEntryElapsedSeconds", nValue);
            }
            return (boolean)mh$.invokeExact(nValue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMusicRemote_UpdateCurrentEntryCoverArt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamMusicRemote_UpdateCurrentEntryCoverArt"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_UpdateCurrentEntryCoverArt(void *pvBuffer, uint32 cbBufferLength)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMusicRemote_UpdateCurrentEntryCoverArt$descriptor() {
        return SteamAPI_ISteamMusicRemote_UpdateCurrentEntryCoverArt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_UpdateCurrentEntryCoverArt(void *pvBuffer, uint32 cbBufferLength)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMusicRemote_UpdateCurrentEntryCoverArt$handle() {
        return SteamAPI_ISteamMusicRemote_UpdateCurrentEntryCoverArt.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_UpdateCurrentEntryCoverArt(void *pvBuffer, uint32 cbBufferLength)
     * }
     */
    public static boolean SteamAPI_ISteamMusicRemote_UpdateCurrentEntryCoverArt(MemorySegment pvBuffer, int cbBufferLength) {
        var mh$ = SteamAPI_ISteamMusicRemote_UpdateCurrentEntryCoverArt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMusicRemote_UpdateCurrentEntryCoverArt", pvBuffer, cbBufferLength);
            }
            return (boolean)mh$.invokeExact(pvBuffer, cbBufferLength);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMusicRemote_CurrentEntryDidChange {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamMusicRemote_CurrentEntryDidChange"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_CurrentEntryDidChange()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMusicRemote_CurrentEntryDidChange$descriptor() {
        return SteamAPI_ISteamMusicRemote_CurrentEntryDidChange.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_CurrentEntryDidChange()
     * }
     */
    public static MethodHandle SteamAPI_ISteamMusicRemote_CurrentEntryDidChange$handle() {
        return SteamAPI_ISteamMusicRemote_CurrentEntryDidChange.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_CurrentEntryDidChange()
     * }
     */
    public static boolean SteamAPI_ISteamMusicRemote_CurrentEntryDidChange() {
        var mh$ = SteamAPI_ISteamMusicRemote_CurrentEntryDidChange.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMusicRemote_CurrentEntryDidChange");
            }
            return (boolean)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMusicRemote_QueueWillChange {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamMusicRemote_QueueWillChange"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_QueueWillChange()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMusicRemote_QueueWillChange$descriptor() {
        return SteamAPI_ISteamMusicRemote_QueueWillChange.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_QueueWillChange()
     * }
     */
    public static MethodHandle SteamAPI_ISteamMusicRemote_QueueWillChange$handle() {
        return SteamAPI_ISteamMusicRemote_QueueWillChange.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_QueueWillChange()
     * }
     */
    public static boolean SteamAPI_ISteamMusicRemote_QueueWillChange() {
        var mh$ = SteamAPI_ISteamMusicRemote_QueueWillChange.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMusicRemote_QueueWillChange");
            }
            return (boolean)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMusicRemote_ResetQueueEntries {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamMusicRemote_ResetQueueEntries"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_ResetQueueEntries()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMusicRemote_ResetQueueEntries$descriptor() {
        return SteamAPI_ISteamMusicRemote_ResetQueueEntries.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_ResetQueueEntries()
     * }
     */
    public static MethodHandle SteamAPI_ISteamMusicRemote_ResetQueueEntries$handle() {
        return SteamAPI_ISteamMusicRemote_ResetQueueEntries.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_ResetQueueEntries()
     * }
     */
    public static boolean SteamAPI_ISteamMusicRemote_ResetQueueEntries() {
        var mh$ = SteamAPI_ISteamMusicRemote_ResetQueueEntries.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMusicRemote_ResetQueueEntries");
            }
            return (boolean)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMusicRemote_SetQueueEntry {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamMusicRemote_SetQueueEntry"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_SetQueueEntry(int nID, int nPosition, const char *pchEntryText)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMusicRemote_SetQueueEntry$descriptor() {
        return SteamAPI_ISteamMusicRemote_SetQueueEntry.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_SetQueueEntry(int nID, int nPosition, const char *pchEntryText)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMusicRemote_SetQueueEntry$handle() {
        return SteamAPI_ISteamMusicRemote_SetQueueEntry.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_SetQueueEntry(int nID, int nPosition, const char *pchEntryText)
     * }
     */
    public static boolean SteamAPI_ISteamMusicRemote_SetQueueEntry(int nID, int nPosition, MemorySegment pchEntryText) {
        var mh$ = SteamAPI_ISteamMusicRemote_SetQueueEntry.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMusicRemote_SetQueueEntry", nID, nPosition, pchEntryText);
            }
            return (boolean)mh$.invokeExact(nID, nPosition, pchEntryText);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMusicRemote_SetCurrentQueueEntry {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamMusicRemote_SetCurrentQueueEntry"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_SetCurrentQueueEntry(int nID)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMusicRemote_SetCurrentQueueEntry$descriptor() {
        return SteamAPI_ISteamMusicRemote_SetCurrentQueueEntry.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_SetCurrentQueueEntry(int nID)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMusicRemote_SetCurrentQueueEntry$handle() {
        return SteamAPI_ISteamMusicRemote_SetCurrentQueueEntry.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_SetCurrentQueueEntry(int nID)
     * }
     */
    public static boolean SteamAPI_ISteamMusicRemote_SetCurrentQueueEntry(int nID) {
        var mh$ = SteamAPI_ISteamMusicRemote_SetCurrentQueueEntry.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMusicRemote_SetCurrentQueueEntry", nID);
            }
            return (boolean)mh$.invokeExact(nID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMusicRemote_QueueDidChange {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamMusicRemote_QueueDidChange"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_QueueDidChange()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMusicRemote_QueueDidChange$descriptor() {
        return SteamAPI_ISteamMusicRemote_QueueDidChange.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_QueueDidChange()
     * }
     */
    public static MethodHandle SteamAPI_ISteamMusicRemote_QueueDidChange$handle() {
        return SteamAPI_ISteamMusicRemote_QueueDidChange.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_QueueDidChange()
     * }
     */
    public static boolean SteamAPI_ISteamMusicRemote_QueueDidChange() {
        var mh$ = SteamAPI_ISteamMusicRemote_QueueDidChange.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMusicRemote_QueueDidChange");
            }
            return (boolean)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMusicRemote_PlaylistWillChange {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamMusicRemote_PlaylistWillChange"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_PlaylistWillChange()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMusicRemote_PlaylistWillChange$descriptor() {
        return SteamAPI_ISteamMusicRemote_PlaylistWillChange.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_PlaylistWillChange()
     * }
     */
    public static MethodHandle SteamAPI_ISteamMusicRemote_PlaylistWillChange$handle() {
        return SteamAPI_ISteamMusicRemote_PlaylistWillChange.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_PlaylistWillChange()
     * }
     */
    public static boolean SteamAPI_ISteamMusicRemote_PlaylistWillChange() {
        var mh$ = SteamAPI_ISteamMusicRemote_PlaylistWillChange.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMusicRemote_PlaylistWillChange");
            }
            return (boolean)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMusicRemote_ResetPlaylistEntries {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamMusicRemote_ResetPlaylistEntries"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_ResetPlaylistEntries()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMusicRemote_ResetPlaylistEntries$descriptor() {
        return SteamAPI_ISteamMusicRemote_ResetPlaylistEntries.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_ResetPlaylistEntries()
     * }
     */
    public static MethodHandle SteamAPI_ISteamMusicRemote_ResetPlaylistEntries$handle() {
        return SteamAPI_ISteamMusicRemote_ResetPlaylistEntries.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_ResetPlaylistEntries()
     * }
     */
    public static boolean SteamAPI_ISteamMusicRemote_ResetPlaylistEntries() {
        var mh$ = SteamAPI_ISteamMusicRemote_ResetPlaylistEntries.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMusicRemote_ResetPlaylistEntries");
            }
            return (boolean)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMusicRemote_SetPlaylistEntry {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamMusicRemote_SetPlaylistEntry"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_SetPlaylistEntry(int nID, int nPosition, const char *pchEntryText)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMusicRemote_SetPlaylistEntry$descriptor() {
        return SteamAPI_ISteamMusicRemote_SetPlaylistEntry.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_SetPlaylistEntry(int nID, int nPosition, const char *pchEntryText)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMusicRemote_SetPlaylistEntry$handle() {
        return SteamAPI_ISteamMusicRemote_SetPlaylistEntry.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_SetPlaylistEntry(int nID, int nPosition, const char *pchEntryText)
     * }
     */
    public static boolean SteamAPI_ISteamMusicRemote_SetPlaylistEntry(int nID, int nPosition, MemorySegment pchEntryText) {
        var mh$ = SteamAPI_ISteamMusicRemote_SetPlaylistEntry.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMusicRemote_SetPlaylistEntry", nID, nPosition, pchEntryText);
            }
            return (boolean)mh$.invokeExact(nID, nPosition, pchEntryText);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMusicRemote_SetCurrentPlaylistEntry {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamMusicRemote_SetCurrentPlaylistEntry"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_SetCurrentPlaylistEntry(int nID)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMusicRemote_SetCurrentPlaylistEntry$descriptor() {
        return SteamAPI_ISteamMusicRemote_SetCurrentPlaylistEntry.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_SetCurrentPlaylistEntry(int nID)
     * }
     */
    public static MethodHandle SteamAPI_ISteamMusicRemote_SetCurrentPlaylistEntry$handle() {
        return SteamAPI_ISteamMusicRemote_SetCurrentPlaylistEntry.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_SetCurrentPlaylistEntry(int nID)
     * }
     */
    public static boolean SteamAPI_ISteamMusicRemote_SetCurrentPlaylistEntry(int nID) {
        var mh$ = SteamAPI_ISteamMusicRemote_SetCurrentPlaylistEntry.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMusicRemote_SetCurrentPlaylistEntry", nID);
            }
            return (boolean)mh$.invokeExact(nID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamMusicRemote_PlaylistDidChange {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamMusicRemote_PlaylistDidChange"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_PlaylistDidChange()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamMusicRemote_PlaylistDidChange$descriptor() {
        return SteamAPI_ISteamMusicRemote_PlaylistDidChange.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_PlaylistDidChange()
     * }
     */
    public static MethodHandle SteamAPI_ISteamMusicRemote_PlaylistDidChange$handle() {
        return SteamAPI_ISteamMusicRemote_PlaylistDidChange.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamMusicRemote_PlaylistDidChange()
     * }
     */
    public static boolean SteamAPI_ISteamMusicRemote_PlaylistDidChange() {
        var mh$ = SteamAPI_ISteamMusicRemote_PlaylistDidChange.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamMusicRemote_PlaylistDidChange");
            }
            return (boolean)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTTP_CreateHTTPRequest {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamHTTP_CreateHTTPRequest"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HTTPRequestHandle SteamAPI_ISteamHTTP_CreateHTTPRequest(EHTTPMethod eHTTPRequestMethod, const char *pchAbsoluteURL)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTTP_CreateHTTPRequest$descriptor() {
        return SteamAPI_ISteamHTTP_CreateHTTPRequest.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HTTPRequestHandle SteamAPI_ISteamHTTP_CreateHTTPRequest(EHTTPMethod eHTTPRequestMethod, const char *pchAbsoluteURL)
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTTP_CreateHTTPRequest$handle() {
        return SteamAPI_ISteamHTTP_CreateHTTPRequest.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HTTPRequestHandle SteamAPI_ISteamHTTP_CreateHTTPRequest(EHTTPMethod eHTTPRequestMethod, const char *pchAbsoluteURL)
     * }
     */
    public static int SteamAPI_ISteamHTTP_CreateHTTPRequest(int eHTTPRequestMethod, MemorySegment pchAbsoluteURL) {
        var mh$ = SteamAPI_ISteamHTTP_CreateHTTPRequest.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTTP_CreateHTTPRequest", eHTTPRequestMethod, pchAbsoluteURL);
            }
            return (int)mh$.invokeExact(eHTTPRequestMethod, pchAbsoluteURL);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTTP_SetHTTPRequestContextValue {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamHTTP_SetHTTPRequestContextValue"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_SetHTTPRequestContextValue(HTTPRequestHandle hRequest, uint64 ulContextValue)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTTP_SetHTTPRequestContextValue$descriptor() {
        return SteamAPI_ISteamHTTP_SetHTTPRequestContextValue.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_SetHTTPRequestContextValue(HTTPRequestHandle hRequest, uint64 ulContextValue)
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTTP_SetHTTPRequestContextValue$handle() {
        return SteamAPI_ISteamHTTP_SetHTTPRequestContextValue.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_SetHTTPRequestContextValue(HTTPRequestHandle hRequest, uint64 ulContextValue)
     * }
     */
    public static boolean SteamAPI_ISteamHTTP_SetHTTPRequestContextValue(int hRequest, long ulContextValue) {
        var mh$ = SteamAPI_ISteamHTTP_SetHTTPRequestContextValue.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTTP_SetHTTPRequestContextValue", hRequest, ulContextValue);
            }
            return (boolean)mh$.invokeExact(hRequest, ulContextValue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTTP_SetHTTPRequestNetworkActivityTimeout {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamHTTP_SetHTTPRequestNetworkActivityTimeout"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_SetHTTPRequestNetworkActivityTimeout(HTTPRequestHandle hRequest, uint32 unTimeoutSeconds)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTTP_SetHTTPRequestNetworkActivityTimeout$descriptor() {
        return SteamAPI_ISteamHTTP_SetHTTPRequestNetworkActivityTimeout.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_SetHTTPRequestNetworkActivityTimeout(HTTPRequestHandle hRequest, uint32 unTimeoutSeconds)
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTTP_SetHTTPRequestNetworkActivityTimeout$handle() {
        return SteamAPI_ISteamHTTP_SetHTTPRequestNetworkActivityTimeout.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_SetHTTPRequestNetworkActivityTimeout(HTTPRequestHandle hRequest, uint32 unTimeoutSeconds)
     * }
     */
    public static boolean SteamAPI_ISteamHTTP_SetHTTPRequestNetworkActivityTimeout(int hRequest, int unTimeoutSeconds) {
        var mh$ = SteamAPI_ISteamHTTP_SetHTTPRequestNetworkActivityTimeout.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTTP_SetHTTPRequestNetworkActivityTimeout", hRequest, unTimeoutSeconds);
            }
            return (boolean)mh$.invokeExact(hRequest, unTimeoutSeconds);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTTP_SetHTTPRequestHeaderValue {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamHTTP_SetHTTPRequestHeaderValue"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_SetHTTPRequestHeaderValue(HTTPRequestHandle hRequest, const char *pchHeaderName, const char *pchHeaderValue)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTTP_SetHTTPRequestHeaderValue$descriptor() {
        return SteamAPI_ISteamHTTP_SetHTTPRequestHeaderValue.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_SetHTTPRequestHeaderValue(HTTPRequestHandle hRequest, const char *pchHeaderName, const char *pchHeaderValue)
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTTP_SetHTTPRequestHeaderValue$handle() {
        return SteamAPI_ISteamHTTP_SetHTTPRequestHeaderValue.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_SetHTTPRequestHeaderValue(HTTPRequestHandle hRequest, const char *pchHeaderName, const char *pchHeaderValue)
     * }
     */
    public static boolean SteamAPI_ISteamHTTP_SetHTTPRequestHeaderValue(int hRequest, MemorySegment pchHeaderName, MemorySegment pchHeaderValue) {
        var mh$ = SteamAPI_ISteamHTTP_SetHTTPRequestHeaderValue.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTTP_SetHTTPRequestHeaderValue", hRequest, pchHeaderName, pchHeaderValue);
            }
            return (boolean)mh$.invokeExact(hRequest, pchHeaderName, pchHeaderValue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTTP_SetHTTPRequestGetOrPostParameter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamHTTP_SetHTTPRequestGetOrPostParameter"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_SetHTTPRequestGetOrPostParameter(HTTPRequestHandle hRequest, const char *pchParamName, const char *pchParamValue)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTTP_SetHTTPRequestGetOrPostParameter$descriptor() {
        return SteamAPI_ISteamHTTP_SetHTTPRequestGetOrPostParameter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_SetHTTPRequestGetOrPostParameter(HTTPRequestHandle hRequest, const char *pchParamName, const char *pchParamValue)
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTTP_SetHTTPRequestGetOrPostParameter$handle() {
        return SteamAPI_ISteamHTTP_SetHTTPRequestGetOrPostParameter.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_SetHTTPRequestGetOrPostParameter(HTTPRequestHandle hRequest, const char *pchParamName, const char *pchParamValue)
     * }
     */
    public static boolean SteamAPI_ISteamHTTP_SetHTTPRequestGetOrPostParameter(int hRequest, MemorySegment pchParamName, MemorySegment pchParamValue) {
        var mh$ = SteamAPI_ISteamHTTP_SetHTTPRequestGetOrPostParameter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTTP_SetHTTPRequestGetOrPostParameter", hRequest, pchParamName, pchParamValue);
            }
            return (boolean)mh$.invokeExact(hRequest, pchParamName, pchParamValue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTTP_SendHTTPRequest {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamHTTP_SendHTTPRequest"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_SendHTTPRequest(HTTPRequestHandle hRequest, SteamAPICall_t *pCallHandle)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTTP_SendHTTPRequest$descriptor() {
        return SteamAPI_ISteamHTTP_SendHTTPRequest.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_SendHTTPRequest(HTTPRequestHandle hRequest, SteamAPICall_t *pCallHandle)
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTTP_SendHTTPRequest$handle() {
        return SteamAPI_ISteamHTTP_SendHTTPRequest.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_SendHTTPRequest(HTTPRequestHandle hRequest, SteamAPICall_t *pCallHandle)
     * }
     */
    public static boolean SteamAPI_ISteamHTTP_SendHTTPRequest(int hRequest, MemorySegment pCallHandle) {
        var mh$ = SteamAPI_ISteamHTTP_SendHTTPRequest.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTTP_SendHTTPRequest", hRequest, pCallHandle);
            }
            return (boolean)mh$.invokeExact(hRequest, pCallHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTTP_SendHTTPRequestAndStreamResponse {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamHTTP_SendHTTPRequestAndStreamResponse"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_SendHTTPRequestAndStreamResponse(HTTPRequestHandle hRequest, SteamAPICall_t *pCallHandle)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTTP_SendHTTPRequestAndStreamResponse$descriptor() {
        return SteamAPI_ISteamHTTP_SendHTTPRequestAndStreamResponse.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_SendHTTPRequestAndStreamResponse(HTTPRequestHandle hRequest, SteamAPICall_t *pCallHandle)
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTTP_SendHTTPRequestAndStreamResponse$handle() {
        return SteamAPI_ISteamHTTP_SendHTTPRequestAndStreamResponse.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_SendHTTPRequestAndStreamResponse(HTTPRequestHandle hRequest, SteamAPICall_t *pCallHandle)
     * }
     */
    public static boolean SteamAPI_ISteamHTTP_SendHTTPRequestAndStreamResponse(int hRequest, MemorySegment pCallHandle) {
        var mh$ = SteamAPI_ISteamHTTP_SendHTTPRequestAndStreamResponse.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTTP_SendHTTPRequestAndStreamResponse", hRequest, pCallHandle);
            }
            return (boolean)mh$.invokeExact(hRequest, pCallHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTTP_DeferHTTPRequest {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamHTTP_DeferHTTPRequest"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_DeferHTTPRequest(HTTPRequestHandle hRequest)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTTP_DeferHTTPRequest$descriptor() {
        return SteamAPI_ISteamHTTP_DeferHTTPRequest.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_DeferHTTPRequest(HTTPRequestHandle hRequest)
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTTP_DeferHTTPRequest$handle() {
        return SteamAPI_ISteamHTTP_DeferHTTPRequest.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_DeferHTTPRequest(HTTPRequestHandle hRequest)
     * }
     */
    public static boolean SteamAPI_ISteamHTTP_DeferHTTPRequest(int hRequest) {
        var mh$ = SteamAPI_ISteamHTTP_DeferHTTPRequest.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTTP_DeferHTTPRequest", hRequest);
            }
            return (boolean)mh$.invokeExact(hRequest);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTTP_PrioritizeHTTPRequest {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamHTTP_PrioritizeHTTPRequest"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_PrioritizeHTTPRequest(HTTPRequestHandle hRequest)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTTP_PrioritizeHTTPRequest$descriptor() {
        return SteamAPI_ISteamHTTP_PrioritizeHTTPRequest.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_PrioritizeHTTPRequest(HTTPRequestHandle hRequest)
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTTP_PrioritizeHTTPRequest$handle() {
        return SteamAPI_ISteamHTTP_PrioritizeHTTPRequest.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_PrioritizeHTTPRequest(HTTPRequestHandle hRequest)
     * }
     */
    public static boolean SteamAPI_ISteamHTTP_PrioritizeHTTPRequest(int hRequest) {
        var mh$ = SteamAPI_ISteamHTTP_PrioritizeHTTPRequest.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTTP_PrioritizeHTTPRequest", hRequest);
            }
            return (boolean)mh$.invokeExact(hRequest);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTTP_GetHTTPResponseHeaderSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamHTTP_GetHTTPResponseHeaderSize"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_GetHTTPResponseHeaderSize(HTTPRequestHandle hRequest, const char *pchHeaderName, uint32 *unResponseHeaderSize)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTTP_GetHTTPResponseHeaderSize$descriptor() {
        return SteamAPI_ISteamHTTP_GetHTTPResponseHeaderSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_GetHTTPResponseHeaderSize(HTTPRequestHandle hRequest, const char *pchHeaderName, uint32 *unResponseHeaderSize)
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTTP_GetHTTPResponseHeaderSize$handle() {
        return SteamAPI_ISteamHTTP_GetHTTPResponseHeaderSize.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_GetHTTPResponseHeaderSize(HTTPRequestHandle hRequest, const char *pchHeaderName, uint32 *unResponseHeaderSize)
     * }
     */
    public static boolean SteamAPI_ISteamHTTP_GetHTTPResponseHeaderSize(int hRequest, MemorySegment pchHeaderName, MemorySegment unResponseHeaderSize) {
        var mh$ = SteamAPI_ISteamHTTP_GetHTTPResponseHeaderSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTTP_GetHTTPResponseHeaderSize", hRequest, pchHeaderName, unResponseHeaderSize);
            }
            return (boolean)mh$.invokeExact(hRequest, pchHeaderName, unResponseHeaderSize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTTP_GetHTTPResponseHeaderValue {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamHTTP_GetHTTPResponseHeaderValue"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_GetHTTPResponseHeaderValue(HTTPRequestHandle hRequest, const char *pchHeaderName, uint8 *pHeaderValueBuffer, uint32 unBufferSize)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTTP_GetHTTPResponseHeaderValue$descriptor() {
        return SteamAPI_ISteamHTTP_GetHTTPResponseHeaderValue.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_GetHTTPResponseHeaderValue(HTTPRequestHandle hRequest, const char *pchHeaderName, uint8 *pHeaderValueBuffer, uint32 unBufferSize)
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTTP_GetHTTPResponseHeaderValue$handle() {
        return SteamAPI_ISteamHTTP_GetHTTPResponseHeaderValue.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_GetHTTPResponseHeaderValue(HTTPRequestHandle hRequest, const char *pchHeaderName, uint8 *pHeaderValueBuffer, uint32 unBufferSize)
     * }
     */
    public static boolean SteamAPI_ISteamHTTP_GetHTTPResponseHeaderValue(int hRequest, MemorySegment pchHeaderName, MemorySegment pHeaderValueBuffer, int unBufferSize) {
        var mh$ = SteamAPI_ISteamHTTP_GetHTTPResponseHeaderValue.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTTP_GetHTTPResponseHeaderValue", hRequest, pchHeaderName, pHeaderValueBuffer, unBufferSize);
            }
            return (boolean)mh$.invokeExact(hRequest, pchHeaderName, pHeaderValueBuffer, unBufferSize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTTP_GetHTTPResponseBodySize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamHTTP_GetHTTPResponseBodySize"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_GetHTTPResponseBodySize(HTTPRequestHandle hRequest, uint32 *unBodySize)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTTP_GetHTTPResponseBodySize$descriptor() {
        return SteamAPI_ISteamHTTP_GetHTTPResponseBodySize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_GetHTTPResponseBodySize(HTTPRequestHandle hRequest, uint32 *unBodySize)
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTTP_GetHTTPResponseBodySize$handle() {
        return SteamAPI_ISteamHTTP_GetHTTPResponseBodySize.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_GetHTTPResponseBodySize(HTTPRequestHandle hRequest, uint32 *unBodySize)
     * }
     */
    public static boolean SteamAPI_ISteamHTTP_GetHTTPResponseBodySize(int hRequest, MemorySegment unBodySize) {
        var mh$ = SteamAPI_ISteamHTTP_GetHTTPResponseBodySize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTTP_GetHTTPResponseBodySize", hRequest, unBodySize);
            }
            return (boolean)mh$.invokeExact(hRequest, unBodySize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTTP_GetHTTPResponseBodyData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamHTTP_GetHTTPResponseBodyData"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_GetHTTPResponseBodyData(HTTPRequestHandle hRequest, uint8 *pBodyDataBuffer, uint32 unBufferSize)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTTP_GetHTTPResponseBodyData$descriptor() {
        return SteamAPI_ISteamHTTP_GetHTTPResponseBodyData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_GetHTTPResponseBodyData(HTTPRequestHandle hRequest, uint8 *pBodyDataBuffer, uint32 unBufferSize)
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTTP_GetHTTPResponseBodyData$handle() {
        return SteamAPI_ISteamHTTP_GetHTTPResponseBodyData.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_GetHTTPResponseBodyData(HTTPRequestHandle hRequest, uint8 *pBodyDataBuffer, uint32 unBufferSize)
     * }
     */
    public static boolean SteamAPI_ISteamHTTP_GetHTTPResponseBodyData(int hRequest, MemorySegment pBodyDataBuffer, int unBufferSize) {
        var mh$ = SteamAPI_ISteamHTTP_GetHTTPResponseBodyData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTTP_GetHTTPResponseBodyData", hRequest, pBodyDataBuffer, unBufferSize);
            }
            return (boolean)mh$.invokeExact(hRequest, pBodyDataBuffer, unBufferSize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTTP_GetHTTPStreamingResponseBodyData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamHTTP_GetHTTPStreamingResponseBodyData"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_GetHTTPStreamingResponseBodyData(HTTPRequestHandle hRequest, uint32 cOffset, uint8 *pBodyDataBuffer, uint32 unBufferSize)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTTP_GetHTTPStreamingResponseBodyData$descriptor() {
        return SteamAPI_ISteamHTTP_GetHTTPStreamingResponseBodyData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_GetHTTPStreamingResponseBodyData(HTTPRequestHandle hRequest, uint32 cOffset, uint8 *pBodyDataBuffer, uint32 unBufferSize)
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTTP_GetHTTPStreamingResponseBodyData$handle() {
        return SteamAPI_ISteamHTTP_GetHTTPStreamingResponseBodyData.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_GetHTTPStreamingResponseBodyData(HTTPRequestHandle hRequest, uint32 cOffset, uint8 *pBodyDataBuffer, uint32 unBufferSize)
     * }
     */
    public static boolean SteamAPI_ISteamHTTP_GetHTTPStreamingResponseBodyData(int hRequest, int cOffset, MemorySegment pBodyDataBuffer, int unBufferSize) {
        var mh$ = SteamAPI_ISteamHTTP_GetHTTPStreamingResponseBodyData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTTP_GetHTTPStreamingResponseBodyData", hRequest, cOffset, pBodyDataBuffer, unBufferSize);
            }
            return (boolean)mh$.invokeExact(hRequest, cOffset, pBodyDataBuffer, unBufferSize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTTP_ReleaseHTTPRequest {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamHTTP_ReleaseHTTPRequest"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_ReleaseHTTPRequest(HTTPRequestHandle hRequest)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTTP_ReleaseHTTPRequest$descriptor() {
        return SteamAPI_ISteamHTTP_ReleaseHTTPRequest.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_ReleaseHTTPRequest(HTTPRequestHandle hRequest)
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTTP_ReleaseHTTPRequest$handle() {
        return SteamAPI_ISteamHTTP_ReleaseHTTPRequest.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_ReleaseHTTPRequest(HTTPRequestHandle hRequest)
     * }
     */
    public static boolean SteamAPI_ISteamHTTP_ReleaseHTTPRequest(int hRequest) {
        var mh$ = SteamAPI_ISteamHTTP_ReleaseHTTPRequest.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTTP_ReleaseHTTPRequest", hRequest);
            }
            return (boolean)mh$.invokeExact(hRequest);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTTP_GetHTTPDownloadProgressPct {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamHTTP_GetHTTPDownloadProgressPct"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_GetHTTPDownloadProgressPct(HTTPRequestHandle hRequest, float *pflPercentOut)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTTP_GetHTTPDownloadProgressPct$descriptor() {
        return SteamAPI_ISteamHTTP_GetHTTPDownloadProgressPct.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_GetHTTPDownloadProgressPct(HTTPRequestHandle hRequest, float *pflPercentOut)
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTTP_GetHTTPDownloadProgressPct$handle() {
        return SteamAPI_ISteamHTTP_GetHTTPDownloadProgressPct.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_GetHTTPDownloadProgressPct(HTTPRequestHandle hRequest, float *pflPercentOut)
     * }
     */
    public static boolean SteamAPI_ISteamHTTP_GetHTTPDownloadProgressPct(int hRequest, MemorySegment pflPercentOut) {
        var mh$ = SteamAPI_ISteamHTTP_GetHTTPDownloadProgressPct.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTTP_GetHTTPDownloadProgressPct", hRequest, pflPercentOut);
            }
            return (boolean)mh$.invokeExact(hRequest, pflPercentOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTTP_SetHTTPRequestRawPostBody {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamHTTP_SetHTTPRequestRawPostBody"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_SetHTTPRequestRawPostBody(HTTPRequestHandle hRequest, const char *pchContentType, uint8 *pubBody, uint32 unBodyLen)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTTP_SetHTTPRequestRawPostBody$descriptor() {
        return SteamAPI_ISteamHTTP_SetHTTPRequestRawPostBody.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_SetHTTPRequestRawPostBody(HTTPRequestHandle hRequest, const char *pchContentType, uint8 *pubBody, uint32 unBodyLen)
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTTP_SetHTTPRequestRawPostBody$handle() {
        return SteamAPI_ISteamHTTP_SetHTTPRequestRawPostBody.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_SetHTTPRequestRawPostBody(HTTPRequestHandle hRequest, const char *pchContentType, uint8 *pubBody, uint32 unBodyLen)
     * }
     */
    public static boolean SteamAPI_ISteamHTTP_SetHTTPRequestRawPostBody(int hRequest, MemorySegment pchContentType, MemorySegment pubBody, int unBodyLen) {
        var mh$ = SteamAPI_ISteamHTTP_SetHTTPRequestRawPostBody.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTTP_SetHTTPRequestRawPostBody", hRequest, pchContentType, pubBody, unBodyLen);
            }
            return (boolean)mh$.invokeExact(hRequest, pchContentType, pubBody, unBodyLen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTTP_CreateCookieContainer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamHTTP_CreateCookieContainer"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HTTPCookieContainerHandle SteamAPI_ISteamHTTP_CreateCookieContainer(bool bAllowResponsesToModify)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTTP_CreateCookieContainer$descriptor() {
        return SteamAPI_ISteamHTTP_CreateCookieContainer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HTTPCookieContainerHandle SteamAPI_ISteamHTTP_CreateCookieContainer(bool bAllowResponsesToModify)
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTTP_CreateCookieContainer$handle() {
        return SteamAPI_ISteamHTTP_CreateCookieContainer.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HTTPCookieContainerHandle SteamAPI_ISteamHTTP_CreateCookieContainer(bool bAllowResponsesToModify)
     * }
     */
    public static int SteamAPI_ISteamHTTP_CreateCookieContainer(boolean bAllowResponsesToModify) {
        var mh$ = SteamAPI_ISteamHTTP_CreateCookieContainer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTTP_CreateCookieContainer", bAllowResponsesToModify);
            }
            return (int)mh$.invokeExact(bAllowResponsesToModify);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTTP_ReleaseCookieContainer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamHTTP_ReleaseCookieContainer"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_ReleaseCookieContainer(HTTPCookieContainerHandle hCookieContainer)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTTP_ReleaseCookieContainer$descriptor() {
        return SteamAPI_ISteamHTTP_ReleaseCookieContainer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_ReleaseCookieContainer(HTTPCookieContainerHandle hCookieContainer)
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTTP_ReleaseCookieContainer$handle() {
        return SteamAPI_ISteamHTTP_ReleaseCookieContainer.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_ReleaseCookieContainer(HTTPCookieContainerHandle hCookieContainer)
     * }
     */
    public static boolean SteamAPI_ISteamHTTP_ReleaseCookieContainer(int hCookieContainer) {
        var mh$ = SteamAPI_ISteamHTTP_ReleaseCookieContainer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTTP_ReleaseCookieContainer", hCookieContainer);
            }
            return (boolean)mh$.invokeExact(hCookieContainer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTTP_SetCookie {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamHTTP_SetCookie"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_SetCookie(HTTPCookieContainerHandle hCookieContainer, const char *pchHost, const char *pchUrl, const char *pchCookie)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTTP_SetCookie$descriptor() {
        return SteamAPI_ISteamHTTP_SetCookie.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_SetCookie(HTTPCookieContainerHandle hCookieContainer, const char *pchHost, const char *pchUrl, const char *pchCookie)
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTTP_SetCookie$handle() {
        return SteamAPI_ISteamHTTP_SetCookie.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_SetCookie(HTTPCookieContainerHandle hCookieContainer, const char *pchHost, const char *pchUrl, const char *pchCookie)
     * }
     */
    public static boolean SteamAPI_ISteamHTTP_SetCookie(int hCookieContainer, MemorySegment pchHost, MemorySegment pchUrl, MemorySegment pchCookie) {
        var mh$ = SteamAPI_ISteamHTTP_SetCookie.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTTP_SetCookie", hCookieContainer, pchHost, pchUrl, pchCookie);
            }
            return (boolean)mh$.invokeExact(hCookieContainer, pchHost, pchUrl, pchCookie);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTTP_SetHTTPRequestCookieContainer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamHTTP_SetHTTPRequestCookieContainer"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_SetHTTPRequestCookieContainer(HTTPRequestHandle hRequest, HTTPCookieContainerHandle hCookieContainer)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTTP_SetHTTPRequestCookieContainer$descriptor() {
        return SteamAPI_ISteamHTTP_SetHTTPRequestCookieContainer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_SetHTTPRequestCookieContainer(HTTPRequestHandle hRequest, HTTPCookieContainerHandle hCookieContainer)
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTTP_SetHTTPRequestCookieContainer$handle() {
        return SteamAPI_ISteamHTTP_SetHTTPRequestCookieContainer.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_SetHTTPRequestCookieContainer(HTTPRequestHandle hRequest, HTTPCookieContainerHandle hCookieContainer)
     * }
     */
    public static boolean SteamAPI_ISteamHTTP_SetHTTPRequestCookieContainer(int hRequest, int hCookieContainer) {
        var mh$ = SteamAPI_ISteamHTTP_SetHTTPRequestCookieContainer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTTP_SetHTTPRequestCookieContainer", hRequest, hCookieContainer);
            }
            return (boolean)mh$.invokeExact(hRequest, hCookieContainer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTTP_SetHTTPRequestUserAgentInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamHTTP_SetHTTPRequestUserAgentInfo"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_SetHTTPRequestUserAgentInfo(HTTPRequestHandle hRequest, const char *pchUserAgentInfo)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTTP_SetHTTPRequestUserAgentInfo$descriptor() {
        return SteamAPI_ISteamHTTP_SetHTTPRequestUserAgentInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_SetHTTPRequestUserAgentInfo(HTTPRequestHandle hRequest, const char *pchUserAgentInfo)
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTTP_SetHTTPRequestUserAgentInfo$handle() {
        return SteamAPI_ISteamHTTP_SetHTTPRequestUserAgentInfo.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_SetHTTPRequestUserAgentInfo(HTTPRequestHandle hRequest, const char *pchUserAgentInfo)
     * }
     */
    public static boolean SteamAPI_ISteamHTTP_SetHTTPRequestUserAgentInfo(int hRequest, MemorySegment pchUserAgentInfo) {
        var mh$ = SteamAPI_ISteamHTTP_SetHTTPRequestUserAgentInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTTP_SetHTTPRequestUserAgentInfo", hRequest, pchUserAgentInfo);
            }
            return (boolean)mh$.invokeExact(hRequest, pchUserAgentInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTTP_SetHTTPRequestRequiresVerifiedCertificate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamHTTP_SetHTTPRequestRequiresVerifiedCertificate"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_SetHTTPRequestRequiresVerifiedCertificate(HTTPRequestHandle hRequest, bool bRequireVerifiedCertificate)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTTP_SetHTTPRequestRequiresVerifiedCertificate$descriptor() {
        return SteamAPI_ISteamHTTP_SetHTTPRequestRequiresVerifiedCertificate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_SetHTTPRequestRequiresVerifiedCertificate(HTTPRequestHandle hRequest, bool bRequireVerifiedCertificate)
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTTP_SetHTTPRequestRequiresVerifiedCertificate$handle() {
        return SteamAPI_ISteamHTTP_SetHTTPRequestRequiresVerifiedCertificate.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_SetHTTPRequestRequiresVerifiedCertificate(HTTPRequestHandle hRequest, bool bRequireVerifiedCertificate)
     * }
     */
    public static boolean SteamAPI_ISteamHTTP_SetHTTPRequestRequiresVerifiedCertificate(int hRequest, boolean bRequireVerifiedCertificate) {
        var mh$ = SteamAPI_ISteamHTTP_SetHTTPRequestRequiresVerifiedCertificate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTTP_SetHTTPRequestRequiresVerifiedCertificate", hRequest, bRequireVerifiedCertificate);
            }
            return (boolean)mh$.invokeExact(hRequest, bRequireVerifiedCertificate);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTTP_SetHTTPRequestAbsoluteTimeoutMS {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamHTTP_SetHTTPRequestAbsoluteTimeoutMS"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_SetHTTPRequestAbsoluteTimeoutMS(HTTPRequestHandle hRequest, uint32 unMilliseconds)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTTP_SetHTTPRequestAbsoluteTimeoutMS$descriptor() {
        return SteamAPI_ISteamHTTP_SetHTTPRequestAbsoluteTimeoutMS.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_SetHTTPRequestAbsoluteTimeoutMS(HTTPRequestHandle hRequest, uint32 unMilliseconds)
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTTP_SetHTTPRequestAbsoluteTimeoutMS$handle() {
        return SteamAPI_ISteamHTTP_SetHTTPRequestAbsoluteTimeoutMS.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_SetHTTPRequestAbsoluteTimeoutMS(HTTPRequestHandle hRequest, uint32 unMilliseconds)
     * }
     */
    public static boolean SteamAPI_ISteamHTTP_SetHTTPRequestAbsoluteTimeoutMS(int hRequest, int unMilliseconds) {
        var mh$ = SteamAPI_ISteamHTTP_SetHTTPRequestAbsoluteTimeoutMS.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTTP_SetHTTPRequestAbsoluteTimeoutMS", hRequest, unMilliseconds);
            }
            return (boolean)mh$.invokeExact(hRequest, unMilliseconds);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTTP_GetHTTPRequestWasTimedOut {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamHTTP_GetHTTPRequestWasTimedOut"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_GetHTTPRequestWasTimedOut(HTTPRequestHandle hRequest, bool *pbWasTimedOut)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTTP_GetHTTPRequestWasTimedOut$descriptor() {
        return SteamAPI_ISteamHTTP_GetHTTPRequestWasTimedOut.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_GetHTTPRequestWasTimedOut(HTTPRequestHandle hRequest, bool *pbWasTimedOut)
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTTP_GetHTTPRequestWasTimedOut$handle() {
        return SteamAPI_ISteamHTTP_GetHTTPRequestWasTimedOut.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTTP_GetHTTPRequestWasTimedOut(HTTPRequestHandle hRequest, bool *pbWasTimedOut)
     * }
     */
    public static boolean SteamAPI_ISteamHTTP_GetHTTPRequestWasTimedOut(int hRequest, MemorySegment pbWasTimedOut) {
        var mh$ = SteamAPI_ISteamHTTP_GetHTTPRequestWasTimedOut.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTTP_GetHTTPRequestWasTimedOut", hRequest, pbWasTimedOut);
            }
            return (boolean)mh$.invokeExact(hRequest, pbWasTimedOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInput_Init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamInput_Init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInput_Init(bool bExplicitlyCallRunFrame)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInput_Init$descriptor() {
        return SteamAPI_ISteamInput_Init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInput_Init(bool bExplicitlyCallRunFrame)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInput_Init$handle() {
        return SteamAPI_ISteamInput_Init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInput_Init(bool bExplicitlyCallRunFrame)
     * }
     */
    public static boolean SteamAPI_ISteamInput_Init(boolean bExplicitlyCallRunFrame) {
        var mh$ = SteamAPI_ISteamInput_Init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInput_Init", bExplicitlyCallRunFrame);
            }
            return (boolean)mh$.invokeExact(bExplicitlyCallRunFrame);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInput_Shutdown {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamInput_Shutdown"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInput_Shutdown()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInput_Shutdown$descriptor() {
        return SteamAPI_ISteamInput_Shutdown.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInput_Shutdown()
     * }
     */
    public static MethodHandle SteamAPI_ISteamInput_Shutdown$handle() {
        return SteamAPI_ISteamInput_Shutdown.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInput_Shutdown()
     * }
     */
    public static boolean SteamAPI_ISteamInput_Shutdown() {
        var mh$ = SteamAPI_ISteamInput_Shutdown.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInput_Shutdown");
            }
            return (boolean)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInput_SetInputActionManifestFilePath {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamInput_SetInputActionManifestFilePath"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInput_SetInputActionManifestFilePath(const char *pchInputActionManifestAbsolutePath)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInput_SetInputActionManifestFilePath$descriptor() {
        return SteamAPI_ISteamInput_SetInputActionManifestFilePath.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInput_SetInputActionManifestFilePath(const char *pchInputActionManifestAbsolutePath)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInput_SetInputActionManifestFilePath$handle() {
        return SteamAPI_ISteamInput_SetInputActionManifestFilePath.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInput_SetInputActionManifestFilePath(const char *pchInputActionManifestAbsolutePath)
     * }
     */
    public static boolean SteamAPI_ISteamInput_SetInputActionManifestFilePath(MemorySegment pchInputActionManifestAbsolutePath) {
        var mh$ = SteamAPI_ISteamInput_SetInputActionManifestFilePath.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInput_SetInputActionManifestFilePath", pchInputActionManifestAbsolutePath);
            }
            return (boolean)mh$.invokeExact(pchInputActionManifestAbsolutePath);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInput_RunFrame {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamInput_RunFrame"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamInput_RunFrame(bool bReservedValue)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInput_RunFrame$descriptor() {
        return SteamAPI_ISteamInput_RunFrame.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamInput_RunFrame(bool bReservedValue)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInput_RunFrame$handle() {
        return SteamAPI_ISteamInput_RunFrame.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamInput_RunFrame(bool bReservedValue)
     * }
     */
    public static void SteamAPI_ISteamInput_RunFrame(boolean bReservedValue) {
        var mh$ = SteamAPI_ISteamInput_RunFrame.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInput_RunFrame", bReservedValue);
            }
            mh$.invokeExact(bReservedValue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInput_BWaitForData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamInput_BWaitForData"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInput_BWaitForData(bool bWaitForever, uint32 unTimeout)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInput_BWaitForData$descriptor() {
        return SteamAPI_ISteamInput_BWaitForData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInput_BWaitForData(bool bWaitForever, uint32 unTimeout)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInput_BWaitForData$handle() {
        return SteamAPI_ISteamInput_BWaitForData.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInput_BWaitForData(bool bWaitForever, uint32 unTimeout)
     * }
     */
    public static boolean SteamAPI_ISteamInput_BWaitForData(boolean bWaitForever, int unTimeout) {
        var mh$ = SteamAPI_ISteamInput_BWaitForData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInput_BWaitForData", bWaitForever, unTimeout);
            }
            return (boolean)mh$.invokeExact(bWaitForever, unTimeout);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInput_BNewDataAvailable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamInput_BNewDataAvailable"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInput_BNewDataAvailable()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInput_BNewDataAvailable$descriptor() {
        return SteamAPI_ISteamInput_BNewDataAvailable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInput_BNewDataAvailable()
     * }
     */
    public static MethodHandle SteamAPI_ISteamInput_BNewDataAvailable$handle() {
        return SteamAPI_ISteamInput_BNewDataAvailable.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInput_BNewDataAvailable()
     * }
     */
    public static boolean SteamAPI_ISteamInput_BNewDataAvailable() {
        var mh$ = SteamAPI_ISteamInput_BNewDataAvailable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInput_BNewDataAvailable");
            }
            return (boolean)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInput_GetConnectedControllers {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamInput_GetConnectedControllers"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamInput_GetConnectedControllers(InputHandle_t *handlesOut)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInput_GetConnectedControllers$descriptor() {
        return SteamAPI_ISteamInput_GetConnectedControllers.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamInput_GetConnectedControllers(InputHandle_t *handlesOut)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInput_GetConnectedControllers$handle() {
        return SteamAPI_ISteamInput_GetConnectedControllers.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int SteamAPI_ISteamInput_GetConnectedControllers(InputHandle_t *handlesOut)
     * }
     */
    public static int SteamAPI_ISteamInput_GetConnectedControllers(MemorySegment handlesOut) {
        var mh$ = SteamAPI_ISteamInput_GetConnectedControllers.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInput_GetConnectedControllers", handlesOut);
            }
            return (int)mh$.invokeExact(handlesOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInput_EnableDeviceCallbacks {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamInput_EnableDeviceCallbacks"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamInput_EnableDeviceCallbacks()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInput_EnableDeviceCallbacks$descriptor() {
        return SteamAPI_ISteamInput_EnableDeviceCallbacks.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamInput_EnableDeviceCallbacks()
     * }
     */
    public static MethodHandle SteamAPI_ISteamInput_EnableDeviceCallbacks$handle() {
        return SteamAPI_ISteamInput_EnableDeviceCallbacks.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamInput_EnableDeviceCallbacks()
     * }
     */
    public static void SteamAPI_ISteamInput_EnableDeviceCallbacks() {
        var mh$ = SteamAPI_ISteamInput_EnableDeviceCallbacks.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInput_EnableDeviceCallbacks");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInput_EnableActionEventCallbacks {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamInput_EnableActionEventCallbacks"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamInput_EnableActionEventCallbacks(SteamInputActionEventCallbackPointer pCallback)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInput_EnableActionEventCallbacks$descriptor() {
        return SteamAPI_ISteamInput_EnableActionEventCallbacks.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamInput_EnableActionEventCallbacks(SteamInputActionEventCallbackPointer pCallback)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInput_EnableActionEventCallbacks$handle() {
        return SteamAPI_ISteamInput_EnableActionEventCallbacks.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamInput_EnableActionEventCallbacks(SteamInputActionEventCallbackPointer pCallback)
     * }
     */
    public static void SteamAPI_ISteamInput_EnableActionEventCallbacks(MemorySegment pCallback) {
        var mh$ = SteamAPI_ISteamInput_EnableActionEventCallbacks.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInput_EnableActionEventCallbacks", pCallback);
            }
            mh$.invokeExact(pCallback);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInput_GetActionSetHandle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamInput_GetActionSetHandle"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * InputActionSetHandle_t SteamAPI_ISteamInput_GetActionSetHandle(const char *pszActionSetName)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInput_GetActionSetHandle$descriptor() {
        return SteamAPI_ISteamInput_GetActionSetHandle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * InputActionSetHandle_t SteamAPI_ISteamInput_GetActionSetHandle(const char *pszActionSetName)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInput_GetActionSetHandle$handle() {
        return SteamAPI_ISteamInput_GetActionSetHandle.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * InputActionSetHandle_t SteamAPI_ISteamInput_GetActionSetHandle(const char *pszActionSetName)
     * }
     */
    public static long SteamAPI_ISteamInput_GetActionSetHandle(MemorySegment pszActionSetName) {
        var mh$ = SteamAPI_ISteamInput_GetActionSetHandle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInput_GetActionSetHandle", pszActionSetName);
            }
            return (long)mh$.invokeExact(pszActionSetName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInput_ActivateActionSet {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamInput_ActivateActionSet"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamInput_ActivateActionSet(InputHandle_t inputHandle, InputActionSetHandle_t actionSetHandle)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInput_ActivateActionSet$descriptor() {
        return SteamAPI_ISteamInput_ActivateActionSet.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamInput_ActivateActionSet(InputHandle_t inputHandle, InputActionSetHandle_t actionSetHandle)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInput_ActivateActionSet$handle() {
        return SteamAPI_ISteamInput_ActivateActionSet.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamInput_ActivateActionSet(InputHandle_t inputHandle, InputActionSetHandle_t actionSetHandle)
     * }
     */
    public static void SteamAPI_ISteamInput_ActivateActionSet(long inputHandle, long actionSetHandle) {
        var mh$ = SteamAPI_ISteamInput_ActivateActionSet.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInput_ActivateActionSet", inputHandle, actionSetHandle);
            }
            mh$.invokeExact(inputHandle, actionSetHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInput_GetCurrentActionSet {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamInput_GetCurrentActionSet"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * InputActionSetHandle_t SteamAPI_ISteamInput_GetCurrentActionSet(InputHandle_t inputHandle)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInput_GetCurrentActionSet$descriptor() {
        return SteamAPI_ISteamInput_GetCurrentActionSet.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * InputActionSetHandle_t SteamAPI_ISteamInput_GetCurrentActionSet(InputHandle_t inputHandle)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInput_GetCurrentActionSet$handle() {
        return SteamAPI_ISteamInput_GetCurrentActionSet.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * InputActionSetHandle_t SteamAPI_ISteamInput_GetCurrentActionSet(InputHandle_t inputHandle)
     * }
     */
    public static long SteamAPI_ISteamInput_GetCurrentActionSet(long inputHandle) {
        var mh$ = SteamAPI_ISteamInput_GetCurrentActionSet.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInput_GetCurrentActionSet", inputHandle);
            }
            return (long)mh$.invokeExact(inputHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInput_ActivateActionSetLayer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamInput_ActivateActionSetLayer"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamInput_ActivateActionSetLayer(InputHandle_t inputHandle, InputActionSetHandle_t actionSetLayerHandle)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInput_ActivateActionSetLayer$descriptor() {
        return SteamAPI_ISteamInput_ActivateActionSetLayer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamInput_ActivateActionSetLayer(InputHandle_t inputHandle, InputActionSetHandle_t actionSetLayerHandle)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInput_ActivateActionSetLayer$handle() {
        return SteamAPI_ISteamInput_ActivateActionSetLayer.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamInput_ActivateActionSetLayer(InputHandle_t inputHandle, InputActionSetHandle_t actionSetLayerHandle)
     * }
     */
    public static void SteamAPI_ISteamInput_ActivateActionSetLayer(long inputHandle, long actionSetLayerHandle) {
        var mh$ = SteamAPI_ISteamInput_ActivateActionSetLayer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInput_ActivateActionSetLayer", inputHandle, actionSetLayerHandle);
            }
            mh$.invokeExact(inputHandle, actionSetLayerHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInput_DeactivateActionSetLayer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamInput_DeactivateActionSetLayer"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamInput_DeactivateActionSetLayer(InputHandle_t inputHandle, InputActionSetHandle_t actionSetLayerHandle)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInput_DeactivateActionSetLayer$descriptor() {
        return SteamAPI_ISteamInput_DeactivateActionSetLayer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamInput_DeactivateActionSetLayer(InputHandle_t inputHandle, InputActionSetHandle_t actionSetLayerHandle)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInput_DeactivateActionSetLayer$handle() {
        return SteamAPI_ISteamInput_DeactivateActionSetLayer.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamInput_DeactivateActionSetLayer(InputHandle_t inputHandle, InputActionSetHandle_t actionSetLayerHandle)
     * }
     */
    public static void SteamAPI_ISteamInput_DeactivateActionSetLayer(long inputHandle, long actionSetLayerHandle) {
        var mh$ = SteamAPI_ISteamInput_DeactivateActionSetLayer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInput_DeactivateActionSetLayer", inputHandle, actionSetLayerHandle);
            }
            mh$.invokeExact(inputHandle, actionSetLayerHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInput_DeactivateAllActionSetLayers {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamInput_DeactivateAllActionSetLayers"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamInput_DeactivateAllActionSetLayers(InputHandle_t inputHandle)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInput_DeactivateAllActionSetLayers$descriptor() {
        return SteamAPI_ISteamInput_DeactivateAllActionSetLayers.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamInput_DeactivateAllActionSetLayers(InputHandle_t inputHandle)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInput_DeactivateAllActionSetLayers$handle() {
        return SteamAPI_ISteamInput_DeactivateAllActionSetLayers.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamInput_DeactivateAllActionSetLayers(InputHandle_t inputHandle)
     * }
     */
    public static void SteamAPI_ISteamInput_DeactivateAllActionSetLayers(long inputHandle) {
        var mh$ = SteamAPI_ISteamInput_DeactivateAllActionSetLayers.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInput_DeactivateAllActionSetLayers", inputHandle);
            }
            mh$.invokeExact(inputHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInput_GetActiveActionSetLayers {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamInput_GetActiveActionSetLayers"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamInput_GetActiveActionSetLayers(InputHandle_t inputHandle, InputActionSetHandle_t *handlesOut)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInput_GetActiveActionSetLayers$descriptor() {
        return SteamAPI_ISteamInput_GetActiveActionSetLayers.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamInput_GetActiveActionSetLayers(InputHandle_t inputHandle, InputActionSetHandle_t *handlesOut)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInput_GetActiveActionSetLayers$handle() {
        return SteamAPI_ISteamInput_GetActiveActionSetLayers.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int SteamAPI_ISteamInput_GetActiveActionSetLayers(InputHandle_t inputHandle, InputActionSetHandle_t *handlesOut)
     * }
     */
    public static int SteamAPI_ISteamInput_GetActiveActionSetLayers(long inputHandle, MemorySegment handlesOut) {
        var mh$ = SteamAPI_ISteamInput_GetActiveActionSetLayers.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInput_GetActiveActionSetLayers", inputHandle, handlesOut);
            }
            return (int)mh$.invokeExact(inputHandle, handlesOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInput_GetDigitalActionHandle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamInput_GetDigitalActionHandle"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * InputDigitalActionHandle_t SteamAPI_ISteamInput_GetDigitalActionHandle(const char *pszActionName)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInput_GetDigitalActionHandle$descriptor() {
        return SteamAPI_ISteamInput_GetDigitalActionHandle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * InputDigitalActionHandle_t SteamAPI_ISteamInput_GetDigitalActionHandle(const char *pszActionName)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInput_GetDigitalActionHandle$handle() {
        return SteamAPI_ISteamInput_GetDigitalActionHandle.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * InputDigitalActionHandle_t SteamAPI_ISteamInput_GetDigitalActionHandle(const char *pszActionName)
     * }
     */
    public static long SteamAPI_ISteamInput_GetDigitalActionHandle(MemorySegment pszActionName) {
        var mh$ = SteamAPI_ISteamInput_GetDigitalActionHandle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInput_GetDigitalActionHandle", pszActionName);
            }
            return (long)mh$.invokeExact(pszActionName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInput_GetDigitalActionData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            InputDigitalActionData_t.layout(),
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamInput_GetDigitalActionData"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * InputDigitalActionData_t SteamAPI_ISteamInput_GetDigitalActionData(InputHandle_t inputHandle, InputDigitalActionHandle_t digitalActionHandle)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInput_GetDigitalActionData$descriptor() {
        return SteamAPI_ISteamInput_GetDigitalActionData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * InputDigitalActionData_t SteamAPI_ISteamInput_GetDigitalActionData(InputHandle_t inputHandle, InputDigitalActionHandle_t digitalActionHandle)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInput_GetDigitalActionData$handle() {
        return SteamAPI_ISteamInput_GetDigitalActionData.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * InputDigitalActionData_t SteamAPI_ISteamInput_GetDigitalActionData(InputHandle_t inputHandle, InputDigitalActionHandle_t digitalActionHandle)
     * }
     */
    public static MemorySegment SteamAPI_ISteamInput_GetDigitalActionData(SegmentAllocator allocator, long inputHandle, long digitalActionHandle) {
        var mh$ = SteamAPI_ISteamInput_GetDigitalActionData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInput_GetDigitalActionData", allocator, inputHandle, digitalActionHandle);
            }
            return (MemorySegment)mh$.invokeExact(allocator, inputHandle, digitalActionHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInput_GetDigitalActionOrigins {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamInput_GetDigitalActionOrigins"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamInput_GetDigitalActionOrigins(InputHandle_t inputHandle, InputActionSetHandle_t actionSetHandle, InputDigitalActionHandle_t digitalActionHandle, EInputActionOrigin *originsOut)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInput_GetDigitalActionOrigins$descriptor() {
        return SteamAPI_ISteamInput_GetDigitalActionOrigins.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamInput_GetDigitalActionOrigins(InputHandle_t inputHandle, InputActionSetHandle_t actionSetHandle, InputDigitalActionHandle_t digitalActionHandle, EInputActionOrigin *originsOut)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInput_GetDigitalActionOrigins$handle() {
        return SteamAPI_ISteamInput_GetDigitalActionOrigins.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int SteamAPI_ISteamInput_GetDigitalActionOrigins(InputHandle_t inputHandle, InputActionSetHandle_t actionSetHandle, InputDigitalActionHandle_t digitalActionHandle, EInputActionOrigin *originsOut)
     * }
     */
    public static int SteamAPI_ISteamInput_GetDigitalActionOrigins(long inputHandle, long actionSetHandle, long digitalActionHandle, MemorySegment originsOut) {
        var mh$ = SteamAPI_ISteamInput_GetDigitalActionOrigins.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInput_GetDigitalActionOrigins", inputHandle, actionSetHandle, digitalActionHandle, originsOut);
            }
            return (int)mh$.invokeExact(inputHandle, actionSetHandle, digitalActionHandle, originsOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInput_GetStringForDigitalActionName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamInput_GetStringForDigitalActionName"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamInput_GetStringForDigitalActionName(InputDigitalActionHandle_t eActionHandle)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInput_GetStringForDigitalActionName$descriptor() {
        return SteamAPI_ISteamInput_GetStringForDigitalActionName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamInput_GetStringForDigitalActionName(InputDigitalActionHandle_t eActionHandle)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInput_GetStringForDigitalActionName$handle() {
        return SteamAPI_ISteamInput_GetStringForDigitalActionName.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamInput_GetStringForDigitalActionName(InputDigitalActionHandle_t eActionHandle)
     * }
     */
    public static MemorySegment SteamAPI_ISteamInput_GetStringForDigitalActionName(long eActionHandle) {
        var mh$ = SteamAPI_ISteamInput_GetStringForDigitalActionName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInput_GetStringForDigitalActionName", eActionHandle);
            }
            return (MemorySegment)mh$.invokeExact(eActionHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInput_GetAnalogActionHandle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamInput_GetAnalogActionHandle"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * InputAnalogActionHandle_t SteamAPI_ISteamInput_GetAnalogActionHandle(const char *pszActionName)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInput_GetAnalogActionHandle$descriptor() {
        return SteamAPI_ISteamInput_GetAnalogActionHandle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * InputAnalogActionHandle_t SteamAPI_ISteamInput_GetAnalogActionHandle(const char *pszActionName)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInput_GetAnalogActionHandle$handle() {
        return SteamAPI_ISteamInput_GetAnalogActionHandle.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * InputAnalogActionHandle_t SteamAPI_ISteamInput_GetAnalogActionHandle(const char *pszActionName)
     * }
     */
    public static long SteamAPI_ISteamInput_GetAnalogActionHandle(MemorySegment pszActionName) {
        var mh$ = SteamAPI_ISteamInput_GetAnalogActionHandle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInput_GetAnalogActionHandle", pszActionName);
            }
            return (long)mh$.invokeExact(pszActionName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInput_GetAnalogActionData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            InputAnalogActionData_t.layout(),
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamInput_GetAnalogActionData"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * InputAnalogActionData_t SteamAPI_ISteamInput_GetAnalogActionData(InputHandle_t inputHandle, InputAnalogActionHandle_t analogActionHandle)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInput_GetAnalogActionData$descriptor() {
        return SteamAPI_ISteamInput_GetAnalogActionData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * InputAnalogActionData_t SteamAPI_ISteamInput_GetAnalogActionData(InputHandle_t inputHandle, InputAnalogActionHandle_t analogActionHandle)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInput_GetAnalogActionData$handle() {
        return SteamAPI_ISteamInput_GetAnalogActionData.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * InputAnalogActionData_t SteamAPI_ISteamInput_GetAnalogActionData(InputHandle_t inputHandle, InputAnalogActionHandle_t analogActionHandle)
     * }
     */
    public static MemorySegment SteamAPI_ISteamInput_GetAnalogActionData(SegmentAllocator allocator, long inputHandle, long analogActionHandle) {
        var mh$ = SteamAPI_ISteamInput_GetAnalogActionData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInput_GetAnalogActionData", allocator, inputHandle, analogActionHandle);
            }
            return (MemorySegment)mh$.invokeExact(allocator, inputHandle, analogActionHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInput_GetAnalogActionOrigins {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamInput_GetAnalogActionOrigins"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamInput_GetAnalogActionOrigins(InputHandle_t inputHandle, InputActionSetHandle_t actionSetHandle, InputAnalogActionHandle_t analogActionHandle, EInputActionOrigin *originsOut)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInput_GetAnalogActionOrigins$descriptor() {
        return SteamAPI_ISteamInput_GetAnalogActionOrigins.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamInput_GetAnalogActionOrigins(InputHandle_t inputHandle, InputActionSetHandle_t actionSetHandle, InputAnalogActionHandle_t analogActionHandle, EInputActionOrigin *originsOut)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInput_GetAnalogActionOrigins$handle() {
        return SteamAPI_ISteamInput_GetAnalogActionOrigins.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int SteamAPI_ISteamInput_GetAnalogActionOrigins(InputHandle_t inputHandle, InputActionSetHandle_t actionSetHandle, InputAnalogActionHandle_t analogActionHandle, EInputActionOrigin *originsOut)
     * }
     */
    public static int SteamAPI_ISteamInput_GetAnalogActionOrigins(long inputHandle, long actionSetHandle, long analogActionHandle, MemorySegment originsOut) {
        var mh$ = SteamAPI_ISteamInput_GetAnalogActionOrigins.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInput_GetAnalogActionOrigins", inputHandle, actionSetHandle, analogActionHandle, originsOut);
            }
            return (int)mh$.invokeExact(inputHandle, actionSetHandle, analogActionHandle, originsOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInput_GetGlyphPNGForActionOrigin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamInput_GetGlyphPNGForActionOrigin"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamInput_GetGlyphPNGForActionOrigin(EInputActionOrigin eOrigin, ESteamInputGlyphSize eSize, uint32 unFlags)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInput_GetGlyphPNGForActionOrigin$descriptor() {
        return SteamAPI_ISteamInput_GetGlyphPNGForActionOrigin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamInput_GetGlyphPNGForActionOrigin(EInputActionOrigin eOrigin, ESteamInputGlyphSize eSize, uint32 unFlags)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInput_GetGlyphPNGForActionOrigin$handle() {
        return SteamAPI_ISteamInput_GetGlyphPNGForActionOrigin.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamInput_GetGlyphPNGForActionOrigin(EInputActionOrigin eOrigin, ESteamInputGlyphSize eSize, uint32 unFlags)
     * }
     */
    public static MemorySegment SteamAPI_ISteamInput_GetGlyphPNGForActionOrigin(int eOrigin, int eSize, int unFlags) {
        var mh$ = SteamAPI_ISteamInput_GetGlyphPNGForActionOrigin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInput_GetGlyphPNGForActionOrigin", eOrigin, eSize, unFlags);
            }
            return (MemorySegment)mh$.invokeExact(eOrigin, eSize, unFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInput_GetGlyphSVGForActionOrigin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamInput_GetGlyphSVGForActionOrigin"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamInput_GetGlyphSVGForActionOrigin(EInputActionOrigin eOrigin, uint32 unFlags)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInput_GetGlyphSVGForActionOrigin$descriptor() {
        return SteamAPI_ISteamInput_GetGlyphSVGForActionOrigin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamInput_GetGlyphSVGForActionOrigin(EInputActionOrigin eOrigin, uint32 unFlags)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInput_GetGlyphSVGForActionOrigin$handle() {
        return SteamAPI_ISteamInput_GetGlyphSVGForActionOrigin.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamInput_GetGlyphSVGForActionOrigin(EInputActionOrigin eOrigin, uint32 unFlags)
     * }
     */
    public static MemorySegment SteamAPI_ISteamInput_GetGlyphSVGForActionOrigin(int eOrigin, int unFlags) {
        var mh$ = SteamAPI_ISteamInput_GetGlyphSVGForActionOrigin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInput_GetGlyphSVGForActionOrigin", eOrigin, unFlags);
            }
            return (MemorySegment)mh$.invokeExact(eOrigin, unFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInput_GetGlyphForActionOrigin_Legacy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamInput_GetGlyphForActionOrigin_Legacy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamInput_GetGlyphForActionOrigin_Legacy(EInputActionOrigin eOrigin)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInput_GetGlyphForActionOrigin_Legacy$descriptor() {
        return SteamAPI_ISteamInput_GetGlyphForActionOrigin_Legacy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamInput_GetGlyphForActionOrigin_Legacy(EInputActionOrigin eOrigin)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInput_GetGlyphForActionOrigin_Legacy$handle() {
        return SteamAPI_ISteamInput_GetGlyphForActionOrigin_Legacy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamInput_GetGlyphForActionOrigin_Legacy(EInputActionOrigin eOrigin)
     * }
     */
    public static MemorySegment SteamAPI_ISteamInput_GetGlyphForActionOrigin_Legacy(int eOrigin) {
        var mh$ = SteamAPI_ISteamInput_GetGlyphForActionOrigin_Legacy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInput_GetGlyphForActionOrigin_Legacy", eOrigin);
            }
            return (MemorySegment)mh$.invokeExact(eOrigin);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInput_GetStringForActionOrigin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamInput_GetStringForActionOrigin"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamInput_GetStringForActionOrigin(EInputActionOrigin eOrigin)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInput_GetStringForActionOrigin$descriptor() {
        return SteamAPI_ISteamInput_GetStringForActionOrigin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamInput_GetStringForActionOrigin(EInputActionOrigin eOrigin)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInput_GetStringForActionOrigin$handle() {
        return SteamAPI_ISteamInput_GetStringForActionOrigin.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamInput_GetStringForActionOrigin(EInputActionOrigin eOrigin)
     * }
     */
    public static MemorySegment SteamAPI_ISteamInput_GetStringForActionOrigin(int eOrigin) {
        var mh$ = SteamAPI_ISteamInput_GetStringForActionOrigin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInput_GetStringForActionOrigin", eOrigin);
            }
            return (MemorySegment)mh$.invokeExact(eOrigin);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInput_GetStringForAnalogActionName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamInput_GetStringForAnalogActionName"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamInput_GetStringForAnalogActionName(InputAnalogActionHandle_t eActionHandle)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInput_GetStringForAnalogActionName$descriptor() {
        return SteamAPI_ISteamInput_GetStringForAnalogActionName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamInput_GetStringForAnalogActionName(InputAnalogActionHandle_t eActionHandle)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInput_GetStringForAnalogActionName$handle() {
        return SteamAPI_ISteamInput_GetStringForAnalogActionName.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamInput_GetStringForAnalogActionName(InputAnalogActionHandle_t eActionHandle)
     * }
     */
    public static MemorySegment SteamAPI_ISteamInput_GetStringForAnalogActionName(long eActionHandle) {
        var mh$ = SteamAPI_ISteamInput_GetStringForAnalogActionName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInput_GetStringForAnalogActionName", eActionHandle);
            }
            return (MemorySegment)mh$.invokeExact(eActionHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInput_StopAnalogActionMomentum {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamInput_StopAnalogActionMomentum"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamInput_StopAnalogActionMomentum(InputHandle_t inputHandle, InputAnalogActionHandle_t eAction)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInput_StopAnalogActionMomentum$descriptor() {
        return SteamAPI_ISteamInput_StopAnalogActionMomentum.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamInput_StopAnalogActionMomentum(InputHandle_t inputHandle, InputAnalogActionHandle_t eAction)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInput_StopAnalogActionMomentum$handle() {
        return SteamAPI_ISteamInput_StopAnalogActionMomentum.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamInput_StopAnalogActionMomentum(InputHandle_t inputHandle, InputAnalogActionHandle_t eAction)
     * }
     */
    public static void SteamAPI_ISteamInput_StopAnalogActionMomentum(long inputHandle, long eAction) {
        var mh$ = SteamAPI_ISteamInput_StopAnalogActionMomentum.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInput_StopAnalogActionMomentum", inputHandle, eAction);
            }
            mh$.invokeExact(inputHandle, eAction);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInput_GetMotionData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            InputMotionData_t.layout(),
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamInput_GetMotionData"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * InputMotionData_t SteamAPI_ISteamInput_GetMotionData(InputHandle_t inputHandle)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInput_GetMotionData$descriptor() {
        return SteamAPI_ISteamInput_GetMotionData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * InputMotionData_t SteamAPI_ISteamInput_GetMotionData(InputHandle_t inputHandle)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInput_GetMotionData$handle() {
        return SteamAPI_ISteamInput_GetMotionData.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * InputMotionData_t SteamAPI_ISteamInput_GetMotionData(InputHandle_t inputHandle)
     * }
     */
    public static MemorySegment SteamAPI_ISteamInput_GetMotionData(SegmentAllocator allocator, long inputHandle) {
        var mh$ = SteamAPI_ISteamInput_GetMotionData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInput_GetMotionData", allocator, inputHandle);
            }
            return (MemorySegment)mh$.invokeExact(allocator, inputHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInput_TriggerVibration {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_SHORT,
            SteamFlat4j.C_SHORT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamInput_TriggerVibration"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamInput_TriggerVibration(InputHandle_t inputHandle, unsigned short usLeftSpeed, unsigned short usRightSpeed)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInput_TriggerVibration$descriptor() {
        return SteamAPI_ISteamInput_TriggerVibration.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamInput_TriggerVibration(InputHandle_t inputHandle, unsigned short usLeftSpeed, unsigned short usRightSpeed)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInput_TriggerVibration$handle() {
        return SteamAPI_ISteamInput_TriggerVibration.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamInput_TriggerVibration(InputHandle_t inputHandle, unsigned short usLeftSpeed, unsigned short usRightSpeed)
     * }
     */
    public static void SteamAPI_ISteamInput_TriggerVibration(long inputHandle, short usLeftSpeed, short usRightSpeed) {
        var mh$ = SteamAPI_ISteamInput_TriggerVibration.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInput_TriggerVibration", inputHandle, usLeftSpeed, usRightSpeed);
            }
            mh$.invokeExact(inputHandle, usLeftSpeed, usRightSpeed);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInput_TriggerVibrationExtended {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_SHORT,
            SteamFlat4j.C_SHORT,
            SteamFlat4j.C_SHORT,
            SteamFlat4j.C_SHORT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamInput_TriggerVibrationExtended"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamInput_TriggerVibrationExtended(InputHandle_t inputHandle, unsigned short usLeftSpeed, unsigned short usRightSpeed, unsigned short usLeftTriggerSpeed, unsigned short usRightTriggerSpeed)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInput_TriggerVibrationExtended$descriptor() {
        return SteamAPI_ISteamInput_TriggerVibrationExtended.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamInput_TriggerVibrationExtended(InputHandle_t inputHandle, unsigned short usLeftSpeed, unsigned short usRightSpeed, unsigned short usLeftTriggerSpeed, unsigned short usRightTriggerSpeed)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInput_TriggerVibrationExtended$handle() {
        return SteamAPI_ISteamInput_TriggerVibrationExtended.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamInput_TriggerVibrationExtended(InputHandle_t inputHandle, unsigned short usLeftSpeed, unsigned short usRightSpeed, unsigned short usLeftTriggerSpeed, unsigned short usRightTriggerSpeed)
     * }
     */
    public static void SteamAPI_ISteamInput_TriggerVibrationExtended(long inputHandle, short usLeftSpeed, short usRightSpeed, short usLeftTriggerSpeed, short usRightTriggerSpeed) {
        var mh$ = SteamAPI_ISteamInput_TriggerVibrationExtended.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInput_TriggerVibrationExtended", inputHandle, usLeftSpeed, usRightSpeed, usLeftTriggerSpeed, usRightTriggerSpeed);
            }
            mh$.invokeExact(inputHandle, usLeftSpeed, usRightSpeed, usLeftTriggerSpeed, usRightTriggerSpeed);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInput_TriggerSimpleHapticEvent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_CHAR,
            SteamFlat4j.C_CHAR,
            SteamFlat4j.C_CHAR,
            SteamFlat4j.C_CHAR
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamInput_TriggerSimpleHapticEvent"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamInput_TriggerSimpleHapticEvent(InputHandle_t inputHandle, EControllerHapticLocation eHapticLocation, uint8 nIntensity, char nGainDB, uint8 nOtherIntensity, char nOtherGainDB)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInput_TriggerSimpleHapticEvent$descriptor() {
        return SteamAPI_ISteamInput_TriggerSimpleHapticEvent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamInput_TriggerSimpleHapticEvent(InputHandle_t inputHandle, EControllerHapticLocation eHapticLocation, uint8 nIntensity, char nGainDB, uint8 nOtherIntensity, char nOtherGainDB)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInput_TriggerSimpleHapticEvent$handle() {
        return SteamAPI_ISteamInput_TriggerSimpleHapticEvent.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamInput_TriggerSimpleHapticEvent(InputHandle_t inputHandle, EControllerHapticLocation eHapticLocation, uint8 nIntensity, char nGainDB, uint8 nOtherIntensity, char nOtherGainDB)
     * }
     */
    public static void SteamAPI_ISteamInput_TriggerSimpleHapticEvent(long inputHandle, int eHapticLocation, byte nIntensity, byte nGainDB, byte nOtherIntensity, byte nOtherGainDB) {
        var mh$ = SteamAPI_ISteamInput_TriggerSimpleHapticEvent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInput_TriggerSimpleHapticEvent", inputHandle, eHapticLocation, nIntensity, nGainDB, nOtherIntensity, nOtherGainDB);
            }
            mh$.invokeExact(inputHandle, eHapticLocation, nIntensity, nGainDB, nOtherIntensity, nOtherGainDB);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInput_SetLEDColor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_CHAR,
            SteamFlat4j.C_CHAR,
            SteamFlat4j.C_CHAR,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamInput_SetLEDColor"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamInput_SetLEDColor(InputHandle_t inputHandle, uint8 nColorR, uint8 nColorG, uint8 nColorB, unsigned int nFlags)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInput_SetLEDColor$descriptor() {
        return SteamAPI_ISteamInput_SetLEDColor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamInput_SetLEDColor(InputHandle_t inputHandle, uint8 nColorR, uint8 nColorG, uint8 nColorB, unsigned int nFlags)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInput_SetLEDColor$handle() {
        return SteamAPI_ISteamInput_SetLEDColor.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamInput_SetLEDColor(InputHandle_t inputHandle, uint8 nColorR, uint8 nColorG, uint8 nColorB, unsigned int nFlags)
     * }
     */
    public static void SteamAPI_ISteamInput_SetLEDColor(long inputHandle, byte nColorR, byte nColorG, byte nColorB, int nFlags) {
        var mh$ = SteamAPI_ISteamInput_SetLEDColor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInput_SetLEDColor", inputHandle, nColorR, nColorG, nColorB, nFlags);
            }
            mh$.invokeExact(inputHandle, nColorR, nColorG, nColorB, nFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInput_Legacy_TriggerHapticPulse {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_SHORT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamInput_Legacy_TriggerHapticPulse"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamInput_Legacy_TriggerHapticPulse(InputHandle_t inputHandle, ESteamControllerPad eTargetPad, unsigned short usDurationMicroSec)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInput_Legacy_TriggerHapticPulse$descriptor() {
        return SteamAPI_ISteamInput_Legacy_TriggerHapticPulse.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamInput_Legacy_TriggerHapticPulse(InputHandle_t inputHandle, ESteamControllerPad eTargetPad, unsigned short usDurationMicroSec)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInput_Legacy_TriggerHapticPulse$handle() {
        return SteamAPI_ISteamInput_Legacy_TriggerHapticPulse.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamInput_Legacy_TriggerHapticPulse(InputHandle_t inputHandle, ESteamControllerPad eTargetPad, unsigned short usDurationMicroSec)
     * }
     */
    public static void SteamAPI_ISteamInput_Legacy_TriggerHapticPulse(long inputHandle, int eTargetPad, short usDurationMicroSec) {
        var mh$ = SteamAPI_ISteamInput_Legacy_TriggerHapticPulse.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInput_Legacy_TriggerHapticPulse", inputHandle, eTargetPad, usDurationMicroSec);
            }
            mh$.invokeExact(inputHandle, eTargetPad, usDurationMicroSec);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInput_Legacy_TriggerRepeatedHapticPulse {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_SHORT,
            SteamFlat4j.C_SHORT,
            SteamFlat4j.C_SHORT,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamInput_Legacy_TriggerRepeatedHapticPulse"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamInput_Legacy_TriggerRepeatedHapticPulse(InputHandle_t inputHandle, ESteamControllerPad eTargetPad, unsigned short usDurationMicroSec, unsigned short usOffMicroSec, unsigned short unRepeat, unsigned int nFlags)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInput_Legacy_TriggerRepeatedHapticPulse$descriptor() {
        return SteamAPI_ISteamInput_Legacy_TriggerRepeatedHapticPulse.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamInput_Legacy_TriggerRepeatedHapticPulse(InputHandle_t inputHandle, ESteamControllerPad eTargetPad, unsigned short usDurationMicroSec, unsigned short usOffMicroSec, unsigned short unRepeat, unsigned int nFlags)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInput_Legacy_TriggerRepeatedHapticPulse$handle() {
        return SteamAPI_ISteamInput_Legacy_TriggerRepeatedHapticPulse.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamInput_Legacy_TriggerRepeatedHapticPulse(InputHandle_t inputHandle, ESteamControllerPad eTargetPad, unsigned short usDurationMicroSec, unsigned short usOffMicroSec, unsigned short unRepeat, unsigned int nFlags)
     * }
     */
    public static void SteamAPI_ISteamInput_Legacy_TriggerRepeatedHapticPulse(long inputHandle, int eTargetPad, short usDurationMicroSec, short usOffMicroSec, short unRepeat, int nFlags) {
        var mh$ = SteamAPI_ISteamInput_Legacy_TriggerRepeatedHapticPulse.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInput_Legacy_TriggerRepeatedHapticPulse", inputHandle, eTargetPad, usDurationMicroSec, usOffMicroSec, unRepeat, nFlags);
            }
            mh$.invokeExact(inputHandle, eTargetPad, usDurationMicroSec, usOffMicroSec, unRepeat, nFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInput_ShowBindingPanel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamInput_ShowBindingPanel"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInput_ShowBindingPanel(InputHandle_t inputHandle)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInput_ShowBindingPanel$descriptor() {
        return SteamAPI_ISteamInput_ShowBindingPanel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInput_ShowBindingPanel(InputHandle_t inputHandle)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInput_ShowBindingPanel$handle() {
        return SteamAPI_ISteamInput_ShowBindingPanel.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInput_ShowBindingPanel(InputHandle_t inputHandle)
     * }
     */
    public static boolean SteamAPI_ISteamInput_ShowBindingPanel(long inputHandle) {
        var mh$ = SteamAPI_ISteamInput_ShowBindingPanel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInput_ShowBindingPanel", inputHandle);
            }
            return (boolean)mh$.invokeExact(inputHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInput_GetInputTypeForHandle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamInput_GetInputTypeForHandle"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ESteamInputType SteamAPI_ISteamInput_GetInputTypeForHandle(InputHandle_t inputHandle)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInput_GetInputTypeForHandle$descriptor() {
        return SteamAPI_ISteamInput_GetInputTypeForHandle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ESteamInputType SteamAPI_ISteamInput_GetInputTypeForHandle(InputHandle_t inputHandle)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInput_GetInputTypeForHandle$handle() {
        return SteamAPI_ISteamInput_GetInputTypeForHandle.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ESteamInputType SteamAPI_ISteamInput_GetInputTypeForHandle(InputHandle_t inputHandle)
     * }
     */
    public static int SteamAPI_ISteamInput_GetInputTypeForHandle(long inputHandle) {
        var mh$ = SteamAPI_ISteamInput_GetInputTypeForHandle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInput_GetInputTypeForHandle", inputHandle);
            }
            return (int)mh$.invokeExact(inputHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInput_GetControllerForGamepadIndex {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamInput_GetControllerForGamepadIndex"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * InputHandle_t SteamAPI_ISteamInput_GetControllerForGamepadIndex(int nIndex)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInput_GetControllerForGamepadIndex$descriptor() {
        return SteamAPI_ISteamInput_GetControllerForGamepadIndex.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * InputHandle_t SteamAPI_ISteamInput_GetControllerForGamepadIndex(int nIndex)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInput_GetControllerForGamepadIndex$handle() {
        return SteamAPI_ISteamInput_GetControllerForGamepadIndex.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * InputHandle_t SteamAPI_ISteamInput_GetControllerForGamepadIndex(int nIndex)
     * }
     */
    public static long SteamAPI_ISteamInput_GetControllerForGamepadIndex(int nIndex) {
        var mh$ = SteamAPI_ISteamInput_GetControllerForGamepadIndex.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInput_GetControllerForGamepadIndex", nIndex);
            }
            return (long)mh$.invokeExact(nIndex);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInput_GetGamepadIndexForController {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamInput_GetGamepadIndexForController"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamInput_GetGamepadIndexForController(InputHandle_t ulinputHandle)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInput_GetGamepadIndexForController$descriptor() {
        return SteamAPI_ISteamInput_GetGamepadIndexForController.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamInput_GetGamepadIndexForController(InputHandle_t ulinputHandle)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInput_GetGamepadIndexForController$handle() {
        return SteamAPI_ISteamInput_GetGamepadIndexForController.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int SteamAPI_ISteamInput_GetGamepadIndexForController(InputHandle_t ulinputHandle)
     * }
     */
    public static int SteamAPI_ISteamInput_GetGamepadIndexForController(long ulinputHandle) {
        var mh$ = SteamAPI_ISteamInput_GetGamepadIndexForController.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInput_GetGamepadIndexForController", ulinputHandle);
            }
            return (int)mh$.invokeExact(ulinputHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInput_GetStringForXboxOrigin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamInput_GetStringForXboxOrigin"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamInput_GetStringForXboxOrigin(EXboxOrigin eOrigin)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInput_GetStringForXboxOrigin$descriptor() {
        return SteamAPI_ISteamInput_GetStringForXboxOrigin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamInput_GetStringForXboxOrigin(EXboxOrigin eOrigin)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInput_GetStringForXboxOrigin$handle() {
        return SteamAPI_ISteamInput_GetStringForXboxOrigin.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamInput_GetStringForXboxOrigin(EXboxOrigin eOrigin)
     * }
     */
    public static MemorySegment SteamAPI_ISteamInput_GetStringForXboxOrigin(int eOrigin) {
        var mh$ = SteamAPI_ISteamInput_GetStringForXboxOrigin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInput_GetStringForXboxOrigin", eOrigin);
            }
            return (MemorySegment)mh$.invokeExact(eOrigin);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInput_GetGlyphForXboxOrigin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamInput_GetGlyphForXboxOrigin"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamInput_GetGlyphForXboxOrigin(EXboxOrigin eOrigin)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInput_GetGlyphForXboxOrigin$descriptor() {
        return SteamAPI_ISteamInput_GetGlyphForXboxOrigin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamInput_GetGlyphForXboxOrigin(EXboxOrigin eOrigin)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInput_GetGlyphForXboxOrigin$handle() {
        return SteamAPI_ISteamInput_GetGlyphForXboxOrigin.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamInput_GetGlyphForXboxOrigin(EXboxOrigin eOrigin)
     * }
     */
    public static MemorySegment SteamAPI_ISteamInput_GetGlyphForXboxOrigin(int eOrigin) {
        var mh$ = SteamAPI_ISteamInput_GetGlyphForXboxOrigin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInput_GetGlyphForXboxOrigin", eOrigin);
            }
            return (MemorySegment)mh$.invokeExact(eOrigin);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInput_GetActionOriginFromXboxOrigin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamInput_GetActionOriginFromXboxOrigin"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * EInputActionOrigin SteamAPI_ISteamInput_GetActionOriginFromXboxOrigin(InputHandle_t inputHandle, EXboxOrigin eOrigin)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInput_GetActionOriginFromXboxOrigin$descriptor() {
        return SteamAPI_ISteamInput_GetActionOriginFromXboxOrigin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * EInputActionOrigin SteamAPI_ISteamInput_GetActionOriginFromXboxOrigin(InputHandle_t inputHandle, EXboxOrigin eOrigin)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInput_GetActionOriginFromXboxOrigin$handle() {
        return SteamAPI_ISteamInput_GetActionOriginFromXboxOrigin.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * EInputActionOrigin SteamAPI_ISteamInput_GetActionOriginFromXboxOrigin(InputHandle_t inputHandle, EXboxOrigin eOrigin)
     * }
     */
    public static int SteamAPI_ISteamInput_GetActionOriginFromXboxOrigin(long inputHandle, int eOrigin) {
        var mh$ = SteamAPI_ISteamInput_GetActionOriginFromXboxOrigin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInput_GetActionOriginFromXboxOrigin", inputHandle, eOrigin);
            }
            return (int)mh$.invokeExact(inputHandle, eOrigin);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInput_TranslateActionOrigin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamInput_TranslateActionOrigin"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * EInputActionOrigin SteamAPI_ISteamInput_TranslateActionOrigin(ESteamInputType eDestinationInputType, EInputActionOrigin eSourceOrigin)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInput_TranslateActionOrigin$descriptor() {
        return SteamAPI_ISteamInput_TranslateActionOrigin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * EInputActionOrigin SteamAPI_ISteamInput_TranslateActionOrigin(ESteamInputType eDestinationInputType, EInputActionOrigin eSourceOrigin)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInput_TranslateActionOrigin$handle() {
        return SteamAPI_ISteamInput_TranslateActionOrigin.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * EInputActionOrigin SteamAPI_ISteamInput_TranslateActionOrigin(ESteamInputType eDestinationInputType, EInputActionOrigin eSourceOrigin)
     * }
     */
    public static int SteamAPI_ISteamInput_TranslateActionOrigin(int eDestinationInputType, int eSourceOrigin) {
        var mh$ = SteamAPI_ISteamInput_TranslateActionOrigin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInput_TranslateActionOrigin", eDestinationInputType, eSourceOrigin);
            }
            return (int)mh$.invokeExact(eDestinationInputType, eSourceOrigin);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInput_GetDeviceBindingRevision {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamInput_GetDeviceBindingRevision"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInput_GetDeviceBindingRevision(InputHandle_t inputHandle, int *pMajor, int *pMinor)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInput_GetDeviceBindingRevision$descriptor() {
        return SteamAPI_ISteamInput_GetDeviceBindingRevision.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInput_GetDeviceBindingRevision(InputHandle_t inputHandle, int *pMajor, int *pMinor)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInput_GetDeviceBindingRevision$handle() {
        return SteamAPI_ISteamInput_GetDeviceBindingRevision.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInput_GetDeviceBindingRevision(InputHandle_t inputHandle, int *pMajor, int *pMinor)
     * }
     */
    public static boolean SteamAPI_ISteamInput_GetDeviceBindingRevision(long inputHandle, MemorySegment pMajor, MemorySegment pMinor) {
        var mh$ = SteamAPI_ISteamInput_GetDeviceBindingRevision.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInput_GetDeviceBindingRevision", inputHandle, pMajor, pMinor);
            }
            return (boolean)mh$.invokeExact(inputHandle, pMajor, pMinor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInput_GetRemotePlaySessionID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamInput_GetRemotePlaySessionID"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamInput_GetRemotePlaySessionID(InputHandle_t inputHandle)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInput_GetRemotePlaySessionID$descriptor() {
        return SteamAPI_ISteamInput_GetRemotePlaySessionID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamInput_GetRemotePlaySessionID(InputHandle_t inputHandle)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInput_GetRemotePlaySessionID$handle() {
        return SteamAPI_ISteamInput_GetRemotePlaySessionID.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamInput_GetRemotePlaySessionID(InputHandle_t inputHandle)
     * }
     */
    public static int SteamAPI_ISteamInput_GetRemotePlaySessionID(long inputHandle) {
        var mh$ = SteamAPI_ISteamInput_GetRemotePlaySessionID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInput_GetRemotePlaySessionID", inputHandle);
            }
            return (int)mh$.invokeExact(inputHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInput_GetSessionInputConfigurationSettings {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_SHORT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamInput_GetSessionInputConfigurationSettings"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint16 SteamAPI_ISteamInput_GetSessionInputConfigurationSettings()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInput_GetSessionInputConfigurationSettings$descriptor() {
        return SteamAPI_ISteamInput_GetSessionInputConfigurationSettings.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint16 SteamAPI_ISteamInput_GetSessionInputConfigurationSettings()
     * }
     */
    public static MethodHandle SteamAPI_ISteamInput_GetSessionInputConfigurationSettings$handle() {
        return SteamAPI_ISteamInput_GetSessionInputConfigurationSettings.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * uint16 SteamAPI_ISteamInput_GetSessionInputConfigurationSettings()
     * }
     */
    public static short SteamAPI_ISteamInput_GetSessionInputConfigurationSettings() {
        var mh$ = SteamAPI_ISteamInput_GetSessionInputConfigurationSettings.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInput_GetSessionInputConfigurationSettings");
            }
            return (short)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamController_Init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamController_Init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamController_Init()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamController_Init$descriptor() {
        return SteamAPI_ISteamController_Init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamController_Init()
     * }
     */
    public static MethodHandle SteamAPI_ISteamController_Init$handle() {
        return SteamAPI_ISteamController_Init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamController_Init()
     * }
     */
    public static boolean SteamAPI_ISteamController_Init() {
        var mh$ = SteamAPI_ISteamController_Init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamController_Init");
            }
            return (boolean)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamController_Shutdown {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamController_Shutdown"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamController_Shutdown()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamController_Shutdown$descriptor() {
        return SteamAPI_ISteamController_Shutdown.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamController_Shutdown()
     * }
     */
    public static MethodHandle SteamAPI_ISteamController_Shutdown$handle() {
        return SteamAPI_ISteamController_Shutdown.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamController_Shutdown()
     * }
     */
    public static boolean SteamAPI_ISteamController_Shutdown() {
        var mh$ = SteamAPI_ISteamController_Shutdown.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamController_Shutdown");
            }
            return (boolean)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamController_RunFrame {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamController_RunFrame"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamController_RunFrame()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamController_RunFrame$descriptor() {
        return SteamAPI_ISteamController_RunFrame.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamController_RunFrame()
     * }
     */
    public static MethodHandle SteamAPI_ISteamController_RunFrame$handle() {
        return SteamAPI_ISteamController_RunFrame.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamController_RunFrame()
     * }
     */
    public static void SteamAPI_ISteamController_RunFrame() {
        var mh$ = SteamAPI_ISteamController_RunFrame.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamController_RunFrame");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamController_GetConnectedControllers {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamController_GetConnectedControllers"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamController_GetConnectedControllers(ControllerHandle_t *handlesOut)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamController_GetConnectedControllers$descriptor() {
        return SteamAPI_ISteamController_GetConnectedControllers.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamController_GetConnectedControllers(ControllerHandle_t *handlesOut)
     * }
     */
    public static MethodHandle SteamAPI_ISteamController_GetConnectedControllers$handle() {
        return SteamAPI_ISteamController_GetConnectedControllers.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int SteamAPI_ISteamController_GetConnectedControllers(ControllerHandle_t *handlesOut)
     * }
     */
    public static int SteamAPI_ISteamController_GetConnectedControllers(MemorySegment handlesOut) {
        var mh$ = SteamAPI_ISteamController_GetConnectedControllers.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamController_GetConnectedControllers", handlesOut);
            }
            return (int)mh$.invokeExact(handlesOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamController_GetActionSetHandle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamController_GetActionSetHandle"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ControllerActionSetHandle_t SteamAPI_ISteamController_GetActionSetHandle(const char *pszActionSetName)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamController_GetActionSetHandle$descriptor() {
        return SteamAPI_ISteamController_GetActionSetHandle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ControllerActionSetHandle_t SteamAPI_ISteamController_GetActionSetHandle(const char *pszActionSetName)
     * }
     */
    public static MethodHandle SteamAPI_ISteamController_GetActionSetHandle$handle() {
        return SteamAPI_ISteamController_GetActionSetHandle.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ControllerActionSetHandle_t SteamAPI_ISteamController_GetActionSetHandle(const char *pszActionSetName)
     * }
     */
    public static long SteamAPI_ISteamController_GetActionSetHandle(MemorySegment pszActionSetName) {
        var mh$ = SteamAPI_ISteamController_GetActionSetHandle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamController_GetActionSetHandle", pszActionSetName);
            }
            return (long)mh$.invokeExact(pszActionSetName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamController_ActivateActionSet {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamController_ActivateActionSet"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamController_ActivateActionSet(ControllerHandle_t controllerHandle, ControllerActionSetHandle_t actionSetHandle)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamController_ActivateActionSet$descriptor() {
        return SteamAPI_ISteamController_ActivateActionSet.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamController_ActivateActionSet(ControllerHandle_t controllerHandle, ControllerActionSetHandle_t actionSetHandle)
     * }
     */
    public static MethodHandle SteamAPI_ISteamController_ActivateActionSet$handle() {
        return SteamAPI_ISteamController_ActivateActionSet.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamController_ActivateActionSet(ControllerHandle_t controllerHandle, ControllerActionSetHandle_t actionSetHandle)
     * }
     */
    public static void SteamAPI_ISteamController_ActivateActionSet(long controllerHandle, long actionSetHandle) {
        var mh$ = SteamAPI_ISteamController_ActivateActionSet.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamController_ActivateActionSet", controllerHandle, actionSetHandle);
            }
            mh$.invokeExact(controllerHandle, actionSetHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamController_GetCurrentActionSet {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamController_GetCurrentActionSet"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ControllerActionSetHandle_t SteamAPI_ISteamController_GetCurrentActionSet(ControllerHandle_t controllerHandle)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamController_GetCurrentActionSet$descriptor() {
        return SteamAPI_ISteamController_GetCurrentActionSet.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ControllerActionSetHandle_t SteamAPI_ISteamController_GetCurrentActionSet(ControllerHandle_t controllerHandle)
     * }
     */
    public static MethodHandle SteamAPI_ISteamController_GetCurrentActionSet$handle() {
        return SteamAPI_ISteamController_GetCurrentActionSet.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ControllerActionSetHandle_t SteamAPI_ISteamController_GetCurrentActionSet(ControllerHandle_t controllerHandle)
     * }
     */
    public static long SteamAPI_ISteamController_GetCurrentActionSet(long controllerHandle) {
        var mh$ = SteamAPI_ISteamController_GetCurrentActionSet.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamController_GetCurrentActionSet", controllerHandle);
            }
            return (long)mh$.invokeExact(controllerHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamController_ActivateActionSetLayer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamController_ActivateActionSetLayer"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamController_ActivateActionSetLayer(ControllerHandle_t controllerHandle, ControllerActionSetHandle_t actionSetLayerHandle)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamController_ActivateActionSetLayer$descriptor() {
        return SteamAPI_ISteamController_ActivateActionSetLayer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamController_ActivateActionSetLayer(ControllerHandle_t controllerHandle, ControllerActionSetHandle_t actionSetLayerHandle)
     * }
     */
    public static MethodHandle SteamAPI_ISteamController_ActivateActionSetLayer$handle() {
        return SteamAPI_ISteamController_ActivateActionSetLayer.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamController_ActivateActionSetLayer(ControllerHandle_t controllerHandle, ControllerActionSetHandle_t actionSetLayerHandle)
     * }
     */
    public static void SteamAPI_ISteamController_ActivateActionSetLayer(long controllerHandle, long actionSetLayerHandle) {
        var mh$ = SteamAPI_ISteamController_ActivateActionSetLayer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamController_ActivateActionSetLayer", controllerHandle, actionSetLayerHandle);
            }
            mh$.invokeExact(controllerHandle, actionSetLayerHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamController_DeactivateActionSetLayer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamController_DeactivateActionSetLayer"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamController_DeactivateActionSetLayer(ControllerHandle_t controllerHandle, ControllerActionSetHandle_t actionSetLayerHandle)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamController_DeactivateActionSetLayer$descriptor() {
        return SteamAPI_ISteamController_DeactivateActionSetLayer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamController_DeactivateActionSetLayer(ControllerHandle_t controllerHandle, ControllerActionSetHandle_t actionSetLayerHandle)
     * }
     */
    public static MethodHandle SteamAPI_ISteamController_DeactivateActionSetLayer$handle() {
        return SteamAPI_ISteamController_DeactivateActionSetLayer.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamController_DeactivateActionSetLayer(ControllerHandle_t controllerHandle, ControllerActionSetHandle_t actionSetLayerHandle)
     * }
     */
    public static void SteamAPI_ISteamController_DeactivateActionSetLayer(long controllerHandle, long actionSetLayerHandle) {
        var mh$ = SteamAPI_ISteamController_DeactivateActionSetLayer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamController_DeactivateActionSetLayer", controllerHandle, actionSetLayerHandle);
            }
            mh$.invokeExact(controllerHandle, actionSetLayerHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamController_DeactivateAllActionSetLayers {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamController_DeactivateAllActionSetLayers"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamController_DeactivateAllActionSetLayers(ControllerHandle_t controllerHandle)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamController_DeactivateAllActionSetLayers$descriptor() {
        return SteamAPI_ISteamController_DeactivateAllActionSetLayers.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamController_DeactivateAllActionSetLayers(ControllerHandle_t controllerHandle)
     * }
     */
    public static MethodHandle SteamAPI_ISteamController_DeactivateAllActionSetLayers$handle() {
        return SteamAPI_ISteamController_DeactivateAllActionSetLayers.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamController_DeactivateAllActionSetLayers(ControllerHandle_t controllerHandle)
     * }
     */
    public static void SteamAPI_ISteamController_DeactivateAllActionSetLayers(long controllerHandle) {
        var mh$ = SteamAPI_ISteamController_DeactivateAllActionSetLayers.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamController_DeactivateAllActionSetLayers", controllerHandle);
            }
            mh$.invokeExact(controllerHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamController_GetActiveActionSetLayers {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamController_GetActiveActionSetLayers"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamController_GetActiveActionSetLayers(ControllerHandle_t controllerHandle, ControllerActionSetHandle_t *handlesOut)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamController_GetActiveActionSetLayers$descriptor() {
        return SteamAPI_ISteamController_GetActiveActionSetLayers.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamController_GetActiveActionSetLayers(ControllerHandle_t controllerHandle, ControllerActionSetHandle_t *handlesOut)
     * }
     */
    public static MethodHandle SteamAPI_ISteamController_GetActiveActionSetLayers$handle() {
        return SteamAPI_ISteamController_GetActiveActionSetLayers.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int SteamAPI_ISteamController_GetActiveActionSetLayers(ControllerHandle_t controllerHandle, ControllerActionSetHandle_t *handlesOut)
     * }
     */
    public static int SteamAPI_ISteamController_GetActiveActionSetLayers(long controllerHandle, MemorySegment handlesOut) {
        var mh$ = SteamAPI_ISteamController_GetActiveActionSetLayers.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamController_GetActiveActionSetLayers", controllerHandle, handlesOut);
            }
            return (int)mh$.invokeExact(controllerHandle, handlesOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamController_GetDigitalActionHandle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamController_GetDigitalActionHandle"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ControllerDigitalActionHandle_t SteamAPI_ISteamController_GetDigitalActionHandle(const char *pszActionName)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamController_GetDigitalActionHandle$descriptor() {
        return SteamAPI_ISteamController_GetDigitalActionHandle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ControllerDigitalActionHandle_t SteamAPI_ISteamController_GetDigitalActionHandle(const char *pszActionName)
     * }
     */
    public static MethodHandle SteamAPI_ISteamController_GetDigitalActionHandle$handle() {
        return SteamAPI_ISteamController_GetDigitalActionHandle.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ControllerDigitalActionHandle_t SteamAPI_ISteamController_GetDigitalActionHandle(const char *pszActionName)
     * }
     */
    public static long SteamAPI_ISteamController_GetDigitalActionHandle(MemorySegment pszActionName) {
        var mh$ = SteamAPI_ISteamController_GetDigitalActionHandle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamController_GetDigitalActionHandle", pszActionName);
            }
            return (long)mh$.invokeExact(pszActionName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamController_GetDigitalActionData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            InputDigitalActionData_t.layout(),
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamController_GetDigitalActionData"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * InputDigitalActionData_t SteamAPI_ISteamController_GetDigitalActionData(ControllerHandle_t controllerHandle, ControllerDigitalActionHandle_t digitalActionHandle)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamController_GetDigitalActionData$descriptor() {
        return SteamAPI_ISteamController_GetDigitalActionData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * InputDigitalActionData_t SteamAPI_ISteamController_GetDigitalActionData(ControllerHandle_t controllerHandle, ControllerDigitalActionHandle_t digitalActionHandle)
     * }
     */
    public static MethodHandle SteamAPI_ISteamController_GetDigitalActionData$handle() {
        return SteamAPI_ISteamController_GetDigitalActionData.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * InputDigitalActionData_t SteamAPI_ISteamController_GetDigitalActionData(ControllerHandle_t controllerHandle, ControllerDigitalActionHandle_t digitalActionHandle)
     * }
     */
    public static MemorySegment SteamAPI_ISteamController_GetDigitalActionData(SegmentAllocator allocator, long controllerHandle, long digitalActionHandle) {
        var mh$ = SteamAPI_ISteamController_GetDigitalActionData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamController_GetDigitalActionData", allocator, controllerHandle, digitalActionHandle);
            }
            return (MemorySegment)mh$.invokeExact(allocator, controllerHandle, digitalActionHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamController_GetDigitalActionOrigins {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamController_GetDigitalActionOrigins"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamController_GetDigitalActionOrigins(ControllerHandle_t controllerHandle, ControllerActionSetHandle_t actionSetHandle, ControllerDigitalActionHandle_t digitalActionHandle, EControllerActionOrigin *originsOut)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamController_GetDigitalActionOrigins$descriptor() {
        return SteamAPI_ISteamController_GetDigitalActionOrigins.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamController_GetDigitalActionOrigins(ControllerHandle_t controllerHandle, ControllerActionSetHandle_t actionSetHandle, ControllerDigitalActionHandle_t digitalActionHandle, EControllerActionOrigin *originsOut)
     * }
     */
    public static MethodHandle SteamAPI_ISteamController_GetDigitalActionOrigins$handle() {
        return SteamAPI_ISteamController_GetDigitalActionOrigins.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int SteamAPI_ISteamController_GetDigitalActionOrigins(ControllerHandle_t controllerHandle, ControllerActionSetHandle_t actionSetHandle, ControllerDigitalActionHandle_t digitalActionHandle, EControllerActionOrigin *originsOut)
     * }
     */
    public static int SteamAPI_ISteamController_GetDigitalActionOrigins(long controllerHandle, long actionSetHandle, long digitalActionHandle, MemorySegment originsOut) {
        var mh$ = SteamAPI_ISteamController_GetDigitalActionOrigins.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamController_GetDigitalActionOrigins", controllerHandle, actionSetHandle, digitalActionHandle, originsOut);
            }
            return (int)mh$.invokeExact(controllerHandle, actionSetHandle, digitalActionHandle, originsOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamController_GetAnalogActionHandle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamController_GetAnalogActionHandle"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ControllerAnalogActionHandle_t SteamAPI_ISteamController_GetAnalogActionHandle(const char *pszActionName)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamController_GetAnalogActionHandle$descriptor() {
        return SteamAPI_ISteamController_GetAnalogActionHandle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ControllerAnalogActionHandle_t SteamAPI_ISteamController_GetAnalogActionHandle(const char *pszActionName)
     * }
     */
    public static MethodHandle SteamAPI_ISteamController_GetAnalogActionHandle$handle() {
        return SteamAPI_ISteamController_GetAnalogActionHandle.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ControllerAnalogActionHandle_t SteamAPI_ISteamController_GetAnalogActionHandle(const char *pszActionName)
     * }
     */
    public static long SteamAPI_ISteamController_GetAnalogActionHandle(MemorySegment pszActionName) {
        var mh$ = SteamAPI_ISteamController_GetAnalogActionHandle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamController_GetAnalogActionHandle", pszActionName);
            }
            return (long)mh$.invokeExact(pszActionName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamController_GetAnalogActionData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            InputAnalogActionData_t.layout(),
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamController_GetAnalogActionData"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * InputAnalogActionData_t SteamAPI_ISteamController_GetAnalogActionData(ControllerHandle_t controllerHandle, ControllerAnalogActionHandle_t analogActionHandle)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamController_GetAnalogActionData$descriptor() {
        return SteamAPI_ISteamController_GetAnalogActionData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * InputAnalogActionData_t SteamAPI_ISteamController_GetAnalogActionData(ControllerHandle_t controllerHandle, ControllerAnalogActionHandle_t analogActionHandle)
     * }
     */
    public static MethodHandle SteamAPI_ISteamController_GetAnalogActionData$handle() {
        return SteamAPI_ISteamController_GetAnalogActionData.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * InputAnalogActionData_t SteamAPI_ISteamController_GetAnalogActionData(ControllerHandle_t controllerHandle, ControllerAnalogActionHandle_t analogActionHandle)
     * }
     */
    public static MemorySegment SteamAPI_ISteamController_GetAnalogActionData(SegmentAllocator allocator, long controllerHandle, long analogActionHandle) {
        var mh$ = SteamAPI_ISteamController_GetAnalogActionData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamController_GetAnalogActionData", allocator, controllerHandle, analogActionHandle);
            }
            return (MemorySegment)mh$.invokeExact(allocator, controllerHandle, analogActionHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamController_GetAnalogActionOrigins {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamController_GetAnalogActionOrigins"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamController_GetAnalogActionOrigins(ControllerHandle_t controllerHandle, ControllerActionSetHandle_t actionSetHandle, ControllerAnalogActionHandle_t analogActionHandle, EControllerActionOrigin *originsOut)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamController_GetAnalogActionOrigins$descriptor() {
        return SteamAPI_ISteamController_GetAnalogActionOrigins.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamController_GetAnalogActionOrigins(ControllerHandle_t controllerHandle, ControllerActionSetHandle_t actionSetHandle, ControllerAnalogActionHandle_t analogActionHandle, EControllerActionOrigin *originsOut)
     * }
     */
    public static MethodHandle SteamAPI_ISteamController_GetAnalogActionOrigins$handle() {
        return SteamAPI_ISteamController_GetAnalogActionOrigins.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int SteamAPI_ISteamController_GetAnalogActionOrigins(ControllerHandle_t controllerHandle, ControllerActionSetHandle_t actionSetHandle, ControllerAnalogActionHandle_t analogActionHandle, EControllerActionOrigin *originsOut)
     * }
     */
    public static int SteamAPI_ISteamController_GetAnalogActionOrigins(long controllerHandle, long actionSetHandle, long analogActionHandle, MemorySegment originsOut) {
        var mh$ = SteamAPI_ISteamController_GetAnalogActionOrigins.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamController_GetAnalogActionOrigins", controllerHandle, actionSetHandle, analogActionHandle, originsOut);
            }
            return (int)mh$.invokeExact(controllerHandle, actionSetHandle, analogActionHandle, originsOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamController_GetGlyphForActionOrigin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamController_GetGlyphForActionOrigin"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamController_GetGlyphForActionOrigin(EControllerActionOrigin eOrigin)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamController_GetGlyphForActionOrigin$descriptor() {
        return SteamAPI_ISteamController_GetGlyphForActionOrigin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamController_GetGlyphForActionOrigin(EControllerActionOrigin eOrigin)
     * }
     */
    public static MethodHandle SteamAPI_ISteamController_GetGlyphForActionOrigin$handle() {
        return SteamAPI_ISteamController_GetGlyphForActionOrigin.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamController_GetGlyphForActionOrigin(EControllerActionOrigin eOrigin)
     * }
     */
    public static MemorySegment SteamAPI_ISteamController_GetGlyphForActionOrigin(int eOrigin) {
        var mh$ = SteamAPI_ISteamController_GetGlyphForActionOrigin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamController_GetGlyphForActionOrigin", eOrigin);
            }
            return (MemorySegment)mh$.invokeExact(eOrigin);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamController_GetStringForActionOrigin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamController_GetStringForActionOrigin"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamController_GetStringForActionOrigin(EControllerActionOrigin eOrigin)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamController_GetStringForActionOrigin$descriptor() {
        return SteamAPI_ISteamController_GetStringForActionOrigin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamController_GetStringForActionOrigin(EControllerActionOrigin eOrigin)
     * }
     */
    public static MethodHandle SteamAPI_ISteamController_GetStringForActionOrigin$handle() {
        return SteamAPI_ISteamController_GetStringForActionOrigin.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamController_GetStringForActionOrigin(EControllerActionOrigin eOrigin)
     * }
     */
    public static MemorySegment SteamAPI_ISteamController_GetStringForActionOrigin(int eOrigin) {
        var mh$ = SteamAPI_ISteamController_GetStringForActionOrigin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamController_GetStringForActionOrigin", eOrigin);
            }
            return (MemorySegment)mh$.invokeExact(eOrigin);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamController_StopAnalogActionMomentum {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamController_StopAnalogActionMomentum"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamController_StopAnalogActionMomentum(ControllerHandle_t controllerHandle, ControllerAnalogActionHandle_t eAction)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamController_StopAnalogActionMomentum$descriptor() {
        return SteamAPI_ISteamController_StopAnalogActionMomentum.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamController_StopAnalogActionMomentum(ControllerHandle_t controllerHandle, ControllerAnalogActionHandle_t eAction)
     * }
     */
    public static MethodHandle SteamAPI_ISteamController_StopAnalogActionMomentum$handle() {
        return SteamAPI_ISteamController_StopAnalogActionMomentum.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamController_StopAnalogActionMomentum(ControllerHandle_t controllerHandle, ControllerAnalogActionHandle_t eAction)
     * }
     */
    public static void SteamAPI_ISteamController_StopAnalogActionMomentum(long controllerHandle, long eAction) {
        var mh$ = SteamAPI_ISteamController_StopAnalogActionMomentum.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamController_StopAnalogActionMomentum", controllerHandle, eAction);
            }
            mh$.invokeExact(controllerHandle, eAction);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamController_GetMotionData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            InputMotionData_t.layout(),
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamController_GetMotionData"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * InputMotionData_t SteamAPI_ISteamController_GetMotionData(ControllerHandle_t controllerHandle)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamController_GetMotionData$descriptor() {
        return SteamAPI_ISteamController_GetMotionData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * InputMotionData_t SteamAPI_ISteamController_GetMotionData(ControllerHandle_t controllerHandle)
     * }
     */
    public static MethodHandle SteamAPI_ISteamController_GetMotionData$handle() {
        return SteamAPI_ISteamController_GetMotionData.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * InputMotionData_t SteamAPI_ISteamController_GetMotionData(ControllerHandle_t controllerHandle)
     * }
     */
    public static MemorySegment SteamAPI_ISteamController_GetMotionData(SegmentAllocator allocator, long controllerHandle) {
        var mh$ = SteamAPI_ISteamController_GetMotionData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamController_GetMotionData", allocator, controllerHandle);
            }
            return (MemorySegment)mh$.invokeExact(allocator, controllerHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamController_TriggerHapticPulse {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_SHORT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamController_TriggerHapticPulse"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamController_TriggerHapticPulse(ControllerHandle_t controllerHandle, ESteamControllerPad eTargetPad, unsigned short usDurationMicroSec)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamController_TriggerHapticPulse$descriptor() {
        return SteamAPI_ISteamController_TriggerHapticPulse.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamController_TriggerHapticPulse(ControllerHandle_t controllerHandle, ESteamControllerPad eTargetPad, unsigned short usDurationMicroSec)
     * }
     */
    public static MethodHandle SteamAPI_ISteamController_TriggerHapticPulse$handle() {
        return SteamAPI_ISteamController_TriggerHapticPulse.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamController_TriggerHapticPulse(ControllerHandle_t controllerHandle, ESteamControllerPad eTargetPad, unsigned short usDurationMicroSec)
     * }
     */
    public static void SteamAPI_ISteamController_TriggerHapticPulse(long controllerHandle, int eTargetPad, short usDurationMicroSec) {
        var mh$ = SteamAPI_ISteamController_TriggerHapticPulse.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamController_TriggerHapticPulse", controllerHandle, eTargetPad, usDurationMicroSec);
            }
            mh$.invokeExact(controllerHandle, eTargetPad, usDurationMicroSec);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamController_TriggerRepeatedHapticPulse {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_SHORT,
            SteamFlat4j.C_SHORT,
            SteamFlat4j.C_SHORT,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamController_TriggerRepeatedHapticPulse"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamController_TriggerRepeatedHapticPulse(ControllerHandle_t controllerHandle, ESteamControllerPad eTargetPad, unsigned short usDurationMicroSec, unsigned short usOffMicroSec, unsigned short unRepeat, unsigned int nFlags)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamController_TriggerRepeatedHapticPulse$descriptor() {
        return SteamAPI_ISteamController_TriggerRepeatedHapticPulse.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamController_TriggerRepeatedHapticPulse(ControllerHandle_t controllerHandle, ESteamControllerPad eTargetPad, unsigned short usDurationMicroSec, unsigned short usOffMicroSec, unsigned short unRepeat, unsigned int nFlags)
     * }
     */
    public static MethodHandle SteamAPI_ISteamController_TriggerRepeatedHapticPulse$handle() {
        return SteamAPI_ISteamController_TriggerRepeatedHapticPulse.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamController_TriggerRepeatedHapticPulse(ControllerHandle_t controllerHandle, ESteamControllerPad eTargetPad, unsigned short usDurationMicroSec, unsigned short usOffMicroSec, unsigned short unRepeat, unsigned int nFlags)
     * }
     */
    public static void SteamAPI_ISteamController_TriggerRepeatedHapticPulse(long controllerHandle, int eTargetPad, short usDurationMicroSec, short usOffMicroSec, short unRepeat, int nFlags) {
        var mh$ = SteamAPI_ISteamController_TriggerRepeatedHapticPulse.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamController_TriggerRepeatedHapticPulse", controllerHandle, eTargetPad, usDurationMicroSec, usOffMicroSec, unRepeat, nFlags);
            }
            mh$.invokeExact(controllerHandle, eTargetPad, usDurationMicroSec, usOffMicroSec, unRepeat, nFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamController_TriggerVibration {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_SHORT,
            SteamFlat4j.C_SHORT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamController_TriggerVibration"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamController_TriggerVibration(ControllerHandle_t controllerHandle, unsigned short usLeftSpeed, unsigned short usRightSpeed)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamController_TriggerVibration$descriptor() {
        return SteamAPI_ISteamController_TriggerVibration.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamController_TriggerVibration(ControllerHandle_t controllerHandle, unsigned short usLeftSpeed, unsigned short usRightSpeed)
     * }
     */
    public static MethodHandle SteamAPI_ISteamController_TriggerVibration$handle() {
        return SteamAPI_ISteamController_TriggerVibration.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamController_TriggerVibration(ControllerHandle_t controllerHandle, unsigned short usLeftSpeed, unsigned short usRightSpeed)
     * }
     */
    public static void SteamAPI_ISteamController_TriggerVibration(long controllerHandle, short usLeftSpeed, short usRightSpeed) {
        var mh$ = SteamAPI_ISteamController_TriggerVibration.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamController_TriggerVibration", controllerHandle, usLeftSpeed, usRightSpeed);
            }
            mh$.invokeExact(controllerHandle, usLeftSpeed, usRightSpeed);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamController_SetLEDColor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_CHAR,
            SteamFlat4j.C_CHAR,
            SteamFlat4j.C_CHAR,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamController_SetLEDColor"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamController_SetLEDColor(ControllerHandle_t controllerHandle, uint8 nColorR, uint8 nColorG, uint8 nColorB, unsigned int nFlags)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamController_SetLEDColor$descriptor() {
        return SteamAPI_ISteamController_SetLEDColor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamController_SetLEDColor(ControllerHandle_t controllerHandle, uint8 nColorR, uint8 nColorG, uint8 nColorB, unsigned int nFlags)
     * }
     */
    public static MethodHandle SteamAPI_ISteamController_SetLEDColor$handle() {
        return SteamAPI_ISteamController_SetLEDColor.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamController_SetLEDColor(ControllerHandle_t controllerHandle, uint8 nColorR, uint8 nColorG, uint8 nColorB, unsigned int nFlags)
     * }
     */
    public static void SteamAPI_ISteamController_SetLEDColor(long controllerHandle, byte nColorR, byte nColorG, byte nColorB, int nFlags) {
        var mh$ = SteamAPI_ISteamController_SetLEDColor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamController_SetLEDColor", controllerHandle, nColorR, nColorG, nColorB, nFlags);
            }
            mh$.invokeExact(controllerHandle, nColorR, nColorG, nColorB, nFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamController_ShowBindingPanel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamController_ShowBindingPanel"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamController_ShowBindingPanel(ControllerHandle_t controllerHandle)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamController_ShowBindingPanel$descriptor() {
        return SteamAPI_ISteamController_ShowBindingPanel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamController_ShowBindingPanel(ControllerHandle_t controllerHandle)
     * }
     */
    public static MethodHandle SteamAPI_ISteamController_ShowBindingPanel$handle() {
        return SteamAPI_ISteamController_ShowBindingPanel.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamController_ShowBindingPanel(ControllerHandle_t controllerHandle)
     * }
     */
    public static boolean SteamAPI_ISteamController_ShowBindingPanel(long controllerHandle) {
        var mh$ = SteamAPI_ISteamController_ShowBindingPanel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamController_ShowBindingPanel", controllerHandle);
            }
            return (boolean)mh$.invokeExact(controllerHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamController_GetInputTypeForHandle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamController_GetInputTypeForHandle"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ESteamInputType SteamAPI_ISteamController_GetInputTypeForHandle(ControllerHandle_t controllerHandle)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamController_GetInputTypeForHandle$descriptor() {
        return SteamAPI_ISteamController_GetInputTypeForHandle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ESteamInputType SteamAPI_ISteamController_GetInputTypeForHandle(ControllerHandle_t controllerHandle)
     * }
     */
    public static MethodHandle SteamAPI_ISteamController_GetInputTypeForHandle$handle() {
        return SteamAPI_ISteamController_GetInputTypeForHandle.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ESteamInputType SteamAPI_ISteamController_GetInputTypeForHandle(ControllerHandle_t controllerHandle)
     * }
     */
    public static int SteamAPI_ISteamController_GetInputTypeForHandle(long controllerHandle) {
        var mh$ = SteamAPI_ISteamController_GetInputTypeForHandle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamController_GetInputTypeForHandle", controllerHandle);
            }
            return (int)mh$.invokeExact(controllerHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamController_GetControllerForGamepadIndex {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamController_GetControllerForGamepadIndex"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ControllerHandle_t SteamAPI_ISteamController_GetControllerForGamepadIndex(int nIndex)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamController_GetControllerForGamepadIndex$descriptor() {
        return SteamAPI_ISteamController_GetControllerForGamepadIndex.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ControllerHandle_t SteamAPI_ISteamController_GetControllerForGamepadIndex(int nIndex)
     * }
     */
    public static MethodHandle SteamAPI_ISteamController_GetControllerForGamepadIndex$handle() {
        return SteamAPI_ISteamController_GetControllerForGamepadIndex.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ControllerHandle_t SteamAPI_ISteamController_GetControllerForGamepadIndex(int nIndex)
     * }
     */
    public static long SteamAPI_ISteamController_GetControllerForGamepadIndex(int nIndex) {
        var mh$ = SteamAPI_ISteamController_GetControllerForGamepadIndex.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamController_GetControllerForGamepadIndex", nIndex);
            }
            return (long)mh$.invokeExact(nIndex);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamController_GetGamepadIndexForController {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamController_GetGamepadIndexForController"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamController_GetGamepadIndexForController(ControllerHandle_t ulControllerHandle)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamController_GetGamepadIndexForController$descriptor() {
        return SteamAPI_ISteamController_GetGamepadIndexForController.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamController_GetGamepadIndexForController(ControllerHandle_t ulControllerHandle)
     * }
     */
    public static MethodHandle SteamAPI_ISteamController_GetGamepadIndexForController$handle() {
        return SteamAPI_ISteamController_GetGamepadIndexForController.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int SteamAPI_ISteamController_GetGamepadIndexForController(ControllerHandle_t ulControllerHandle)
     * }
     */
    public static int SteamAPI_ISteamController_GetGamepadIndexForController(long ulControllerHandle) {
        var mh$ = SteamAPI_ISteamController_GetGamepadIndexForController.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamController_GetGamepadIndexForController", ulControllerHandle);
            }
            return (int)mh$.invokeExact(ulControllerHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamController_GetStringForXboxOrigin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamController_GetStringForXboxOrigin"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamController_GetStringForXboxOrigin(EXboxOrigin eOrigin)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamController_GetStringForXboxOrigin$descriptor() {
        return SteamAPI_ISteamController_GetStringForXboxOrigin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamController_GetStringForXboxOrigin(EXboxOrigin eOrigin)
     * }
     */
    public static MethodHandle SteamAPI_ISteamController_GetStringForXboxOrigin$handle() {
        return SteamAPI_ISteamController_GetStringForXboxOrigin.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamController_GetStringForXboxOrigin(EXboxOrigin eOrigin)
     * }
     */
    public static MemorySegment SteamAPI_ISteamController_GetStringForXboxOrigin(int eOrigin) {
        var mh$ = SteamAPI_ISteamController_GetStringForXboxOrigin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamController_GetStringForXboxOrigin", eOrigin);
            }
            return (MemorySegment)mh$.invokeExact(eOrigin);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamController_GetGlyphForXboxOrigin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamController_GetGlyphForXboxOrigin"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamController_GetGlyphForXboxOrigin(EXboxOrigin eOrigin)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamController_GetGlyphForXboxOrigin$descriptor() {
        return SteamAPI_ISteamController_GetGlyphForXboxOrigin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamController_GetGlyphForXboxOrigin(EXboxOrigin eOrigin)
     * }
     */
    public static MethodHandle SteamAPI_ISteamController_GetGlyphForXboxOrigin$handle() {
        return SteamAPI_ISteamController_GetGlyphForXboxOrigin.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamController_GetGlyphForXboxOrigin(EXboxOrigin eOrigin)
     * }
     */
    public static MemorySegment SteamAPI_ISteamController_GetGlyphForXboxOrigin(int eOrigin) {
        var mh$ = SteamAPI_ISteamController_GetGlyphForXboxOrigin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamController_GetGlyphForXboxOrigin", eOrigin);
            }
            return (MemorySegment)mh$.invokeExact(eOrigin);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamController_GetActionOriginFromXboxOrigin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamController_GetActionOriginFromXboxOrigin"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * EControllerActionOrigin SteamAPI_ISteamController_GetActionOriginFromXboxOrigin(ControllerHandle_t controllerHandle, EXboxOrigin eOrigin)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamController_GetActionOriginFromXboxOrigin$descriptor() {
        return SteamAPI_ISteamController_GetActionOriginFromXboxOrigin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * EControllerActionOrigin SteamAPI_ISteamController_GetActionOriginFromXboxOrigin(ControllerHandle_t controllerHandle, EXboxOrigin eOrigin)
     * }
     */
    public static MethodHandle SteamAPI_ISteamController_GetActionOriginFromXboxOrigin$handle() {
        return SteamAPI_ISteamController_GetActionOriginFromXboxOrigin.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * EControllerActionOrigin SteamAPI_ISteamController_GetActionOriginFromXboxOrigin(ControllerHandle_t controllerHandle, EXboxOrigin eOrigin)
     * }
     */
    public static int SteamAPI_ISteamController_GetActionOriginFromXboxOrigin(long controllerHandle, int eOrigin) {
        var mh$ = SteamAPI_ISteamController_GetActionOriginFromXboxOrigin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamController_GetActionOriginFromXboxOrigin", controllerHandle, eOrigin);
            }
            return (int)mh$.invokeExact(controllerHandle, eOrigin);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamController_TranslateActionOrigin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamController_TranslateActionOrigin"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * EControllerActionOrigin SteamAPI_ISteamController_TranslateActionOrigin(ESteamInputType eDestinationInputType, EControllerActionOrigin eSourceOrigin)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamController_TranslateActionOrigin$descriptor() {
        return SteamAPI_ISteamController_TranslateActionOrigin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * EControllerActionOrigin SteamAPI_ISteamController_TranslateActionOrigin(ESteamInputType eDestinationInputType, EControllerActionOrigin eSourceOrigin)
     * }
     */
    public static MethodHandle SteamAPI_ISteamController_TranslateActionOrigin$handle() {
        return SteamAPI_ISteamController_TranslateActionOrigin.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * EControllerActionOrigin SteamAPI_ISteamController_TranslateActionOrigin(ESteamInputType eDestinationInputType, EControllerActionOrigin eSourceOrigin)
     * }
     */
    public static int SteamAPI_ISteamController_TranslateActionOrigin(int eDestinationInputType, int eSourceOrigin) {
        var mh$ = SteamAPI_ISteamController_TranslateActionOrigin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamController_TranslateActionOrigin", eDestinationInputType, eSourceOrigin);
            }
            return (int)mh$.invokeExact(eDestinationInputType, eSourceOrigin);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamController_GetControllerBindingRevision {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamController_GetControllerBindingRevision"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamController_GetControllerBindingRevision(ControllerHandle_t controllerHandle, int *pMajor, int *pMinor)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamController_GetControllerBindingRevision$descriptor() {
        return SteamAPI_ISteamController_GetControllerBindingRevision.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamController_GetControllerBindingRevision(ControllerHandle_t controllerHandle, int *pMajor, int *pMinor)
     * }
     */
    public static MethodHandle SteamAPI_ISteamController_GetControllerBindingRevision$handle() {
        return SteamAPI_ISteamController_GetControllerBindingRevision.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamController_GetControllerBindingRevision(ControllerHandle_t controllerHandle, int *pMajor, int *pMinor)
     * }
     */
    public static boolean SteamAPI_ISteamController_GetControllerBindingRevision(long controllerHandle, MemorySegment pMajor, MemorySegment pMinor) {
        var mh$ = SteamAPI_ISteamController_GetControllerBindingRevision.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamController_GetControllerBindingRevision", controllerHandle, pMajor, pMinor);
            }
            return (boolean)mh$.invokeExact(controllerHandle, pMajor, pMinor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_CreateQueryUserUGCRequest {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUGC_CreateQueryUserUGCRequest"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * UGCQueryHandle_t SteamAPI_ISteamUGC_CreateQueryUserUGCRequest(AccountID_t unAccountID, EUserUGCList eListType, EUGCMatchingUGCType eMatchingUGCType, EUserUGCListSortOrder eSortOrder, AppId_t nCreatorAppID, AppId_t nConsumerAppID, uint32 unPage)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_CreateQueryUserUGCRequest$descriptor() {
        return SteamAPI_ISteamUGC_CreateQueryUserUGCRequest.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * UGCQueryHandle_t SteamAPI_ISteamUGC_CreateQueryUserUGCRequest(AccountID_t unAccountID, EUserUGCList eListType, EUGCMatchingUGCType eMatchingUGCType, EUserUGCListSortOrder eSortOrder, AppId_t nCreatorAppID, AppId_t nConsumerAppID, uint32 unPage)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_CreateQueryUserUGCRequest$handle() {
        return SteamAPI_ISteamUGC_CreateQueryUserUGCRequest.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * UGCQueryHandle_t SteamAPI_ISteamUGC_CreateQueryUserUGCRequest(AccountID_t unAccountID, EUserUGCList eListType, EUGCMatchingUGCType eMatchingUGCType, EUserUGCListSortOrder eSortOrder, AppId_t nCreatorAppID, AppId_t nConsumerAppID, uint32 unPage)
     * }
     */
    public static long SteamAPI_ISteamUGC_CreateQueryUserUGCRequest(int unAccountID, int eListType, int eMatchingUGCType, int eSortOrder, int nCreatorAppID, int nConsumerAppID, int unPage) {
        var mh$ = SteamAPI_ISteamUGC_CreateQueryUserUGCRequest.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_CreateQueryUserUGCRequest", unAccountID, eListType, eMatchingUGCType, eSortOrder, nCreatorAppID, nConsumerAppID, unPage);
            }
            return (long)mh$.invokeExact(unAccountID, eListType, eMatchingUGCType, eSortOrder, nCreatorAppID, nConsumerAppID, unPage);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_CreateQueryAllUGCRequestPage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUGC_CreateQueryAllUGCRequestPage"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * UGCQueryHandle_t SteamAPI_ISteamUGC_CreateQueryAllUGCRequestPage(EUGCQuery eQueryType, EUGCMatchingUGCType eMatchingeMatchingUGCTypeFileType, AppId_t nCreatorAppID, AppId_t nConsumerAppID, uint32 unPage)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_CreateQueryAllUGCRequestPage$descriptor() {
        return SteamAPI_ISteamUGC_CreateQueryAllUGCRequestPage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * UGCQueryHandle_t SteamAPI_ISteamUGC_CreateQueryAllUGCRequestPage(EUGCQuery eQueryType, EUGCMatchingUGCType eMatchingeMatchingUGCTypeFileType, AppId_t nCreatorAppID, AppId_t nConsumerAppID, uint32 unPage)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_CreateQueryAllUGCRequestPage$handle() {
        return SteamAPI_ISteamUGC_CreateQueryAllUGCRequestPage.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * UGCQueryHandle_t SteamAPI_ISteamUGC_CreateQueryAllUGCRequestPage(EUGCQuery eQueryType, EUGCMatchingUGCType eMatchingeMatchingUGCTypeFileType, AppId_t nCreatorAppID, AppId_t nConsumerAppID, uint32 unPage)
     * }
     */
    public static long SteamAPI_ISteamUGC_CreateQueryAllUGCRequestPage(int eQueryType, int eMatchingeMatchingUGCTypeFileType, int nCreatorAppID, int nConsumerAppID, int unPage) {
        var mh$ = SteamAPI_ISteamUGC_CreateQueryAllUGCRequestPage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_CreateQueryAllUGCRequestPage", eQueryType, eMatchingeMatchingUGCTypeFileType, nCreatorAppID, nConsumerAppID, unPage);
            }
            return (long)mh$.invokeExact(eQueryType, eMatchingeMatchingUGCTypeFileType, nCreatorAppID, nConsumerAppID, unPage);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_CreateQueryAllUGCRequestCursor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUGC_CreateQueryAllUGCRequestCursor"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * UGCQueryHandle_t SteamAPI_ISteamUGC_CreateQueryAllUGCRequestCursor(EUGCQuery eQueryType, EUGCMatchingUGCType eMatchingeMatchingUGCTypeFileType, AppId_t nCreatorAppID, AppId_t nConsumerAppID, const char *pchCursor)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_CreateQueryAllUGCRequestCursor$descriptor() {
        return SteamAPI_ISteamUGC_CreateQueryAllUGCRequestCursor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * UGCQueryHandle_t SteamAPI_ISteamUGC_CreateQueryAllUGCRequestCursor(EUGCQuery eQueryType, EUGCMatchingUGCType eMatchingeMatchingUGCTypeFileType, AppId_t nCreatorAppID, AppId_t nConsumerAppID, const char *pchCursor)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_CreateQueryAllUGCRequestCursor$handle() {
        return SteamAPI_ISteamUGC_CreateQueryAllUGCRequestCursor.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * UGCQueryHandle_t SteamAPI_ISteamUGC_CreateQueryAllUGCRequestCursor(EUGCQuery eQueryType, EUGCMatchingUGCType eMatchingeMatchingUGCTypeFileType, AppId_t nCreatorAppID, AppId_t nConsumerAppID, const char *pchCursor)
     * }
     */
    public static long SteamAPI_ISteamUGC_CreateQueryAllUGCRequestCursor(int eQueryType, int eMatchingeMatchingUGCTypeFileType, int nCreatorAppID, int nConsumerAppID, MemorySegment pchCursor) {
        var mh$ = SteamAPI_ISteamUGC_CreateQueryAllUGCRequestCursor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_CreateQueryAllUGCRequestCursor", eQueryType, eMatchingeMatchingUGCTypeFileType, nCreatorAppID, nConsumerAppID, pchCursor);
            }
            return (long)mh$.invokeExact(eQueryType, eMatchingeMatchingUGCTypeFileType, nCreatorAppID, nConsumerAppID, pchCursor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_CreateQueryUGCDetailsRequest {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUGC_CreateQueryUGCDetailsRequest"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * UGCQueryHandle_t SteamAPI_ISteamUGC_CreateQueryUGCDetailsRequest(PublishedFileId_t *pvecPublishedFileID, uint32 unNumPublishedFileIDs)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_CreateQueryUGCDetailsRequest$descriptor() {
        return SteamAPI_ISteamUGC_CreateQueryUGCDetailsRequest.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * UGCQueryHandle_t SteamAPI_ISteamUGC_CreateQueryUGCDetailsRequest(PublishedFileId_t *pvecPublishedFileID, uint32 unNumPublishedFileIDs)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_CreateQueryUGCDetailsRequest$handle() {
        return SteamAPI_ISteamUGC_CreateQueryUGCDetailsRequest.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * UGCQueryHandle_t SteamAPI_ISteamUGC_CreateQueryUGCDetailsRequest(PublishedFileId_t *pvecPublishedFileID, uint32 unNumPublishedFileIDs)
     * }
     */
    public static long SteamAPI_ISteamUGC_CreateQueryUGCDetailsRequest(MemorySegment pvecPublishedFileID, int unNumPublishedFileIDs) {
        var mh$ = SteamAPI_ISteamUGC_CreateQueryUGCDetailsRequest.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_CreateQueryUGCDetailsRequest", pvecPublishedFileID, unNumPublishedFileIDs);
            }
            return (long)mh$.invokeExact(pvecPublishedFileID, unNumPublishedFileIDs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_SendQueryUGCRequest {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUGC_SendQueryUGCRequest"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUGC_SendQueryUGCRequest(UGCQueryHandle_t handle)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_SendQueryUGCRequest$descriptor() {
        return SteamAPI_ISteamUGC_SendQueryUGCRequest.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUGC_SendQueryUGCRequest(UGCQueryHandle_t handle)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_SendQueryUGCRequest$handle() {
        return SteamAPI_ISteamUGC_SendQueryUGCRequest.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUGC_SendQueryUGCRequest(UGCQueryHandle_t handle)
     * }
     */
    public static long SteamAPI_ISteamUGC_SendQueryUGCRequest(long handle) {
        var mh$ = SteamAPI_ISteamUGC_SendQueryUGCRequest.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_SendQueryUGCRequest", handle);
            }
            return (long)mh$.invokeExact(handle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_GetQueryUGCResult {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUGC_GetQueryUGCResult"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_GetQueryUGCResult(UGCQueryHandle_t handle, uint32 index, SteamUGCDetails_t *pDetails)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_GetQueryUGCResult$descriptor() {
        return SteamAPI_ISteamUGC_GetQueryUGCResult.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_GetQueryUGCResult(UGCQueryHandle_t handle, uint32 index, SteamUGCDetails_t *pDetails)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_GetQueryUGCResult$handle() {
        return SteamAPI_ISteamUGC_GetQueryUGCResult.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_GetQueryUGCResult(UGCQueryHandle_t handle, uint32 index, SteamUGCDetails_t *pDetails)
     * }
     */
    public static boolean SteamAPI_ISteamUGC_GetQueryUGCResult(long handle, int index, MemorySegment pDetails) {
        var mh$ = SteamAPI_ISteamUGC_GetQueryUGCResult.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_GetQueryUGCResult", handle, index, pDetails);
            }
            return (boolean)mh$.invokeExact(handle, index, pDetails);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_GetQueryUGCNumTags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUGC_GetQueryUGCNumTags"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamUGC_GetQueryUGCNumTags(UGCQueryHandle_t handle, uint32 index)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_GetQueryUGCNumTags$descriptor() {
        return SteamAPI_ISteamUGC_GetQueryUGCNumTags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamUGC_GetQueryUGCNumTags(UGCQueryHandle_t handle, uint32 index)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_GetQueryUGCNumTags$handle() {
        return SteamAPI_ISteamUGC_GetQueryUGCNumTags.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamUGC_GetQueryUGCNumTags(UGCQueryHandle_t handle, uint32 index)
     * }
     */
    public static int SteamAPI_ISteamUGC_GetQueryUGCNumTags(long handle, int index) {
        var mh$ = SteamAPI_ISteamUGC_GetQueryUGCNumTags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_GetQueryUGCNumTags", handle, index);
            }
            return (int)mh$.invokeExact(handle, index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_GetQueryUGCTag {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUGC_GetQueryUGCTag"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_GetQueryUGCTag(UGCQueryHandle_t handle, uint32 index, uint32 indexTag, char *pchValue, uint32 cchValueSize)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_GetQueryUGCTag$descriptor() {
        return SteamAPI_ISteamUGC_GetQueryUGCTag.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_GetQueryUGCTag(UGCQueryHandle_t handle, uint32 index, uint32 indexTag, char *pchValue, uint32 cchValueSize)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_GetQueryUGCTag$handle() {
        return SteamAPI_ISteamUGC_GetQueryUGCTag.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_GetQueryUGCTag(UGCQueryHandle_t handle, uint32 index, uint32 indexTag, char *pchValue, uint32 cchValueSize)
     * }
     */
    public static boolean SteamAPI_ISteamUGC_GetQueryUGCTag(long handle, int index, int indexTag, MemorySegment pchValue, int cchValueSize) {
        var mh$ = SteamAPI_ISteamUGC_GetQueryUGCTag.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_GetQueryUGCTag", handle, index, indexTag, pchValue, cchValueSize);
            }
            return (boolean)mh$.invokeExact(handle, index, indexTag, pchValue, cchValueSize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_GetQueryUGCTagDisplayName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUGC_GetQueryUGCTagDisplayName"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_GetQueryUGCTagDisplayName(UGCQueryHandle_t handle, uint32 index, uint32 indexTag, char *pchValue, uint32 cchValueSize)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_GetQueryUGCTagDisplayName$descriptor() {
        return SteamAPI_ISteamUGC_GetQueryUGCTagDisplayName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_GetQueryUGCTagDisplayName(UGCQueryHandle_t handle, uint32 index, uint32 indexTag, char *pchValue, uint32 cchValueSize)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_GetQueryUGCTagDisplayName$handle() {
        return SteamAPI_ISteamUGC_GetQueryUGCTagDisplayName.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_GetQueryUGCTagDisplayName(UGCQueryHandle_t handle, uint32 index, uint32 indexTag, char *pchValue, uint32 cchValueSize)
     * }
     */
    public static boolean SteamAPI_ISteamUGC_GetQueryUGCTagDisplayName(long handle, int index, int indexTag, MemorySegment pchValue, int cchValueSize) {
        var mh$ = SteamAPI_ISteamUGC_GetQueryUGCTagDisplayName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_GetQueryUGCTagDisplayName", handle, index, indexTag, pchValue, cchValueSize);
            }
            return (boolean)mh$.invokeExact(handle, index, indexTag, pchValue, cchValueSize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_GetQueryUGCPreviewURL {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUGC_GetQueryUGCPreviewURL"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_GetQueryUGCPreviewURL(UGCQueryHandle_t handle, uint32 index, char *pchURL, uint32 cchURLSize)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_GetQueryUGCPreviewURL$descriptor() {
        return SteamAPI_ISteamUGC_GetQueryUGCPreviewURL.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_GetQueryUGCPreviewURL(UGCQueryHandle_t handle, uint32 index, char *pchURL, uint32 cchURLSize)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_GetQueryUGCPreviewURL$handle() {
        return SteamAPI_ISteamUGC_GetQueryUGCPreviewURL.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_GetQueryUGCPreviewURL(UGCQueryHandle_t handle, uint32 index, char *pchURL, uint32 cchURLSize)
     * }
     */
    public static boolean SteamAPI_ISteamUGC_GetQueryUGCPreviewURL(long handle, int index, MemorySegment pchURL, int cchURLSize) {
        var mh$ = SteamAPI_ISteamUGC_GetQueryUGCPreviewURL.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_GetQueryUGCPreviewURL", handle, index, pchURL, cchURLSize);
            }
            return (boolean)mh$.invokeExact(handle, index, pchURL, cchURLSize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_GetQueryUGCMetadata {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUGC_GetQueryUGCMetadata"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_GetQueryUGCMetadata(UGCQueryHandle_t handle, uint32 index, char *pchMetadata, uint32 cchMetadatasize)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_GetQueryUGCMetadata$descriptor() {
        return SteamAPI_ISteamUGC_GetQueryUGCMetadata.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_GetQueryUGCMetadata(UGCQueryHandle_t handle, uint32 index, char *pchMetadata, uint32 cchMetadatasize)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_GetQueryUGCMetadata$handle() {
        return SteamAPI_ISteamUGC_GetQueryUGCMetadata.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_GetQueryUGCMetadata(UGCQueryHandle_t handle, uint32 index, char *pchMetadata, uint32 cchMetadatasize)
     * }
     */
    public static boolean SteamAPI_ISteamUGC_GetQueryUGCMetadata(long handle, int index, MemorySegment pchMetadata, int cchMetadatasize) {
        var mh$ = SteamAPI_ISteamUGC_GetQueryUGCMetadata.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_GetQueryUGCMetadata", handle, index, pchMetadata, cchMetadatasize);
            }
            return (boolean)mh$.invokeExact(handle, index, pchMetadata, cchMetadatasize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_GetQueryUGCChildren {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUGC_GetQueryUGCChildren"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_GetQueryUGCChildren(UGCQueryHandle_t handle, uint32 index, PublishedFileId_t *pvecPublishedFileID, uint32 cMaxEntries)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_GetQueryUGCChildren$descriptor() {
        return SteamAPI_ISteamUGC_GetQueryUGCChildren.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_GetQueryUGCChildren(UGCQueryHandle_t handle, uint32 index, PublishedFileId_t *pvecPublishedFileID, uint32 cMaxEntries)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_GetQueryUGCChildren$handle() {
        return SteamAPI_ISteamUGC_GetQueryUGCChildren.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_GetQueryUGCChildren(UGCQueryHandle_t handle, uint32 index, PublishedFileId_t *pvecPublishedFileID, uint32 cMaxEntries)
     * }
     */
    public static boolean SteamAPI_ISteamUGC_GetQueryUGCChildren(long handle, int index, MemorySegment pvecPublishedFileID, int cMaxEntries) {
        var mh$ = SteamAPI_ISteamUGC_GetQueryUGCChildren.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_GetQueryUGCChildren", handle, index, pvecPublishedFileID, cMaxEntries);
            }
            return (boolean)mh$.invokeExact(handle, index, pvecPublishedFileID, cMaxEntries);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_GetQueryUGCStatistic {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUGC_GetQueryUGCStatistic"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_GetQueryUGCStatistic(UGCQueryHandle_t handle, uint32 index, EItemStatistic eStatType, uint64 *pStatValue)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_GetQueryUGCStatistic$descriptor() {
        return SteamAPI_ISteamUGC_GetQueryUGCStatistic.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_GetQueryUGCStatistic(UGCQueryHandle_t handle, uint32 index, EItemStatistic eStatType, uint64 *pStatValue)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_GetQueryUGCStatistic$handle() {
        return SteamAPI_ISteamUGC_GetQueryUGCStatistic.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_GetQueryUGCStatistic(UGCQueryHandle_t handle, uint32 index, EItemStatistic eStatType, uint64 *pStatValue)
     * }
     */
    public static boolean SteamAPI_ISteamUGC_GetQueryUGCStatistic(long handle, int index, int eStatType, MemorySegment pStatValue) {
        var mh$ = SteamAPI_ISteamUGC_GetQueryUGCStatistic.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_GetQueryUGCStatistic", handle, index, eStatType, pStatValue);
            }
            return (boolean)mh$.invokeExact(handle, index, eStatType, pStatValue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_GetQueryUGCNumAdditionalPreviews {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUGC_GetQueryUGCNumAdditionalPreviews"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamUGC_GetQueryUGCNumAdditionalPreviews(UGCQueryHandle_t handle, uint32 index)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_GetQueryUGCNumAdditionalPreviews$descriptor() {
        return SteamAPI_ISteamUGC_GetQueryUGCNumAdditionalPreviews.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamUGC_GetQueryUGCNumAdditionalPreviews(UGCQueryHandle_t handle, uint32 index)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_GetQueryUGCNumAdditionalPreviews$handle() {
        return SteamAPI_ISteamUGC_GetQueryUGCNumAdditionalPreviews.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamUGC_GetQueryUGCNumAdditionalPreviews(UGCQueryHandle_t handle, uint32 index)
     * }
     */
    public static int SteamAPI_ISteamUGC_GetQueryUGCNumAdditionalPreviews(long handle, int index) {
        var mh$ = SteamAPI_ISteamUGC_GetQueryUGCNumAdditionalPreviews.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_GetQueryUGCNumAdditionalPreviews", handle, index);
            }
            return (int)mh$.invokeExact(handle, index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_GetQueryUGCAdditionalPreview {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUGC_GetQueryUGCAdditionalPreview"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_GetQueryUGCAdditionalPreview(UGCQueryHandle_t handle, uint32 index, uint32 previewIndex, char *pchURLOrVideoID, uint32 cchURLSize, char *pchOriginalFileName, uint32 cchOriginalFileNameSize, EItemPreviewType *pPreviewType)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_GetQueryUGCAdditionalPreview$descriptor() {
        return SteamAPI_ISteamUGC_GetQueryUGCAdditionalPreview.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_GetQueryUGCAdditionalPreview(UGCQueryHandle_t handle, uint32 index, uint32 previewIndex, char *pchURLOrVideoID, uint32 cchURLSize, char *pchOriginalFileName, uint32 cchOriginalFileNameSize, EItemPreviewType *pPreviewType)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_GetQueryUGCAdditionalPreview$handle() {
        return SteamAPI_ISteamUGC_GetQueryUGCAdditionalPreview.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_GetQueryUGCAdditionalPreview(UGCQueryHandle_t handle, uint32 index, uint32 previewIndex, char *pchURLOrVideoID, uint32 cchURLSize, char *pchOriginalFileName, uint32 cchOriginalFileNameSize, EItemPreviewType *pPreviewType)
     * }
     */
    public static boolean SteamAPI_ISteamUGC_GetQueryUGCAdditionalPreview(long handle, int index, int previewIndex, MemorySegment pchURLOrVideoID, int cchURLSize, MemorySegment pchOriginalFileName, int cchOriginalFileNameSize, MemorySegment pPreviewType) {
        var mh$ = SteamAPI_ISteamUGC_GetQueryUGCAdditionalPreview.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_GetQueryUGCAdditionalPreview", handle, index, previewIndex, pchURLOrVideoID, cchURLSize, pchOriginalFileName, cchOriginalFileNameSize, pPreviewType);
            }
            return (boolean)mh$.invokeExact(handle, index, previewIndex, pchURLOrVideoID, cchURLSize, pchOriginalFileName, cchOriginalFileNameSize, pPreviewType);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_GetQueryUGCNumKeyValueTags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUGC_GetQueryUGCNumKeyValueTags"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamUGC_GetQueryUGCNumKeyValueTags(UGCQueryHandle_t handle, uint32 index)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_GetQueryUGCNumKeyValueTags$descriptor() {
        return SteamAPI_ISteamUGC_GetQueryUGCNumKeyValueTags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamUGC_GetQueryUGCNumKeyValueTags(UGCQueryHandle_t handle, uint32 index)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_GetQueryUGCNumKeyValueTags$handle() {
        return SteamAPI_ISteamUGC_GetQueryUGCNumKeyValueTags.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamUGC_GetQueryUGCNumKeyValueTags(UGCQueryHandle_t handle, uint32 index)
     * }
     */
    public static int SteamAPI_ISteamUGC_GetQueryUGCNumKeyValueTags(long handle, int index) {
        var mh$ = SteamAPI_ISteamUGC_GetQueryUGCNumKeyValueTags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_GetQueryUGCNumKeyValueTags", handle, index);
            }
            return (int)mh$.invokeExact(handle, index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_GetQueryUGCKeyValueTag {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUGC_GetQueryUGCKeyValueTag"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_GetQueryUGCKeyValueTag(UGCQueryHandle_t handle, uint32 index, uint32 keyValueTagIndex, char *pchKey, uint32 cchKeySize, char *pchValue, uint32 cchValueSize)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_GetQueryUGCKeyValueTag$descriptor() {
        return SteamAPI_ISteamUGC_GetQueryUGCKeyValueTag.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_GetQueryUGCKeyValueTag(UGCQueryHandle_t handle, uint32 index, uint32 keyValueTagIndex, char *pchKey, uint32 cchKeySize, char *pchValue, uint32 cchValueSize)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_GetQueryUGCKeyValueTag$handle() {
        return SteamAPI_ISteamUGC_GetQueryUGCKeyValueTag.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_GetQueryUGCKeyValueTag(UGCQueryHandle_t handle, uint32 index, uint32 keyValueTagIndex, char *pchKey, uint32 cchKeySize, char *pchValue, uint32 cchValueSize)
     * }
     */
    public static boolean SteamAPI_ISteamUGC_GetQueryUGCKeyValueTag(long handle, int index, int keyValueTagIndex, MemorySegment pchKey, int cchKeySize, MemorySegment pchValue, int cchValueSize) {
        var mh$ = SteamAPI_ISteamUGC_GetQueryUGCKeyValueTag.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_GetQueryUGCKeyValueTag", handle, index, keyValueTagIndex, pchKey, cchKeySize, pchValue, cchValueSize);
            }
            return (boolean)mh$.invokeExact(handle, index, keyValueTagIndex, pchKey, cchKeySize, pchValue, cchValueSize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_GetQueryFirstUGCKeyValueTag {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUGC_GetQueryFirstUGCKeyValueTag"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_GetQueryFirstUGCKeyValueTag(UGCQueryHandle_t handle, uint32 index, const char *pchKey, char *pchValue, uint32 cchValueSize)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_GetQueryFirstUGCKeyValueTag$descriptor() {
        return SteamAPI_ISteamUGC_GetQueryFirstUGCKeyValueTag.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_GetQueryFirstUGCKeyValueTag(UGCQueryHandle_t handle, uint32 index, const char *pchKey, char *pchValue, uint32 cchValueSize)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_GetQueryFirstUGCKeyValueTag$handle() {
        return SteamAPI_ISteamUGC_GetQueryFirstUGCKeyValueTag.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_GetQueryFirstUGCKeyValueTag(UGCQueryHandle_t handle, uint32 index, const char *pchKey, char *pchValue, uint32 cchValueSize)
     * }
     */
    public static boolean SteamAPI_ISteamUGC_GetQueryFirstUGCKeyValueTag(long handle, int index, MemorySegment pchKey, MemorySegment pchValue, int cchValueSize) {
        var mh$ = SteamAPI_ISteamUGC_GetQueryFirstUGCKeyValueTag.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_GetQueryFirstUGCKeyValueTag", handle, index, pchKey, pchValue, cchValueSize);
            }
            return (boolean)mh$.invokeExact(handle, index, pchKey, pchValue, cchValueSize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_GetQueryUGCContentDescriptors {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUGC_GetQueryUGCContentDescriptors"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamUGC_GetQueryUGCContentDescriptors(UGCQueryHandle_t handle, uint32 index, EUGCContentDescriptorID *pvecDescriptors, uint32 cMaxEntries)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_GetQueryUGCContentDescriptors$descriptor() {
        return SteamAPI_ISteamUGC_GetQueryUGCContentDescriptors.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamUGC_GetQueryUGCContentDescriptors(UGCQueryHandle_t handle, uint32 index, EUGCContentDescriptorID *pvecDescriptors, uint32 cMaxEntries)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_GetQueryUGCContentDescriptors$handle() {
        return SteamAPI_ISteamUGC_GetQueryUGCContentDescriptors.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamUGC_GetQueryUGCContentDescriptors(UGCQueryHandle_t handle, uint32 index, EUGCContentDescriptorID *pvecDescriptors, uint32 cMaxEntries)
     * }
     */
    public static int SteamAPI_ISteamUGC_GetQueryUGCContentDescriptors(long handle, int index, MemorySegment pvecDescriptors, int cMaxEntries) {
        var mh$ = SteamAPI_ISteamUGC_GetQueryUGCContentDescriptors.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_GetQueryUGCContentDescriptors", handle, index, pvecDescriptors, cMaxEntries);
            }
            return (int)mh$.invokeExact(handle, index, pvecDescriptors, cMaxEntries);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_ReleaseQueryUGCRequest {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUGC_ReleaseQueryUGCRequest"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_ReleaseQueryUGCRequest(UGCQueryHandle_t handle)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_ReleaseQueryUGCRequest$descriptor() {
        return SteamAPI_ISteamUGC_ReleaseQueryUGCRequest.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_ReleaseQueryUGCRequest(UGCQueryHandle_t handle)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_ReleaseQueryUGCRequest$handle() {
        return SteamAPI_ISteamUGC_ReleaseQueryUGCRequest.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_ReleaseQueryUGCRequest(UGCQueryHandle_t handle)
     * }
     */
    public static boolean SteamAPI_ISteamUGC_ReleaseQueryUGCRequest(long handle) {
        var mh$ = SteamAPI_ISteamUGC_ReleaseQueryUGCRequest.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_ReleaseQueryUGCRequest", handle);
            }
            return (boolean)mh$.invokeExact(handle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_AddRequiredTag {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUGC_AddRequiredTag"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_AddRequiredTag(UGCQueryHandle_t handle, const char *pTagName)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_AddRequiredTag$descriptor() {
        return SteamAPI_ISteamUGC_AddRequiredTag.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_AddRequiredTag(UGCQueryHandle_t handle, const char *pTagName)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_AddRequiredTag$handle() {
        return SteamAPI_ISteamUGC_AddRequiredTag.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_AddRequiredTag(UGCQueryHandle_t handle, const char *pTagName)
     * }
     */
    public static boolean SteamAPI_ISteamUGC_AddRequiredTag(long handle, MemorySegment pTagName) {
        var mh$ = SteamAPI_ISteamUGC_AddRequiredTag.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_AddRequiredTag", handle, pTagName);
            }
            return (boolean)mh$.invokeExact(handle, pTagName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_AddRequiredTagGroup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUGC_AddRequiredTagGroup"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_AddRequiredTagGroup(UGCQueryHandle_t handle, const SteamParamStringArray_t *pTagGroups)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_AddRequiredTagGroup$descriptor() {
        return SteamAPI_ISteamUGC_AddRequiredTagGroup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_AddRequiredTagGroup(UGCQueryHandle_t handle, const SteamParamStringArray_t *pTagGroups)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_AddRequiredTagGroup$handle() {
        return SteamAPI_ISteamUGC_AddRequiredTagGroup.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_AddRequiredTagGroup(UGCQueryHandle_t handle, const SteamParamStringArray_t *pTagGroups)
     * }
     */
    public static boolean SteamAPI_ISteamUGC_AddRequiredTagGroup(long handle, MemorySegment pTagGroups) {
        var mh$ = SteamAPI_ISteamUGC_AddRequiredTagGroup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_AddRequiredTagGroup", handle, pTagGroups);
            }
            return (boolean)mh$.invokeExact(handle, pTagGroups);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_AddExcludedTag {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUGC_AddExcludedTag"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_AddExcludedTag(UGCQueryHandle_t handle, const char *pTagName)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_AddExcludedTag$descriptor() {
        return SteamAPI_ISteamUGC_AddExcludedTag.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_AddExcludedTag(UGCQueryHandle_t handle, const char *pTagName)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_AddExcludedTag$handle() {
        return SteamAPI_ISteamUGC_AddExcludedTag.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_AddExcludedTag(UGCQueryHandle_t handle, const char *pTagName)
     * }
     */
    public static boolean SteamAPI_ISteamUGC_AddExcludedTag(long handle, MemorySegment pTagName) {
        var mh$ = SteamAPI_ISteamUGC_AddExcludedTag.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_AddExcludedTag", handle, pTagName);
            }
            return (boolean)mh$.invokeExact(handle, pTagName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_SetReturnOnlyIDs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUGC_SetReturnOnlyIDs"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetReturnOnlyIDs(UGCQueryHandle_t handle, bool bReturnOnlyIDs)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_SetReturnOnlyIDs$descriptor() {
        return SteamAPI_ISteamUGC_SetReturnOnlyIDs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetReturnOnlyIDs(UGCQueryHandle_t handle, bool bReturnOnlyIDs)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_SetReturnOnlyIDs$handle() {
        return SteamAPI_ISteamUGC_SetReturnOnlyIDs.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetReturnOnlyIDs(UGCQueryHandle_t handle, bool bReturnOnlyIDs)
     * }
     */
    public static boolean SteamAPI_ISteamUGC_SetReturnOnlyIDs(long handle, boolean bReturnOnlyIDs) {
        var mh$ = SteamAPI_ISteamUGC_SetReturnOnlyIDs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_SetReturnOnlyIDs", handle, bReturnOnlyIDs);
            }
            return (boolean)mh$.invokeExact(handle, bReturnOnlyIDs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_SetReturnKeyValueTags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUGC_SetReturnKeyValueTags"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetReturnKeyValueTags(UGCQueryHandle_t handle, bool bReturnKeyValueTags)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_SetReturnKeyValueTags$descriptor() {
        return SteamAPI_ISteamUGC_SetReturnKeyValueTags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetReturnKeyValueTags(UGCQueryHandle_t handle, bool bReturnKeyValueTags)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_SetReturnKeyValueTags$handle() {
        return SteamAPI_ISteamUGC_SetReturnKeyValueTags.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetReturnKeyValueTags(UGCQueryHandle_t handle, bool bReturnKeyValueTags)
     * }
     */
    public static boolean SteamAPI_ISteamUGC_SetReturnKeyValueTags(long handle, boolean bReturnKeyValueTags) {
        var mh$ = SteamAPI_ISteamUGC_SetReturnKeyValueTags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_SetReturnKeyValueTags", handle, bReturnKeyValueTags);
            }
            return (boolean)mh$.invokeExact(handle, bReturnKeyValueTags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_SetReturnLongDescription {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUGC_SetReturnLongDescription"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetReturnLongDescription(UGCQueryHandle_t handle, bool bReturnLongDescription)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_SetReturnLongDescription$descriptor() {
        return SteamAPI_ISteamUGC_SetReturnLongDescription.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetReturnLongDescription(UGCQueryHandle_t handle, bool bReturnLongDescription)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_SetReturnLongDescription$handle() {
        return SteamAPI_ISteamUGC_SetReturnLongDescription.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetReturnLongDescription(UGCQueryHandle_t handle, bool bReturnLongDescription)
     * }
     */
    public static boolean SteamAPI_ISteamUGC_SetReturnLongDescription(long handle, boolean bReturnLongDescription) {
        var mh$ = SteamAPI_ISteamUGC_SetReturnLongDescription.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_SetReturnLongDescription", handle, bReturnLongDescription);
            }
            return (boolean)mh$.invokeExact(handle, bReturnLongDescription);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_SetReturnMetadata {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUGC_SetReturnMetadata"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetReturnMetadata(UGCQueryHandle_t handle, bool bReturnMetadata)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_SetReturnMetadata$descriptor() {
        return SteamAPI_ISteamUGC_SetReturnMetadata.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetReturnMetadata(UGCQueryHandle_t handle, bool bReturnMetadata)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_SetReturnMetadata$handle() {
        return SteamAPI_ISteamUGC_SetReturnMetadata.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetReturnMetadata(UGCQueryHandle_t handle, bool bReturnMetadata)
     * }
     */
    public static boolean SteamAPI_ISteamUGC_SetReturnMetadata(long handle, boolean bReturnMetadata) {
        var mh$ = SteamAPI_ISteamUGC_SetReturnMetadata.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_SetReturnMetadata", handle, bReturnMetadata);
            }
            return (boolean)mh$.invokeExact(handle, bReturnMetadata);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_SetReturnChildren {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUGC_SetReturnChildren"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetReturnChildren(UGCQueryHandle_t handle, bool bReturnChildren)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_SetReturnChildren$descriptor() {
        return SteamAPI_ISteamUGC_SetReturnChildren.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetReturnChildren(UGCQueryHandle_t handle, bool bReturnChildren)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_SetReturnChildren$handle() {
        return SteamAPI_ISteamUGC_SetReturnChildren.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetReturnChildren(UGCQueryHandle_t handle, bool bReturnChildren)
     * }
     */
    public static boolean SteamAPI_ISteamUGC_SetReturnChildren(long handle, boolean bReturnChildren) {
        var mh$ = SteamAPI_ISteamUGC_SetReturnChildren.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_SetReturnChildren", handle, bReturnChildren);
            }
            return (boolean)mh$.invokeExact(handle, bReturnChildren);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_SetReturnAdditionalPreviews {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUGC_SetReturnAdditionalPreviews"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetReturnAdditionalPreviews(UGCQueryHandle_t handle, bool bReturnAdditionalPreviews)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_SetReturnAdditionalPreviews$descriptor() {
        return SteamAPI_ISteamUGC_SetReturnAdditionalPreviews.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetReturnAdditionalPreviews(UGCQueryHandle_t handle, bool bReturnAdditionalPreviews)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_SetReturnAdditionalPreviews$handle() {
        return SteamAPI_ISteamUGC_SetReturnAdditionalPreviews.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetReturnAdditionalPreviews(UGCQueryHandle_t handle, bool bReturnAdditionalPreviews)
     * }
     */
    public static boolean SteamAPI_ISteamUGC_SetReturnAdditionalPreviews(long handle, boolean bReturnAdditionalPreviews) {
        var mh$ = SteamAPI_ISteamUGC_SetReturnAdditionalPreviews.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_SetReturnAdditionalPreviews", handle, bReturnAdditionalPreviews);
            }
            return (boolean)mh$.invokeExact(handle, bReturnAdditionalPreviews);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_SetReturnTotalOnly {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUGC_SetReturnTotalOnly"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetReturnTotalOnly(UGCQueryHandle_t handle, bool bReturnTotalOnly)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_SetReturnTotalOnly$descriptor() {
        return SteamAPI_ISteamUGC_SetReturnTotalOnly.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetReturnTotalOnly(UGCQueryHandle_t handle, bool bReturnTotalOnly)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_SetReturnTotalOnly$handle() {
        return SteamAPI_ISteamUGC_SetReturnTotalOnly.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetReturnTotalOnly(UGCQueryHandle_t handle, bool bReturnTotalOnly)
     * }
     */
    public static boolean SteamAPI_ISteamUGC_SetReturnTotalOnly(long handle, boolean bReturnTotalOnly) {
        var mh$ = SteamAPI_ISteamUGC_SetReturnTotalOnly.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_SetReturnTotalOnly", handle, bReturnTotalOnly);
            }
            return (boolean)mh$.invokeExact(handle, bReturnTotalOnly);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_SetReturnPlaytimeStats {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUGC_SetReturnPlaytimeStats"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetReturnPlaytimeStats(UGCQueryHandle_t handle, uint32 unDays)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_SetReturnPlaytimeStats$descriptor() {
        return SteamAPI_ISteamUGC_SetReturnPlaytimeStats.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetReturnPlaytimeStats(UGCQueryHandle_t handle, uint32 unDays)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_SetReturnPlaytimeStats$handle() {
        return SteamAPI_ISteamUGC_SetReturnPlaytimeStats.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetReturnPlaytimeStats(UGCQueryHandle_t handle, uint32 unDays)
     * }
     */
    public static boolean SteamAPI_ISteamUGC_SetReturnPlaytimeStats(long handle, int unDays) {
        var mh$ = SteamAPI_ISteamUGC_SetReturnPlaytimeStats.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_SetReturnPlaytimeStats", handle, unDays);
            }
            return (boolean)mh$.invokeExact(handle, unDays);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_SetLanguage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUGC_SetLanguage"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetLanguage(UGCQueryHandle_t handle, const char *pchLanguage)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_SetLanguage$descriptor() {
        return SteamAPI_ISteamUGC_SetLanguage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetLanguage(UGCQueryHandle_t handle, const char *pchLanguage)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_SetLanguage$handle() {
        return SteamAPI_ISteamUGC_SetLanguage.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetLanguage(UGCQueryHandle_t handle, const char *pchLanguage)
     * }
     */
    public static boolean SteamAPI_ISteamUGC_SetLanguage(long handle, MemorySegment pchLanguage) {
        var mh$ = SteamAPI_ISteamUGC_SetLanguage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_SetLanguage", handle, pchLanguage);
            }
            return (boolean)mh$.invokeExact(handle, pchLanguage);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_SetAllowCachedResponse {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUGC_SetAllowCachedResponse"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetAllowCachedResponse(UGCQueryHandle_t handle, uint32 unMaxAgeSeconds)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_SetAllowCachedResponse$descriptor() {
        return SteamAPI_ISteamUGC_SetAllowCachedResponse.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetAllowCachedResponse(UGCQueryHandle_t handle, uint32 unMaxAgeSeconds)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_SetAllowCachedResponse$handle() {
        return SteamAPI_ISteamUGC_SetAllowCachedResponse.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetAllowCachedResponse(UGCQueryHandle_t handle, uint32 unMaxAgeSeconds)
     * }
     */
    public static boolean SteamAPI_ISteamUGC_SetAllowCachedResponse(long handle, int unMaxAgeSeconds) {
        var mh$ = SteamAPI_ISteamUGC_SetAllowCachedResponse.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_SetAllowCachedResponse", handle, unMaxAgeSeconds);
            }
            return (boolean)mh$.invokeExact(handle, unMaxAgeSeconds);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_SetCloudFileNameFilter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUGC_SetCloudFileNameFilter"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetCloudFileNameFilter(UGCQueryHandle_t handle, const char *pMatchCloudFileName)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_SetCloudFileNameFilter$descriptor() {
        return SteamAPI_ISteamUGC_SetCloudFileNameFilter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetCloudFileNameFilter(UGCQueryHandle_t handle, const char *pMatchCloudFileName)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_SetCloudFileNameFilter$handle() {
        return SteamAPI_ISteamUGC_SetCloudFileNameFilter.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetCloudFileNameFilter(UGCQueryHandle_t handle, const char *pMatchCloudFileName)
     * }
     */
    public static boolean SteamAPI_ISteamUGC_SetCloudFileNameFilter(long handle, MemorySegment pMatchCloudFileName) {
        var mh$ = SteamAPI_ISteamUGC_SetCloudFileNameFilter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_SetCloudFileNameFilter", handle, pMatchCloudFileName);
            }
            return (boolean)mh$.invokeExact(handle, pMatchCloudFileName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_SetMatchAnyTag {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUGC_SetMatchAnyTag"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetMatchAnyTag(UGCQueryHandle_t handle, bool bMatchAnyTag)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_SetMatchAnyTag$descriptor() {
        return SteamAPI_ISteamUGC_SetMatchAnyTag.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetMatchAnyTag(UGCQueryHandle_t handle, bool bMatchAnyTag)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_SetMatchAnyTag$handle() {
        return SteamAPI_ISteamUGC_SetMatchAnyTag.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetMatchAnyTag(UGCQueryHandle_t handle, bool bMatchAnyTag)
     * }
     */
    public static boolean SteamAPI_ISteamUGC_SetMatchAnyTag(long handle, boolean bMatchAnyTag) {
        var mh$ = SteamAPI_ISteamUGC_SetMatchAnyTag.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_SetMatchAnyTag", handle, bMatchAnyTag);
            }
            return (boolean)mh$.invokeExact(handle, bMatchAnyTag);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_SetSearchText {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUGC_SetSearchText"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetSearchText(UGCQueryHandle_t handle, const char *pSearchText)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_SetSearchText$descriptor() {
        return SteamAPI_ISteamUGC_SetSearchText.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetSearchText(UGCQueryHandle_t handle, const char *pSearchText)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_SetSearchText$handle() {
        return SteamAPI_ISteamUGC_SetSearchText.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetSearchText(UGCQueryHandle_t handle, const char *pSearchText)
     * }
     */
    public static boolean SteamAPI_ISteamUGC_SetSearchText(long handle, MemorySegment pSearchText) {
        var mh$ = SteamAPI_ISteamUGC_SetSearchText.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_SetSearchText", handle, pSearchText);
            }
            return (boolean)mh$.invokeExact(handle, pSearchText);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_SetRankedByTrendDays {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUGC_SetRankedByTrendDays"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetRankedByTrendDays(UGCQueryHandle_t handle, uint32 unDays)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_SetRankedByTrendDays$descriptor() {
        return SteamAPI_ISteamUGC_SetRankedByTrendDays.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetRankedByTrendDays(UGCQueryHandle_t handle, uint32 unDays)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_SetRankedByTrendDays$handle() {
        return SteamAPI_ISteamUGC_SetRankedByTrendDays.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetRankedByTrendDays(UGCQueryHandle_t handle, uint32 unDays)
     * }
     */
    public static boolean SteamAPI_ISteamUGC_SetRankedByTrendDays(long handle, int unDays) {
        var mh$ = SteamAPI_ISteamUGC_SetRankedByTrendDays.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_SetRankedByTrendDays", handle, unDays);
            }
            return (boolean)mh$.invokeExact(handle, unDays);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_SetTimeCreatedDateRange {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUGC_SetTimeCreatedDateRange"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetTimeCreatedDateRange(UGCQueryHandle_t handle, RTime32 rtStart, RTime32 rtEnd)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_SetTimeCreatedDateRange$descriptor() {
        return SteamAPI_ISteamUGC_SetTimeCreatedDateRange.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetTimeCreatedDateRange(UGCQueryHandle_t handle, RTime32 rtStart, RTime32 rtEnd)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_SetTimeCreatedDateRange$handle() {
        return SteamAPI_ISteamUGC_SetTimeCreatedDateRange.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetTimeCreatedDateRange(UGCQueryHandle_t handle, RTime32 rtStart, RTime32 rtEnd)
     * }
     */
    public static boolean SteamAPI_ISteamUGC_SetTimeCreatedDateRange(long handle, int rtStart, int rtEnd) {
        var mh$ = SteamAPI_ISteamUGC_SetTimeCreatedDateRange.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_SetTimeCreatedDateRange", handle, rtStart, rtEnd);
            }
            return (boolean)mh$.invokeExact(handle, rtStart, rtEnd);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_SetTimeUpdatedDateRange {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUGC_SetTimeUpdatedDateRange"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetTimeUpdatedDateRange(UGCQueryHandle_t handle, RTime32 rtStart, RTime32 rtEnd)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_SetTimeUpdatedDateRange$descriptor() {
        return SteamAPI_ISteamUGC_SetTimeUpdatedDateRange.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetTimeUpdatedDateRange(UGCQueryHandle_t handle, RTime32 rtStart, RTime32 rtEnd)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_SetTimeUpdatedDateRange$handle() {
        return SteamAPI_ISteamUGC_SetTimeUpdatedDateRange.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetTimeUpdatedDateRange(UGCQueryHandle_t handle, RTime32 rtStart, RTime32 rtEnd)
     * }
     */
    public static boolean SteamAPI_ISteamUGC_SetTimeUpdatedDateRange(long handle, int rtStart, int rtEnd) {
        var mh$ = SteamAPI_ISteamUGC_SetTimeUpdatedDateRange.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_SetTimeUpdatedDateRange", handle, rtStart, rtEnd);
            }
            return (boolean)mh$.invokeExact(handle, rtStart, rtEnd);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_AddRequiredKeyValueTag {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUGC_AddRequiredKeyValueTag"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_AddRequiredKeyValueTag(UGCQueryHandle_t handle, const char *pKey, const char *pValue)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_AddRequiredKeyValueTag$descriptor() {
        return SteamAPI_ISteamUGC_AddRequiredKeyValueTag.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_AddRequiredKeyValueTag(UGCQueryHandle_t handle, const char *pKey, const char *pValue)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_AddRequiredKeyValueTag$handle() {
        return SteamAPI_ISteamUGC_AddRequiredKeyValueTag.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_AddRequiredKeyValueTag(UGCQueryHandle_t handle, const char *pKey, const char *pValue)
     * }
     */
    public static boolean SteamAPI_ISteamUGC_AddRequiredKeyValueTag(long handle, MemorySegment pKey, MemorySegment pValue) {
        var mh$ = SteamAPI_ISteamUGC_AddRequiredKeyValueTag.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_AddRequiredKeyValueTag", handle, pKey, pValue);
            }
            return (boolean)mh$.invokeExact(handle, pKey, pValue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_RequestUGCDetails {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUGC_RequestUGCDetails"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUGC_RequestUGCDetails(PublishedFileId_t nPublishedFileID, uint32 unMaxAgeSeconds)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_RequestUGCDetails$descriptor() {
        return SteamAPI_ISteamUGC_RequestUGCDetails.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUGC_RequestUGCDetails(PublishedFileId_t nPublishedFileID, uint32 unMaxAgeSeconds)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_RequestUGCDetails$handle() {
        return SteamAPI_ISteamUGC_RequestUGCDetails.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUGC_RequestUGCDetails(PublishedFileId_t nPublishedFileID, uint32 unMaxAgeSeconds)
     * }
     */
    public static long SteamAPI_ISteamUGC_RequestUGCDetails(long nPublishedFileID, int unMaxAgeSeconds) {
        var mh$ = SteamAPI_ISteamUGC_RequestUGCDetails.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_RequestUGCDetails", nPublishedFileID, unMaxAgeSeconds);
            }
            return (long)mh$.invokeExact(nPublishedFileID, unMaxAgeSeconds);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_CreateItem {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUGC_CreateItem"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUGC_CreateItem(AppId_t nConsumerAppId, EWorkshopFileType eFileType)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_CreateItem$descriptor() {
        return SteamAPI_ISteamUGC_CreateItem.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUGC_CreateItem(AppId_t nConsumerAppId, EWorkshopFileType eFileType)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_CreateItem$handle() {
        return SteamAPI_ISteamUGC_CreateItem.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUGC_CreateItem(AppId_t nConsumerAppId, EWorkshopFileType eFileType)
     * }
     */
    public static long SteamAPI_ISteamUGC_CreateItem(int nConsumerAppId, int eFileType) {
        var mh$ = SteamAPI_ISteamUGC_CreateItem.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_CreateItem", nConsumerAppId, eFileType);
            }
            return (long)mh$.invokeExact(nConsumerAppId, eFileType);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_StartItemUpdate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUGC_StartItemUpdate"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * UGCUpdateHandle_t SteamAPI_ISteamUGC_StartItemUpdate(AppId_t nConsumerAppId, PublishedFileId_t nPublishedFileID)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_StartItemUpdate$descriptor() {
        return SteamAPI_ISteamUGC_StartItemUpdate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * UGCUpdateHandle_t SteamAPI_ISteamUGC_StartItemUpdate(AppId_t nConsumerAppId, PublishedFileId_t nPublishedFileID)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_StartItemUpdate$handle() {
        return SteamAPI_ISteamUGC_StartItemUpdate.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * UGCUpdateHandle_t SteamAPI_ISteamUGC_StartItemUpdate(AppId_t nConsumerAppId, PublishedFileId_t nPublishedFileID)
     * }
     */
    public static long SteamAPI_ISteamUGC_StartItemUpdate(int nConsumerAppId, long nPublishedFileID) {
        var mh$ = SteamAPI_ISteamUGC_StartItemUpdate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_StartItemUpdate", nConsumerAppId, nPublishedFileID);
            }
            return (long)mh$.invokeExact(nConsumerAppId, nPublishedFileID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_SetItemTitle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUGC_SetItemTitle"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetItemTitle(UGCUpdateHandle_t handle, const char *pchTitle)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_SetItemTitle$descriptor() {
        return SteamAPI_ISteamUGC_SetItemTitle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetItemTitle(UGCUpdateHandle_t handle, const char *pchTitle)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_SetItemTitle$handle() {
        return SteamAPI_ISteamUGC_SetItemTitle.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetItemTitle(UGCUpdateHandle_t handle, const char *pchTitle)
     * }
     */
    public static boolean SteamAPI_ISteamUGC_SetItemTitle(long handle, MemorySegment pchTitle) {
        var mh$ = SteamAPI_ISteamUGC_SetItemTitle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_SetItemTitle", handle, pchTitle);
            }
            return (boolean)mh$.invokeExact(handle, pchTitle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_SetItemDescription {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUGC_SetItemDescription"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetItemDescription(UGCUpdateHandle_t handle, const char *pchDescription)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_SetItemDescription$descriptor() {
        return SteamAPI_ISteamUGC_SetItemDescription.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetItemDescription(UGCUpdateHandle_t handle, const char *pchDescription)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_SetItemDescription$handle() {
        return SteamAPI_ISteamUGC_SetItemDescription.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetItemDescription(UGCUpdateHandle_t handle, const char *pchDescription)
     * }
     */
    public static boolean SteamAPI_ISteamUGC_SetItemDescription(long handle, MemorySegment pchDescription) {
        var mh$ = SteamAPI_ISteamUGC_SetItemDescription.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_SetItemDescription", handle, pchDescription);
            }
            return (boolean)mh$.invokeExact(handle, pchDescription);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_SetItemUpdateLanguage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUGC_SetItemUpdateLanguage"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetItemUpdateLanguage(UGCUpdateHandle_t handle, const char *pchLanguage)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_SetItemUpdateLanguage$descriptor() {
        return SteamAPI_ISteamUGC_SetItemUpdateLanguage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetItemUpdateLanguage(UGCUpdateHandle_t handle, const char *pchLanguage)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_SetItemUpdateLanguage$handle() {
        return SteamAPI_ISteamUGC_SetItemUpdateLanguage.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetItemUpdateLanguage(UGCUpdateHandle_t handle, const char *pchLanguage)
     * }
     */
    public static boolean SteamAPI_ISteamUGC_SetItemUpdateLanguage(long handle, MemorySegment pchLanguage) {
        var mh$ = SteamAPI_ISteamUGC_SetItemUpdateLanguage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_SetItemUpdateLanguage", handle, pchLanguage);
            }
            return (boolean)mh$.invokeExact(handle, pchLanguage);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_SetItemMetadata {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUGC_SetItemMetadata"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetItemMetadata(UGCUpdateHandle_t handle, const char *pchMetaData)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_SetItemMetadata$descriptor() {
        return SteamAPI_ISteamUGC_SetItemMetadata.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetItemMetadata(UGCUpdateHandle_t handle, const char *pchMetaData)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_SetItemMetadata$handle() {
        return SteamAPI_ISteamUGC_SetItemMetadata.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetItemMetadata(UGCUpdateHandle_t handle, const char *pchMetaData)
     * }
     */
    public static boolean SteamAPI_ISteamUGC_SetItemMetadata(long handle, MemorySegment pchMetaData) {
        var mh$ = SteamAPI_ISteamUGC_SetItemMetadata.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_SetItemMetadata", handle, pchMetaData);
            }
            return (boolean)mh$.invokeExact(handle, pchMetaData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_SetItemVisibility {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUGC_SetItemVisibility"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetItemVisibility(UGCUpdateHandle_t handle, ERemoteStoragePublishedFileVisibility eVisibility)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_SetItemVisibility$descriptor() {
        return SteamAPI_ISteamUGC_SetItemVisibility.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetItemVisibility(UGCUpdateHandle_t handle, ERemoteStoragePublishedFileVisibility eVisibility)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_SetItemVisibility$handle() {
        return SteamAPI_ISteamUGC_SetItemVisibility.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetItemVisibility(UGCUpdateHandle_t handle, ERemoteStoragePublishedFileVisibility eVisibility)
     * }
     */
    public static boolean SteamAPI_ISteamUGC_SetItemVisibility(long handle, int eVisibility) {
        var mh$ = SteamAPI_ISteamUGC_SetItemVisibility.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_SetItemVisibility", handle, eVisibility);
            }
            return (boolean)mh$.invokeExact(handle, eVisibility);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_SetItemTags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUGC_SetItemTags"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetItemTags(UGCUpdateHandle_t updateHandle, const SteamParamStringArray_t *pTags, bool bAllowAdminTags)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_SetItemTags$descriptor() {
        return SteamAPI_ISteamUGC_SetItemTags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetItemTags(UGCUpdateHandle_t updateHandle, const SteamParamStringArray_t *pTags, bool bAllowAdminTags)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_SetItemTags$handle() {
        return SteamAPI_ISteamUGC_SetItemTags.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetItemTags(UGCUpdateHandle_t updateHandle, const SteamParamStringArray_t *pTags, bool bAllowAdminTags)
     * }
     */
    public static boolean SteamAPI_ISteamUGC_SetItemTags(long updateHandle, MemorySegment pTags, boolean bAllowAdminTags) {
        var mh$ = SteamAPI_ISteamUGC_SetItemTags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_SetItemTags", updateHandle, pTags, bAllowAdminTags);
            }
            return (boolean)mh$.invokeExact(updateHandle, pTags, bAllowAdminTags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_SetItemContent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUGC_SetItemContent"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetItemContent(UGCUpdateHandle_t handle, const char *pszContentFolder)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_SetItemContent$descriptor() {
        return SteamAPI_ISteamUGC_SetItemContent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetItemContent(UGCUpdateHandle_t handle, const char *pszContentFolder)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_SetItemContent$handle() {
        return SteamAPI_ISteamUGC_SetItemContent.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetItemContent(UGCUpdateHandle_t handle, const char *pszContentFolder)
     * }
     */
    public static boolean SteamAPI_ISteamUGC_SetItemContent(long handle, MemorySegment pszContentFolder) {
        var mh$ = SteamAPI_ISteamUGC_SetItemContent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_SetItemContent", handle, pszContentFolder);
            }
            return (boolean)mh$.invokeExact(handle, pszContentFolder);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_SetItemPreview {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUGC_SetItemPreview"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetItemPreview(UGCUpdateHandle_t handle, const char *pszPreviewFile)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_SetItemPreview$descriptor() {
        return SteamAPI_ISteamUGC_SetItemPreview.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetItemPreview(UGCUpdateHandle_t handle, const char *pszPreviewFile)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_SetItemPreview$handle() {
        return SteamAPI_ISteamUGC_SetItemPreview.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetItemPreview(UGCUpdateHandle_t handle, const char *pszPreviewFile)
     * }
     */
    public static boolean SteamAPI_ISteamUGC_SetItemPreview(long handle, MemorySegment pszPreviewFile) {
        var mh$ = SteamAPI_ISteamUGC_SetItemPreview.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_SetItemPreview", handle, pszPreviewFile);
            }
            return (boolean)mh$.invokeExact(handle, pszPreviewFile);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_SetAllowLegacyUpload {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUGC_SetAllowLegacyUpload"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetAllowLegacyUpload(UGCUpdateHandle_t handle, bool bAllowLegacyUpload)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_SetAllowLegacyUpload$descriptor() {
        return SteamAPI_ISteamUGC_SetAllowLegacyUpload.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetAllowLegacyUpload(UGCUpdateHandle_t handle, bool bAllowLegacyUpload)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_SetAllowLegacyUpload$handle() {
        return SteamAPI_ISteamUGC_SetAllowLegacyUpload.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_SetAllowLegacyUpload(UGCUpdateHandle_t handle, bool bAllowLegacyUpload)
     * }
     */
    public static boolean SteamAPI_ISteamUGC_SetAllowLegacyUpload(long handle, boolean bAllowLegacyUpload) {
        var mh$ = SteamAPI_ISteamUGC_SetAllowLegacyUpload.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_SetAllowLegacyUpload", handle, bAllowLegacyUpload);
            }
            return (boolean)mh$.invokeExact(handle, bAllowLegacyUpload);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_RemoveAllItemKeyValueTags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUGC_RemoveAllItemKeyValueTags"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_RemoveAllItemKeyValueTags(UGCUpdateHandle_t handle)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_RemoveAllItemKeyValueTags$descriptor() {
        return SteamAPI_ISteamUGC_RemoveAllItemKeyValueTags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_RemoveAllItemKeyValueTags(UGCUpdateHandle_t handle)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_RemoveAllItemKeyValueTags$handle() {
        return SteamAPI_ISteamUGC_RemoveAllItemKeyValueTags.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_RemoveAllItemKeyValueTags(UGCUpdateHandle_t handle)
     * }
     */
    public static boolean SteamAPI_ISteamUGC_RemoveAllItemKeyValueTags(long handle) {
        var mh$ = SteamAPI_ISteamUGC_RemoveAllItemKeyValueTags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_RemoveAllItemKeyValueTags", handle);
            }
            return (boolean)mh$.invokeExact(handle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_RemoveItemKeyValueTags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUGC_RemoveItemKeyValueTags"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_RemoveItemKeyValueTags(UGCUpdateHandle_t handle, const char *pchKey)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_RemoveItemKeyValueTags$descriptor() {
        return SteamAPI_ISteamUGC_RemoveItemKeyValueTags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_RemoveItemKeyValueTags(UGCUpdateHandle_t handle, const char *pchKey)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_RemoveItemKeyValueTags$handle() {
        return SteamAPI_ISteamUGC_RemoveItemKeyValueTags.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_RemoveItemKeyValueTags(UGCUpdateHandle_t handle, const char *pchKey)
     * }
     */
    public static boolean SteamAPI_ISteamUGC_RemoveItemKeyValueTags(long handle, MemorySegment pchKey) {
        var mh$ = SteamAPI_ISteamUGC_RemoveItemKeyValueTags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_RemoveItemKeyValueTags", handle, pchKey);
            }
            return (boolean)mh$.invokeExact(handle, pchKey);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_AddItemKeyValueTag {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUGC_AddItemKeyValueTag"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_AddItemKeyValueTag(UGCUpdateHandle_t handle, const char *pchKey, const char *pchValue)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_AddItemKeyValueTag$descriptor() {
        return SteamAPI_ISteamUGC_AddItemKeyValueTag.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_AddItemKeyValueTag(UGCUpdateHandle_t handle, const char *pchKey, const char *pchValue)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_AddItemKeyValueTag$handle() {
        return SteamAPI_ISteamUGC_AddItemKeyValueTag.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_AddItemKeyValueTag(UGCUpdateHandle_t handle, const char *pchKey, const char *pchValue)
     * }
     */
    public static boolean SteamAPI_ISteamUGC_AddItemKeyValueTag(long handle, MemorySegment pchKey, MemorySegment pchValue) {
        var mh$ = SteamAPI_ISteamUGC_AddItemKeyValueTag.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_AddItemKeyValueTag", handle, pchKey, pchValue);
            }
            return (boolean)mh$.invokeExact(handle, pchKey, pchValue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_AddItemPreviewFile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUGC_AddItemPreviewFile"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_AddItemPreviewFile(UGCUpdateHandle_t handle, const char *pszPreviewFile, EItemPreviewType type)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_AddItemPreviewFile$descriptor() {
        return SteamAPI_ISteamUGC_AddItemPreviewFile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_AddItemPreviewFile(UGCUpdateHandle_t handle, const char *pszPreviewFile, EItemPreviewType type)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_AddItemPreviewFile$handle() {
        return SteamAPI_ISteamUGC_AddItemPreviewFile.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_AddItemPreviewFile(UGCUpdateHandle_t handle, const char *pszPreviewFile, EItemPreviewType type)
     * }
     */
    public static boolean SteamAPI_ISteamUGC_AddItemPreviewFile(long handle, MemorySegment pszPreviewFile, int type) {
        var mh$ = SteamAPI_ISteamUGC_AddItemPreviewFile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_AddItemPreviewFile", handle, pszPreviewFile, type);
            }
            return (boolean)mh$.invokeExact(handle, pszPreviewFile, type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_AddItemPreviewVideo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUGC_AddItemPreviewVideo"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_AddItemPreviewVideo(UGCUpdateHandle_t handle, const char *pszVideoID)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_AddItemPreviewVideo$descriptor() {
        return SteamAPI_ISteamUGC_AddItemPreviewVideo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_AddItemPreviewVideo(UGCUpdateHandle_t handle, const char *pszVideoID)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_AddItemPreviewVideo$handle() {
        return SteamAPI_ISteamUGC_AddItemPreviewVideo.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_AddItemPreviewVideo(UGCUpdateHandle_t handle, const char *pszVideoID)
     * }
     */
    public static boolean SteamAPI_ISteamUGC_AddItemPreviewVideo(long handle, MemorySegment pszVideoID) {
        var mh$ = SteamAPI_ISteamUGC_AddItemPreviewVideo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_AddItemPreviewVideo", handle, pszVideoID);
            }
            return (boolean)mh$.invokeExact(handle, pszVideoID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_UpdateItemPreviewFile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUGC_UpdateItemPreviewFile"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_UpdateItemPreviewFile(UGCUpdateHandle_t handle, uint32 index, const char *pszPreviewFile)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_UpdateItemPreviewFile$descriptor() {
        return SteamAPI_ISteamUGC_UpdateItemPreviewFile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_UpdateItemPreviewFile(UGCUpdateHandle_t handle, uint32 index, const char *pszPreviewFile)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_UpdateItemPreviewFile$handle() {
        return SteamAPI_ISteamUGC_UpdateItemPreviewFile.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_UpdateItemPreviewFile(UGCUpdateHandle_t handle, uint32 index, const char *pszPreviewFile)
     * }
     */
    public static boolean SteamAPI_ISteamUGC_UpdateItemPreviewFile(long handle, int index, MemorySegment pszPreviewFile) {
        var mh$ = SteamAPI_ISteamUGC_UpdateItemPreviewFile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_UpdateItemPreviewFile", handle, index, pszPreviewFile);
            }
            return (boolean)mh$.invokeExact(handle, index, pszPreviewFile);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_UpdateItemPreviewVideo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUGC_UpdateItemPreviewVideo"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_UpdateItemPreviewVideo(UGCUpdateHandle_t handle, uint32 index, const char *pszVideoID)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_UpdateItemPreviewVideo$descriptor() {
        return SteamAPI_ISteamUGC_UpdateItemPreviewVideo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_UpdateItemPreviewVideo(UGCUpdateHandle_t handle, uint32 index, const char *pszVideoID)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_UpdateItemPreviewVideo$handle() {
        return SteamAPI_ISteamUGC_UpdateItemPreviewVideo.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_UpdateItemPreviewVideo(UGCUpdateHandle_t handle, uint32 index, const char *pszVideoID)
     * }
     */
    public static boolean SteamAPI_ISteamUGC_UpdateItemPreviewVideo(long handle, int index, MemorySegment pszVideoID) {
        var mh$ = SteamAPI_ISteamUGC_UpdateItemPreviewVideo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_UpdateItemPreviewVideo", handle, index, pszVideoID);
            }
            return (boolean)mh$.invokeExact(handle, index, pszVideoID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_RemoveItemPreview {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUGC_RemoveItemPreview"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_RemoveItemPreview(UGCUpdateHandle_t handle, uint32 index)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_RemoveItemPreview$descriptor() {
        return SteamAPI_ISteamUGC_RemoveItemPreview.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_RemoveItemPreview(UGCUpdateHandle_t handle, uint32 index)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_RemoveItemPreview$handle() {
        return SteamAPI_ISteamUGC_RemoveItemPreview.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_RemoveItemPreview(UGCUpdateHandle_t handle, uint32 index)
     * }
     */
    public static boolean SteamAPI_ISteamUGC_RemoveItemPreview(long handle, int index) {
        var mh$ = SteamAPI_ISteamUGC_RemoveItemPreview.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_RemoveItemPreview", handle, index);
            }
            return (boolean)mh$.invokeExact(handle, index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_AddContentDescriptor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUGC_AddContentDescriptor"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_AddContentDescriptor(UGCUpdateHandle_t handle, EUGCContentDescriptorID descid)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_AddContentDescriptor$descriptor() {
        return SteamAPI_ISteamUGC_AddContentDescriptor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_AddContentDescriptor(UGCUpdateHandle_t handle, EUGCContentDescriptorID descid)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_AddContentDescriptor$handle() {
        return SteamAPI_ISteamUGC_AddContentDescriptor.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_AddContentDescriptor(UGCUpdateHandle_t handle, EUGCContentDescriptorID descid)
     * }
     */
    public static boolean SteamAPI_ISteamUGC_AddContentDescriptor(long handle, int descid) {
        var mh$ = SteamAPI_ISteamUGC_AddContentDescriptor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_AddContentDescriptor", handle, descid);
            }
            return (boolean)mh$.invokeExact(handle, descid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_RemoveContentDescriptor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUGC_RemoveContentDescriptor"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_RemoveContentDescriptor(UGCUpdateHandle_t handle, EUGCContentDescriptorID descid)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_RemoveContentDescriptor$descriptor() {
        return SteamAPI_ISteamUGC_RemoveContentDescriptor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_RemoveContentDescriptor(UGCUpdateHandle_t handle, EUGCContentDescriptorID descid)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_RemoveContentDescriptor$handle() {
        return SteamAPI_ISteamUGC_RemoveContentDescriptor.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_RemoveContentDescriptor(UGCUpdateHandle_t handle, EUGCContentDescriptorID descid)
     * }
     */
    public static boolean SteamAPI_ISteamUGC_RemoveContentDescriptor(long handle, int descid) {
        var mh$ = SteamAPI_ISteamUGC_RemoveContentDescriptor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_RemoveContentDescriptor", handle, descid);
            }
            return (boolean)mh$.invokeExact(handle, descid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_SubmitItemUpdate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUGC_SubmitItemUpdate"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUGC_SubmitItemUpdate(UGCUpdateHandle_t handle, const char *pchChangeNote)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_SubmitItemUpdate$descriptor() {
        return SteamAPI_ISteamUGC_SubmitItemUpdate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUGC_SubmitItemUpdate(UGCUpdateHandle_t handle, const char *pchChangeNote)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_SubmitItemUpdate$handle() {
        return SteamAPI_ISteamUGC_SubmitItemUpdate.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUGC_SubmitItemUpdate(UGCUpdateHandle_t handle, const char *pchChangeNote)
     * }
     */
    public static long SteamAPI_ISteamUGC_SubmitItemUpdate(long handle, MemorySegment pchChangeNote) {
        var mh$ = SteamAPI_ISteamUGC_SubmitItemUpdate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_SubmitItemUpdate", handle, pchChangeNote);
            }
            return (long)mh$.invokeExact(handle, pchChangeNote);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_GetItemUpdateProgress {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUGC_GetItemUpdateProgress"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * EItemUpdateStatus SteamAPI_ISteamUGC_GetItemUpdateProgress(UGCUpdateHandle_t handle, uint64 *punBytesProcessed, uint64 *punBytesTotal)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_GetItemUpdateProgress$descriptor() {
        return SteamAPI_ISteamUGC_GetItemUpdateProgress.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * EItemUpdateStatus SteamAPI_ISteamUGC_GetItemUpdateProgress(UGCUpdateHandle_t handle, uint64 *punBytesProcessed, uint64 *punBytesTotal)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_GetItemUpdateProgress$handle() {
        return SteamAPI_ISteamUGC_GetItemUpdateProgress.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * EItemUpdateStatus SteamAPI_ISteamUGC_GetItemUpdateProgress(UGCUpdateHandle_t handle, uint64 *punBytesProcessed, uint64 *punBytesTotal)
     * }
     */
    public static int SteamAPI_ISteamUGC_GetItemUpdateProgress(long handle, MemorySegment punBytesProcessed, MemorySegment punBytesTotal) {
        var mh$ = SteamAPI_ISteamUGC_GetItemUpdateProgress.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_GetItemUpdateProgress", handle, punBytesProcessed, punBytesTotal);
            }
            return (int)mh$.invokeExact(handle, punBytesProcessed, punBytesTotal);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_SetUserItemVote {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUGC_SetUserItemVote"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUGC_SetUserItemVote(PublishedFileId_t nPublishedFileID, bool bVoteUp)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_SetUserItemVote$descriptor() {
        return SteamAPI_ISteamUGC_SetUserItemVote.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUGC_SetUserItemVote(PublishedFileId_t nPublishedFileID, bool bVoteUp)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_SetUserItemVote$handle() {
        return SteamAPI_ISteamUGC_SetUserItemVote.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUGC_SetUserItemVote(PublishedFileId_t nPublishedFileID, bool bVoteUp)
     * }
     */
    public static long SteamAPI_ISteamUGC_SetUserItemVote(long nPublishedFileID, boolean bVoteUp) {
        var mh$ = SteamAPI_ISteamUGC_SetUserItemVote.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_SetUserItemVote", nPublishedFileID, bVoteUp);
            }
            return (long)mh$.invokeExact(nPublishedFileID, bVoteUp);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_GetUserItemVote {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUGC_GetUserItemVote"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUGC_GetUserItemVote(PublishedFileId_t nPublishedFileID)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_GetUserItemVote$descriptor() {
        return SteamAPI_ISteamUGC_GetUserItemVote.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUGC_GetUserItemVote(PublishedFileId_t nPublishedFileID)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_GetUserItemVote$handle() {
        return SteamAPI_ISteamUGC_GetUserItemVote.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUGC_GetUserItemVote(PublishedFileId_t nPublishedFileID)
     * }
     */
    public static long SteamAPI_ISteamUGC_GetUserItemVote(long nPublishedFileID) {
        var mh$ = SteamAPI_ISteamUGC_GetUserItemVote.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_GetUserItemVote", nPublishedFileID);
            }
            return (long)mh$.invokeExact(nPublishedFileID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_AddItemToFavorites {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUGC_AddItemToFavorites"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUGC_AddItemToFavorites(AppId_t nAppId, PublishedFileId_t nPublishedFileID)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_AddItemToFavorites$descriptor() {
        return SteamAPI_ISteamUGC_AddItemToFavorites.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUGC_AddItemToFavorites(AppId_t nAppId, PublishedFileId_t nPublishedFileID)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_AddItemToFavorites$handle() {
        return SteamAPI_ISteamUGC_AddItemToFavorites.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUGC_AddItemToFavorites(AppId_t nAppId, PublishedFileId_t nPublishedFileID)
     * }
     */
    public static long SteamAPI_ISteamUGC_AddItemToFavorites(int nAppId, long nPublishedFileID) {
        var mh$ = SteamAPI_ISteamUGC_AddItemToFavorites.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_AddItemToFavorites", nAppId, nPublishedFileID);
            }
            return (long)mh$.invokeExact(nAppId, nPublishedFileID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_RemoveItemFromFavorites {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUGC_RemoveItemFromFavorites"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUGC_RemoveItemFromFavorites(AppId_t nAppId, PublishedFileId_t nPublishedFileID)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_RemoveItemFromFavorites$descriptor() {
        return SteamAPI_ISteamUGC_RemoveItemFromFavorites.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUGC_RemoveItemFromFavorites(AppId_t nAppId, PublishedFileId_t nPublishedFileID)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_RemoveItemFromFavorites$handle() {
        return SteamAPI_ISteamUGC_RemoveItemFromFavorites.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUGC_RemoveItemFromFavorites(AppId_t nAppId, PublishedFileId_t nPublishedFileID)
     * }
     */
    public static long SteamAPI_ISteamUGC_RemoveItemFromFavorites(int nAppId, long nPublishedFileID) {
        var mh$ = SteamAPI_ISteamUGC_RemoveItemFromFavorites.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_RemoveItemFromFavorites", nAppId, nPublishedFileID);
            }
            return (long)mh$.invokeExact(nAppId, nPublishedFileID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_SubscribeItem {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUGC_SubscribeItem"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUGC_SubscribeItem(PublishedFileId_t nPublishedFileID)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_SubscribeItem$descriptor() {
        return SteamAPI_ISteamUGC_SubscribeItem.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUGC_SubscribeItem(PublishedFileId_t nPublishedFileID)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_SubscribeItem$handle() {
        return SteamAPI_ISteamUGC_SubscribeItem.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUGC_SubscribeItem(PublishedFileId_t nPublishedFileID)
     * }
     */
    public static long SteamAPI_ISteamUGC_SubscribeItem(long nPublishedFileID) {
        var mh$ = SteamAPI_ISteamUGC_SubscribeItem.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_SubscribeItem", nPublishedFileID);
            }
            return (long)mh$.invokeExact(nPublishedFileID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_UnsubscribeItem {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUGC_UnsubscribeItem"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUGC_UnsubscribeItem(PublishedFileId_t nPublishedFileID)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_UnsubscribeItem$descriptor() {
        return SteamAPI_ISteamUGC_UnsubscribeItem.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUGC_UnsubscribeItem(PublishedFileId_t nPublishedFileID)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_UnsubscribeItem$handle() {
        return SteamAPI_ISteamUGC_UnsubscribeItem.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUGC_UnsubscribeItem(PublishedFileId_t nPublishedFileID)
     * }
     */
    public static long SteamAPI_ISteamUGC_UnsubscribeItem(long nPublishedFileID) {
        var mh$ = SteamAPI_ISteamUGC_UnsubscribeItem.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_UnsubscribeItem", nPublishedFileID);
            }
            return (long)mh$.invokeExact(nPublishedFileID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_GetNumSubscribedItems {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUGC_GetNumSubscribedItems"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamUGC_GetNumSubscribedItems()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_GetNumSubscribedItems$descriptor() {
        return SteamAPI_ISteamUGC_GetNumSubscribedItems.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamUGC_GetNumSubscribedItems()
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_GetNumSubscribedItems$handle() {
        return SteamAPI_ISteamUGC_GetNumSubscribedItems.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamUGC_GetNumSubscribedItems()
     * }
     */
    public static int SteamAPI_ISteamUGC_GetNumSubscribedItems() {
        var mh$ = SteamAPI_ISteamUGC_GetNumSubscribedItems.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_GetNumSubscribedItems");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_GetSubscribedItems {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUGC_GetSubscribedItems"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamUGC_GetSubscribedItems(PublishedFileId_t *pvecPublishedFileID, uint32 cMaxEntries)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_GetSubscribedItems$descriptor() {
        return SteamAPI_ISteamUGC_GetSubscribedItems.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamUGC_GetSubscribedItems(PublishedFileId_t *pvecPublishedFileID, uint32 cMaxEntries)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_GetSubscribedItems$handle() {
        return SteamAPI_ISteamUGC_GetSubscribedItems.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamUGC_GetSubscribedItems(PublishedFileId_t *pvecPublishedFileID, uint32 cMaxEntries)
     * }
     */
    public static int SteamAPI_ISteamUGC_GetSubscribedItems(MemorySegment pvecPublishedFileID, int cMaxEntries) {
        var mh$ = SteamAPI_ISteamUGC_GetSubscribedItems.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_GetSubscribedItems", pvecPublishedFileID, cMaxEntries);
            }
            return (int)mh$.invokeExact(pvecPublishedFileID, cMaxEntries);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_GetItemState {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUGC_GetItemState"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamUGC_GetItemState(PublishedFileId_t nPublishedFileID)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_GetItemState$descriptor() {
        return SteamAPI_ISteamUGC_GetItemState.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamUGC_GetItemState(PublishedFileId_t nPublishedFileID)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_GetItemState$handle() {
        return SteamAPI_ISteamUGC_GetItemState.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamUGC_GetItemState(PublishedFileId_t nPublishedFileID)
     * }
     */
    public static int SteamAPI_ISteamUGC_GetItemState(long nPublishedFileID) {
        var mh$ = SteamAPI_ISteamUGC_GetItemState.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_GetItemState", nPublishedFileID);
            }
            return (int)mh$.invokeExact(nPublishedFileID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_GetItemInstallInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUGC_GetItemInstallInfo"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_GetItemInstallInfo(PublishedFileId_t nPublishedFileID, uint64 *punSizeOnDisk, char *pchFolder, uint32 cchFolderSize, uint32 *punTimeStamp)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_GetItemInstallInfo$descriptor() {
        return SteamAPI_ISteamUGC_GetItemInstallInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_GetItemInstallInfo(PublishedFileId_t nPublishedFileID, uint64 *punSizeOnDisk, char *pchFolder, uint32 cchFolderSize, uint32 *punTimeStamp)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_GetItemInstallInfo$handle() {
        return SteamAPI_ISteamUGC_GetItemInstallInfo.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_GetItemInstallInfo(PublishedFileId_t nPublishedFileID, uint64 *punSizeOnDisk, char *pchFolder, uint32 cchFolderSize, uint32 *punTimeStamp)
     * }
     */
    public static boolean SteamAPI_ISteamUGC_GetItemInstallInfo(long nPublishedFileID, MemorySegment punSizeOnDisk, MemorySegment pchFolder, int cchFolderSize, MemorySegment punTimeStamp) {
        var mh$ = SteamAPI_ISteamUGC_GetItemInstallInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_GetItemInstallInfo", nPublishedFileID, punSizeOnDisk, pchFolder, cchFolderSize, punTimeStamp);
            }
            return (boolean)mh$.invokeExact(nPublishedFileID, punSizeOnDisk, pchFolder, cchFolderSize, punTimeStamp);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_GetItemDownloadInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUGC_GetItemDownloadInfo"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_GetItemDownloadInfo(PublishedFileId_t nPublishedFileID, uint64 *punBytesDownloaded, uint64 *punBytesTotal)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_GetItemDownloadInfo$descriptor() {
        return SteamAPI_ISteamUGC_GetItemDownloadInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_GetItemDownloadInfo(PublishedFileId_t nPublishedFileID, uint64 *punBytesDownloaded, uint64 *punBytesTotal)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_GetItemDownloadInfo$handle() {
        return SteamAPI_ISteamUGC_GetItemDownloadInfo.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_GetItemDownloadInfo(PublishedFileId_t nPublishedFileID, uint64 *punBytesDownloaded, uint64 *punBytesTotal)
     * }
     */
    public static boolean SteamAPI_ISteamUGC_GetItemDownloadInfo(long nPublishedFileID, MemorySegment punBytesDownloaded, MemorySegment punBytesTotal) {
        var mh$ = SteamAPI_ISteamUGC_GetItemDownloadInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_GetItemDownloadInfo", nPublishedFileID, punBytesDownloaded, punBytesTotal);
            }
            return (boolean)mh$.invokeExact(nPublishedFileID, punBytesDownloaded, punBytesTotal);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_DownloadItem {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUGC_DownloadItem"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_DownloadItem(PublishedFileId_t nPublishedFileID, bool bHighPriority)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_DownloadItem$descriptor() {
        return SteamAPI_ISteamUGC_DownloadItem.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_DownloadItem(PublishedFileId_t nPublishedFileID, bool bHighPriority)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_DownloadItem$handle() {
        return SteamAPI_ISteamUGC_DownloadItem.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_DownloadItem(PublishedFileId_t nPublishedFileID, bool bHighPriority)
     * }
     */
    public static boolean SteamAPI_ISteamUGC_DownloadItem(long nPublishedFileID, boolean bHighPriority) {
        var mh$ = SteamAPI_ISteamUGC_DownloadItem.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_DownloadItem", nPublishedFileID, bHighPriority);
            }
            return (boolean)mh$.invokeExact(nPublishedFileID, bHighPriority);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_BInitWorkshopForGameServer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUGC_BInitWorkshopForGameServer"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_BInitWorkshopForGameServer(DepotId_t unWorkshopDepotID, const char *pszFolder)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_BInitWorkshopForGameServer$descriptor() {
        return SteamAPI_ISteamUGC_BInitWorkshopForGameServer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_BInitWorkshopForGameServer(DepotId_t unWorkshopDepotID, const char *pszFolder)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_BInitWorkshopForGameServer$handle() {
        return SteamAPI_ISteamUGC_BInitWorkshopForGameServer.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_BInitWorkshopForGameServer(DepotId_t unWorkshopDepotID, const char *pszFolder)
     * }
     */
    public static boolean SteamAPI_ISteamUGC_BInitWorkshopForGameServer(int unWorkshopDepotID, MemorySegment pszFolder) {
        var mh$ = SteamAPI_ISteamUGC_BInitWorkshopForGameServer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_BInitWorkshopForGameServer", unWorkshopDepotID, pszFolder);
            }
            return (boolean)mh$.invokeExact(unWorkshopDepotID, pszFolder);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_SuspendDownloads {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUGC_SuspendDownloads"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamUGC_SuspendDownloads(bool bSuspend)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_SuspendDownloads$descriptor() {
        return SteamAPI_ISteamUGC_SuspendDownloads.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamUGC_SuspendDownloads(bool bSuspend)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_SuspendDownloads$handle() {
        return SteamAPI_ISteamUGC_SuspendDownloads.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamUGC_SuspendDownloads(bool bSuspend)
     * }
     */
    public static void SteamAPI_ISteamUGC_SuspendDownloads(boolean bSuspend) {
        var mh$ = SteamAPI_ISteamUGC_SuspendDownloads.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_SuspendDownloads", bSuspend);
            }
            mh$.invokeExact(bSuspend);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_StartPlaytimeTracking {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUGC_StartPlaytimeTracking"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUGC_StartPlaytimeTracking(PublishedFileId_t *pvecPublishedFileID, uint32 unNumPublishedFileIDs)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_StartPlaytimeTracking$descriptor() {
        return SteamAPI_ISteamUGC_StartPlaytimeTracking.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUGC_StartPlaytimeTracking(PublishedFileId_t *pvecPublishedFileID, uint32 unNumPublishedFileIDs)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_StartPlaytimeTracking$handle() {
        return SteamAPI_ISteamUGC_StartPlaytimeTracking.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUGC_StartPlaytimeTracking(PublishedFileId_t *pvecPublishedFileID, uint32 unNumPublishedFileIDs)
     * }
     */
    public static long SteamAPI_ISteamUGC_StartPlaytimeTracking(MemorySegment pvecPublishedFileID, int unNumPublishedFileIDs) {
        var mh$ = SteamAPI_ISteamUGC_StartPlaytimeTracking.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_StartPlaytimeTracking", pvecPublishedFileID, unNumPublishedFileIDs);
            }
            return (long)mh$.invokeExact(pvecPublishedFileID, unNumPublishedFileIDs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_StopPlaytimeTracking {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUGC_StopPlaytimeTracking"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUGC_StopPlaytimeTracking(PublishedFileId_t *pvecPublishedFileID, uint32 unNumPublishedFileIDs)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_StopPlaytimeTracking$descriptor() {
        return SteamAPI_ISteamUGC_StopPlaytimeTracking.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUGC_StopPlaytimeTracking(PublishedFileId_t *pvecPublishedFileID, uint32 unNumPublishedFileIDs)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_StopPlaytimeTracking$handle() {
        return SteamAPI_ISteamUGC_StopPlaytimeTracking.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUGC_StopPlaytimeTracking(PublishedFileId_t *pvecPublishedFileID, uint32 unNumPublishedFileIDs)
     * }
     */
    public static long SteamAPI_ISteamUGC_StopPlaytimeTracking(MemorySegment pvecPublishedFileID, int unNumPublishedFileIDs) {
        var mh$ = SteamAPI_ISteamUGC_StopPlaytimeTracking.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_StopPlaytimeTracking", pvecPublishedFileID, unNumPublishedFileIDs);
            }
            return (long)mh$.invokeExact(pvecPublishedFileID, unNumPublishedFileIDs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_StopPlaytimeTrackingForAllItems {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_LONG_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUGC_StopPlaytimeTrackingForAllItems"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUGC_StopPlaytimeTrackingForAllItems()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_StopPlaytimeTrackingForAllItems$descriptor() {
        return SteamAPI_ISteamUGC_StopPlaytimeTrackingForAllItems.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUGC_StopPlaytimeTrackingForAllItems()
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_StopPlaytimeTrackingForAllItems$handle() {
        return SteamAPI_ISteamUGC_StopPlaytimeTrackingForAllItems.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUGC_StopPlaytimeTrackingForAllItems()
     * }
     */
    public static long SteamAPI_ISteamUGC_StopPlaytimeTrackingForAllItems() {
        var mh$ = SteamAPI_ISteamUGC_StopPlaytimeTrackingForAllItems.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_StopPlaytimeTrackingForAllItems");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_AddDependency {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUGC_AddDependency"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUGC_AddDependency(PublishedFileId_t nParentPublishedFileID, PublishedFileId_t nChildPublishedFileID)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_AddDependency$descriptor() {
        return SteamAPI_ISteamUGC_AddDependency.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUGC_AddDependency(PublishedFileId_t nParentPublishedFileID, PublishedFileId_t nChildPublishedFileID)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_AddDependency$handle() {
        return SteamAPI_ISteamUGC_AddDependency.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUGC_AddDependency(PublishedFileId_t nParentPublishedFileID, PublishedFileId_t nChildPublishedFileID)
     * }
     */
    public static long SteamAPI_ISteamUGC_AddDependency(long nParentPublishedFileID, long nChildPublishedFileID) {
        var mh$ = SteamAPI_ISteamUGC_AddDependency.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_AddDependency", nParentPublishedFileID, nChildPublishedFileID);
            }
            return (long)mh$.invokeExact(nParentPublishedFileID, nChildPublishedFileID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_RemoveDependency {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUGC_RemoveDependency"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUGC_RemoveDependency(PublishedFileId_t nParentPublishedFileID, PublishedFileId_t nChildPublishedFileID)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_RemoveDependency$descriptor() {
        return SteamAPI_ISteamUGC_RemoveDependency.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUGC_RemoveDependency(PublishedFileId_t nParentPublishedFileID, PublishedFileId_t nChildPublishedFileID)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_RemoveDependency$handle() {
        return SteamAPI_ISteamUGC_RemoveDependency.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUGC_RemoveDependency(PublishedFileId_t nParentPublishedFileID, PublishedFileId_t nChildPublishedFileID)
     * }
     */
    public static long SteamAPI_ISteamUGC_RemoveDependency(long nParentPublishedFileID, long nChildPublishedFileID) {
        var mh$ = SteamAPI_ISteamUGC_RemoveDependency.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_RemoveDependency", nParentPublishedFileID, nChildPublishedFileID);
            }
            return (long)mh$.invokeExact(nParentPublishedFileID, nChildPublishedFileID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_AddAppDependency {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUGC_AddAppDependency"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUGC_AddAppDependency(PublishedFileId_t nPublishedFileID, AppId_t nAppID)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_AddAppDependency$descriptor() {
        return SteamAPI_ISteamUGC_AddAppDependency.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUGC_AddAppDependency(PublishedFileId_t nPublishedFileID, AppId_t nAppID)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_AddAppDependency$handle() {
        return SteamAPI_ISteamUGC_AddAppDependency.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUGC_AddAppDependency(PublishedFileId_t nPublishedFileID, AppId_t nAppID)
     * }
     */
    public static long SteamAPI_ISteamUGC_AddAppDependency(long nPublishedFileID, int nAppID) {
        var mh$ = SteamAPI_ISteamUGC_AddAppDependency.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_AddAppDependency", nPublishedFileID, nAppID);
            }
            return (long)mh$.invokeExact(nPublishedFileID, nAppID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_RemoveAppDependency {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUGC_RemoveAppDependency"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUGC_RemoveAppDependency(PublishedFileId_t nPublishedFileID, AppId_t nAppID)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_RemoveAppDependency$descriptor() {
        return SteamAPI_ISteamUGC_RemoveAppDependency.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUGC_RemoveAppDependency(PublishedFileId_t nPublishedFileID, AppId_t nAppID)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_RemoveAppDependency$handle() {
        return SteamAPI_ISteamUGC_RemoveAppDependency.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUGC_RemoveAppDependency(PublishedFileId_t nPublishedFileID, AppId_t nAppID)
     * }
     */
    public static long SteamAPI_ISteamUGC_RemoveAppDependency(long nPublishedFileID, int nAppID) {
        var mh$ = SteamAPI_ISteamUGC_RemoveAppDependency.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_RemoveAppDependency", nPublishedFileID, nAppID);
            }
            return (long)mh$.invokeExact(nPublishedFileID, nAppID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_GetAppDependencies {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUGC_GetAppDependencies"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUGC_GetAppDependencies(PublishedFileId_t nPublishedFileID)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_GetAppDependencies$descriptor() {
        return SteamAPI_ISteamUGC_GetAppDependencies.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUGC_GetAppDependencies(PublishedFileId_t nPublishedFileID)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_GetAppDependencies$handle() {
        return SteamAPI_ISteamUGC_GetAppDependencies.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUGC_GetAppDependencies(PublishedFileId_t nPublishedFileID)
     * }
     */
    public static long SteamAPI_ISteamUGC_GetAppDependencies(long nPublishedFileID) {
        var mh$ = SteamAPI_ISteamUGC_GetAppDependencies.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_GetAppDependencies", nPublishedFileID);
            }
            return (long)mh$.invokeExact(nPublishedFileID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_DeleteItem {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUGC_DeleteItem"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUGC_DeleteItem(PublishedFileId_t nPublishedFileID)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_DeleteItem$descriptor() {
        return SteamAPI_ISteamUGC_DeleteItem.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUGC_DeleteItem(PublishedFileId_t nPublishedFileID)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_DeleteItem$handle() {
        return SteamAPI_ISteamUGC_DeleteItem.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUGC_DeleteItem(PublishedFileId_t nPublishedFileID)
     * }
     */
    public static long SteamAPI_ISteamUGC_DeleteItem(long nPublishedFileID) {
        var mh$ = SteamAPI_ISteamUGC_DeleteItem.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_DeleteItem", nPublishedFileID);
            }
            return (long)mh$.invokeExact(nPublishedFileID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_ShowWorkshopEULA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUGC_ShowWorkshopEULA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_ShowWorkshopEULA()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_ShowWorkshopEULA$descriptor() {
        return SteamAPI_ISteamUGC_ShowWorkshopEULA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_ShowWorkshopEULA()
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_ShowWorkshopEULA$handle() {
        return SteamAPI_ISteamUGC_ShowWorkshopEULA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamUGC_ShowWorkshopEULA()
     * }
     */
    public static boolean SteamAPI_ISteamUGC_ShowWorkshopEULA() {
        var mh$ = SteamAPI_ISteamUGC_ShowWorkshopEULA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_ShowWorkshopEULA");
            }
            return (boolean)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_GetWorkshopEULAStatus {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_LONG_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUGC_GetWorkshopEULAStatus"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUGC_GetWorkshopEULAStatus()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_GetWorkshopEULAStatus$descriptor() {
        return SteamAPI_ISteamUGC_GetWorkshopEULAStatus.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUGC_GetWorkshopEULAStatus()
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_GetWorkshopEULAStatus$handle() {
        return SteamAPI_ISteamUGC_GetWorkshopEULAStatus.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamUGC_GetWorkshopEULAStatus()
     * }
     */
    public static long SteamAPI_ISteamUGC_GetWorkshopEULAStatus() {
        var mh$ = SteamAPI_ISteamUGC_GetWorkshopEULAStatus.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_GetWorkshopEULAStatus");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamUGC_GetUserContentDescriptorPreferences {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamUGC_GetUserContentDescriptorPreferences"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamUGC_GetUserContentDescriptorPreferences(EUGCContentDescriptorID *pvecDescriptors, uint32 cMaxEntries)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamUGC_GetUserContentDescriptorPreferences$descriptor() {
        return SteamAPI_ISteamUGC_GetUserContentDescriptorPreferences.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamUGC_GetUserContentDescriptorPreferences(EUGCContentDescriptorID *pvecDescriptors, uint32 cMaxEntries)
     * }
     */
    public static MethodHandle SteamAPI_ISteamUGC_GetUserContentDescriptorPreferences$handle() {
        return SteamAPI_ISteamUGC_GetUserContentDescriptorPreferences.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamUGC_GetUserContentDescriptorPreferences(EUGCContentDescriptorID *pvecDescriptors, uint32 cMaxEntries)
     * }
     */
    public static int SteamAPI_ISteamUGC_GetUserContentDescriptorPreferences(MemorySegment pvecDescriptors, int cMaxEntries) {
        var mh$ = SteamAPI_ISteamUGC_GetUserContentDescriptorPreferences.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamUGC_GetUserContentDescriptorPreferences", pvecDescriptors, cMaxEntries);
            }
            return (int)mh$.invokeExact(pvecDescriptors, cMaxEntries);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTMLSurface_Init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamHTMLSurface_Init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTMLSurface_Init()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTMLSurface_Init$descriptor() {
        return SteamAPI_ISteamHTMLSurface_Init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTMLSurface_Init()
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTMLSurface_Init$handle() {
        return SteamAPI_ISteamHTMLSurface_Init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTMLSurface_Init()
     * }
     */
    public static boolean SteamAPI_ISteamHTMLSurface_Init() {
        var mh$ = SteamAPI_ISteamHTMLSurface_Init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTMLSurface_Init");
            }
            return (boolean)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTMLSurface_Shutdown {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamHTMLSurface_Shutdown"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTMLSurface_Shutdown()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTMLSurface_Shutdown$descriptor() {
        return SteamAPI_ISteamHTMLSurface_Shutdown.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTMLSurface_Shutdown()
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTMLSurface_Shutdown$handle() {
        return SteamAPI_ISteamHTMLSurface_Shutdown.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamHTMLSurface_Shutdown()
     * }
     */
    public static boolean SteamAPI_ISteamHTMLSurface_Shutdown() {
        var mh$ = SteamAPI_ISteamHTMLSurface_Shutdown.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTMLSurface_Shutdown");
            }
            return (boolean)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTMLSurface_CreateBrowser {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamHTMLSurface_CreateBrowser"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamHTMLSurface_CreateBrowser(const char *pchUserAgent, const char *pchUserCSS)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTMLSurface_CreateBrowser$descriptor() {
        return SteamAPI_ISteamHTMLSurface_CreateBrowser.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamHTMLSurface_CreateBrowser(const char *pchUserAgent, const char *pchUserCSS)
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTMLSurface_CreateBrowser$handle() {
        return SteamAPI_ISteamHTMLSurface_CreateBrowser.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamHTMLSurface_CreateBrowser(const char *pchUserAgent, const char *pchUserCSS)
     * }
     */
    public static long SteamAPI_ISteamHTMLSurface_CreateBrowser(MemorySegment pchUserAgent, MemorySegment pchUserCSS) {
        var mh$ = SteamAPI_ISteamHTMLSurface_CreateBrowser.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTMLSurface_CreateBrowser", pchUserAgent, pchUserCSS);
            }
            return (long)mh$.invokeExact(pchUserAgent, pchUserCSS);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTMLSurface_RemoveBrowser {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamHTMLSurface_RemoveBrowser"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_RemoveBrowser(HHTMLBrowser unBrowserHandle)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTMLSurface_RemoveBrowser$descriptor() {
        return SteamAPI_ISteamHTMLSurface_RemoveBrowser.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_RemoveBrowser(HHTMLBrowser unBrowserHandle)
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTMLSurface_RemoveBrowser$handle() {
        return SteamAPI_ISteamHTMLSurface_RemoveBrowser.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_RemoveBrowser(HHTMLBrowser unBrowserHandle)
     * }
     */
    public static void SteamAPI_ISteamHTMLSurface_RemoveBrowser(int unBrowserHandle) {
        var mh$ = SteamAPI_ISteamHTMLSurface_RemoveBrowser.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTMLSurface_RemoveBrowser", unBrowserHandle);
            }
            mh$.invokeExact(unBrowserHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTMLSurface_LoadURL {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamHTMLSurface_LoadURL"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_LoadURL(HHTMLBrowser unBrowserHandle, const char *pchURL, const char *pchPostData)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTMLSurface_LoadURL$descriptor() {
        return SteamAPI_ISteamHTMLSurface_LoadURL.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_LoadURL(HHTMLBrowser unBrowserHandle, const char *pchURL, const char *pchPostData)
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTMLSurface_LoadURL$handle() {
        return SteamAPI_ISteamHTMLSurface_LoadURL.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_LoadURL(HHTMLBrowser unBrowserHandle, const char *pchURL, const char *pchPostData)
     * }
     */
    public static void SteamAPI_ISteamHTMLSurface_LoadURL(int unBrowserHandle, MemorySegment pchURL, MemorySegment pchPostData) {
        var mh$ = SteamAPI_ISteamHTMLSurface_LoadURL.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTMLSurface_LoadURL", unBrowserHandle, pchURL, pchPostData);
            }
            mh$.invokeExact(unBrowserHandle, pchURL, pchPostData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTMLSurface_SetSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamHTMLSurface_SetSize"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_SetSize(HHTMLBrowser unBrowserHandle, uint32 unWidth, uint32 unHeight)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTMLSurface_SetSize$descriptor() {
        return SteamAPI_ISteamHTMLSurface_SetSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_SetSize(HHTMLBrowser unBrowserHandle, uint32 unWidth, uint32 unHeight)
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTMLSurface_SetSize$handle() {
        return SteamAPI_ISteamHTMLSurface_SetSize.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_SetSize(HHTMLBrowser unBrowserHandle, uint32 unWidth, uint32 unHeight)
     * }
     */
    public static void SteamAPI_ISteamHTMLSurface_SetSize(int unBrowserHandle, int unWidth, int unHeight) {
        var mh$ = SteamAPI_ISteamHTMLSurface_SetSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTMLSurface_SetSize", unBrowserHandle, unWidth, unHeight);
            }
            mh$.invokeExact(unBrowserHandle, unWidth, unHeight);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTMLSurface_StopLoad {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamHTMLSurface_StopLoad"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_StopLoad(HHTMLBrowser unBrowserHandle)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTMLSurface_StopLoad$descriptor() {
        return SteamAPI_ISteamHTMLSurface_StopLoad.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_StopLoad(HHTMLBrowser unBrowserHandle)
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTMLSurface_StopLoad$handle() {
        return SteamAPI_ISteamHTMLSurface_StopLoad.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_StopLoad(HHTMLBrowser unBrowserHandle)
     * }
     */
    public static void SteamAPI_ISteamHTMLSurface_StopLoad(int unBrowserHandle) {
        var mh$ = SteamAPI_ISteamHTMLSurface_StopLoad.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTMLSurface_StopLoad", unBrowserHandle);
            }
            mh$.invokeExact(unBrowserHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTMLSurface_Reload {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamHTMLSurface_Reload"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_Reload(HHTMLBrowser unBrowserHandle)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTMLSurface_Reload$descriptor() {
        return SteamAPI_ISteamHTMLSurface_Reload.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_Reload(HHTMLBrowser unBrowserHandle)
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTMLSurface_Reload$handle() {
        return SteamAPI_ISteamHTMLSurface_Reload.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_Reload(HHTMLBrowser unBrowserHandle)
     * }
     */
    public static void SteamAPI_ISteamHTMLSurface_Reload(int unBrowserHandle) {
        var mh$ = SteamAPI_ISteamHTMLSurface_Reload.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTMLSurface_Reload", unBrowserHandle);
            }
            mh$.invokeExact(unBrowserHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTMLSurface_GoBack {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamHTMLSurface_GoBack"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_GoBack(HHTMLBrowser unBrowserHandle)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTMLSurface_GoBack$descriptor() {
        return SteamAPI_ISteamHTMLSurface_GoBack.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_GoBack(HHTMLBrowser unBrowserHandle)
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTMLSurface_GoBack$handle() {
        return SteamAPI_ISteamHTMLSurface_GoBack.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_GoBack(HHTMLBrowser unBrowserHandle)
     * }
     */
    public static void SteamAPI_ISteamHTMLSurface_GoBack(int unBrowserHandle) {
        var mh$ = SteamAPI_ISteamHTMLSurface_GoBack.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTMLSurface_GoBack", unBrowserHandle);
            }
            mh$.invokeExact(unBrowserHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTMLSurface_GoForward {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamHTMLSurface_GoForward"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_GoForward(HHTMLBrowser unBrowserHandle)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTMLSurface_GoForward$descriptor() {
        return SteamAPI_ISteamHTMLSurface_GoForward.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_GoForward(HHTMLBrowser unBrowserHandle)
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTMLSurface_GoForward$handle() {
        return SteamAPI_ISteamHTMLSurface_GoForward.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_GoForward(HHTMLBrowser unBrowserHandle)
     * }
     */
    public static void SteamAPI_ISteamHTMLSurface_GoForward(int unBrowserHandle) {
        var mh$ = SteamAPI_ISteamHTMLSurface_GoForward.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTMLSurface_GoForward", unBrowserHandle);
            }
            mh$.invokeExact(unBrowserHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTMLSurface_AddHeader {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamHTMLSurface_AddHeader"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_AddHeader(HHTMLBrowser unBrowserHandle, const char *pchKey, const char *pchValue)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTMLSurface_AddHeader$descriptor() {
        return SteamAPI_ISteamHTMLSurface_AddHeader.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_AddHeader(HHTMLBrowser unBrowserHandle, const char *pchKey, const char *pchValue)
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTMLSurface_AddHeader$handle() {
        return SteamAPI_ISteamHTMLSurface_AddHeader.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_AddHeader(HHTMLBrowser unBrowserHandle, const char *pchKey, const char *pchValue)
     * }
     */
    public static void SteamAPI_ISteamHTMLSurface_AddHeader(int unBrowserHandle, MemorySegment pchKey, MemorySegment pchValue) {
        var mh$ = SteamAPI_ISteamHTMLSurface_AddHeader.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTMLSurface_AddHeader", unBrowserHandle, pchKey, pchValue);
            }
            mh$.invokeExact(unBrowserHandle, pchKey, pchValue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTMLSurface_ExecuteJavascript {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamHTMLSurface_ExecuteJavascript"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_ExecuteJavascript(HHTMLBrowser unBrowserHandle, const char *pchScript)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTMLSurface_ExecuteJavascript$descriptor() {
        return SteamAPI_ISteamHTMLSurface_ExecuteJavascript.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_ExecuteJavascript(HHTMLBrowser unBrowserHandle, const char *pchScript)
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTMLSurface_ExecuteJavascript$handle() {
        return SteamAPI_ISteamHTMLSurface_ExecuteJavascript.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_ExecuteJavascript(HHTMLBrowser unBrowserHandle, const char *pchScript)
     * }
     */
    public static void SteamAPI_ISteamHTMLSurface_ExecuteJavascript(int unBrowserHandle, MemorySegment pchScript) {
        var mh$ = SteamAPI_ISteamHTMLSurface_ExecuteJavascript.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTMLSurface_ExecuteJavascript", unBrowserHandle, pchScript);
            }
            mh$.invokeExact(unBrowserHandle, pchScript);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTMLSurface_MouseUp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamHTMLSurface_MouseUp"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_MouseUp(HHTMLBrowser unBrowserHandle, EHTMLMouseButton eMouseButton)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTMLSurface_MouseUp$descriptor() {
        return SteamAPI_ISteamHTMLSurface_MouseUp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_MouseUp(HHTMLBrowser unBrowserHandle, EHTMLMouseButton eMouseButton)
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTMLSurface_MouseUp$handle() {
        return SteamAPI_ISteamHTMLSurface_MouseUp.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_MouseUp(HHTMLBrowser unBrowserHandle, EHTMLMouseButton eMouseButton)
     * }
     */
    public static void SteamAPI_ISteamHTMLSurface_MouseUp(int unBrowserHandle, int eMouseButton) {
        var mh$ = SteamAPI_ISteamHTMLSurface_MouseUp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTMLSurface_MouseUp", unBrowserHandle, eMouseButton);
            }
            mh$.invokeExact(unBrowserHandle, eMouseButton);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTMLSurface_MouseDown {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamHTMLSurface_MouseDown"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_MouseDown(HHTMLBrowser unBrowserHandle, EHTMLMouseButton eMouseButton)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTMLSurface_MouseDown$descriptor() {
        return SteamAPI_ISteamHTMLSurface_MouseDown.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_MouseDown(HHTMLBrowser unBrowserHandle, EHTMLMouseButton eMouseButton)
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTMLSurface_MouseDown$handle() {
        return SteamAPI_ISteamHTMLSurface_MouseDown.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_MouseDown(HHTMLBrowser unBrowserHandle, EHTMLMouseButton eMouseButton)
     * }
     */
    public static void SteamAPI_ISteamHTMLSurface_MouseDown(int unBrowserHandle, int eMouseButton) {
        var mh$ = SteamAPI_ISteamHTMLSurface_MouseDown.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTMLSurface_MouseDown", unBrowserHandle, eMouseButton);
            }
            mh$.invokeExact(unBrowserHandle, eMouseButton);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTMLSurface_MouseDoubleClick {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamHTMLSurface_MouseDoubleClick"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_MouseDoubleClick(HHTMLBrowser unBrowserHandle, EHTMLMouseButton eMouseButton)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTMLSurface_MouseDoubleClick$descriptor() {
        return SteamAPI_ISteamHTMLSurface_MouseDoubleClick.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_MouseDoubleClick(HHTMLBrowser unBrowserHandle, EHTMLMouseButton eMouseButton)
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTMLSurface_MouseDoubleClick$handle() {
        return SteamAPI_ISteamHTMLSurface_MouseDoubleClick.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_MouseDoubleClick(HHTMLBrowser unBrowserHandle, EHTMLMouseButton eMouseButton)
     * }
     */
    public static void SteamAPI_ISteamHTMLSurface_MouseDoubleClick(int unBrowserHandle, int eMouseButton) {
        var mh$ = SteamAPI_ISteamHTMLSurface_MouseDoubleClick.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTMLSurface_MouseDoubleClick", unBrowserHandle, eMouseButton);
            }
            mh$.invokeExact(unBrowserHandle, eMouseButton);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTMLSurface_MouseMove {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamHTMLSurface_MouseMove"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_MouseMove(HHTMLBrowser unBrowserHandle, int x, int y)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTMLSurface_MouseMove$descriptor() {
        return SteamAPI_ISteamHTMLSurface_MouseMove.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_MouseMove(HHTMLBrowser unBrowserHandle, int x, int y)
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTMLSurface_MouseMove$handle() {
        return SteamAPI_ISteamHTMLSurface_MouseMove.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_MouseMove(HHTMLBrowser unBrowserHandle, int x, int y)
     * }
     */
    public static void SteamAPI_ISteamHTMLSurface_MouseMove(int unBrowserHandle, int x, int y) {
        var mh$ = SteamAPI_ISteamHTMLSurface_MouseMove.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTMLSurface_MouseMove", unBrowserHandle, x, y);
            }
            mh$.invokeExact(unBrowserHandle, x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTMLSurface_MouseWheel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamHTMLSurface_MouseWheel"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_MouseWheel(HHTMLBrowser unBrowserHandle, int32 nDelta)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTMLSurface_MouseWheel$descriptor() {
        return SteamAPI_ISteamHTMLSurface_MouseWheel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_MouseWheel(HHTMLBrowser unBrowserHandle, int32 nDelta)
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTMLSurface_MouseWheel$handle() {
        return SteamAPI_ISteamHTMLSurface_MouseWheel.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_MouseWheel(HHTMLBrowser unBrowserHandle, int32 nDelta)
     * }
     */
    public static void SteamAPI_ISteamHTMLSurface_MouseWheel(int unBrowserHandle, int nDelta) {
        var mh$ = SteamAPI_ISteamHTMLSurface_MouseWheel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTMLSurface_MouseWheel", unBrowserHandle, nDelta);
            }
            mh$.invokeExact(unBrowserHandle, nDelta);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTMLSurface_KeyDown {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamHTMLSurface_KeyDown"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_KeyDown(HHTMLBrowser unBrowserHandle, uint32 nNativeKeyCode, EHTMLKeyModifiers eHTMLKeyModifiers, bool bIsSystemKey)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTMLSurface_KeyDown$descriptor() {
        return SteamAPI_ISteamHTMLSurface_KeyDown.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_KeyDown(HHTMLBrowser unBrowserHandle, uint32 nNativeKeyCode, EHTMLKeyModifiers eHTMLKeyModifiers, bool bIsSystemKey)
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTMLSurface_KeyDown$handle() {
        return SteamAPI_ISteamHTMLSurface_KeyDown.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_KeyDown(HHTMLBrowser unBrowserHandle, uint32 nNativeKeyCode, EHTMLKeyModifiers eHTMLKeyModifiers, bool bIsSystemKey)
     * }
     */
    public static void SteamAPI_ISteamHTMLSurface_KeyDown(int unBrowserHandle, int nNativeKeyCode, int eHTMLKeyModifiers, boolean bIsSystemKey) {
        var mh$ = SteamAPI_ISteamHTMLSurface_KeyDown.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTMLSurface_KeyDown", unBrowserHandle, nNativeKeyCode, eHTMLKeyModifiers, bIsSystemKey);
            }
            mh$.invokeExact(unBrowserHandle, nNativeKeyCode, eHTMLKeyModifiers, bIsSystemKey);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTMLSurface_KeyUp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamHTMLSurface_KeyUp"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_KeyUp(HHTMLBrowser unBrowserHandle, uint32 nNativeKeyCode, EHTMLKeyModifiers eHTMLKeyModifiers)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTMLSurface_KeyUp$descriptor() {
        return SteamAPI_ISteamHTMLSurface_KeyUp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_KeyUp(HHTMLBrowser unBrowserHandle, uint32 nNativeKeyCode, EHTMLKeyModifiers eHTMLKeyModifiers)
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTMLSurface_KeyUp$handle() {
        return SteamAPI_ISteamHTMLSurface_KeyUp.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_KeyUp(HHTMLBrowser unBrowserHandle, uint32 nNativeKeyCode, EHTMLKeyModifiers eHTMLKeyModifiers)
     * }
     */
    public static void SteamAPI_ISteamHTMLSurface_KeyUp(int unBrowserHandle, int nNativeKeyCode, int eHTMLKeyModifiers) {
        var mh$ = SteamAPI_ISteamHTMLSurface_KeyUp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTMLSurface_KeyUp", unBrowserHandle, nNativeKeyCode, eHTMLKeyModifiers);
            }
            mh$.invokeExact(unBrowserHandle, nNativeKeyCode, eHTMLKeyModifiers);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTMLSurface_KeyChar {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamHTMLSurface_KeyChar"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_KeyChar(HHTMLBrowser unBrowserHandle, uint32 cUnicodeChar, EHTMLKeyModifiers eHTMLKeyModifiers)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTMLSurface_KeyChar$descriptor() {
        return SteamAPI_ISteamHTMLSurface_KeyChar.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_KeyChar(HHTMLBrowser unBrowserHandle, uint32 cUnicodeChar, EHTMLKeyModifiers eHTMLKeyModifiers)
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTMLSurface_KeyChar$handle() {
        return SteamAPI_ISteamHTMLSurface_KeyChar.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_KeyChar(HHTMLBrowser unBrowserHandle, uint32 cUnicodeChar, EHTMLKeyModifiers eHTMLKeyModifiers)
     * }
     */
    public static void SteamAPI_ISteamHTMLSurface_KeyChar(int unBrowserHandle, int cUnicodeChar, int eHTMLKeyModifiers) {
        var mh$ = SteamAPI_ISteamHTMLSurface_KeyChar.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTMLSurface_KeyChar", unBrowserHandle, cUnicodeChar, eHTMLKeyModifiers);
            }
            mh$.invokeExact(unBrowserHandle, cUnicodeChar, eHTMLKeyModifiers);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTMLSurface_SetHorizontalScroll {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamHTMLSurface_SetHorizontalScroll"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_SetHorizontalScroll(HHTMLBrowser unBrowserHandle, uint32 nAbsolutePixelScroll)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTMLSurface_SetHorizontalScroll$descriptor() {
        return SteamAPI_ISteamHTMLSurface_SetHorizontalScroll.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_SetHorizontalScroll(HHTMLBrowser unBrowserHandle, uint32 nAbsolutePixelScroll)
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTMLSurface_SetHorizontalScroll$handle() {
        return SteamAPI_ISteamHTMLSurface_SetHorizontalScroll.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_SetHorizontalScroll(HHTMLBrowser unBrowserHandle, uint32 nAbsolutePixelScroll)
     * }
     */
    public static void SteamAPI_ISteamHTMLSurface_SetHorizontalScroll(int unBrowserHandle, int nAbsolutePixelScroll) {
        var mh$ = SteamAPI_ISteamHTMLSurface_SetHorizontalScroll.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTMLSurface_SetHorizontalScroll", unBrowserHandle, nAbsolutePixelScroll);
            }
            mh$.invokeExact(unBrowserHandle, nAbsolutePixelScroll);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTMLSurface_SetVerticalScroll {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamHTMLSurface_SetVerticalScroll"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_SetVerticalScroll(HHTMLBrowser unBrowserHandle, uint32 nAbsolutePixelScroll)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTMLSurface_SetVerticalScroll$descriptor() {
        return SteamAPI_ISteamHTMLSurface_SetVerticalScroll.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_SetVerticalScroll(HHTMLBrowser unBrowserHandle, uint32 nAbsolutePixelScroll)
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTMLSurface_SetVerticalScroll$handle() {
        return SteamAPI_ISteamHTMLSurface_SetVerticalScroll.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_SetVerticalScroll(HHTMLBrowser unBrowserHandle, uint32 nAbsolutePixelScroll)
     * }
     */
    public static void SteamAPI_ISteamHTMLSurface_SetVerticalScroll(int unBrowserHandle, int nAbsolutePixelScroll) {
        var mh$ = SteamAPI_ISteamHTMLSurface_SetVerticalScroll.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTMLSurface_SetVerticalScroll", unBrowserHandle, nAbsolutePixelScroll);
            }
            mh$.invokeExact(unBrowserHandle, nAbsolutePixelScroll);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTMLSurface_SetKeyFocus {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamHTMLSurface_SetKeyFocus"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_SetKeyFocus(HHTMLBrowser unBrowserHandle, bool bHasKeyFocus)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTMLSurface_SetKeyFocus$descriptor() {
        return SteamAPI_ISteamHTMLSurface_SetKeyFocus.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_SetKeyFocus(HHTMLBrowser unBrowserHandle, bool bHasKeyFocus)
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTMLSurface_SetKeyFocus$handle() {
        return SteamAPI_ISteamHTMLSurface_SetKeyFocus.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_SetKeyFocus(HHTMLBrowser unBrowserHandle, bool bHasKeyFocus)
     * }
     */
    public static void SteamAPI_ISteamHTMLSurface_SetKeyFocus(int unBrowserHandle, boolean bHasKeyFocus) {
        var mh$ = SteamAPI_ISteamHTMLSurface_SetKeyFocus.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTMLSurface_SetKeyFocus", unBrowserHandle, bHasKeyFocus);
            }
            mh$.invokeExact(unBrowserHandle, bHasKeyFocus);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTMLSurface_ViewSource {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamHTMLSurface_ViewSource"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_ViewSource(HHTMLBrowser unBrowserHandle)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTMLSurface_ViewSource$descriptor() {
        return SteamAPI_ISteamHTMLSurface_ViewSource.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_ViewSource(HHTMLBrowser unBrowserHandle)
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTMLSurface_ViewSource$handle() {
        return SteamAPI_ISteamHTMLSurface_ViewSource.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_ViewSource(HHTMLBrowser unBrowserHandle)
     * }
     */
    public static void SteamAPI_ISteamHTMLSurface_ViewSource(int unBrowserHandle) {
        var mh$ = SteamAPI_ISteamHTMLSurface_ViewSource.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTMLSurface_ViewSource", unBrowserHandle);
            }
            mh$.invokeExact(unBrowserHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTMLSurface_CopyToClipboard {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamHTMLSurface_CopyToClipboard"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_CopyToClipboard(HHTMLBrowser unBrowserHandle)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTMLSurface_CopyToClipboard$descriptor() {
        return SteamAPI_ISteamHTMLSurface_CopyToClipboard.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_CopyToClipboard(HHTMLBrowser unBrowserHandle)
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTMLSurface_CopyToClipboard$handle() {
        return SteamAPI_ISteamHTMLSurface_CopyToClipboard.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_CopyToClipboard(HHTMLBrowser unBrowserHandle)
     * }
     */
    public static void SteamAPI_ISteamHTMLSurface_CopyToClipboard(int unBrowserHandle) {
        var mh$ = SteamAPI_ISteamHTMLSurface_CopyToClipboard.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTMLSurface_CopyToClipboard", unBrowserHandle);
            }
            mh$.invokeExact(unBrowserHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTMLSurface_PasteFromClipboard {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamHTMLSurface_PasteFromClipboard"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_PasteFromClipboard(HHTMLBrowser unBrowserHandle)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTMLSurface_PasteFromClipboard$descriptor() {
        return SteamAPI_ISteamHTMLSurface_PasteFromClipboard.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_PasteFromClipboard(HHTMLBrowser unBrowserHandle)
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTMLSurface_PasteFromClipboard$handle() {
        return SteamAPI_ISteamHTMLSurface_PasteFromClipboard.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_PasteFromClipboard(HHTMLBrowser unBrowserHandle)
     * }
     */
    public static void SteamAPI_ISteamHTMLSurface_PasteFromClipboard(int unBrowserHandle) {
        var mh$ = SteamAPI_ISteamHTMLSurface_PasteFromClipboard.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTMLSurface_PasteFromClipboard", unBrowserHandle);
            }
            mh$.invokeExact(unBrowserHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTMLSurface_Find {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamHTMLSurface_Find"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_Find(HHTMLBrowser unBrowserHandle, const char *pchSearchStr, bool bCurrentlyInFind, bool bReverse)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTMLSurface_Find$descriptor() {
        return SteamAPI_ISteamHTMLSurface_Find.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_Find(HHTMLBrowser unBrowserHandle, const char *pchSearchStr, bool bCurrentlyInFind, bool bReverse)
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTMLSurface_Find$handle() {
        return SteamAPI_ISteamHTMLSurface_Find.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_Find(HHTMLBrowser unBrowserHandle, const char *pchSearchStr, bool bCurrentlyInFind, bool bReverse)
     * }
     */
    public static void SteamAPI_ISteamHTMLSurface_Find(int unBrowserHandle, MemorySegment pchSearchStr, boolean bCurrentlyInFind, boolean bReverse) {
        var mh$ = SteamAPI_ISteamHTMLSurface_Find.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTMLSurface_Find", unBrowserHandle, pchSearchStr, bCurrentlyInFind, bReverse);
            }
            mh$.invokeExact(unBrowserHandle, pchSearchStr, bCurrentlyInFind, bReverse);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTMLSurface_StopFind {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamHTMLSurface_StopFind"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_StopFind(HHTMLBrowser unBrowserHandle)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTMLSurface_StopFind$descriptor() {
        return SteamAPI_ISteamHTMLSurface_StopFind.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_StopFind(HHTMLBrowser unBrowserHandle)
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTMLSurface_StopFind$handle() {
        return SteamAPI_ISteamHTMLSurface_StopFind.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_StopFind(HHTMLBrowser unBrowserHandle)
     * }
     */
    public static void SteamAPI_ISteamHTMLSurface_StopFind(int unBrowserHandle) {
        var mh$ = SteamAPI_ISteamHTMLSurface_StopFind.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTMLSurface_StopFind", unBrowserHandle);
            }
            mh$.invokeExact(unBrowserHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTMLSurface_GetLinkAtPosition {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamHTMLSurface_GetLinkAtPosition"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_GetLinkAtPosition(HHTMLBrowser unBrowserHandle, int x, int y)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTMLSurface_GetLinkAtPosition$descriptor() {
        return SteamAPI_ISteamHTMLSurface_GetLinkAtPosition.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_GetLinkAtPosition(HHTMLBrowser unBrowserHandle, int x, int y)
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTMLSurface_GetLinkAtPosition$handle() {
        return SteamAPI_ISteamHTMLSurface_GetLinkAtPosition.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_GetLinkAtPosition(HHTMLBrowser unBrowserHandle, int x, int y)
     * }
     */
    public static void SteamAPI_ISteamHTMLSurface_GetLinkAtPosition(int unBrowserHandle, int x, int y) {
        var mh$ = SteamAPI_ISteamHTMLSurface_GetLinkAtPosition.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTMLSurface_GetLinkAtPosition", unBrowserHandle, x, y);
            }
            mh$.invokeExact(unBrowserHandle, x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTMLSurface_SetCookie {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamHTMLSurface_SetCookie"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_SetCookie(const char *pchHostname, const char *pchKey, const char *pchValue, const char *pchPath, RTime32 nExpires, bool bSecure, bool bHTTPOnly)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTMLSurface_SetCookie$descriptor() {
        return SteamAPI_ISteamHTMLSurface_SetCookie.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_SetCookie(const char *pchHostname, const char *pchKey, const char *pchValue, const char *pchPath, RTime32 nExpires, bool bSecure, bool bHTTPOnly)
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTMLSurface_SetCookie$handle() {
        return SteamAPI_ISteamHTMLSurface_SetCookie.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_SetCookie(const char *pchHostname, const char *pchKey, const char *pchValue, const char *pchPath, RTime32 nExpires, bool bSecure, bool bHTTPOnly)
     * }
     */
    public static void SteamAPI_ISteamHTMLSurface_SetCookie(MemorySegment pchHostname, MemorySegment pchKey, MemorySegment pchValue, MemorySegment pchPath, int nExpires, boolean bSecure, boolean bHTTPOnly) {
        var mh$ = SteamAPI_ISteamHTMLSurface_SetCookie.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTMLSurface_SetCookie", pchHostname, pchKey, pchValue, pchPath, nExpires, bSecure, bHTTPOnly);
            }
            mh$.invokeExact(pchHostname, pchKey, pchValue, pchPath, nExpires, bSecure, bHTTPOnly);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTMLSurface_SetPageScaleFactor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_FLOAT,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamHTMLSurface_SetPageScaleFactor"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_SetPageScaleFactor(HHTMLBrowser unBrowserHandle, float flZoom, int nPointX, int nPointY)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTMLSurface_SetPageScaleFactor$descriptor() {
        return SteamAPI_ISteamHTMLSurface_SetPageScaleFactor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_SetPageScaleFactor(HHTMLBrowser unBrowserHandle, float flZoom, int nPointX, int nPointY)
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTMLSurface_SetPageScaleFactor$handle() {
        return SteamAPI_ISteamHTMLSurface_SetPageScaleFactor.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_SetPageScaleFactor(HHTMLBrowser unBrowserHandle, float flZoom, int nPointX, int nPointY)
     * }
     */
    public static void SteamAPI_ISteamHTMLSurface_SetPageScaleFactor(int unBrowserHandle, float flZoom, int nPointX, int nPointY) {
        var mh$ = SteamAPI_ISteamHTMLSurface_SetPageScaleFactor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTMLSurface_SetPageScaleFactor", unBrowserHandle, flZoom, nPointX, nPointY);
            }
            mh$.invokeExact(unBrowserHandle, flZoom, nPointX, nPointY);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTMLSurface_SetBackgroundMode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamHTMLSurface_SetBackgroundMode"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_SetBackgroundMode(HHTMLBrowser unBrowserHandle, bool bBackgroundMode)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTMLSurface_SetBackgroundMode$descriptor() {
        return SteamAPI_ISteamHTMLSurface_SetBackgroundMode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_SetBackgroundMode(HHTMLBrowser unBrowserHandle, bool bBackgroundMode)
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTMLSurface_SetBackgroundMode$handle() {
        return SteamAPI_ISteamHTMLSurface_SetBackgroundMode.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_SetBackgroundMode(HHTMLBrowser unBrowserHandle, bool bBackgroundMode)
     * }
     */
    public static void SteamAPI_ISteamHTMLSurface_SetBackgroundMode(int unBrowserHandle, boolean bBackgroundMode) {
        var mh$ = SteamAPI_ISteamHTMLSurface_SetBackgroundMode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTMLSurface_SetBackgroundMode", unBrowserHandle, bBackgroundMode);
            }
            mh$.invokeExact(unBrowserHandle, bBackgroundMode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTMLSurface_SetDPIScalingFactor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_FLOAT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamHTMLSurface_SetDPIScalingFactor"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_SetDPIScalingFactor(HHTMLBrowser unBrowserHandle, float flDPIScaling)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTMLSurface_SetDPIScalingFactor$descriptor() {
        return SteamAPI_ISteamHTMLSurface_SetDPIScalingFactor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_SetDPIScalingFactor(HHTMLBrowser unBrowserHandle, float flDPIScaling)
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTMLSurface_SetDPIScalingFactor$handle() {
        return SteamAPI_ISteamHTMLSurface_SetDPIScalingFactor.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_SetDPIScalingFactor(HHTMLBrowser unBrowserHandle, float flDPIScaling)
     * }
     */
    public static void SteamAPI_ISteamHTMLSurface_SetDPIScalingFactor(int unBrowserHandle, float flDPIScaling) {
        var mh$ = SteamAPI_ISteamHTMLSurface_SetDPIScalingFactor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTMLSurface_SetDPIScalingFactor", unBrowserHandle, flDPIScaling);
            }
            mh$.invokeExact(unBrowserHandle, flDPIScaling);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTMLSurface_OpenDeveloperTools {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamHTMLSurface_OpenDeveloperTools"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_OpenDeveloperTools(HHTMLBrowser unBrowserHandle)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTMLSurface_OpenDeveloperTools$descriptor() {
        return SteamAPI_ISteamHTMLSurface_OpenDeveloperTools.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_OpenDeveloperTools(HHTMLBrowser unBrowserHandle)
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTMLSurface_OpenDeveloperTools$handle() {
        return SteamAPI_ISteamHTMLSurface_OpenDeveloperTools.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_OpenDeveloperTools(HHTMLBrowser unBrowserHandle)
     * }
     */
    public static void SteamAPI_ISteamHTMLSurface_OpenDeveloperTools(int unBrowserHandle) {
        var mh$ = SteamAPI_ISteamHTMLSurface_OpenDeveloperTools.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTMLSurface_OpenDeveloperTools", unBrowserHandle);
            }
            mh$.invokeExact(unBrowserHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTMLSurface_AllowStartRequest {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamHTMLSurface_AllowStartRequest"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_AllowStartRequest(HHTMLBrowser unBrowserHandle, bool bAllowed)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTMLSurface_AllowStartRequest$descriptor() {
        return SteamAPI_ISteamHTMLSurface_AllowStartRequest.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_AllowStartRequest(HHTMLBrowser unBrowserHandle, bool bAllowed)
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTMLSurface_AllowStartRequest$handle() {
        return SteamAPI_ISteamHTMLSurface_AllowStartRequest.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_AllowStartRequest(HHTMLBrowser unBrowserHandle, bool bAllowed)
     * }
     */
    public static void SteamAPI_ISteamHTMLSurface_AllowStartRequest(int unBrowserHandle, boolean bAllowed) {
        var mh$ = SteamAPI_ISteamHTMLSurface_AllowStartRequest.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTMLSurface_AllowStartRequest", unBrowserHandle, bAllowed);
            }
            mh$.invokeExact(unBrowserHandle, bAllowed);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTMLSurface_JSDialogResponse {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamHTMLSurface_JSDialogResponse"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_JSDialogResponse(HHTMLBrowser unBrowserHandle, bool bResult)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTMLSurface_JSDialogResponse$descriptor() {
        return SteamAPI_ISteamHTMLSurface_JSDialogResponse.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_JSDialogResponse(HHTMLBrowser unBrowserHandle, bool bResult)
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTMLSurface_JSDialogResponse$handle() {
        return SteamAPI_ISteamHTMLSurface_JSDialogResponse.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_JSDialogResponse(HHTMLBrowser unBrowserHandle, bool bResult)
     * }
     */
    public static void SteamAPI_ISteamHTMLSurface_JSDialogResponse(int unBrowserHandle, boolean bResult) {
        var mh$ = SteamAPI_ISteamHTMLSurface_JSDialogResponse.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTMLSurface_JSDialogResponse", unBrowserHandle, bResult);
            }
            mh$.invokeExact(unBrowserHandle, bResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamHTMLSurface_FileLoadDialogResponse {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamHTMLSurface_FileLoadDialogResponse"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_FileLoadDialogResponse(HHTMLBrowser unBrowserHandle, const char **pchSelectedFiles)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamHTMLSurface_FileLoadDialogResponse$descriptor() {
        return SteamAPI_ISteamHTMLSurface_FileLoadDialogResponse.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_FileLoadDialogResponse(HHTMLBrowser unBrowserHandle, const char **pchSelectedFiles)
     * }
     */
    public static MethodHandle SteamAPI_ISteamHTMLSurface_FileLoadDialogResponse$handle() {
        return SteamAPI_ISteamHTMLSurface_FileLoadDialogResponse.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamHTMLSurface_FileLoadDialogResponse(HHTMLBrowser unBrowserHandle, const char **pchSelectedFiles)
     * }
     */
    public static void SteamAPI_ISteamHTMLSurface_FileLoadDialogResponse(int unBrowserHandle, MemorySegment pchSelectedFiles) {
        var mh$ = SteamAPI_ISteamHTMLSurface_FileLoadDialogResponse.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamHTMLSurface_FileLoadDialogResponse", unBrowserHandle, pchSelectedFiles);
            }
            mh$.invokeExact(unBrowserHandle, pchSelectedFiles);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInventory_GetResultStatus {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamInventory_GetResultStatus"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * EResult SteamAPI_ISteamInventory_GetResultStatus(SteamInventoryResult_t resultHandle)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInventory_GetResultStatus$descriptor() {
        return SteamAPI_ISteamInventory_GetResultStatus.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * EResult SteamAPI_ISteamInventory_GetResultStatus(SteamInventoryResult_t resultHandle)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInventory_GetResultStatus$handle() {
        return SteamAPI_ISteamInventory_GetResultStatus.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * EResult SteamAPI_ISteamInventory_GetResultStatus(SteamInventoryResult_t resultHandle)
     * }
     */
    public static int SteamAPI_ISteamInventory_GetResultStatus(int resultHandle) {
        var mh$ = SteamAPI_ISteamInventory_GetResultStatus.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInventory_GetResultStatus", resultHandle);
            }
            return (int)mh$.invokeExact(resultHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInventory_GetResultItems {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamInventory_GetResultItems"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_GetResultItems(SteamInventoryResult_t resultHandle, SteamItemDetails_t *pOutItemsArray, uint32 *punOutItemsArraySize)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInventory_GetResultItems$descriptor() {
        return SteamAPI_ISteamInventory_GetResultItems.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_GetResultItems(SteamInventoryResult_t resultHandle, SteamItemDetails_t *pOutItemsArray, uint32 *punOutItemsArraySize)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInventory_GetResultItems$handle() {
        return SteamAPI_ISteamInventory_GetResultItems.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_GetResultItems(SteamInventoryResult_t resultHandle, SteamItemDetails_t *pOutItemsArray, uint32 *punOutItemsArraySize)
     * }
     */
    public static boolean SteamAPI_ISteamInventory_GetResultItems(int resultHandle, MemorySegment pOutItemsArray, MemorySegment punOutItemsArraySize) {
        var mh$ = SteamAPI_ISteamInventory_GetResultItems.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInventory_GetResultItems", resultHandle, pOutItemsArray, punOutItemsArraySize);
            }
            return (boolean)mh$.invokeExact(resultHandle, pOutItemsArray, punOutItemsArraySize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInventory_GetResultItemProperty {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamInventory_GetResultItemProperty"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_GetResultItemProperty(SteamInventoryResult_t resultHandle, uint32 unItemIndex, const char *pchPropertyName, char *pchValueBuffer, uint32 *punValueBufferSizeOut)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInventory_GetResultItemProperty$descriptor() {
        return SteamAPI_ISteamInventory_GetResultItemProperty.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_GetResultItemProperty(SteamInventoryResult_t resultHandle, uint32 unItemIndex, const char *pchPropertyName, char *pchValueBuffer, uint32 *punValueBufferSizeOut)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInventory_GetResultItemProperty$handle() {
        return SteamAPI_ISteamInventory_GetResultItemProperty.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_GetResultItemProperty(SteamInventoryResult_t resultHandle, uint32 unItemIndex, const char *pchPropertyName, char *pchValueBuffer, uint32 *punValueBufferSizeOut)
     * }
     */
    public static boolean SteamAPI_ISteamInventory_GetResultItemProperty(int resultHandle, int unItemIndex, MemorySegment pchPropertyName, MemorySegment pchValueBuffer, MemorySegment punValueBufferSizeOut) {
        var mh$ = SteamAPI_ISteamInventory_GetResultItemProperty.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInventory_GetResultItemProperty", resultHandle, unItemIndex, pchPropertyName, pchValueBuffer, punValueBufferSizeOut);
            }
            return (boolean)mh$.invokeExact(resultHandle, unItemIndex, pchPropertyName, pchValueBuffer, punValueBufferSizeOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInventory_GetResultTimestamp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamInventory_GetResultTimestamp"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamInventory_GetResultTimestamp(SteamInventoryResult_t resultHandle)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInventory_GetResultTimestamp$descriptor() {
        return SteamAPI_ISteamInventory_GetResultTimestamp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamInventory_GetResultTimestamp(SteamInventoryResult_t resultHandle)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInventory_GetResultTimestamp$handle() {
        return SteamAPI_ISteamInventory_GetResultTimestamp.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamInventory_GetResultTimestamp(SteamInventoryResult_t resultHandle)
     * }
     */
    public static int SteamAPI_ISteamInventory_GetResultTimestamp(int resultHandle) {
        var mh$ = SteamAPI_ISteamInventory_GetResultTimestamp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInventory_GetResultTimestamp", resultHandle);
            }
            return (int)mh$.invokeExact(resultHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInventory_CheckResultSteamID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamInventory_CheckResultSteamID"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_CheckResultSteamID(SteamInventoryResult_t resultHandle, uint64_steamid steamIDExpected)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInventory_CheckResultSteamID$descriptor() {
        return SteamAPI_ISteamInventory_CheckResultSteamID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_CheckResultSteamID(SteamInventoryResult_t resultHandle, uint64_steamid steamIDExpected)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInventory_CheckResultSteamID$handle() {
        return SteamAPI_ISteamInventory_CheckResultSteamID.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_CheckResultSteamID(SteamInventoryResult_t resultHandle, uint64_steamid steamIDExpected)
     * }
     */
    public static boolean SteamAPI_ISteamInventory_CheckResultSteamID(int resultHandle, long steamIDExpected) {
        var mh$ = SteamAPI_ISteamInventory_CheckResultSteamID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInventory_CheckResultSteamID", resultHandle, steamIDExpected);
            }
            return (boolean)mh$.invokeExact(resultHandle, steamIDExpected);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInventory_DestroyResult {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamInventory_DestroyResult"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamInventory_DestroyResult(SteamInventoryResult_t resultHandle)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInventory_DestroyResult$descriptor() {
        return SteamAPI_ISteamInventory_DestroyResult.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamInventory_DestroyResult(SteamInventoryResult_t resultHandle)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInventory_DestroyResult$handle() {
        return SteamAPI_ISteamInventory_DestroyResult.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamInventory_DestroyResult(SteamInventoryResult_t resultHandle)
     * }
     */
    public static void SteamAPI_ISteamInventory_DestroyResult(int resultHandle) {
        var mh$ = SteamAPI_ISteamInventory_DestroyResult.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInventory_DestroyResult", resultHandle);
            }
            mh$.invokeExact(resultHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInventory_GetAllItems {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamInventory_GetAllItems"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_GetAllItems(SteamInventoryResult_t *pResultHandle)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInventory_GetAllItems$descriptor() {
        return SteamAPI_ISteamInventory_GetAllItems.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_GetAllItems(SteamInventoryResult_t *pResultHandle)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInventory_GetAllItems$handle() {
        return SteamAPI_ISteamInventory_GetAllItems.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_GetAllItems(SteamInventoryResult_t *pResultHandle)
     * }
     */
    public static boolean SteamAPI_ISteamInventory_GetAllItems(MemorySegment pResultHandle) {
        var mh$ = SteamAPI_ISteamInventory_GetAllItems.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInventory_GetAllItems", pResultHandle);
            }
            return (boolean)mh$.invokeExact(pResultHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInventory_GetItemsByID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamInventory_GetItemsByID"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_GetItemsByID(SteamInventoryResult_t *pResultHandle, const SteamItemInstanceID_t *pInstanceIDs, uint32 unCountInstanceIDs)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInventory_GetItemsByID$descriptor() {
        return SteamAPI_ISteamInventory_GetItemsByID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_GetItemsByID(SteamInventoryResult_t *pResultHandle, const SteamItemInstanceID_t *pInstanceIDs, uint32 unCountInstanceIDs)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInventory_GetItemsByID$handle() {
        return SteamAPI_ISteamInventory_GetItemsByID.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_GetItemsByID(SteamInventoryResult_t *pResultHandle, const SteamItemInstanceID_t *pInstanceIDs, uint32 unCountInstanceIDs)
     * }
     */
    public static boolean SteamAPI_ISteamInventory_GetItemsByID(MemorySegment pResultHandle, MemorySegment pInstanceIDs, int unCountInstanceIDs) {
        var mh$ = SteamAPI_ISteamInventory_GetItemsByID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInventory_GetItemsByID", pResultHandle, pInstanceIDs, unCountInstanceIDs);
            }
            return (boolean)mh$.invokeExact(pResultHandle, pInstanceIDs, unCountInstanceIDs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInventory_SerializeResult {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamInventory_SerializeResult"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_SerializeResult(SteamInventoryResult_t resultHandle, void *pOutBuffer, uint32 *punOutBufferSize)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInventory_SerializeResult$descriptor() {
        return SteamAPI_ISteamInventory_SerializeResult.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_SerializeResult(SteamInventoryResult_t resultHandle, void *pOutBuffer, uint32 *punOutBufferSize)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInventory_SerializeResult$handle() {
        return SteamAPI_ISteamInventory_SerializeResult.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_SerializeResult(SteamInventoryResult_t resultHandle, void *pOutBuffer, uint32 *punOutBufferSize)
     * }
     */
    public static boolean SteamAPI_ISteamInventory_SerializeResult(int resultHandle, MemorySegment pOutBuffer, MemorySegment punOutBufferSize) {
        var mh$ = SteamAPI_ISteamInventory_SerializeResult.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInventory_SerializeResult", resultHandle, pOutBuffer, punOutBufferSize);
            }
            return (boolean)mh$.invokeExact(resultHandle, pOutBuffer, punOutBufferSize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInventory_DeserializeResult {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamInventory_DeserializeResult"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_DeserializeResult(SteamInventoryResult_t *pOutResultHandle, const void *pBuffer, uint32 unBufferSize, bool bRESERVED_MUST_BE_FALSE)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInventory_DeserializeResult$descriptor() {
        return SteamAPI_ISteamInventory_DeserializeResult.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_DeserializeResult(SteamInventoryResult_t *pOutResultHandle, const void *pBuffer, uint32 unBufferSize, bool bRESERVED_MUST_BE_FALSE)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInventory_DeserializeResult$handle() {
        return SteamAPI_ISteamInventory_DeserializeResult.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_DeserializeResult(SteamInventoryResult_t *pOutResultHandle, const void *pBuffer, uint32 unBufferSize, bool bRESERVED_MUST_BE_FALSE)
     * }
     */
    public static boolean SteamAPI_ISteamInventory_DeserializeResult(MemorySegment pOutResultHandle, MemorySegment pBuffer, int unBufferSize, boolean bRESERVED_MUST_BE_FALSE) {
        var mh$ = SteamAPI_ISteamInventory_DeserializeResult.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInventory_DeserializeResult", pOutResultHandle, pBuffer, unBufferSize, bRESERVED_MUST_BE_FALSE);
            }
            return (boolean)mh$.invokeExact(pOutResultHandle, pBuffer, unBufferSize, bRESERVED_MUST_BE_FALSE);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInventory_GenerateItems {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamInventory_GenerateItems"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_GenerateItems(SteamInventoryResult_t *pResultHandle, const SteamItemDef_t *pArrayItemDefs, const uint32 *punArrayQuantity, uint32 unArrayLength)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInventory_GenerateItems$descriptor() {
        return SteamAPI_ISteamInventory_GenerateItems.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_GenerateItems(SteamInventoryResult_t *pResultHandle, const SteamItemDef_t *pArrayItemDefs, const uint32 *punArrayQuantity, uint32 unArrayLength)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInventory_GenerateItems$handle() {
        return SteamAPI_ISteamInventory_GenerateItems.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_GenerateItems(SteamInventoryResult_t *pResultHandle, const SteamItemDef_t *pArrayItemDefs, const uint32 *punArrayQuantity, uint32 unArrayLength)
     * }
     */
    public static boolean SteamAPI_ISteamInventory_GenerateItems(MemorySegment pResultHandle, MemorySegment pArrayItemDefs, MemorySegment punArrayQuantity, int unArrayLength) {
        var mh$ = SteamAPI_ISteamInventory_GenerateItems.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInventory_GenerateItems", pResultHandle, pArrayItemDefs, punArrayQuantity, unArrayLength);
            }
            return (boolean)mh$.invokeExact(pResultHandle, pArrayItemDefs, punArrayQuantity, unArrayLength);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInventory_GrantPromoItems {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamInventory_GrantPromoItems"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_GrantPromoItems(SteamInventoryResult_t *pResultHandle)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInventory_GrantPromoItems$descriptor() {
        return SteamAPI_ISteamInventory_GrantPromoItems.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_GrantPromoItems(SteamInventoryResult_t *pResultHandle)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInventory_GrantPromoItems$handle() {
        return SteamAPI_ISteamInventory_GrantPromoItems.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_GrantPromoItems(SteamInventoryResult_t *pResultHandle)
     * }
     */
    public static boolean SteamAPI_ISteamInventory_GrantPromoItems(MemorySegment pResultHandle) {
        var mh$ = SteamAPI_ISteamInventory_GrantPromoItems.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInventory_GrantPromoItems", pResultHandle);
            }
            return (boolean)mh$.invokeExact(pResultHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInventory_AddPromoItem {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamInventory_AddPromoItem"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_AddPromoItem(SteamInventoryResult_t *pResultHandle, SteamItemDef_t itemDef)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInventory_AddPromoItem$descriptor() {
        return SteamAPI_ISteamInventory_AddPromoItem.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_AddPromoItem(SteamInventoryResult_t *pResultHandle, SteamItemDef_t itemDef)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInventory_AddPromoItem$handle() {
        return SteamAPI_ISteamInventory_AddPromoItem.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_AddPromoItem(SteamInventoryResult_t *pResultHandle, SteamItemDef_t itemDef)
     * }
     */
    public static boolean SteamAPI_ISteamInventory_AddPromoItem(MemorySegment pResultHandle, int itemDef) {
        var mh$ = SteamAPI_ISteamInventory_AddPromoItem.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInventory_AddPromoItem", pResultHandle, itemDef);
            }
            return (boolean)mh$.invokeExact(pResultHandle, itemDef);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInventory_AddPromoItems {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamInventory_AddPromoItems"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_AddPromoItems(SteamInventoryResult_t *pResultHandle, const SteamItemDef_t *pArrayItemDefs, uint32 unArrayLength)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInventory_AddPromoItems$descriptor() {
        return SteamAPI_ISteamInventory_AddPromoItems.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_AddPromoItems(SteamInventoryResult_t *pResultHandle, const SteamItemDef_t *pArrayItemDefs, uint32 unArrayLength)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInventory_AddPromoItems$handle() {
        return SteamAPI_ISteamInventory_AddPromoItems.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_AddPromoItems(SteamInventoryResult_t *pResultHandle, const SteamItemDef_t *pArrayItemDefs, uint32 unArrayLength)
     * }
     */
    public static boolean SteamAPI_ISteamInventory_AddPromoItems(MemorySegment pResultHandle, MemorySegment pArrayItemDefs, int unArrayLength) {
        var mh$ = SteamAPI_ISteamInventory_AddPromoItems.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInventory_AddPromoItems", pResultHandle, pArrayItemDefs, unArrayLength);
            }
            return (boolean)mh$.invokeExact(pResultHandle, pArrayItemDefs, unArrayLength);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInventory_ConsumeItem {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamInventory_ConsumeItem"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_ConsumeItem(SteamInventoryResult_t *pResultHandle, SteamItemInstanceID_t itemConsume, uint32 unQuantity)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInventory_ConsumeItem$descriptor() {
        return SteamAPI_ISteamInventory_ConsumeItem.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_ConsumeItem(SteamInventoryResult_t *pResultHandle, SteamItemInstanceID_t itemConsume, uint32 unQuantity)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInventory_ConsumeItem$handle() {
        return SteamAPI_ISteamInventory_ConsumeItem.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_ConsumeItem(SteamInventoryResult_t *pResultHandle, SteamItemInstanceID_t itemConsume, uint32 unQuantity)
     * }
     */
    public static boolean SteamAPI_ISteamInventory_ConsumeItem(MemorySegment pResultHandle, long itemConsume, int unQuantity) {
        var mh$ = SteamAPI_ISteamInventory_ConsumeItem.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInventory_ConsumeItem", pResultHandle, itemConsume, unQuantity);
            }
            return (boolean)mh$.invokeExact(pResultHandle, itemConsume, unQuantity);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInventory_ExchangeItems {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamInventory_ExchangeItems"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_ExchangeItems(SteamInventoryResult_t *pResultHandle, const SteamItemDef_t *pArrayGenerate, const uint32 *punArrayGenerateQuantity, uint32 unArrayGenerateLength, const SteamItemInstanceID_t *pArrayDestroy, const uint32 *punArrayDestroyQuantity, uint32 unArrayDestroyLength)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInventory_ExchangeItems$descriptor() {
        return SteamAPI_ISteamInventory_ExchangeItems.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_ExchangeItems(SteamInventoryResult_t *pResultHandle, const SteamItemDef_t *pArrayGenerate, const uint32 *punArrayGenerateQuantity, uint32 unArrayGenerateLength, const SteamItemInstanceID_t *pArrayDestroy, const uint32 *punArrayDestroyQuantity, uint32 unArrayDestroyLength)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInventory_ExchangeItems$handle() {
        return SteamAPI_ISteamInventory_ExchangeItems.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_ExchangeItems(SteamInventoryResult_t *pResultHandle, const SteamItemDef_t *pArrayGenerate, const uint32 *punArrayGenerateQuantity, uint32 unArrayGenerateLength, const SteamItemInstanceID_t *pArrayDestroy, const uint32 *punArrayDestroyQuantity, uint32 unArrayDestroyLength)
     * }
     */
    public static boolean SteamAPI_ISteamInventory_ExchangeItems(MemorySegment pResultHandle, MemorySegment pArrayGenerate, MemorySegment punArrayGenerateQuantity, int unArrayGenerateLength, MemorySegment pArrayDestroy, MemorySegment punArrayDestroyQuantity, int unArrayDestroyLength) {
        var mh$ = SteamAPI_ISteamInventory_ExchangeItems.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInventory_ExchangeItems", pResultHandle, pArrayGenerate, punArrayGenerateQuantity, unArrayGenerateLength, pArrayDestroy, punArrayDestroyQuantity, unArrayDestroyLength);
            }
            return (boolean)mh$.invokeExact(pResultHandle, pArrayGenerate, punArrayGenerateQuantity, unArrayGenerateLength, pArrayDestroy, punArrayDestroyQuantity, unArrayDestroyLength);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInventory_TransferItemQuantity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamInventory_TransferItemQuantity"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_TransferItemQuantity(SteamInventoryResult_t *pResultHandle, SteamItemInstanceID_t itemIdSource, uint32 unQuantity, SteamItemInstanceID_t itemIdDest)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInventory_TransferItemQuantity$descriptor() {
        return SteamAPI_ISteamInventory_TransferItemQuantity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_TransferItemQuantity(SteamInventoryResult_t *pResultHandle, SteamItemInstanceID_t itemIdSource, uint32 unQuantity, SteamItemInstanceID_t itemIdDest)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInventory_TransferItemQuantity$handle() {
        return SteamAPI_ISteamInventory_TransferItemQuantity.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_TransferItemQuantity(SteamInventoryResult_t *pResultHandle, SteamItemInstanceID_t itemIdSource, uint32 unQuantity, SteamItemInstanceID_t itemIdDest)
     * }
     */
    public static boolean SteamAPI_ISteamInventory_TransferItemQuantity(MemorySegment pResultHandle, long itemIdSource, int unQuantity, long itemIdDest) {
        var mh$ = SteamAPI_ISteamInventory_TransferItemQuantity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInventory_TransferItemQuantity", pResultHandle, itemIdSource, unQuantity, itemIdDest);
            }
            return (boolean)mh$.invokeExact(pResultHandle, itemIdSource, unQuantity, itemIdDest);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInventory_SendItemDropHeartbeat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamInventory_SendItemDropHeartbeat"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamInventory_SendItemDropHeartbeat()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInventory_SendItemDropHeartbeat$descriptor() {
        return SteamAPI_ISteamInventory_SendItemDropHeartbeat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamInventory_SendItemDropHeartbeat()
     * }
     */
    public static MethodHandle SteamAPI_ISteamInventory_SendItemDropHeartbeat$handle() {
        return SteamAPI_ISteamInventory_SendItemDropHeartbeat.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamInventory_SendItemDropHeartbeat()
     * }
     */
    public static void SteamAPI_ISteamInventory_SendItemDropHeartbeat() {
        var mh$ = SteamAPI_ISteamInventory_SendItemDropHeartbeat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInventory_SendItemDropHeartbeat");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInventory_TriggerItemDrop {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamInventory_TriggerItemDrop"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_TriggerItemDrop(SteamInventoryResult_t *pResultHandle, SteamItemDef_t dropListDefinition)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInventory_TriggerItemDrop$descriptor() {
        return SteamAPI_ISteamInventory_TriggerItemDrop.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_TriggerItemDrop(SteamInventoryResult_t *pResultHandle, SteamItemDef_t dropListDefinition)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInventory_TriggerItemDrop$handle() {
        return SteamAPI_ISteamInventory_TriggerItemDrop.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_TriggerItemDrop(SteamInventoryResult_t *pResultHandle, SteamItemDef_t dropListDefinition)
     * }
     */
    public static boolean SteamAPI_ISteamInventory_TriggerItemDrop(MemorySegment pResultHandle, int dropListDefinition) {
        var mh$ = SteamAPI_ISteamInventory_TriggerItemDrop.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInventory_TriggerItemDrop", pResultHandle, dropListDefinition);
            }
            return (boolean)mh$.invokeExact(pResultHandle, dropListDefinition);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInventory_TradeItems {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamInventory_TradeItems"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_TradeItems(SteamInventoryResult_t *pResultHandle, uint64_steamid steamIDTradePartner, const SteamItemInstanceID_t *pArrayGive, const uint32 *pArrayGiveQuantity, uint32 nArrayGiveLength, const SteamItemInstanceID_t *pArrayGet, const uint32 *pArrayGetQuantity, uint32 nArrayGetLength)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInventory_TradeItems$descriptor() {
        return SteamAPI_ISteamInventory_TradeItems.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_TradeItems(SteamInventoryResult_t *pResultHandle, uint64_steamid steamIDTradePartner, const SteamItemInstanceID_t *pArrayGive, const uint32 *pArrayGiveQuantity, uint32 nArrayGiveLength, const SteamItemInstanceID_t *pArrayGet, const uint32 *pArrayGetQuantity, uint32 nArrayGetLength)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInventory_TradeItems$handle() {
        return SteamAPI_ISteamInventory_TradeItems.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_TradeItems(SteamInventoryResult_t *pResultHandle, uint64_steamid steamIDTradePartner, const SteamItemInstanceID_t *pArrayGive, const uint32 *pArrayGiveQuantity, uint32 nArrayGiveLength, const SteamItemInstanceID_t *pArrayGet, const uint32 *pArrayGetQuantity, uint32 nArrayGetLength)
     * }
     */
    public static boolean SteamAPI_ISteamInventory_TradeItems(MemorySegment pResultHandle, long steamIDTradePartner, MemorySegment pArrayGive, MemorySegment pArrayGiveQuantity, int nArrayGiveLength, MemorySegment pArrayGet, MemorySegment pArrayGetQuantity, int nArrayGetLength) {
        var mh$ = SteamAPI_ISteamInventory_TradeItems.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInventory_TradeItems", pResultHandle, steamIDTradePartner, pArrayGive, pArrayGiveQuantity, nArrayGiveLength, pArrayGet, pArrayGetQuantity, nArrayGetLength);
            }
            return (boolean)mh$.invokeExact(pResultHandle, steamIDTradePartner, pArrayGive, pArrayGiveQuantity, nArrayGiveLength, pArrayGet, pArrayGetQuantity, nArrayGetLength);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInventory_LoadItemDefinitions {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamInventory_LoadItemDefinitions"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_LoadItemDefinitions()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInventory_LoadItemDefinitions$descriptor() {
        return SteamAPI_ISteamInventory_LoadItemDefinitions.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_LoadItemDefinitions()
     * }
     */
    public static MethodHandle SteamAPI_ISteamInventory_LoadItemDefinitions$handle() {
        return SteamAPI_ISteamInventory_LoadItemDefinitions.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_LoadItemDefinitions()
     * }
     */
    public static boolean SteamAPI_ISteamInventory_LoadItemDefinitions() {
        var mh$ = SteamAPI_ISteamInventory_LoadItemDefinitions.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInventory_LoadItemDefinitions");
            }
            return (boolean)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInventory_GetItemDefinitionIDs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamInventory_GetItemDefinitionIDs"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_GetItemDefinitionIDs(SteamItemDef_t *pItemDefIDs, uint32 *punItemDefIDsArraySize)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInventory_GetItemDefinitionIDs$descriptor() {
        return SteamAPI_ISteamInventory_GetItemDefinitionIDs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_GetItemDefinitionIDs(SteamItemDef_t *pItemDefIDs, uint32 *punItemDefIDsArraySize)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInventory_GetItemDefinitionIDs$handle() {
        return SteamAPI_ISteamInventory_GetItemDefinitionIDs.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_GetItemDefinitionIDs(SteamItemDef_t *pItemDefIDs, uint32 *punItemDefIDsArraySize)
     * }
     */
    public static boolean SteamAPI_ISteamInventory_GetItemDefinitionIDs(MemorySegment pItemDefIDs, MemorySegment punItemDefIDsArraySize) {
        var mh$ = SteamAPI_ISteamInventory_GetItemDefinitionIDs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInventory_GetItemDefinitionIDs", pItemDefIDs, punItemDefIDsArraySize);
            }
            return (boolean)mh$.invokeExact(pItemDefIDs, punItemDefIDsArraySize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInventory_GetItemDefinitionProperty {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamInventory_GetItemDefinitionProperty"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_GetItemDefinitionProperty(SteamItemDef_t iDefinition, const char *pchPropertyName, char *pchValueBuffer, uint32 *punValueBufferSizeOut)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInventory_GetItemDefinitionProperty$descriptor() {
        return SteamAPI_ISteamInventory_GetItemDefinitionProperty.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_GetItemDefinitionProperty(SteamItemDef_t iDefinition, const char *pchPropertyName, char *pchValueBuffer, uint32 *punValueBufferSizeOut)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInventory_GetItemDefinitionProperty$handle() {
        return SteamAPI_ISteamInventory_GetItemDefinitionProperty.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_GetItemDefinitionProperty(SteamItemDef_t iDefinition, const char *pchPropertyName, char *pchValueBuffer, uint32 *punValueBufferSizeOut)
     * }
     */
    public static boolean SteamAPI_ISteamInventory_GetItemDefinitionProperty(int iDefinition, MemorySegment pchPropertyName, MemorySegment pchValueBuffer, MemorySegment punValueBufferSizeOut) {
        var mh$ = SteamAPI_ISteamInventory_GetItemDefinitionProperty.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInventory_GetItemDefinitionProperty", iDefinition, pchPropertyName, pchValueBuffer, punValueBufferSizeOut);
            }
            return (boolean)mh$.invokeExact(iDefinition, pchPropertyName, pchValueBuffer, punValueBufferSizeOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInventory_RequestEligiblePromoItemDefinitionsIDs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamInventory_RequestEligiblePromoItemDefinitionsIDs"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamInventory_RequestEligiblePromoItemDefinitionsIDs(uint64_steamid steamID)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInventory_RequestEligiblePromoItemDefinitionsIDs$descriptor() {
        return SteamAPI_ISteamInventory_RequestEligiblePromoItemDefinitionsIDs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamInventory_RequestEligiblePromoItemDefinitionsIDs(uint64_steamid steamID)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInventory_RequestEligiblePromoItemDefinitionsIDs$handle() {
        return SteamAPI_ISteamInventory_RequestEligiblePromoItemDefinitionsIDs.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamInventory_RequestEligiblePromoItemDefinitionsIDs(uint64_steamid steamID)
     * }
     */
    public static long SteamAPI_ISteamInventory_RequestEligiblePromoItemDefinitionsIDs(long steamID) {
        var mh$ = SteamAPI_ISteamInventory_RequestEligiblePromoItemDefinitionsIDs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInventory_RequestEligiblePromoItemDefinitionsIDs", steamID);
            }
            return (long)mh$.invokeExact(steamID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInventory_GetEligiblePromoItemDefinitionIDs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamInventory_GetEligiblePromoItemDefinitionIDs"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_GetEligiblePromoItemDefinitionIDs(uint64_steamid steamID, SteamItemDef_t *pItemDefIDs, uint32 *punItemDefIDsArraySize)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInventory_GetEligiblePromoItemDefinitionIDs$descriptor() {
        return SteamAPI_ISteamInventory_GetEligiblePromoItemDefinitionIDs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_GetEligiblePromoItemDefinitionIDs(uint64_steamid steamID, SteamItemDef_t *pItemDefIDs, uint32 *punItemDefIDsArraySize)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInventory_GetEligiblePromoItemDefinitionIDs$handle() {
        return SteamAPI_ISteamInventory_GetEligiblePromoItemDefinitionIDs.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_GetEligiblePromoItemDefinitionIDs(uint64_steamid steamID, SteamItemDef_t *pItemDefIDs, uint32 *punItemDefIDsArraySize)
     * }
     */
    public static boolean SteamAPI_ISteamInventory_GetEligiblePromoItemDefinitionIDs(long steamID, MemorySegment pItemDefIDs, MemorySegment punItemDefIDsArraySize) {
        var mh$ = SteamAPI_ISteamInventory_GetEligiblePromoItemDefinitionIDs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInventory_GetEligiblePromoItemDefinitionIDs", steamID, pItemDefIDs, punItemDefIDsArraySize);
            }
            return (boolean)mh$.invokeExact(steamID, pItemDefIDs, punItemDefIDsArraySize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInventory_StartPurchase {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamInventory_StartPurchase"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamInventory_StartPurchase(const SteamItemDef_t *pArrayItemDefs, const uint32 *punArrayQuantity, uint32 unArrayLength)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInventory_StartPurchase$descriptor() {
        return SteamAPI_ISteamInventory_StartPurchase.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamInventory_StartPurchase(const SteamItemDef_t *pArrayItemDefs, const uint32 *punArrayQuantity, uint32 unArrayLength)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInventory_StartPurchase$handle() {
        return SteamAPI_ISteamInventory_StartPurchase.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamInventory_StartPurchase(const SteamItemDef_t *pArrayItemDefs, const uint32 *punArrayQuantity, uint32 unArrayLength)
     * }
     */
    public static long SteamAPI_ISteamInventory_StartPurchase(MemorySegment pArrayItemDefs, MemorySegment punArrayQuantity, int unArrayLength) {
        var mh$ = SteamAPI_ISteamInventory_StartPurchase.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInventory_StartPurchase", pArrayItemDefs, punArrayQuantity, unArrayLength);
            }
            return (long)mh$.invokeExact(pArrayItemDefs, punArrayQuantity, unArrayLength);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInventory_RequestPrices {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_LONG_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamInventory_RequestPrices"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamInventory_RequestPrices()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInventory_RequestPrices$descriptor() {
        return SteamAPI_ISteamInventory_RequestPrices.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamInventory_RequestPrices()
     * }
     */
    public static MethodHandle SteamAPI_ISteamInventory_RequestPrices$handle() {
        return SteamAPI_ISteamInventory_RequestPrices.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamInventory_RequestPrices()
     * }
     */
    public static long SteamAPI_ISteamInventory_RequestPrices() {
        var mh$ = SteamAPI_ISteamInventory_RequestPrices.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInventory_RequestPrices");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInventory_GetNumItemsWithPrices {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamInventory_GetNumItemsWithPrices"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamInventory_GetNumItemsWithPrices()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInventory_GetNumItemsWithPrices$descriptor() {
        return SteamAPI_ISteamInventory_GetNumItemsWithPrices.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamInventory_GetNumItemsWithPrices()
     * }
     */
    public static MethodHandle SteamAPI_ISteamInventory_GetNumItemsWithPrices$handle() {
        return SteamAPI_ISteamInventory_GetNumItemsWithPrices.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamInventory_GetNumItemsWithPrices()
     * }
     */
    public static int SteamAPI_ISteamInventory_GetNumItemsWithPrices() {
        var mh$ = SteamAPI_ISteamInventory_GetNumItemsWithPrices.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInventory_GetNumItemsWithPrices");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInventory_GetItemsWithPrices {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamInventory_GetItemsWithPrices"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_GetItemsWithPrices(SteamItemDef_t *pArrayItemDefs, uint64 *pCurrentPrices, uint64 *pBasePrices, uint32 unArrayLength)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInventory_GetItemsWithPrices$descriptor() {
        return SteamAPI_ISteamInventory_GetItemsWithPrices.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_GetItemsWithPrices(SteamItemDef_t *pArrayItemDefs, uint64 *pCurrentPrices, uint64 *pBasePrices, uint32 unArrayLength)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInventory_GetItemsWithPrices$handle() {
        return SteamAPI_ISteamInventory_GetItemsWithPrices.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_GetItemsWithPrices(SteamItemDef_t *pArrayItemDefs, uint64 *pCurrentPrices, uint64 *pBasePrices, uint32 unArrayLength)
     * }
     */
    public static boolean SteamAPI_ISteamInventory_GetItemsWithPrices(MemorySegment pArrayItemDefs, MemorySegment pCurrentPrices, MemorySegment pBasePrices, int unArrayLength) {
        var mh$ = SteamAPI_ISteamInventory_GetItemsWithPrices.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInventory_GetItemsWithPrices", pArrayItemDefs, pCurrentPrices, pBasePrices, unArrayLength);
            }
            return (boolean)mh$.invokeExact(pArrayItemDefs, pCurrentPrices, pBasePrices, unArrayLength);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInventory_GetItemPrice {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamInventory_GetItemPrice"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_GetItemPrice(SteamItemDef_t iDefinition, uint64 *pCurrentPrice, uint64 *pBasePrice)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInventory_GetItemPrice$descriptor() {
        return SteamAPI_ISteamInventory_GetItemPrice.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_GetItemPrice(SteamItemDef_t iDefinition, uint64 *pCurrentPrice, uint64 *pBasePrice)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInventory_GetItemPrice$handle() {
        return SteamAPI_ISteamInventory_GetItemPrice.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_GetItemPrice(SteamItemDef_t iDefinition, uint64 *pCurrentPrice, uint64 *pBasePrice)
     * }
     */
    public static boolean SteamAPI_ISteamInventory_GetItemPrice(int iDefinition, MemorySegment pCurrentPrice, MemorySegment pBasePrice) {
        var mh$ = SteamAPI_ISteamInventory_GetItemPrice.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInventory_GetItemPrice", iDefinition, pCurrentPrice, pBasePrice);
            }
            return (boolean)mh$.invokeExact(iDefinition, pCurrentPrice, pBasePrice);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInventory_StartUpdateProperties {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_LONG_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamInventory_StartUpdateProperties"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamInventoryUpdateHandle_t SteamAPI_ISteamInventory_StartUpdateProperties()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInventory_StartUpdateProperties$descriptor() {
        return SteamAPI_ISteamInventory_StartUpdateProperties.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamInventoryUpdateHandle_t SteamAPI_ISteamInventory_StartUpdateProperties()
     * }
     */
    public static MethodHandle SteamAPI_ISteamInventory_StartUpdateProperties$handle() {
        return SteamAPI_ISteamInventory_StartUpdateProperties.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamInventoryUpdateHandle_t SteamAPI_ISteamInventory_StartUpdateProperties()
     * }
     */
    public static long SteamAPI_ISteamInventory_StartUpdateProperties() {
        var mh$ = SteamAPI_ISteamInventory_StartUpdateProperties.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInventory_StartUpdateProperties");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInventory_RemoveProperty {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamInventory_RemoveProperty"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_RemoveProperty(SteamInventoryUpdateHandle_t handle, SteamItemInstanceID_t nItemID, const char *pchPropertyName)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInventory_RemoveProperty$descriptor() {
        return SteamAPI_ISteamInventory_RemoveProperty.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_RemoveProperty(SteamInventoryUpdateHandle_t handle, SteamItemInstanceID_t nItemID, const char *pchPropertyName)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInventory_RemoveProperty$handle() {
        return SteamAPI_ISteamInventory_RemoveProperty.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_RemoveProperty(SteamInventoryUpdateHandle_t handle, SteamItemInstanceID_t nItemID, const char *pchPropertyName)
     * }
     */
    public static boolean SteamAPI_ISteamInventory_RemoveProperty(long handle, long nItemID, MemorySegment pchPropertyName) {
        var mh$ = SteamAPI_ISteamInventory_RemoveProperty.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInventory_RemoveProperty", handle, nItemID, pchPropertyName);
            }
            return (boolean)mh$.invokeExact(handle, nItemID, pchPropertyName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInventory_SetPropertyString {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamInventory_SetPropertyString"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_SetPropertyString(SteamInventoryUpdateHandle_t handle, SteamItemInstanceID_t nItemID, const char *pchPropertyName, const char *pchPropertyValue)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInventory_SetPropertyString$descriptor() {
        return SteamAPI_ISteamInventory_SetPropertyString.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_SetPropertyString(SteamInventoryUpdateHandle_t handle, SteamItemInstanceID_t nItemID, const char *pchPropertyName, const char *pchPropertyValue)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInventory_SetPropertyString$handle() {
        return SteamAPI_ISteamInventory_SetPropertyString.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_SetPropertyString(SteamInventoryUpdateHandle_t handle, SteamItemInstanceID_t nItemID, const char *pchPropertyName, const char *pchPropertyValue)
     * }
     */
    public static boolean SteamAPI_ISteamInventory_SetPropertyString(long handle, long nItemID, MemorySegment pchPropertyName, MemorySegment pchPropertyValue) {
        var mh$ = SteamAPI_ISteamInventory_SetPropertyString.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInventory_SetPropertyString", handle, nItemID, pchPropertyName, pchPropertyValue);
            }
            return (boolean)mh$.invokeExact(handle, nItemID, pchPropertyName, pchPropertyValue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInventory_SetPropertyBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamInventory_SetPropertyBool"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_SetPropertyBool(SteamInventoryUpdateHandle_t handle, SteamItemInstanceID_t nItemID, const char *pchPropertyName, bool bValue)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInventory_SetPropertyBool$descriptor() {
        return SteamAPI_ISteamInventory_SetPropertyBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_SetPropertyBool(SteamInventoryUpdateHandle_t handle, SteamItemInstanceID_t nItemID, const char *pchPropertyName, bool bValue)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInventory_SetPropertyBool$handle() {
        return SteamAPI_ISteamInventory_SetPropertyBool.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_SetPropertyBool(SteamInventoryUpdateHandle_t handle, SteamItemInstanceID_t nItemID, const char *pchPropertyName, bool bValue)
     * }
     */
    public static boolean SteamAPI_ISteamInventory_SetPropertyBool(long handle, long nItemID, MemorySegment pchPropertyName, boolean bValue) {
        var mh$ = SteamAPI_ISteamInventory_SetPropertyBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInventory_SetPropertyBool", handle, nItemID, pchPropertyName, bValue);
            }
            return (boolean)mh$.invokeExact(handle, nItemID, pchPropertyName, bValue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInventory_SetPropertyInt64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamInventory_SetPropertyInt64"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_SetPropertyInt64(SteamInventoryUpdateHandle_t handle, SteamItemInstanceID_t nItemID, const char *pchPropertyName, int64 nValue)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInventory_SetPropertyInt64$descriptor() {
        return SteamAPI_ISteamInventory_SetPropertyInt64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_SetPropertyInt64(SteamInventoryUpdateHandle_t handle, SteamItemInstanceID_t nItemID, const char *pchPropertyName, int64 nValue)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInventory_SetPropertyInt64$handle() {
        return SteamAPI_ISteamInventory_SetPropertyInt64.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_SetPropertyInt64(SteamInventoryUpdateHandle_t handle, SteamItemInstanceID_t nItemID, const char *pchPropertyName, int64 nValue)
     * }
     */
    public static boolean SteamAPI_ISteamInventory_SetPropertyInt64(long handle, long nItemID, MemorySegment pchPropertyName, long nValue) {
        var mh$ = SteamAPI_ISteamInventory_SetPropertyInt64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInventory_SetPropertyInt64", handle, nItemID, pchPropertyName, nValue);
            }
            return (boolean)mh$.invokeExact(handle, nItemID, pchPropertyName, nValue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInventory_SetPropertyFloat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_FLOAT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamInventory_SetPropertyFloat"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_SetPropertyFloat(SteamInventoryUpdateHandle_t handle, SteamItemInstanceID_t nItemID, const char *pchPropertyName, float flValue)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInventory_SetPropertyFloat$descriptor() {
        return SteamAPI_ISteamInventory_SetPropertyFloat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_SetPropertyFloat(SteamInventoryUpdateHandle_t handle, SteamItemInstanceID_t nItemID, const char *pchPropertyName, float flValue)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInventory_SetPropertyFloat$handle() {
        return SteamAPI_ISteamInventory_SetPropertyFloat.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_SetPropertyFloat(SteamInventoryUpdateHandle_t handle, SteamItemInstanceID_t nItemID, const char *pchPropertyName, float flValue)
     * }
     */
    public static boolean SteamAPI_ISteamInventory_SetPropertyFloat(long handle, long nItemID, MemorySegment pchPropertyName, float flValue) {
        var mh$ = SteamAPI_ISteamInventory_SetPropertyFloat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInventory_SetPropertyFloat", handle, nItemID, pchPropertyName, flValue);
            }
            return (boolean)mh$.invokeExact(handle, nItemID, pchPropertyName, flValue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInventory_SubmitUpdateProperties {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamInventory_SubmitUpdateProperties"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_SubmitUpdateProperties(SteamInventoryUpdateHandle_t handle, SteamInventoryResult_t *pResultHandle)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInventory_SubmitUpdateProperties$descriptor() {
        return SteamAPI_ISteamInventory_SubmitUpdateProperties.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_SubmitUpdateProperties(SteamInventoryUpdateHandle_t handle, SteamInventoryResult_t *pResultHandle)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInventory_SubmitUpdateProperties$handle() {
        return SteamAPI_ISteamInventory_SubmitUpdateProperties.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_SubmitUpdateProperties(SteamInventoryUpdateHandle_t handle, SteamInventoryResult_t *pResultHandle)
     * }
     */
    public static boolean SteamAPI_ISteamInventory_SubmitUpdateProperties(long handle, MemorySegment pResultHandle) {
        var mh$ = SteamAPI_ISteamInventory_SubmitUpdateProperties.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInventory_SubmitUpdateProperties", handle, pResultHandle);
            }
            return (boolean)mh$.invokeExact(handle, pResultHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamInventory_InspectItem {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamInventory_InspectItem"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_InspectItem(SteamInventoryResult_t *pResultHandle, const char *pchItemToken)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamInventory_InspectItem$descriptor() {
        return SteamAPI_ISteamInventory_InspectItem.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_InspectItem(SteamInventoryResult_t *pResultHandle, const char *pchItemToken)
     * }
     */
    public static MethodHandle SteamAPI_ISteamInventory_InspectItem$handle() {
        return SteamAPI_ISteamInventory_InspectItem.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamInventory_InspectItem(SteamInventoryResult_t *pResultHandle, const char *pchItemToken)
     * }
     */
    public static boolean SteamAPI_ISteamInventory_InspectItem(MemorySegment pResultHandle, MemorySegment pchItemToken) {
        var mh$ = SteamAPI_ISteamInventory_InspectItem.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamInventory_InspectItem", pResultHandle, pchItemToken);
            }
            return (boolean)mh$.invokeExact(pResultHandle, pchItemToken);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamParentalSettings_BIsParentalLockEnabled {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamParentalSettings_BIsParentalLockEnabled"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamParentalSettings_BIsParentalLockEnabled()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamParentalSettings_BIsParentalLockEnabled$descriptor() {
        return SteamAPI_ISteamParentalSettings_BIsParentalLockEnabled.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamParentalSettings_BIsParentalLockEnabled()
     * }
     */
    public static MethodHandle SteamAPI_ISteamParentalSettings_BIsParentalLockEnabled$handle() {
        return SteamAPI_ISteamParentalSettings_BIsParentalLockEnabled.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamParentalSettings_BIsParentalLockEnabled()
     * }
     */
    public static boolean SteamAPI_ISteamParentalSettings_BIsParentalLockEnabled() {
        var mh$ = SteamAPI_ISteamParentalSettings_BIsParentalLockEnabled.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamParentalSettings_BIsParentalLockEnabled");
            }
            return (boolean)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamParentalSettings_BIsParentalLockLocked {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamParentalSettings_BIsParentalLockLocked"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamParentalSettings_BIsParentalLockLocked()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamParentalSettings_BIsParentalLockLocked$descriptor() {
        return SteamAPI_ISteamParentalSettings_BIsParentalLockLocked.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamParentalSettings_BIsParentalLockLocked()
     * }
     */
    public static MethodHandle SteamAPI_ISteamParentalSettings_BIsParentalLockLocked$handle() {
        return SteamAPI_ISteamParentalSettings_BIsParentalLockLocked.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamParentalSettings_BIsParentalLockLocked()
     * }
     */
    public static boolean SteamAPI_ISteamParentalSettings_BIsParentalLockLocked() {
        var mh$ = SteamAPI_ISteamParentalSettings_BIsParentalLockLocked.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamParentalSettings_BIsParentalLockLocked");
            }
            return (boolean)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamParentalSettings_BIsAppBlocked {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamParentalSettings_BIsAppBlocked"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamParentalSettings_BIsAppBlocked(AppId_t nAppID)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamParentalSettings_BIsAppBlocked$descriptor() {
        return SteamAPI_ISteamParentalSettings_BIsAppBlocked.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamParentalSettings_BIsAppBlocked(AppId_t nAppID)
     * }
     */
    public static MethodHandle SteamAPI_ISteamParentalSettings_BIsAppBlocked$handle() {
        return SteamAPI_ISteamParentalSettings_BIsAppBlocked.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamParentalSettings_BIsAppBlocked(AppId_t nAppID)
     * }
     */
    public static boolean SteamAPI_ISteamParentalSettings_BIsAppBlocked(int nAppID) {
        var mh$ = SteamAPI_ISteamParentalSettings_BIsAppBlocked.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamParentalSettings_BIsAppBlocked", nAppID);
            }
            return (boolean)mh$.invokeExact(nAppID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamParentalSettings_BIsAppInBlockList {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamParentalSettings_BIsAppInBlockList"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamParentalSettings_BIsAppInBlockList(AppId_t nAppID)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamParentalSettings_BIsAppInBlockList$descriptor() {
        return SteamAPI_ISteamParentalSettings_BIsAppInBlockList.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamParentalSettings_BIsAppInBlockList(AppId_t nAppID)
     * }
     */
    public static MethodHandle SteamAPI_ISteamParentalSettings_BIsAppInBlockList$handle() {
        return SteamAPI_ISteamParentalSettings_BIsAppInBlockList.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamParentalSettings_BIsAppInBlockList(AppId_t nAppID)
     * }
     */
    public static boolean SteamAPI_ISteamParentalSettings_BIsAppInBlockList(int nAppID) {
        var mh$ = SteamAPI_ISteamParentalSettings_BIsAppInBlockList.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamParentalSettings_BIsAppInBlockList", nAppID);
            }
            return (boolean)mh$.invokeExact(nAppID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamParentalSettings_BIsFeatureBlocked {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamParentalSettings_BIsFeatureBlocked"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamParentalSettings_BIsFeatureBlocked(EParentalFeature eFeature)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamParentalSettings_BIsFeatureBlocked$descriptor() {
        return SteamAPI_ISteamParentalSettings_BIsFeatureBlocked.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamParentalSettings_BIsFeatureBlocked(EParentalFeature eFeature)
     * }
     */
    public static MethodHandle SteamAPI_ISteamParentalSettings_BIsFeatureBlocked$handle() {
        return SteamAPI_ISteamParentalSettings_BIsFeatureBlocked.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamParentalSettings_BIsFeatureBlocked(EParentalFeature eFeature)
     * }
     */
    public static boolean SteamAPI_ISteamParentalSettings_BIsFeatureBlocked(int eFeature) {
        var mh$ = SteamAPI_ISteamParentalSettings_BIsFeatureBlocked.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamParentalSettings_BIsFeatureBlocked", eFeature);
            }
            return (boolean)mh$.invokeExact(eFeature);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamParentalSettings_BIsFeatureInBlockList {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamParentalSettings_BIsFeatureInBlockList"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamParentalSettings_BIsFeatureInBlockList(EParentalFeature eFeature)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamParentalSettings_BIsFeatureInBlockList$descriptor() {
        return SteamAPI_ISteamParentalSettings_BIsFeatureInBlockList.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamParentalSettings_BIsFeatureInBlockList(EParentalFeature eFeature)
     * }
     */
    public static MethodHandle SteamAPI_ISteamParentalSettings_BIsFeatureInBlockList$handle() {
        return SteamAPI_ISteamParentalSettings_BIsFeatureInBlockList.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamParentalSettings_BIsFeatureInBlockList(EParentalFeature eFeature)
     * }
     */
    public static boolean SteamAPI_ISteamParentalSettings_BIsFeatureInBlockList(int eFeature) {
        var mh$ = SteamAPI_ISteamParentalSettings_BIsFeatureInBlockList.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamParentalSettings_BIsFeatureInBlockList", eFeature);
            }
            return (boolean)mh$.invokeExact(eFeature);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemotePlay_GetSessionCount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamRemotePlay_GetSessionCount"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamRemotePlay_GetSessionCount()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemotePlay_GetSessionCount$descriptor() {
        return SteamAPI_ISteamRemotePlay_GetSessionCount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamRemotePlay_GetSessionCount()
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemotePlay_GetSessionCount$handle() {
        return SteamAPI_ISteamRemotePlay_GetSessionCount.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * uint32 SteamAPI_ISteamRemotePlay_GetSessionCount()
     * }
     */
    public static int SteamAPI_ISteamRemotePlay_GetSessionCount() {
        var mh$ = SteamAPI_ISteamRemotePlay_GetSessionCount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemotePlay_GetSessionCount");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemotePlay_GetSessionID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamRemotePlay_GetSessionID"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RemotePlaySessionID_t SteamAPI_ISteamRemotePlay_GetSessionID(int iSessionIndex)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemotePlay_GetSessionID$descriptor() {
        return SteamAPI_ISteamRemotePlay_GetSessionID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RemotePlaySessionID_t SteamAPI_ISteamRemotePlay_GetSessionID(int iSessionIndex)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemotePlay_GetSessionID$handle() {
        return SteamAPI_ISteamRemotePlay_GetSessionID.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RemotePlaySessionID_t SteamAPI_ISteamRemotePlay_GetSessionID(int iSessionIndex)
     * }
     */
    public static int SteamAPI_ISteamRemotePlay_GetSessionID(int iSessionIndex) {
        var mh$ = SteamAPI_ISteamRemotePlay_GetSessionID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemotePlay_GetSessionID", iSessionIndex);
            }
            return (int)mh$.invokeExact(iSessionIndex);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemotePlay_GetSessionSteamID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamRemotePlay_GetSessionSteamID"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint64_steamid SteamAPI_ISteamRemotePlay_GetSessionSteamID(RemotePlaySessionID_t unSessionID)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemotePlay_GetSessionSteamID$descriptor() {
        return SteamAPI_ISteamRemotePlay_GetSessionSteamID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint64_steamid SteamAPI_ISteamRemotePlay_GetSessionSteamID(RemotePlaySessionID_t unSessionID)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemotePlay_GetSessionSteamID$handle() {
        return SteamAPI_ISteamRemotePlay_GetSessionSteamID.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * uint64_steamid SteamAPI_ISteamRemotePlay_GetSessionSteamID(RemotePlaySessionID_t unSessionID)
     * }
     */
    public static long SteamAPI_ISteamRemotePlay_GetSessionSteamID(int unSessionID) {
        var mh$ = SteamAPI_ISteamRemotePlay_GetSessionSteamID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemotePlay_GetSessionSteamID", unSessionID);
            }
            return (long)mh$.invokeExact(unSessionID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemotePlay_GetSessionClientName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamRemotePlay_GetSessionClientName"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamRemotePlay_GetSessionClientName(RemotePlaySessionID_t unSessionID)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemotePlay_GetSessionClientName$descriptor() {
        return SteamAPI_ISteamRemotePlay_GetSessionClientName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamRemotePlay_GetSessionClientName(RemotePlaySessionID_t unSessionID)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemotePlay_GetSessionClientName$handle() {
        return SteamAPI_ISteamRemotePlay_GetSessionClientName.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamRemotePlay_GetSessionClientName(RemotePlaySessionID_t unSessionID)
     * }
     */
    public static MemorySegment SteamAPI_ISteamRemotePlay_GetSessionClientName(int unSessionID) {
        var mh$ = SteamAPI_ISteamRemotePlay_GetSessionClientName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemotePlay_GetSessionClientName", unSessionID);
            }
            return (MemorySegment)mh$.invokeExact(unSessionID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemotePlay_GetSessionClientFormFactor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamRemotePlay_GetSessionClientFormFactor"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ESteamDeviceFormFactor SteamAPI_ISteamRemotePlay_GetSessionClientFormFactor(RemotePlaySessionID_t unSessionID)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemotePlay_GetSessionClientFormFactor$descriptor() {
        return SteamAPI_ISteamRemotePlay_GetSessionClientFormFactor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ESteamDeviceFormFactor SteamAPI_ISteamRemotePlay_GetSessionClientFormFactor(RemotePlaySessionID_t unSessionID)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemotePlay_GetSessionClientFormFactor$handle() {
        return SteamAPI_ISteamRemotePlay_GetSessionClientFormFactor.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ESteamDeviceFormFactor SteamAPI_ISteamRemotePlay_GetSessionClientFormFactor(RemotePlaySessionID_t unSessionID)
     * }
     */
    public static int SteamAPI_ISteamRemotePlay_GetSessionClientFormFactor(int unSessionID) {
        var mh$ = SteamAPI_ISteamRemotePlay_GetSessionClientFormFactor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemotePlay_GetSessionClientFormFactor", unSessionID);
            }
            return (int)mh$.invokeExact(unSessionID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemotePlay_BGetSessionClientResolution {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamRemotePlay_BGetSessionClientResolution"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemotePlay_BGetSessionClientResolution(RemotePlaySessionID_t unSessionID, int *pnResolutionX, int *pnResolutionY)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemotePlay_BGetSessionClientResolution$descriptor() {
        return SteamAPI_ISteamRemotePlay_BGetSessionClientResolution.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemotePlay_BGetSessionClientResolution(RemotePlaySessionID_t unSessionID, int *pnResolutionX, int *pnResolutionY)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemotePlay_BGetSessionClientResolution$handle() {
        return SteamAPI_ISteamRemotePlay_BGetSessionClientResolution.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemotePlay_BGetSessionClientResolution(RemotePlaySessionID_t unSessionID, int *pnResolutionX, int *pnResolutionY)
     * }
     */
    public static boolean SteamAPI_ISteamRemotePlay_BGetSessionClientResolution(int unSessionID, MemorySegment pnResolutionX, MemorySegment pnResolutionY) {
        var mh$ = SteamAPI_ISteamRemotePlay_BGetSessionClientResolution.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemotePlay_BGetSessionClientResolution", unSessionID, pnResolutionX, pnResolutionY);
            }
            return (boolean)mh$.invokeExact(unSessionID, pnResolutionX, pnResolutionY);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemotePlay_BStartRemotePlayTogether {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamRemotePlay_BStartRemotePlayTogether"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemotePlay_BStartRemotePlayTogether(bool bShowOverlay)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemotePlay_BStartRemotePlayTogether$descriptor() {
        return SteamAPI_ISteamRemotePlay_BStartRemotePlayTogether.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemotePlay_BStartRemotePlayTogether(bool bShowOverlay)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemotePlay_BStartRemotePlayTogether$handle() {
        return SteamAPI_ISteamRemotePlay_BStartRemotePlayTogether.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemotePlay_BStartRemotePlayTogether(bool bShowOverlay)
     * }
     */
    public static boolean SteamAPI_ISteamRemotePlay_BStartRemotePlayTogether(boolean bShowOverlay) {
        var mh$ = SteamAPI_ISteamRemotePlay_BStartRemotePlayTogether.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemotePlay_BStartRemotePlayTogether", bShowOverlay);
            }
            return (boolean)mh$.invokeExact(bShowOverlay);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamRemotePlay_BSendRemotePlayTogetherInvite {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamRemotePlay_BSendRemotePlayTogetherInvite"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemotePlay_BSendRemotePlayTogetherInvite(uint64_steamid steamIDFriend)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamRemotePlay_BSendRemotePlayTogetherInvite$descriptor() {
        return SteamAPI_ISteamRemotePlay_BSendRemotePlayTogetherInvite.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemotePlay_BSendRemotePlayTogetherInvite(uint64_steamid steamIDFriend)
     * }
     */
    public static MethodHandle SteamAPI_ISteamRemotePlay_BSendRemotePlayTogetherInvite$handle() {
        return SteamAPI_ISteamRemotePlay_BSendRemotePlayTogetherInvite.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamRemotePlay_BSendRemotePlayTogetherInvite(uint64_steamid steamIDFriend)
     * }
     */
    public static boolean SteamAPI_ISteamRemotePlay_BSendRemotePlayTogetherInvite(long steamIDFriend) {
        var mh$ = SteamAPI_ISteamRemotePlay_BSendRemotePlayTogetherInvite.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamRemotePlay_BSendRemotePlayTogetherInvite", steamIDFriend);
            }
            return (boolean)mh$.invokeExact(steamIDFriend);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingMessages_SendMessageToUser {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamNetworkingMessages_SendMessageToUser"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * EResult SteamAPI_ISteamNetworkingMessages_SendMessageToUser(const SteamNetworkingIdentity *identityRemote, const void *pubData, uint32 cubData, int nSendFlags, int nRemoteChannel)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingMessages_SendMessageToUser$descriptor() {
        return SteamAPI_ISteamNetworkingMessages_SendMessageToUser.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * EResult SteamAPI_ISteamNetworkingMessages_SendMessageToUser(const SteamNetworkingIdentity *identityRemote, const void *pubData, uint32 cubData, int nSendFlags, int nRemoteChannel)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingMessages_SendMessageToUser$handle() {
        return SteamAPI_ISteamNetworkingMessages_SendMessageToUser.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * EResult SteamAPI_ISteamNetworkingMessages_SendMessageToUser(const SteamNetworkingIdentity *identityRemote, const void *pubData, uint32 cubData, int nSendFlags, int nRemoteChannel)
     * }
     */
    public static int SteamAPI_ISteamNetworkingMessages_SendMessageToUser(MemorySegment identityRemote, MemorySegment pubData, int cubData, int nSendFlags, int nRemoteChannel) {
        var mh$ = SteamAPI_ISteamNetworkingMessages_SendMessageToUser.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingMessages_SendMessageToUser", identityRemote, pubData, cubData, nSendFlags, nRemoteChannel);
            }
            return (int)mh$.invokeExact(identityRemote, pubData, cubData, nSendFlags, nRemoteChannel);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingMessages_ReceiveMessagesOnChannel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamNetworkingMessages_ReceiveMessagesOnChannel"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamNetworkingMessages_ReceiveMessagesOnChannel(int nLocalChannel, SteamNetworkingMessage_t **ppOutMessages, int nMaxMessages)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingMessages_ReceiveMessagesOnChannel$descriptor() {
        return SteamAPI_ISteamNetworkingMessages_ReceiveMessagesOnChannel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamNetworkingMessages_ReceiveMessagesOnChannel(int nLocalChannel, SteamNetworkingMessage_t **ppOutMessages, int nMaxMessages)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingMessages_ReceiveMessagesOnChannel$handle() {
        return SteamAPI_ISteamNetworkingMessages_ReceiveMessagesOnChannel.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int SteamAPI_ISteamNetworkingMessages_ReceiveMessagesOnChannel(int nLocalChannel, SteamNetworkingMessage_t **ppOutMessages, int nMaxMessages)
     * }
     */
    public static int SteamAPI_ISteamNetworkingMessages_ReceiveMessagesOnChannel(int nLocalChannel, MemorySegment ppOutMessages, int nMaxMessages) {
        var mh$ = SteamAPI_ISteamNetworkingMessages_ReceiveMessagesOnChannel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingMessages_ReceiveMessagesOnChannel", nLocalChannel, ppOutMessages, nMaxMessages);
            }
            return (int)mh$.invokeExact(nLocalChannel, ppOutMessages, nMaxMessages);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingMessages_AcceptSessionWithUser {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamNetworkingMessages_AcceptSessionWithUser"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingMessages_AcceptSessionWithUser(const SteamNetworkingIdentity *identityRemote)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingMessages_AcceptSessionWithUser$descriptor() {
        return SteamAPI_ISteamNetworkingMessages_AcceptSessionWithUser.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingMessages_AcceptSessionWithUser(const SteamNetworkingIdentity *identityRemote)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingMessages_AcceptSessionWithUser$handle() {
        return SteamAPI_ISteamNetworkingMessages_AcceptSessionWithUser.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingMessages_AcceptSessionWithUser(const SteamNetworkingIdentity *identityRemote)
     * }
     */
    public static boolean SteamAPI_ISteamNetworkingMessages_AcceptSessionWithUser(MemorySegment identityRemote) {
        var mh$ = SteamAPI_ISteamNetworkingMessages_AcceptSessionWithUser.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingMessages_AcceptSessionWithUser", identityRemote);
            }
            return (boolean)mh$.invokeExact(identityRemote);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingMessages_CloseSessionWithUser {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamNetworkingMessages_CloseSessionWithUser"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingMessages_CloseSessionWithUser(const SteamNetworkingIdentity *identityRemote)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingMessages_CloseSessionWithUser$descriptor() {
        return SteamAPI_ISteamNetworkingMessages_CloseSessionWithUser.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingMessages_CloseSessionWithUser(const SteamNetworkingIdentity *identityRemote)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingMessages_CloseSessionWithUser$handle() {
        return SteamAPI_ISteamNetworkingMessages_CloseSessionWithUser.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingMessages_CloseSessionWithUser(const SteamNetworkingIdentity *identityRemote)
     * }
     */
    public static boolean SteamAPI_ISteamNetworkingMessages_CloseSessionWithUser(MemorySegment identityRemote) {
        var mh$ = SteamAPI_ISteamNetworkingMessages_CloseSessionWithUser.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingMessages_CloseSessionWithUser", identityRemote);
            }
            return (boolean)mh$.invokeExact(identityRemote);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingMessages_CloseChannelWithUser {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamNetworkingMessages_CloseChannelWithUser"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingMessages_CloseChannelWithUser(const SteamNetworkingIdentity *identityRemote, int nLocalChannel)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingMessages_CloseChannelWithUser$descriptor() {
        return SteamAPI_ISteamNetworkingMessages_CloseChannelWithUser.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingMessages_CloseChannelWithUser(const SteamNetworkingIdentity *identityRemote, int nLocalChannel)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingMessages_CloseChannelWithUser$handle() {
        return SteamAPI_ISteamNetworkingMessages_CloseChannelWithUser.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingMessages_CloseChannelWithUser(const SteamNetworkingIdentity *identityRemote, int nLocalChannel)
     * }
     */
    public static boolean SteamAPI_ISteamNetworkingMessages_CloseChannelWithUser(MemorySegment identityRemote, int nLocalChannel) {
        var mh$ = SteamAPI_ISteamNetworkingMessages_CloseChannelWithUser.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingMessages_CloseChannelWithUser", identityRemote, nLocalChannel);
            }
            return (boolean)mh$.invokeExact(identityRemote, nLocalChannel);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingMessages_GetSessionConnectionInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamNetworkingMessages_GetSessionConnectionInfo"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ESteamNetworkingConnectionState SteamAPI_ISteamNetworkingMessages_GetSessionConnectionInfo(const SteamNetworkingIdentity *identityRemote, SteamNetConnectionInfo_t *pConnectionInfo, SteamNetConnectionRealTimeStatus_t *pQuickStatus)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingMessages_GetSessionConnectionInfo$descriptor() {
        return SteamAPI_ISteamNetworkingMessages_GetSessionConnectionInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ESteamNetworkingConnectionState SteamAPI_ISteamNetworkingMessages_GetSessionConnectionInfo(const SteamNetworkingIdentity *identityRemote, SteamNetConnectionInfo_t *pConnectionInfo, SteamNetConnectionRealTimeStatus_t *pQuickStatus)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingMessages_GetSessionConnectionInfo$handle() {
        return SteamAPI_ISteamNetworkingMessages_GetSessionConnectionInfo.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ESteamNetworkingConnectionState SteamAPI_ISteamNetworkingMessages_GetSessionConnectionInfo(const SteamNetworkingIdentity *identityRemote, SteamNetConnectionInfo_t *pConnectionInfo, SteamNetConnectionRealTimeStatus_t *pQuickStatus)
     * }
     */
    public static int SteamAPI_ISteamNetworkingMessages_GetSessionConnectionInfo(MemorySegment identityRemote, MemorySegment pConnectionInfo, MemorySegment pQuickStatus) {
        var mh$ = SteamAPI_ISteamNetworkingMessages_GetSessionConnectionInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingMessages_GetSessionConnectionInfo", identityRemote, pConnectionInfo, pQuickStatus);
            }
            return (int)mh$.invokeExact(identityRemote, pConnectionInfo, pQuickStatus);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingSockets_CreateListenSocketIP {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamNetworkingSockets_CreateListenSocketIP"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HSteamListenSocket SteamAPI_ISteamNetworkingSockets_CreateListenSocketIP(const SteamNetworkingIPAddr *localAddress, int nOptions, const SteamNetworkingConfigValue_t *pOptions)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingSockets_CreateListenSocketIP$descriptor() {
        return SteamAPI_ISteamNetworkingSockets_CreateListenSocketIP.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HSteamListenSocket SteamAPI_ISteamNetworkingSockets_CreateListenSocketIP(const SteamNetworkingIPAddr *localAddress, int nOptions, const SteamNetworkingConfigValue_t *pOptions)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingSockets_CreateListenSocketIP$handle() {
        return SteamAPI_ISteamNetworkingSockets_CreateListenSocketIP.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HSteamListenSocket SteamAPI_ISteamNetworkingSockets_CreateListenSocketIP(const SteamNetworkingIPAddr *localAddress, int nOptions, const SteamNetworkingConfigValue_t *pOptions)
     * }
     */
    public static int SteamAPI_ISteamNetworkingSockets_CreateListenSocketIP(MemorySegment localAddress, int nOptions, MemorySegment pOptions) {
        var mh$ = SteamAPI_ISteamNetworkingSockets_CreateListenSocketIP.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingSockets_CreateListenSocketIP", localAddress, nOptions, pOptions);
            }
            return (int)mh$.invokeExact(localAddress, nOptions, pOptions);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingSockets_ConnectByIPAddress {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamNetworkingSockets_ConnectByIPAddress"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HSteamNetConnection SteamAPI_ISteamNetworkingSockets_ConnectByIPAddress(const SteamNetworkingIPAddr *address, int nOptions, const SteamNetworkingConfigValue_t *pOptions)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingSockets_ConnectByIPAddress$descriptor() {
        return SteamAPI_ISteamNetworkingSockets_ConnectByIPAddress.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HSteamNetConnection SteamAPI_ISteamNetworkingSockets_ConnectByIPAddress(const SteamNetworkingIPAddr *address, int nOptions, const SteamNetworkingConfigValue_t *pOptions)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingSockets_ConnectByIPAddress$handle() {
        return SteamAPI_ISteamNetworkingSockets_ConnectByIPAddress.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HSteamNetConnection SteamAPI_ISteamNetworkingSockets_ConnectByIPAddress(const SteamNetworkingIPAddr *address, int nOptions, const SteamNetworkingConfigValue_t *pOptions)
     * }
     */
    public static int SteamAPI_ISteamNetworkingSockets_ConnectByIPAddress(MemorySegment address, int nOptions, MemorySegment pOptions) {
        var mh$ = SteamAPI_ISteamNetworkingSockets_ConnectByIPAddress.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingSockets_ConnectByIPAddress", address, nOptions, pOptions);
            }
            return (int)mh$.invokeExact(address, nOptions, pOptions);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingSockets_CreateListenSocketP2P {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamNetworkingSockets_CreateListenSocketP2P"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HSteamListenSocket SteamAPI_ISteamNetworkingSockets_CreateListenSocketP2P(int nLocalVirtualPort, int nOptions, const SteamNetworkingConfigValue_t *pOptions)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingSockets_CreateListenSocketP2P$descriptor() {
        return SteamAPI_ISteamNetworkingSockets_CreateListenSocketP2P.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HSteamListenSocket SteamAPI_ISteamNetworkingSockets_CreateListenSocketP2P(int nLocalVirtualPort, int nOptions, const SteamNetworkingConfigValue_t *pOptions)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingSockets_CreateListenSocketP2P$handle() {
        return SteamAPI_ISteamNetworkingSockets_CreateListenSocketP2P.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HSteamListenSocket SteamAPI_ISteamNetworkingSockets_CreateListenSocketP2P(int nLocalVirtualPort, int nOptions, const SteamNetworkingConfigValue_t *pOptions)
     * }
     */
    public static int SteamAPI_ISteamNetworkingSockets_CreateListenSocketP2P(int nLocalVirtualPort, int nOptions, MemorySegment pOptions) {
        var mh$ = SteamAPI_ISteamNetworkingSockets_CreateListenSocketP2P.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingSockets_CreateListenSocketP2P", nLocalVirtualPort, nOptions, pOptions);
            }
            return (int)mh$.invokeExact(nLocalVirtualPort, nOptions, pOptions);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingSockets_ConnectP2P {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamNetworkingSockets_ConnectP2P"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HSteamNetConnection SteamAPI_ISteamNetworkingSockets_ConnectP2P(const SteamNetworkingIdentity *identityRemote, int nRemoteVirtualPort, int nOptions, const SteamNetworkingConfigValue_t *pOptions)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingSockets_ConnectP2P$descriptor() {
        return SteamAPI_ISteamNetworkingSockets_ConnectP2P.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HSteamNetConnection SteamAPI_ISteamNetworkingSockets_ConnectP2P(const SteamNetworkingIdentity *identityRemote, int nRemoteVirtualPort, int nOptions, const SteamNetworkingConfigValue_t *pOptions)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingSockets_ConnectP2P$handle() {
        return SteamAPI_ISteamNetworkingSockets_ConnectP2P.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HSteamNetConnection SteamAPI_ISteamNetworkingSockets_ConnectP2P(const SteamNetworkingIdentity *identityRemote, int nRemoteVirtualPort, int nOptions, const SteamNetworkingConfigValue_t *pOptions)
     * }
     */
    public static int SteamAPI_ISteamNetworkingSockets_ConnectP2P(MemorySegment identityRemote, int nRemoteVirtualPort, int nOptions, MemorySegment pOptions) {
        var mh$ = SteamAPI_ISteamNetworkingSockets_ConnectP2P.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingSockets_ConnectP2P", identityRemote, nRemoteVirtualPort, nOptions, pOptions);
            }
            return (int)mh$.invokeExact(identityRemote, nRemoteVirtualPort, nOptions, pOptions);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingSockets_AcceptConnection {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamNetworkingSockets_AcceptConnection"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * EResult SteamAPI_ISteamNetworkingSockets_AcceptConnection(HSteamNetConnection hConn)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingSockets_AcceptConnection$descriptor() {
        return SteamAPI_ISteamNetworkingSockets_AcceptConnection.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * EResult SteamAPI_ISteamNetworkingSockets_AcceptConnection(HSteamNetConnection hConn)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingSockets_AcceptConnection$handle() {
        return SteamAPI_ISteamNetworkingSockets_AcceptConnection.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * EResult SteamAPI_ISteamNetworkingSockets_AcceptConnection(HSteamNetConnection hConn)
     * }
     */
    public static int SteamAPI_ISteamNetworkingSockets_AcceptConnection(int hConn) {
        var mh$ = SteamAPI_ISteamNetworkingSockets_AcceptConnection.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingSockets_AcceptConnection", hConn);
            }
            return (int)mh$.invokeExact(hConn);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingSockets_CloseConnection {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamNetworkingSockets_CloseConnection"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingSockets_CloseConnection(HSteamNetConnection hPeer, int nReason, const char *pszDebug, bool bEnableLinger)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingSockets_CloseConnection$descriptor() {
        return SteamAPI_ISteamNetworkingSockets_CloseConnection.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingSockets_CloseConnection(HSteamNetConnection hPeer, int nReason, const char *pszDebug, bool bEnableLinger)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingSockets_CloseConnection$handle() {
        return SteamAPI_ISteamNetworkingSockets_CloseConnection.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingSockets_CloseConnection(HSteamNetConnection hPeer, int nReason, const char *pszDebug, bool bEnableLinger)
     * }
     */
    public static boolean SteamAPI_ISteamNetworkingSockets_CloseConnection(int hPeer, int nReason, MemorySegment pszDebug, boolean bEnableLinger) {
        var mh$ = SteamAPI_ISteamNetworkingSockets_CloseConnection.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingSockets_CloseConnection", hPeer, nReason, pszDebug, bEnableLinger);
            }
            return (boolean)mh$.invokeExact(hPeer, nReason, pszDebug, bEnableLinger);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingSockets_CloseListenSocket {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamNetworkingSockets_CloseListenSocket"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingSockets_CloseListenSocket(HSteamListenSocket hSocket)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingSockets_CloseListenSocket$descriptor() {
        return SteamAPI_ISteamNetworkingSockets_CloseListenSocket.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingSockets_CloseListenSocket(HSteamListenSocket hSocket)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingSockets_CloseListenSocket$handle() {
        return SteamAPI_ISteamNetworkingSockets_CloseListenSocket.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingSockets_CloseListenSocket(HSteamListenSocket hSocket)
     * }
     */
    public static boolean SteamAPI_ISteamNetworkingSockets_CloseListenSocket(int hSocket) {
        var mh$ = SteamAPI_ISteamNetworkingSockets_CloseListenSocket.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingSockets_CloseListenSocket", hSocket);
            }
            return (boolean)mh$.invokeExact(hSocket);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingSockets_SetConnectionUserData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamNetworkingSockets_SetConnectionUserData"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingSockets_SetConnectionUserData(HSteamNetConnection hPeer, int64 nUserData)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingSockets_SetConnectionUserData$descriptor() {
        return SteamAPI_ISteamNetworkingSockets_SetConnectionUserData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingSockets_SetConnectionUserData(HSteamNetConnection hPeer, int64 nUserData)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingSockets_SetConnectionUserData$handle() {
        return SteamAPI_ISteamNetworkingSockets_SetConnectionUserData.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingSockets_SetConnectionUserData(HSteamNetConnection hPeer, int64 nUserData)
     * }
     */
    public static boolean SteamAPI_ISteamNetworkingSockets_SetConnectionUserData(int hPeer, long nUserData) {
        var mh$ = SteamAPI_ISteamNetworkingSockets_SetConnectionUserData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingSockets_SetConnectionUserData", hPeer, nUserData);
            }
            return (boolean)mh$.invokeExact(hPeer, nUserData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingSockets_GetConnectionUserData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamNetworkingSockets_GetConnectionUserData"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int64 SteamAPI_ISteamNetworkingSockets_GetConnectionUserData(HSteamNetConnection hPeer)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingSockets_GetConnectionUserData$descriptor() {
        return SteamAPI_ISteamNetworkingSockets_GetConnectionUserData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int64 SteamAPI_ISteamNetworkingSockets_GetConnectionUserData(HSteamNetConnection hPeer)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingSockets_GetConnectionUserData$handle() {
        return SteamAPI_ISteamNetworkingSockets_GetConnectionUserData.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int64 SteamAPI_ISteamNetworkingSockets_GetConnectionUserData(HSteamNetConnection hPeer)
     * }
     */
    public static long SteamAPI_ISteamNetworkingSockets_GetConnectionUserData(int hPeer) {
        var mh$ = SteamAPI_ISteamNetworkingSockets_GetConnectionUserData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingSockets_GetConnectionUserData", hPeer);
            }
            return (long)mh$.invokeExact(hPeer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingSockets_SetConnectionName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamNetworkingSockets_SetConnectionName"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamNetworkingSockets_SetConnectionName(HSteamNetConnection hPeer, const char *pszName)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingSockets_SetConnectionName$descriptor() {
        return SteamAPI_ISteamNetworkingSockets_SetConnectionName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamNetworkingSockets_SetConnectionName(HSteamNetConnection hPeer, const char *pszName)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingSockets_SetConnectionName$handle() {
        return SteamAPI_ISteamNetworkingSockets_SetConnectionName.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamNetworkingSockets_SetConnectionName(HSteamNetConnection hPeer, const char *pszName)
     * }
     */
    public static void SteamAPI_ISteamNetworkingSockets_SetConnectionName(int hPeer, MemorySegment pszName) {
        var mh$ = SteamAPI_ISteamNetworkingSockets_SetConnectionName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingSockets_SetConnectionName", hPeer, pszName);
            }
            mh$.invokeExact(hPeer, pszName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingSockets_GetConnectionName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamNetworkingSockets_GetConnectionName"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingSockets_GetConnectionName(HSteamNetConnection hPeer, char *pszName, int nMaxLen)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingSockets_GetConnectionName$descriptor() {
        return SteamAPI_ISteamNetworkingSockets_GetConnectionName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingSockets_GetConnectionName(HSteamNetConnection hPeer, char *pszName, int nMaxLen)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingSockets_GetConnectionName$handle() {
        return SteamAPI_ISteamNetworkingSockets_GetConnectionName.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingSockets_GetConnectionName(HSteamNetConnection hPeer, char *pszName, int nMaxLen)
     * }
     */
    public static boolean SteamAPI_ISteamNetworkingSockets_GetConnectionName(int hPeer, MemorySegment pszName, int nMaxLen) {
        var mh$ = SteamAPI_ISteamNetworkingSockets_GetConnectionName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingSockets_GetConnectionName", hPeer, pszName, nMaxLen);
            }
            return (boolean)mh$.invokeExact(hPeer, pszName, nMaxLen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingSockets_SendMessageToConnection {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamNetworkingSockets_SendMessageToConnection"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * EResult SteamAPI_ISteamNetworkingSockets_SendMessageToConnection(HSteamNetConnection hConn, const void *pData, uint32 cbData, int nSendFlags, int64 *pOutMessageNumber)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingSockets_SendMessageToConnection$descriptor() {
        return SteamAPI_ISteamNetworkingSockets_SendMessageToConnection.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * EResult SteamAPI_ISteamNetworkingSockets_SendMessageToConnection(HSteamNetConnection hConn, const void *pData, uint32 cbData, int nSendFlags, int64 *pOutMessageNumber)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingSockets_SendMessageToConnection$handle() {
        return SteamAPI_ISteamNetworkingSockets_SendMessageToConnection.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * EResult SteamAPI_ISteamNetworkingSockets_SendMessageToConnection(HSteamNetConnection hConn, const void *pData, uint32 cbData, int nSendFlags, int64 *pOutMessageNumber)
     * }
     */
    public static int SteamAPI_ISteamNetworkingSockets_SendMessageToConnection(int hConn, MemorySegment pData, int cbData, int nSendFlags, MemorySegment pOutMessageNumber) {
        var mh$ = SteamAPI_ISteamNetworkingSockets_SendMessageToConnection.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingSockets_SendMessageToConnection", hConn, pData, cbData, nSendFlags, pOutMessageNumber);
            }
            return (int)mh$.invokeExact(hConn, pData, cbData, nSendFlags, pOutMessageNumber);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingSockets_SendMessages {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamNetworkingSockets_SendMessages"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamNetworkingSockets_SendMessages(int nMessages, SteamNetworkingMessage_t *const *pMessages, int64 *pOutMessageNumberOrResult)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingSockets_SendMessages$descriptor() {
        return SteamAPI_ISteamNetworkingSockets_SendMessages.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamNetworkingSockets_SendMessages(int nMessages, SteamNetworkingMessage_t *const *pMessages, int64 *pOutMessageNumberOrResult)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingSockets_SendMessages$handle() {
        return SteamAPI_ISteamNetworkingSockets_SendMessages.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamNetworkingSockets_SendMessages(int nMessages, SteamNetworkingMessage_t *const *pMessages, int64 *pOutMessageNumberOrResult)
     * }
     */
    public static void SteamAPI_ISteamNetworkingSockets_SendMessages(int nMessages, MemorySegment pMessages, MemorySegment pOutMessageNumberOrResult) {
        var mh$ = SteamAPI_ISteamNetworkingSockets_SendMessages.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingSockets_SendMessages", nMessages, pMessages, pOutMessageNumberOrResult);
            }
            mh$.invokeExact(nMessages, pMessages, pOutMessageNumberOrResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingSockets_FlushMessagesOnConnection {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamNetworkingSockets_FlushMessagesOnConnection"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * EResult SteamAPI_ISteamNetworkingSockets_FlushMessagesOnConnection(HSteamNetConnection hConn)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingSockets_FlushMessagesOnConnection$descriptor() {
        return SteamAPI_ISteamNetworkingSockets_FlushMessagesOnConnection.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * EResult SteamAPI_ISteamNetworkingSockets_FlushMessagesOnConnection(HSteamNetConnection hConn)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingSockets_FlushMessagesOnConnection$handle() {
        return SteamAPI_ISteamNetworkingSockets_FlushMessagesOnConnection.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * EResult SteamAPI_ISteamNetworkingSockets_FlushMessagesOnConnection(HSteamNetConnection hConn)
     * }
     */
    public static int SteamAPI_ISteamNetworkingSockets_FlushMessagesOnConnection(int hConn) {
        var mh$ = SteamAPI_ISteamNetworkingSockets_FlushMessagesOnConnection.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingSockets_FlushMessagesOnConnection", hConn);
            }
            return (int)mh$.invokeExact(hConn);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingSockets_ReceiveMessagesOnConnection {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamNetworkingSockets_ReceiveMessagesOnConnection"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamNetworkingSockets_ReceiveMessagesOnConnection(HSteamNetConnection hConn, SteamNetworkingMessage_t **ppOutMessages, int nMaxMessages)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingSockets_ReceiveMessagesOnConnection$descriptor() {
        return SteamAPI_ISteamNetworkingSockets_ReceiveMessagesOnConnection.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamNetworkingSockets_ReceiveMessagesOnConnection(HSteamNetConnection hConn, SteamNetworkingMessage_t **ppOutMessages, int nMaxMessages)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingSockets_ReceiveMessagesOnConnection$handle() {
        return SteamAPI_ISteamNetworkingSockets_ReceiveMessagesOnConnection.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int SteamAPI_ISteamNetworkingSockets_ReceiveMessagesOnConnection(HSteamNetConnection hConn, SteamNetworkingMessage_t **ppOutMessages, int nMaxMessages)
     * }
     */
    public static int SteamAPI_ISteamNetworkingSockets_ReceiveMessagesOnConnection(int hConn, MemorySegment ppOutMessages, int nMaxMessages) {
        var mh$ = SteamAPI_ISteamNetworkingSockets_ReceiveMessagesOnConnection.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingSockets_ReceiveMessagesOnConnection", hConn, ppOutMessages, nMaxMessages);
            }
            return (int)mh$.invokeExact(hConn, ppOutMessages, nMaxMessages);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingSockets_GetConnectionInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamNetworkingSockets_GetConnectionInfo"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingSockets_GetConnectionInfo(HSteamNetConnection hConn, SteamNetConnectionInfo_t *pInfo)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingSockets_GetConnectionInfo$descriptor() {
        return SteamAPI_ISteamNetworkingSockets_GetConnectionInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingSockets_GetConnectionInfo(HSteamNetConnection hConn, SteamNetConnectionInfo_t *pInfo)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingSockets_GetConnectionInfo$handle() {
        return SteamAPI_ISteamNetworkingSockets_GetConnectionInfo.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingSockets_GetConnectionInfo(HSteamNetConnection hConn, SteamNetConnectionInfo_t *pInfo)
     * }
     */
    public static boolean SteamAPI_ISteamNetworkingSockets_GetConnectionInfo(int hConn, MemorySegment pInfo) {
        var mh$ = SteamAPI_ISteamNetworkingSockets_GetConnectionInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingSockets_GetConnectionInfo", hConn, pInfo);
            }
            return (boolean)mh$.invokeExact(hConn, pInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingSockets_GetConnectionRealTimeStatus {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamNetworkingSockets_GetConnectionRealTimeStatus"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * EResult SteamAPI_ISteamNetworkingSockets_GetConnectionRealTimeStatus(HSteamNetConnection hConn, SteamNetConnectionRealTimeStatus_t *pStatus, int nLanes, SteamNetConnectionRealTimeLaneStatus_t *pLanes)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingSockets_GetConnectionRealTimeStatus$descriptor() {
        return SteamAPI_ISteamNetworkingSockets_GetConnectionRealTimeStatus.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * EResult SteamAPI_ISteamNetworkingSockets_GetConnectionRealTimeStatus(HSteamNetConnection hConn, SteamNetConnectionRealTimeStatus_t *pStatus, int nLanes, SteamNetConnectionRealTimeLaneStatus_t *pLanes)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingSockets_GetConnectionRealTimeStatus$handle() {
        return SteamAPI_ISteamNetworkingSockets_GetConnectionRealTimeStatus.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * EResult SteamAPI_ISteamNetworkingSockets_GetConnectionRealTimeStatus(HSteamNetConnection hConn, SteamNetConnectionRealTimeStatus_t *pStatus, int nLanes, SteamNetConnectionRealTimeLaneStatus_t *pLanes)
     * }
     */
    public static int SteamAPI_ISteamNetworkingSockets_GetConnectionRealTimeStatus(int hConn, MemorySegment pStatus, int nLanes, MemorySegment pLanes) {
        var mh$ = SteamAPI_ISteamNetworkingSockets_GetConnectionRealTimeStatus.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingSockets_GetConnectionRealTimeStatus", hConn, pStatus, nLanes, pLanes);
            }
            return (int)mh$.invokeExact(hConn, pStatus, nLanes, pLanes);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingSockets_GetDetailedConnectionStatus {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamNetworkingSockets_GetDetailedConnectionStatus"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamNetworkingSockets_GetDetailedConnectionStatus(HSteamNetConnection hConn, char *pszBuf, int cbBuf)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingSockets_GetDetailedConnectionStatus$descriptor() {
        return SteamAPI_ISteamNetworkingSockets_GetDetailedConnectionStatus.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamNetworkingSockets_GetDetailedConnectionStatus(HSteamNetConnection hConn, char *pszBuf, int cbBuf)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingSockets_GetDetailedConnectionStatus$handle() {
        return SteamAPI_ISteamNetworkingSockets_GetDetailedConnectionStatus.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int SteamAPI_ISteamNetworkingSockets_GetDetailedConnectionStatus(HSteamNetConnection hConn, char *pszBuf, int cbBuf)
     * }
     */
    public static int SteamAPI_ISteamNetworkingSockets_GetDetailedConnectionStatus(int hConn, MemorySegment pszBuf, int cbBuf) {
        var mh$ = SteamAPI_ISteamNetworkingSockets_GetDetailedConnectionStatus.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingSockets_GetDetailedConnectionStatus", hConn, pszBuf, cbBuf);
            }
            return (int)mh$.invokeExact(hConn, pszBuf, cbBuf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingSockets_GetListenSocketAddress {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamNetworkingSockets_GetListenSocketAddress"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingSockets_GetListenSocketAddress(HSteamListenSocket hSocket, SteamNetworkingIPAddr *address)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingSockets_GetListenSocketAddress$descriptor() {
        return SteamAPI_ISteamNetworkingSockets_GetListenSocketAddress.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingSockets_GetListenSocketAddress(HSteamListenSocket hSocket, SteamNetworkingIPAddr *address)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingSockets_GetListenSocketAddress$handle() {
        return SteamAPI_ISteamNetworkingSockets_GetListenSocketAddress.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingSockets_GetListenSocketAddress(HSteamListenSocket hSocket, SteamNetworkingIPAddr *address)
     * }
     */
    public static boolean SteamAPI_ISteamNetworkingSockets_GetListenSocketAddress(int hSocket, MemorySegment address) {
        var mh$ = SteamAPI_ISteamNetworkingSockets_GetListenSocketAddress.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingSockets_GetListenSocketAddress", hSocket, address);
            }
            return (boolean)mh$.invokeExact(hSocket, address);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingSockets_CreateSocketPair {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamNetworkingSockets_CreateSocketPair"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingSockets_CreateSocketPair(HSteamNetConnection *pOutConnection1, HSteamNetConnection *pOutConnection2, bool bUseNetworkLoopback, const SteamNetworkingIdentity *pIdentity1, const SteamNetworkingIdentity *pIdentity2)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingSockets_CreateSocketPair$descriptor() {
        return SteamAPI_ISteamNetworkingSockets_CreateSocketPair.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingSockets_CreateSocketPair(HSteamNetConnection *pOutConnection1, HSteamNetConnection *pOutConnection2, bool bUseNetworkLoopback, const SteamNetworkingIdentity *pIdentity1, const SteamNetworkingIdentity *pIdentity2)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingSockets_CreateSocketPair$handle() {
        return SteamAPI_ISteamNetworkingSockets_CreateSocketPair.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingSockets_CreateSocketPair(HSteamNetConnection *pOutConnection1, HSteamNetConnection *pOutConnection2, bool bUseNetworkLoopback, const SteamNetworkingIdentity *pIdentity1, const SteamNetworkingIdentity *pIdentity2)
     * }
     */
    public static boolean SteamAPI_ISteamNetworkingSockets_CreateSocketPair(MemorySegment pOutConnection1, MemorySegment pOutConnection2, boolean bUseNetworkLoopback, MemorySegment pIdentity1, MemorySegment pIdentity2) {
        var mh$ = SteamAPI_ISteamNetworkingSockets_CreateSocketPair.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingSockets_CreateSocketPair", pOutConnection1, pOutConnection2, bUseNetworkLoopback, pIdentity1, pIdentity2);
            }
            return (boolean)mh$.invokeExact(pOutConnection1, pOutConnection2, bUseNetworkLoopback, pIdentity1, pIdentity2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingSockets_ConfigureConnectionLanes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamNetworkingSockets_ConfigureConnectionLanes"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * EResult SteamAPI_ISteamNetworkingSockets_ConfigureConnectionLanes(HSteamNetConnection hConn, int nNumLanes, const int *pLanePriorities, const uint16 *pLaneWeights)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingSockets_ConfigureConnectionLanes$descriptor() {
        return SteamAPI_ISteamNetworkingSockets_ConfigureConnectionLanes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * EResult SteamAPI_ISteamNetworkingSockets_ConfigureConnectionLanes(HSteamNetConnection hConn, int nNumLanes, const int *pLanePriorities, const uint16 *pLaneWeights)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingSockets_ConfigureConnectionLanes$handle() {
        return SteamAPI_ISteamNetworkingSockets_ConfigureConnectionLanes.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * EResult SteamAPI_ISteamNetworkingSockets_ConfigureConnectionLanes(HSteamNetConnection hConn, int nNumLanes, const int *pLanePriorities, const uint16 *pLaneWeights)
     * }
     */
    public static int SteamAPI_ISteamNetworkingSockets_ConfigureConnectionLanes(int hConn, int nNumLanes, MemorySegment pLanePriorities, MemorySegment pLaneWeights) {
        var mh$ = SteamAPI_ISteamNetworkingSockets_ConfigureConnectionLanes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingSockets_ConfigureConnectionLanes", hConn, nNumLanes, pLanePriorities, pLaneWeights);
            }
            return (int)mh$.invokeExact(hConn, nNumLanes, pLanePriorities, pLaneWeights);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingSockets_GetIdentity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamNetworkingSockets_GetIdentity"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingSockets_GetIdentity(SteamNetworkingIdentity *pIdentity)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingSockets_GetIdentity$descriptor() {
        return SteamAPI_ISteamNetworkingSockets_GetIdentity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingSockets_GetIdentity(SteamNetworkingIdentity *pIdentity)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingSockets_GetIdentity$handle() {
        return SteamAPI_ISteamNetworkingSockets_GetIdentity.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingSockets_GetIdentity(SteamNetworkingIdentity *pIdentity)
     * }
     */
    public static boolean SteamAPI_ISteamNetworkingSockets_GetIdentity(MemorySegment pIdentity) {
        var mh$ = SteamAPI_ISteamNetworkingSockets_GetIdentity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingSockets_GetIdentity", pIdentity);
            }
            return (boolean)mh$.invokeExact(pIdentity);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingSockets_InitAuthentication {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamNetworkingSockets_InitAuthentication"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ESteamNetworkingAvailability SteamAPI_ISteamNetworkingSockets_InitAuthentication()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingSockets_InitAuthentication$descriptor() {
        return SteamAPI_ISteamNetworkingSockets_InitAuthentication.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ESteamNetworkingAvailability SteamAPI_ISteamNetworkingSockets_InitAuthentication()
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingSockets_InitAuthentication$handle() {
        return SteamAPI_ISteamNetworkingSockets_InitAuthentication.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ESteamNetworkingAvailability SteamAPI_ISteamNetworkingSockets_InitAuthentication()
     * }
     */
    public static int SteamAPI_ISteamNetworkingSockets_InitAuthentication() {
        var mh$ = SteamAPI_ISteamNetworkingSockets_InitAuthentication.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingSockets_InitAuthentication");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingSockets_GetAuthenticationStatus {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamNetworkingSockets_GetAuthenticationStatus"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ESteamNetworkingAvailability SteamAPI_ISteamNetworkingSockets_GetAuthenticationStatus(SteamNetAuthenticationStatus_t *pDetails)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingSockets_GetAuthenticationStatus$descriptor() {
        return SteamAPI_ISteamNetworkingSockets_GetAuthenticationStatus.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ESteamNetworkingAvailability SteamAPI_ISteamNetworkingSockets_GetAuthenticationStatus(SteamNetAuthenticationStatus_t *pDetails)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingSockets_GetAuthenticationStatus$handle() {
        return SteamAPI_ISteamNetworkingSockets_GetAuthenticationStatus.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ESteamNetworkingAvailability SteamAPI_ISteamNetworkingSockets_GetAuthenticationStatus(SteamNetAuthenticationStatus_t *pDetails)
     * }
     */
    public static int SteamAPI_ISteamNetworkingSockets_GetAuthenticationStatus(MemorySegment pDetails) {
        var mh$ = SteamAPI_ISteamNetworkingSockets_GetAuthenticationStatus.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingSockets_GetAuthenticationStatus", pDetails);
            }
            return (int)mh$.invokeExact(pDetails);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingSockets_CreatePollGroup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamNetworkingSockets_CreatePollGroup"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HSteamNetPollGroup SteamAPI_ISteamNetworkingSockets_CreatePollGroup()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingSockets_CreatePollGroup$descriptor() {
        return SteamAPI_ISteamNetworkingSockets_CreatePollGroup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HSteamNetPollGroup SteamAPI_ISteamNetworkingSockets_CreatePollGroup()
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingSockets_CreatePollGroup$handle() {
        return SteamAPI_ISteamNetworkingSockets_CreatePollGroup.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HSteamNetPollGroup SteamAPI_ISteamNetworkingSockets_CreatePollGroup()
     * }
     */
    public static int SteamAPI_ISteamNetworkingSockets_CreatePollGroup() {
        var mh$ = SteamAPI_ISteamNetworkingSockets_CreatePollGroup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingSockets_CreatePollGroup");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingSockets_DestroyPollGroup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamNetworkingSockets_DestroyPollGroup"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingSockets_DestroyPollGroup(HSteamNetPollGroup hPollGroup)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingSockets_DestroyPollGroup$descriptor() {
        return SteamAPI_ISteamNetworkingSockets_DestroyPollGroup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingSockets_DestroyPollGroup(HSteamNetPollGroup hPollGroup)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingSockets_DestroyPollGroup$handle() {
        return SteamAPI_ISteamNetworkingSockets_DestroyPollGroup.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingSockets_DestroyPollGroup(HSteamNetPollGroup hPollGroup)
     * }
     */
    public static boolean SteamAPI_ISteamNetworkingSockets_DestroyPollGroup(int hPollGroup) {
        var mh$ = SteamAPI_ISteamNetworkingSockets_DestroyPollGroup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingSockets_DestroyPollGroup", hPollGroup);
            }
            return (boolean)mh$.invokeExact(hPollGroup);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingSockets_SetConnectionPollGroup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamNetworkingSockets_SetConnectionPollGroup"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingSockets_SetConnectionPollGroup(HSteamNetConnection hConn, HSteamNetPollGroup hPollGroup)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingSockets_SetConnectionPollGroup$descriptor() {
        return SteamAPI_ISteamNetworkingSockets_SetConnectionPollGroup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingSockets_SetConnectionPollGroup(HSteamNetConnection hConn, HSteamNetPollGroup hPollGroup)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingSockets_SetConnectionPollGroup$handle() {
        return SteamAPI_ISteamNetworkingSockets_SetConnectionPollGroup.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingSockets_SetConnectionPollGroup(HSteamNetConnection hConn, HSteamNetPollGroup hPollGroup)
     * }
     */
    public static boolean SteamAPI_ISteamNetworkingSockets_SetConnectionPollGroup(int hConn, int hPollGroup) {
        var mh$ = SteamAPI_ISteamNetworkingSockets_SetConnectionPollGroup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingSockets_SetConnectionPollGroup", hConn, hPollGroup);
            }
            return (boolean)mh$.invokeExact(hConn, hPollGroup);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingSockets_ReceiveMessagesOnPollGroup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamNetworkingSockets_ReceiveMessagesOnPollGroup"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamNetworkingSockets_ReceiveMessagesOnPollGroup(HSteamNetPollGroup hPollGroup, SteamNetworkingMessage_t **ppOutMessages, int nMaxMessages)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingSockets_ReceiveMessagesOnPollGroup$descriptor() {
        return SteamAPI_ISteamNetworkingSockets_ReceiveMessagesOnPollGroup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamNetworkingSockets_ReceiveMessagesOnPollGroup(HSteamNetPollGroup hPollGroup, SteamNetworkingMessage_t **ppOutMessages, int nMaxMessages)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingSockets_ReceiveMessagesOnPollGroup$handle() {
        return SteamAPI_ISteamNetworkingSockets_ReceiveMessagesOnPollGroup.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int SteamAPI_ISteamNetworkingSockets_ReceiveMessagesOnPollGroup(HSteamNetPollGroup hPollGroup, SteamNetworkingMessage_t **ppOutMessages, int nMaxMessages)
     * }
     */
    public static int SteamAPI_ISteamNetworkingSockets_ReceiveMessagesOnPollGroup(int hPollGroup, MemorySegment ppOutMessages, int nMaxMessages) {
        var mh$ = SteamAPI_ISteamNetworkingSockets_ReceiveMessagesOnPollGroup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingSockets_ReceiveMessagesOnPollGroup", hPollGroup, ppOutMessages, nMaxMessages);
            }
            return (int)mh$.invokeExact(hPollGroup, ppOutMessages, nMaxMessages);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingSockets_ConnectToHostedDedicatedServer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamNetworkingSockets_ConnectToHostedDedicatedServer"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HSteamNetConnection SteamAPI_ISteamNetworkingSockets_ConnectToHostedDedicatedServer(const SteamNetworkingIdentity *identityTarget, int nRemoteVirtualPort, int nOptions, const SteamNetworkingConfigValue_t *pOptions)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingSockets_ConnectToHostedDedicatedServer$descriptor() {
        return SteamAPI_ISteamNetworkingSockets_ConnectToHostedDedicatedServer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HSteamNetConnection SteamAPI_ISteamNetworkingSockets_ConnectToHostedDedicatedServer(const SteamNetworkingIdentity *identityTarget, int nRemoteVirtualPort, int nOptions, const SteamNetworkingConfigValue_t *pOptions)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingSockets_ConnectToHostedDedicatedServer$handle() {
        return SteamAPI_ISteamNetworkingSockets_ConnectToHostedDedicatedServer.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HSteamNetConnection SteamAPI_ISteamNetworkingSockets_ConnectToHostedDedicatedServer(const SteamNetworkingIdentity *identityTarget, int nRemoteVirtualPort, int nOptions, const SteamNetworkingConfigValue_t *pOptions)
     * }
     */
    public static int SteamAPI_ISteamNetworkingSockets_ConnectToHostedDedicatedServer(MemorySegment identityTarget, int nRemoteVirtualPort, int nOptions, MemorySegment pOptions) {
        var mh$ = SteamAPI_ISteamNetworkingSockets_ConnectToHostedDedicatedServer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingSockets_ConnectToHostedDedicatedServer", identityTarget, nRemoteVirtualPort, nOptions, pOptions);
            }
            return (int)mh$.invokeExact(identityTarget, nRemoteVirtualPort, nOptions, pOptions);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingSockets_GetHostedDedicatedServerPort {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_SHORT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamNetworkingSockets_GetHostedDedicatedServerPort"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint16 SteamAPI_ISteamNetworkingSockets_GetHostedDedicatedServerPort()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingSockets_GetHostedDedicatedServerPort$descriptor() {
        return SteamAPI_ISteamNetworkingSockets_GetHostedDedicatedServerPort.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint16 SteamAPI_ISteamNetworkingSockets_GetHostedDedicatedServerPort()
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingSockets_GetHostedDedicatedServerPort$handle() {
        return SteamAPI_ISteamNetworkingSockets_GetHostedDedicatedServerPort.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * uint16 SteamAPI_ISteamNetworkingSockets_GetHostedDedicatedServerPort()
     * }
     */
    public static short SteamAPI_ISteamNetworkingSockets_GetHostedDedicatedServerPort() {
        var mh$ = SteamAPI_ISteamNetworkingSockets_GetHostedDedicatedServerPort.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingSockets_GetHostedDedicatedServerPort");
            }
            return (short)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingSockets_GetHostedDedicatedServerPOPID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamNetworkingSockets_GetHostedDedicatedServerPOPID"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamNetworkingPOPID SteamAPI_ISteamNetworkingSockets_GetHostedDedicatedServerPOPID()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingSockets_GetHostedDedicatedServerPOPID$descriptor() {
        return SteamAPI_ISteamNetworkingSockets_GetHostedDedicatedServerPOPID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamNetworkingPOPID SteamAPI_ISteamNetworkingSockets_GetHostedDedicatedServerPOPID()
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingSockets_GetHostedDedicatedServerPOPID$handle() {
        return SteamAPI_ISteamNetworkingSockets_GetHostedDedicatedServerPOPID.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamNetworkingPOPID SteamAPI_ISteamNetworkingSockets_GetHostedDedicatedServerPOPID()
     * }
     */
    public static int SteamAPI_ISteamNetworkingSockets_GetHostedDedicatedServerPOPID() {
        var mh$ = SteamAPI_ISteamNetworkingSockets_GetHostedDedicatedServerPOPID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingSockets_GetHostedDedicatedServerPOPID");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingSockets_GetHostedDedicatedServerAddress {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamNetworkingSockets_GetHostedDedicatedServerAddress"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * EResult SteamAPI_ISteamNetworkingSockets_GetHostedDedicatedServerAddress(SteamDatagramHostedAddress *pRouting)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingSockets_GetHostedDedicatedServerAddress$descriptor() {
        return SteamAPI_ISteamNetworkingSockets_GetHostedDedicatedServerAddress.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * EResult SteamAPI_ISteamNetworkingSockets_GetHostedDedicatedServerAddress(SteamDatagramHostedAddress *pRouting)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingSockets_GetHostedDedicatedServerAddress$handle() {
        return SteamAPI_ISteamNetworkingSockets_GetHostedDedicatedServerAddress.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * EResult SteamAPI_ISteamNetworkingSockets_GetHostedDedicatedServerAddress(SteamDatagramHostedAddress *pRouting)
     * }
     */
    public static int SteamAPI_ISteamNetworkingSockets_GetHostedDedicatedServerAddress(MemorySegment pRouting) {
        var mh$ = SteamAPI_ISteamNetworkingSockets_GetHostedDedicatedServerAddress.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingSockets_GetHostedDedicatedServerAddress", pRouting);
            }
            return (int)mh$.invokeExact(pRouting);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingSockets_CreateHostedDedicatedServerListenSocket {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamNetworkingSockets_CreateHostedDedicatedServerListenSocket"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HSteamListenSocket SteamAPI_ISteamNetworkingSockets_CreateHostedDedicatedServerListenSocket(int nLocalVirtualPort, int nOptions, const SteamNetworkingConfigValue_t *pOptions)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingSockets_CreateHostedDedicatedServerListenSocket$descriptor() {
        return SteamAPI_ISteamNetworkingSockets_CreateHostedDedicatedServerListenSocket.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HSteamListenSocket SteamAPI_ISteamNetworkingSockets_CreateHostedDedicatedServerListenSocket(int nLocalVirtualPort, int nOptions, const SteamNetworkingConfigValue_t *pOptions)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingSockets_CreateHostedDedicatedServerListenSocket$handle() {
        return SteamAPI_ISteamNetworkingSockets_CreateHostedDedicatedServerListenSocket.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HSteamListenSocket SteamAPI_ISteamNetworkingSockets_CreateHostedDedicatedServerListenSocket(int nLocalVirtualPort, int nOptions, const SteamNetworkingConfigValue_t *pOptions)
     * }
     */
    public static int SteamAPI_ISteamNetworkingSockets_CreateHostedDedicatedServerListenSocket(int nLocalVirtualPort, int nOptions, MemorySegment pOptions) {
        var mh$ = SteamAPI_ISteamNetworkingSockets_CreateHostedDedicatedServerListenSocket.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingSockets_CreateHostedDedicatedServerListenSocket", nLocalVirtualPort, nOptions, pOptions);
            }
            return (int)mh$.invokeExact(nLocalVirtualPort, nOptions, pOptions);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingSockets_GetGameCoordinatorServerLogin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamNetworkingSockets_GetGameCoordinatorServerLogin"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * EResult SteamAPI_ISteamNetworkingSockets_GetGameCoordinatorServerLogin(SteamDatagramGameCoordinatorServerLogin *pLoginInfo, int *pcbSignedBlob, void *pBlob)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingSockets_GetGameCoordinatorServerLogin$descriptor() {
        return SteamAPI_ISteamNetworkingSockets_GetGameCoordinatorServerLogin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * EResult SteamAPI_ISteamNetworkingSockets_GetGameCoordinatorServerLogin(SteamDatagramGameCoordinatorServerLogin *pLoginInfo, int *pcbSignedBlob, void *pBlob)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingSockets_GetGameCoordinatorServerLogin$handle() {
        return SteamAPI_ISteamNetworkingSockets_GetGameCoordinatorServerLogin.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * EResult SteamAPI_ISteamNetworkingSockets_GetGameCoordinatorServerLogin(SteamDatagramGameCoordinatorServerLogin *pLoginInfo, int *pcbSignedBlob, void *pBlob)
     * }
     */
    public static int SteamAPI_ISteamNetworkingSockets_GetGameCoordinatorServerLogin(MemorySegment pLoginInfo, MemorySegment pcbSignedBlob, MemorySegment pBlob) {
        var mh$ = SteamAPI_ISteamNetworkingSockets_GetGameCoordinatorServerLogin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingSockets_GetGameCoordinatorServerLogin", pLoginInfo, pcbSignedBlob, pBlob);
            }
            return (int)mh$.invokeExact(pLoginInfo, pcbSignedBlob, pBlob);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingSockets_GetCertificateRequest {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamNetworkingSockets_GetCertificateRequest"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingSockets_GetCertificateRequest(int *pcbBlob, void *pBlob, SteamNetworkingErrMsg *errMsg)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingSockets_GetCertificateRequest$descriptor() {
        return SteamAPI_ISteamNetworkingSockets_GetCertificateRequest.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingSockets_GetCertificateRequest(int *pcbBlob, void *pBlob, SteamNetworkingErrMsg *errMsg)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingSockets_GetCertificateRequest$handle() {
        return SteamAPI_ISteamNetworkingSockets_GetCertificateRequest.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingSockets_GetCertificateRequest(int *pcbBlob, void *pBlob, SteamNetworkingErrMsg *errMsg)
     * }
     */
    public static boolean SteamAPI_ISteamNetworkingSockets_GetCertificateRequest(MemorySegment pcbBlob, MemorySegment pBlob, MemorySegment errMsg) {
        var mh$ = SteamAPI_ISteamNetworkingSockets_GetCertificateRequest.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingSockets_GetCertificateRequest", pcbBlob, pBlob, errMsg);
            }
            return (boolean)mh$.invokeExact(pcbBlob, pBlob, errMsg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingSockets_SetCertificate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamNetworkingSockets_SetCertificate"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingSockets_SetCertificate(const void *pCertificate, int cbCertificate, SteamNetworkingErrMsg *errMsg)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingSockets_SetCertificate$descriptor() {
        return SteamAPI_ISteamNetworkingSockets_SetCertificate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingSockets_SetCertificate(const void *pCertificate, int cbCertificate, SteamNetworkingErrMsg *errMsg)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingSockets_SetCertificate$handle() {
        return SteamAPI_ISteamNetworkingSockets_SetCertificate.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingSockets_SetCertificate(const void *pCertificate, int cbCertificate, SteamNetworkingErrMsg *errMsg)
     * }
     */
    public static boolean SteamAPI_ISteamNetworkingSockets_SetCertificate(MemorySegment pCertificate, int cbCertificate, MemorySegment errMsg) {
        var mh$ = SteamAPI_ISteamNetworkingSockets_SetCertificate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingSockets_SetCertificate", pCertificate, cbCertificate, errMsg);
            }
            return (boolean)mh$.invokeExact(pCertificate, cbCertificate, errMsg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingSockets_ResetIdentity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamNetworkingSockets_ResetIdentity"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamNetworkingSockets_ResetIdentity(const SteamNetworkingIdentity *pIdentity)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingSockets_ResetIdentity$descriptor() {
        return SteamAPI_ISteamNetworkingSockets_ResetIdentity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamNetworkingSockets_ResetIdentity(const SteamNetworkingIdentity *pIdentity)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingSockets_ResetIdentity$handle() {
        return SteamAPI_ISteamNetworkingSockets_ResetIdentity.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamNetworkingSockets_ResetIdentity(const SteamNetworkingIdentity *pIdentity)
     * }
     */
    public static void SteamAPI_ISteamNetworkingSockets_ResetIdentity(MemorySegment pIdentity) {
        var mh$ = SteamAPI_ISteamNetworkingSockets_ResetIdentity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingSockets_ResetIdentity", pIdentity);
            }
            mh$.invokeExact(pIdentity);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingSockets_RunCallbacks {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamNetworkingSockets_RunCallbacks"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamNetworkingSockets_RunCallbacks()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingSockets_RunCallbacks$descriptor() {
        return SteamAPI_ISteamNetworkingSockets_RunCallbacks.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamNetworkingSockets_RunCallbacks()
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingSockets_RunCallbacks$handle() {
        return SteamAPI_ISteamNetworkingSockets_RunCallbacks.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamNetworkingSockets_RunCallbacks()
     * }
     */
    public static void SteamAPI_ISteamNetworkingSockets_RunCallbacks() {
        var mh$ = SteamAPI_ISteamNetworkingSockets_RunCallbacks.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingSockets_RunCallbacks");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingSockets_BeginAsyncRequestFakeIP {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamNetworkingSockets_BeginAsyncRequestFakeIP"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingSockets_BeginAsyncRequestFakeIP(int nNumPorts)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingSockets_BeginAsyncRequestFakeIP$descriptor() {
        return SteamAPI_ISteamNetworkingSockets_BeginAsyncRequestFakeIP.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingSockets_BeginAsyncRequestFakeIP(int nNumPorts)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingSockets_BeginAsyncRequestFakeIP$handle() {
        return SteamAPI_ISteamNetworkingSockets_BeginAsyncRequestFakeIP.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingSockets_BeginAsyncRequestFakeIP(int nNumPorts)
     * }
     */
    public static boolean SteamAPI_ISteamNetworkingSockets_BeginAsyncRequestFakeIP(int nNumPorts) {
        var mh$ = SteamAPI_ISteamNetworkingSockets_BeginAsyncRequestFakeIP.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingSockets_BeginAsyncRequestFakeIP", nNumPorts);
            }
            return (boolean)mh$.invokeExact(nNumPorts);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingSockets_GetFakeIP {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamNetworkingSockets_GetFakeIP"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamNetworkingSockets_GetFakeIP(int idxFirstPort, SteamNetworkingFakeIPResult_t *pInfo)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingSockets_GetFakeIP$descriptor() {
        return SteamAPI_ISteamNetworkingSockets_GetFakeIP.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamNetworkingSockets_GetFakeIP(int idxFirstPort, SteamNetworkingFakeIPResult_t *pInfo)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingSockets_GetFakeIP$handle() {
        return SteamAPI_ISteamNetworkingSockets_GetFakeIP.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamNetworkingSockets_GetFakeIP(int idxFirstPort, SteamNetworkingFakeIPResult_t *pInfo)
     * }
     */
    public static void SteamAPI_ISteamNetworkingSockets_GetFakeIP(int idxFirstPort, MemorySegment pInfo) {
        var mh$ = SteamAPI_ISteamNetworkingSockets_GetFakeIP.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingSockets_GetFakeIP", idxFirstPort, pInfo);
            }
            mh$.invokeExact(idxFirstPort, pInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingSockets_CreateListenSocketP2PFakeIP {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamNetworkingSockets_CreateListenSocketP2PFakeIP"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HSteamListenSocket SteamAPI_ISteamNetworkingSockets_CreateListenSocketP2PFakeIP(int idxFakePort, int nOptions, const SteamNetworkingConfigValue_t *pOptions)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingSockets_CreateListenSocketP2PFakeIP$descriptor() {
        return SteamAPI_ISteamNetworkingSockets_CreateListenSocketP2PFakeIP.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HSteamListenSocket SteamAPI_ISteamNetworkingSockets_CreateListenSocketP2PFakeIP(int idxFakePort, int nOptions, const SteamNetworkingConfigValue_t *pOptions)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingSockets_CreateListenSocketP2PFakeIP$handle() {
        return SteamAPI_ISteamNetworkingSockets_CreateListenSocketP2PFakeIP.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HSteamListenSocket SteamAPI_ISteamNetworkingSockets_CreateListenSocketP2PFakeIP(int idxFakePort, int nOptions, const SteamNetworkingConfigValue_t *pOptions)
     * }
     */
    public static int SteamAPI_ISteamNetworkingSockets_CreateListenSocketP2PFakeIP(int idxFakePort, int nOptions, MemorySegment pOptions) {
        var mh$ = SteamAPI_ISteamNetworkingSockets_CreateListenSocketP2PFakeIP.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingSockets_CreateListenSocketP2PFakeIP", idxFakePort, nOptions, pOptions);
            }
            return (int)mh$.invokeExact(idxFakePort, nOptions, pOptions);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingSockets_GetRemoteFakeIPForConnection {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamNetworkingSockets_GetRemoteFakeIPForConnection"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * EResult SteamAPI_ISteamNetworkingSockets_GetRemoteFakeIPForConnection(HSteamNetConnection hConn, SteamNetworkingIPAddr *pOutAddr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingSockets_GetRemoteFakeIPForConnection$descriptor() {
        return SteamAPI_ISteamNetworkingSockets_GetRemoteFakeIPForConnection.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * EResult SteamAPI_ISteamNetworkingSockets_GetRemoteFakeIPForConnection(HSteamNetConnection hConn, SteamNetworkingIPAddr *pOutAddr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingSockets_GetRemoteFakeIPForConnection$handle() {
        return SteamAPI_ISteamNetworkingSockets_GetRemoteFakeIPForConnection.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * EResult SteamAPI_ISteamNetworkingSockets_GetRemoteFakeIPForConnection(HSteamNetConnection hConn, SteamNetworkingIPAddr *pOutAddr)
     * }
     */
    public static int SteamAPI_ISteamNetworkingSockets_GetRemoteFakeIPForConnection(int hConn, MemorySegment pOutAddr) {
        var mh$ = SteamAPI_ISteamNetworkingSockets_GetRemoteFakeIPForConnection.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingSockets_GetRemoteFakeIPForConnection", hConn, pOutAddr);
            }
            return (int)mh$.invokeExact(hConn, pOutAddr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingSockets_CreateFakeUDPPort {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamNetworkingSockets_CreateFakeUDPPort"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ISteamNetworkingFakeUDPPort *SteamAPI_ISteamNetworkingSockets_CreateFakeUDPPort(int idxFakeServerPort)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingSockets_CreateFakeUDPPort$descriptor() {
        return SteamAPI_ISteamNetworkingSockets_CreateFakeUDPPort.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ISteamNetworkingFakeUDPPort *SteamAPI_ISteamNetworkingSockets_CreateFakeUDPPort(int idxFakeServerPort)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingSockets_CreateFakeUDPPort$handle() {
        return SteamAPI_ISteamNetworkingSockets_CreateFakeUDPPort.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ISteamNetworkingFakeUDPPort *SteamAPI_ISteamNetworkingSockets_CreateFakeUDPPort(int idxFakeServerPort)
     * }
     */
    public static MemorySegment SteamAPI_ISteamNetworkingSockets_CreateFakeUDPPort(int idxFakeServerPort) {
        var mh$ = SteamAPI_ISteamNetworkingSockets_CreateFakeUDPPort.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingSockets_CreateFakeUDPPort", idxFakeServerPort);
            }
            return (MemorySegment)mh$.invokeExact(idxFakeServerPort);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingUtils_AllocateMessage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamNetworkingUtils_AllocateMessage"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamNetworkingMessage_t *SteamAPI_ISteamNetworkingUtils_AllocateMessage(int cbAllocateBuffer)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingUtils_AllocateMessage$descriptor() {
        return SteamAPI_ISteamNetworkingUtils_AllocateMessage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamNetworkingMessage_t *SteamAPI_ISteamNetworkingUtils_AllocateMessage(int cbAllocateBuffer)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingUtils_AllocateMessage$handle() {
        return SteamAPI_ISteamNetworkingUtils_AllocateMessage.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamNetworkingMessage_t *SteamAPI_ISteamNetworkingUtils_AllocateMessage(int cbAllocateBuffer)
     * }
     */
    public static MemorySegment SteamAPI_ISteamNetworkingUtils_AllocateMessage(int cbAllocateBuffer) {
        var mh$ = SteamAPI_ISteamNetworkingUtils_AllocateMessage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingUtils_AllocateMessage", cbAllocateBuffer);
            }
            return (MemorySegment)mh$.invokeExact(cbAllocateBuffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingUtils_InitRelayNetworkAccess {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamNetworkingUtils_InitRelayNetworkAccess"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamNetworkingUtils_InitRelayNetworkAccess()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingUtils_InitRelayNetworkAccess$descriptor() {
        return SteamAPI_ISteamNetworkingUtils_InitRelayNetworkAccess.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamNetworkingUtils_InitRelayNetworkAccess()
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingUtils_InitRelayNetworkAccess$handle() {
        return SteamAPI_ISteamNetworkingUtils_InitRelayNetworkAccess.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamNetworkingUtils_InitRelayNetworkAccess()
     * }
     */
    public static void SteamAPI_ISteamNetworkingUtils_InitRelayNetworkAccess() {
        var mh$ = SteamAPI_ISteamNetworkingUtils_InitRelayNetworkAccess.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingUtils_InitRelayNetworkAccess");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingUtils_GetRelayNetworkStatus {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamNetworkingUtils_GetRelayNetworkStatus"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ESteamNetworkingAvailability SteamAPI_ISteamNetworkingUtils_GetRelayNetworkStatus(SteamRelayNetworkStatus_t *pDetails)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingUtils_GetRelayNetworkStatus$descriptor() {
        return SteamAPI_ISteamNetworkingUtils_GetRelayNetworkStatus.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ESteamNetworkingAvailability SteamAPI_ISteamNetworkingUtils_GetRelayNetworkStatus(SteamRelayNetworkStatus_t *pDetails)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingUtils_GetRelayNetworkStatus$handle() {
        return SteamAPI_ISteamNetworkingUtils_GetRelayNetworkStatus.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ESteamNetworkingAvailability SteamAPI_ISteamNetworkingUtils_GetRelayNetworkStatus(SteamRelayNetworkStatus_t *pDetails)
     * }
     */
    public static int SteamAPI_ISteamNetworkingUtils_GetRelayNetworkStatus(MemorySegment pDetails) {
        var mh$ = SteamAPI_ISteamNetworkingUtils_GetRelayNetworkStatus.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingUtils_GetRelayNetworkStatus", pDetails);
            }
            return (int)mh$.invokeExact(pDetails);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingUtils_GetLocalPingLocation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_FLOAT,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamNetworkingUtils_GetLocalPingLocation"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * float SteamAPI_ISteamNetworkingUtils_GetLocalPingLocation(SteamNetworkPingLocation_t *result)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingUtils_GetLocalPingLocation$descriptor() {
        return SteamAPI_ISteamNetworkingUtils_GetLocalPingLocation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * float SteamAPI_ISteamNetworkingUtils_GetLocalPingLocation(SteamNetworkPingLocation_t *result)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingUtils_GetLocalPingLocation$handle() {
        return SteamAPI_ISteamNetworkingUtils_GetLocalPingLocation.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * float SteamAPI_ISteamNetworkingUtils_GetLocalPingLocation(SteamNetworkPingLocation_t *result)
     * }
     */
    public static float SteamAPI_ISteamNetworkingUtils_GetLocalPingLocation(MemorySegment result) {
        var mh$ = SteamAPI_ISteamNetworkingUtils_GetLocalPingLocation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingUtils_GetLocalPingLocation", result);
            }
            return (float)mh$.invokeExact(result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingUtils_EstimatePingTimeBetweenTwoLocations {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamNetworkingUtils_EstimatePingTimeBetweenTwoLocations"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamNetworkingUtils_EstimatePingTimeBetweenTwoLocations(const SteamNetworkPingLocation_t *location1, const SteamNetworkPingLocation_t *location2)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingUtils_EstimatePingTimeBetweenTwoLocations$descriptor() {
        return SteamAPI_ISteamNetworkingUtils_EstimatePingTimeBetweenTwoLocations.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamNetworkingUtils_EstimatePingTimeBetweenTwoLocations(const SteamNetworkPingLocation_t *location1, const SteamNetworkPingLocation_t *location2)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingUtils_EstimatePingTimeBetweenTwoLocations$handle() {
        return SteamAPI_ISteamNetworkingUtils_EstimatePingTimeBetweenTwoLocations.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int SteamAPI_ISteamNetworkingUtils_EstimatePingTimeBetweenTwoLocations(const SteamNetworkPingLocation_t *location1, const SteamNetworkPingLocation_t *location2)
     * }
     */
    public static int SteamAPI_ISteamNetworkingUtils_EstimatePingTimeBetweenTwoLocations(MemorySegment location1, MemorySegment location2) {
        var mh$ = SteamAPI_ISteamNetworkingUtils_EstimatePingTimeBetweenTwoLocations.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingUtils_EstimatePingTimeBetweenTwoLocations", location1, location2);
            }
            return (int)mh$.invokeExact(location1, location2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingUtils_EstimatePingTimeFromLocalHost {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamNetworkingUtils_EstimatePingTimeFromLocalHost"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamNetworkingUtils_EstimatePingTimeFromLocalHost(const SteamNetworkPingLocation_t *remoteLocation)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingUtils_EstimatePingTimeFromLocalHost$descriptor() {
        return SteamAPI_ISteamNetworkingUtils_EstimatePingTimeFromLocalHost.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamNetworkingUtils_EstimatePingTimeFromLocalHost(const SteamNetworkPingLocation_t *remoteLocation)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingUtils_EstimatePingTimeFromLocalHost$handle() {
        return SteamAPI_ISteamNetworkingUtils_EstimatePingTimeFromLocalHost.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int SteamAPI_ISteamNetworkingUtils_EstimatePingTimeFromLocalHost(const SteamNetworkPingLocation_t *remoteLocation)
     * }
     */
    public static int SteamAPI_ISteamNetworkingUtils_EstimatePingTimeFromLocalHost(MemorySegment remoteLocation) {
        var mh$ = SteamAPI_ISteamNetworkingUtils_EstimatePingTimeFromLocalHost.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingUtils_EstimatePingTimeFromLocalHost", remoteLocation);
            }
            return (int)mh$.invokeExact(remoteLocation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingUtils_ConvertPingLocationToString {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamNetworkingUtils_ConvertPingLocationToString"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamNetworkingUtils_ConvertPingLocationToString(const SteamNetworkPingLocation_t *location, char *pszBuf, int cchBufSize)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingUtils_ConvertPingLocationToString$descriptor() {
        return SteamAPI_ISteamNetworkingUtils_ConvertPingLocationToString.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamNetworkingUtils_ConvertPingLocationToString(const SteamNetworkPingLocation_t *location, char *pszBuf, int cchBufSize)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingUtils_ConvertPingLocationToString$handle() {
        return SteamAPI_ISteamNetworkingUtils_ConvertPingLocationToString.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamNetworkingUtils_ConvertPingLocationToString(const SteamNetworkPingLocation_t *location, char *pszBuf, int cchBufSize)
     * }
     */
    public static void SteamAPI_ISteamNetworkingUtils_ConvertPingLocationToString(MemorySegment location, MemorySegment pszBuf, int cchBufSize) {
        var mh$ = SteamAPI_ISteamNetworkingUtils_ConvertPingLocationToString.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingUtils_ConvertPingLocationToString", location, pszBuf, cchBufSize);
            }
            mh$.invokeExact(location, pszBuf, cchBufSize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingUtils_ParsePingLocationString {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamNetworkingUtils_ParsePingLocationString"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingUtils_ParsePingLocationString(const char *pszString, SteamNetworkPingLocation_t *result)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingUtils_ParsePingLocationString$descriptor() {
        return SteamAPI_ISteamNetworkingUtils_ParsePingLocationString.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingUtils_ParsePingLocationString(const char *pszString, SteamNetworkPingLocation_t *result)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingUtils_ParsePingLocationString$handle() {
        return SteamAPI_ISteamNetworkingUtils_ParsePingLocationString.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingUtils_ParsePingLocationString(const char *pszString, SteamNetworkPingLocation_t *result)
     * }
     */
    public static boolean SteamAPI_ISteamNetworkingUtils_ParsePingLocationString(MemorySegment pszString, MemorySegment result) {
        var mh$ = SteamAPI_ISteamNetworkingUtils_ParsePingLocationString.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingUtils_ParsePingLocationString", pszString, result);
            }
            return (boolean)mh$.invokeExact(pszString, result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingUtils_CheckPingDataUpToDate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_FLOAT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamNetworkingUtils_CheckPingDataUpToDate"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingUtils_CheckPingDataUpToDate(float flMaxAgeSeconds)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingUtils_CheckPingDataUpToDate$descriptor() {
        return SteamAPI_ISteamNetworkingUtils_CheckPingDataUpToDate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingUtils_CheckPingDataUpToDate(float flMaxAgeSeconds)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingUtils_CheckPingDataUpToDate$handle() {
        return SteamAPI_ISteamNetworkingUtils_CheckPingDataUpToDate.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingUtils_CheckPingDataUpToDate(float flMaxAgeSeconds)
     * }
     */
    public static boolean SteamAPI_ISteamNetworkingUtils_CheckPingDataUpToDate(float flMaxAgeSeconds) {
        var mh$ = SteamAPI_ISteamNetworkingUtils_CheckPingDataUpToDate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingUtils_CheckPingDataUpToDate", flMaxAgeSeconds);
            }
            return (boolean)mh$.invokeExact(flMaxAgeSeconds);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingUtils_GetPingToDataCenter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamNetworkingUtils_GetPingToDataCenter"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamNetworkingUtils_GetPingToDataCenter(SteamNetworkingPOPID popID, SteamNetworkingPOPID *pViaRelayPoP)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingUtils_GetPingToDataCenter$descriptor() {
        return SteamAPI_ISteamNetworkingUtils_GetPingToDataCenter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamNetworkingUtils_GetPingToDataCenter(SteamNetworkingPOPID popID, SteamNetworkingPOPID *pViaRelayPoP)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingUtils_GetPingToDataCenter$handle() {
        return SteamAPI_ISteamNetworkingUtils_GetPingToDataCenter.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int SteamAPI_ISteamNetworkingUtils_GetPingToDataCenter(SteamNetworkingPOPID popID, SteamNetworkingPOPID *pViaRelayPoP)
     * }
     */
    public static int SteamAPI_ISteamNetworkingUtils_GetPingToDataCenter(int popID, MemorySegment pViaRelayPoP) {
        var mh$ = SteamAPI_ISteamNetworkingUtils_GetPingToDataCenter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingUtils_GetPingToDataCenter", popID, pViaRelayPoP);
            }
            return (int)mh$.invokeExact(popID, pViaRelayPoP);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingUtils_GetDirectPingToPOP {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamNetworkingUtils_GetDirectPingToPOP"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamNetworkingUtils_GetDirectPingToPOP(SteamNetworkingPOPID popID)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingUtils_GetDirectPingToPOP$descriptor() {
        return SteamAPI_ISteamNetworkingUtils_GetDirectPingToPOP.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamNetworkingUtils_GetDirectPingToPOP(SteamNetworkingPOPID popID)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingUtils_GetDirectPingToPOP$handle() {
        return SteamAPI_ISteamNetworkingUtils_GetDirectPingToPOP.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int SteamAPI_ISteamNetworkingUtils_GetDirectPingToPOP(SteamNetworkingPOPID popID)
     * }
     */
    public static int SteamAPI_ISteamNetworkingUtils_GetDirectPingToPOP(int popID) {
        var mh$ = SteamAPI_ISteamNetworkingUtils_GetDirectPingToPOP.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingUtils_GetDirectPingToPOP", popID);
            }
            return (int)mh$.invokeExact(popID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingUtils_GetPOPCount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamNetworkingUtils_GetPOPCount"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamNetworkingUtils_GetPOPCount()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingUtils_GetPOPCount$descriptor() {
        return SteamAPI_ISteamNetworkingUtils_GetPOPCount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamNetworkingUtils_GetPOPCount()
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingUtils_GetPOPCount$handle() {
        return SteamAPI_ISteamNetworkingUtils_GetPOPCount.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int SteamAPI_ISteamNetworkingUtils_GetPOPCount()
     * }
     */
    public static int SteamAPI_ISteamNetworkingUtils_GetPOPCount() {
        var mh$ = SteamAPI_ISteamNetworkingUtils_GetPOPCount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingUtils_GetPOPCount");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingUtils_GetPOPList {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamNetworkingUtils_GetPOPList"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamNetworkingUtils_GetPOPList(SteamNetworkingPOPID *list, int nListSz)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingUtils_GetPOPList$descriptor() {
        return SteamAPI_ISteamNetworkingUtils_GetPOPList.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamNetworkingUtils_GetPOPList(SteamNetworkingPOPID *list, int nListSz)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingUtils_GetPOPList$handle() {
        return SteamAPI_ISteamNetworkingUtils_GetPOPList.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int SteamAPI_ISteamNetworkingUtils_GetPOPList(SteamNetworkingPOPID *list, int nListSz)
     * }
     */
    public static int SteamAPI_ISteamNetworkingUtils_GetPOPList(MemorySegment list, int nListSz) {
        var mh$ = SteamAPI_ISteamNetworkingUtils_GetPOPList.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingUtils_GetPOPList", list, nListSz);
            }
            return (int)mh$.invokeExact(list, nListSz);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingUtils_GetLocalTimestamp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_LONG_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamNetworkingUtils_GetLocalTimestamp"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamNetworkingMicroseconds SteamAPI_ISteamNetworkingUtils_GetLocalTimestamp()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingUtils_GetLocalTimestamp$descriptor() {
        return SteamAPI_ISteamNetworkingUtils_GetLocalTimestamp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamNetworkingMicroseconds SteamAPI_ISteamNetworkingUtils_GetLocalTimestamp()
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingUtils_GetLocalTimestamp$handle() {
        return SteamAPI_ISteamNetworkingUtils_GetLocalTimestamp.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamNetworkingMicroseconds SteamAPI_ISteamNetworkingUtils_GetLocalTimestamp()
     * }
     */
    public static long SteamAPI_ISteamNetworkingUtils_GetLocalTimestamp() {
        var mh$ = SteamAPI_ISteamNetworkingUtils_GetLocalTimestamp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingUtils_GetLocalTimestamp");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingUtils_SetDebugOutputFunction {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamNetworkingUtils_SetDebugOutputFunction"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamNetworkingUtils_SetDebugOutputFunction(ESteamNetworkingSocketsDebugOutputType eDetailLevel, FSteamNetworkingSocketsDebugOutput pfnFunc)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingUtils_SetDebugOutputFunction$descriptor() {
        return SteamAPI_ISteamNetworkingUtils_SetDebugOutputFunction.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamNetworkingUtils_SetDebugOutputFunction(ESteamNetworkingSocketsDebugOutputType eDetailLevel, FSteamNetworkingSocketsDebugOutput pfnFunc)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingUtils_SetDebugOutputFunction$handle() {
        return SteamAPI_ISteamNetworkingUtils_SetDebugOutputFunction.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamNetworkingUtils_SetDebugOutputFunction(ESteamNetworkingSocketsDebugOutputType eDetailLevel, FSteamNetworkingSocketsDebugOutput pfnFunc)
     * }
     */
    public static void SteamAPI_ISteamNetworkingUtils_SetDebugOutputFunction(int eDetailLevel, MemorySegment pfnFunc) {
        var mh$ = SteamAPI_ISteamNetworkingUtils_SetDebugOutputFunction.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingUtils_SetDebugOutputFunction", eDetailLevel, pfnFunc);
            }
            mh$.invokeExact(eDetailLevel, pfnFunc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingUtils_IsFakeIPv4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamNetworkingUtils_IsFakeIPv4"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingUtils_IsFakeIPv4(uint32 nIPv4)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingUtils_IsFakeIPv4$descriptor() {
        return SteamAPI_ISteamNetworkingUtils_IsFakeIPv4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingUtils_IsFakeIPv4(uint32 nIPv4)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingUtils_IsFakeIPv4$handle() {
        return SteamAPI_ISteamNetworkingUtils_IsFakeIPv4.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingUtils_IsFakeIPv4(uint32 nIPv4)
     * }
     */
    public static boolean SteamAPI_ISteamNetworkingUtils_IsFakeIPv4(int nIPv4) {
        var mh$ = SteamAPI_ISteamNetworkingUtils_IsFakeIPv4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingUtils_IsFakeIPv4", nIPv4);
            }
            return (boolean)mh$.invokeExact(nIPv4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingUtils_GetIPv4FakeIPType {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamNetworkingUtils_GetIPv4FakeIPType"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ESteamNetworkingFakeIPType SteamAPI_ISteamNetworkingUtils_GetIPv4FakeIPType(uint32 nIPv4)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingUtils_GetIPv4FakeIPType$descriptor() {
        return SteamAPI_ISteamNetworkingUtils_GetIPv4FakeIPType.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ESteamNetworkingFakeIPType SteamAPI_ISteamNetworkingUtils_GetIPv4FakeIPType(uint32 nIPv4)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingUtils_GetIPv4FakeIPType$handle() {
        return SteamAPI_ISteamNetworkingUtils_GetIPv4FakeIPType.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ESteamNetworkingFakeIPType SteamAPI_ISteamNetworkingUtils_GetIPv4FakeIPType(uint32 nIPv4)
     * }
     */
    public static int SteamAPI_ISteamNetworkingUtils_GetIPv4FakeIPType(int nIPv4) {
        var mh$ = SteamAPI_ISteamNetworkingUtils_GetIPv4FakeIPType.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingUtils_GetIPv4FakeIPType", nIPv4);
            }
            return (int)mh$.invokeExact(nIPv4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingUtils_GetRealIdentityForFakeIP {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamNetworkingUtils_GetRealIdentityForFakeIP"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * EResult SteamAPI_ISteamNetworkingUtils_GetRealIdentityForFakeIP(const SteamNetworkingIPAddr *fakeIP, SteamNetworkingIdentity *pOutRealIdentity)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingUtils_GetRealIdentityForFakeIP$descriptor() {
        return SteamAPI_ISteamNetworkingUtils_GetRealIdentityForFakeIP.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * EResult SteamAPI_ISteamNetworkingUtils_GetRealIdentityForFakeIP(const SteamNetworkingIPAddr *fakeIP, SteamNetworkingIdentity *pOutRealIdentity)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingUtils_GetRealIdentityForFakeIP$handle() {
        return SteamAPI_ISteamNetworkingUtils_GetRealIdentityForFakeIP.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * EResult SteamAPI_ISteamNetworkingUtils_GetRealIdentityForFakeIP(const SteamNetworkingIPAddr *fakeIP, SteamNetworkingIdentity *pOutRealIdentity)
     * }
     */
    public static int SteamAPI_ISteamNetworkingUtils_GetRealIdentityForFakeIP(MemorySegment fakeIP, MemorySegment pOutRealIdentity) {
        var mh$ = SteamAPI_ISteamNetworkingUtils_GetRealIdentityForFakeIP.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingUtils_GetRealIdentityForFakeIP", fakeIP, pOutRealIdentity);
            }
            return (int)mh$.invokeExact(fakeIP, pOutRealIdentity);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingUtils_SetGlobalConfigValueInt32 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamNetworkingUtils_SetGlobalConfigValueInt32"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingUtils_SetGlobalConfigValueInt32(ESteamNetworkingConfigValue eValue, int32 val)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingUtils_SetGlobalConfigValueInt32$descriptor() {
        return SteamAPI_ISteamNetworkingUtils_SetGlobalConfigValueInt32.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingUtils_SetGlobalConfigValueInt32(ESteamNetworkingConfigValue eValue, int32 val)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingUtils_SetGlobalConfigValueInt32$handle() {
        return SteamAPI_ISteamNetworkingUtils_SetGlobalConfigValueInt32.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingUtils_SetGlobalConfigValueInt32(ESteamNetworkingConfigValue eValue, int32 val)
     * }
     */
    public static boolean SteamAPI_ISteamNetworkingUtils_SetGlobalConfigValueInt32(int eValue, int val) {
        var mh$ = SteamAPI_ISteamNetworkingUtils_SetGlobalConfigValueInt32.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingUtils_SetGlobalConfigValueInt32", eValue, val);
            }
            return (boolean)mh$.invokeExact(eValue, val);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingUtils_SetGlobalConfigValueFloat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_FLOAT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamNetworkingUtils_SetGlobalConfigValueFloat"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingUtils_SetGlobalConfigValueFloat(ESteamNetworkingConfigValue eValue, float val)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingUtils_SetGlobalConfigValueFloat$descriptor() {
        return SteamAPI_ISteamNetworkingUtils_SetGlobalConfigValueFloat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingUtils_SetGlobalConfigValueFloat(ESteamNetworkingConfigValue eValue, float val)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingUtils_SetGlobalConfigValueFloat$handle() {
        return SteamAPI_ISteamNetworkingUtils_SetGlobalConfigValueFloat.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingUtils_SetGlobalConfigValueFloat(ESteamNetworkingConfigValue eValue, float val)
     * }
     */
    public static boolean SteamAPI_ISteamNetworkingUtils_SetGlobalConfigValueFloat(int eValue, float val) {
        var mh$ = SteamAPI_ISteamNetworkingUtils_SetGlobalConfigValueFloat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingUtils_SetGlobalConfigValueFloat", eValue, val);
            }
            return (boolean)mh$.invokeExact(eValue, val);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingUtils_SetGlobalConfigValueString {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamNetworkingUtils_SetGlobalConfigValueString"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingUtils_SetGlobalConfigValueString(ESteamNetworkingConfigValue eValue, const char *val)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingUtils_SetGlobalConfigValueString$descriptor() {
        return SteamAPI_ISteamNetworkingUtils_SetGlobalConfigValueString.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingUtils_SetGlobalConfigValueString(ESteamNetworkingConfigValue eValue, const char *val)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingUtils_SetGlobalConfigValueString$handle() {
        return SteamAPI_ISteamNetworkingUtils_SetGlobalConfigValueString.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingUtils_SetGlobalConfigValueString(ESteamNetworkingConfigValue eValue, const char *val)
     * }
     */
    public static boolean SteamAPI_ISteamNetworkingUtils_SetGlobalConfigValueString(int eValue, MemorySegment val) {
        var mh$ = SteamAPI_ISteamNetworkingUtils_SetGlobalConfigValueString.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingUtils_SetGlobalConfigValueString", eValue, val);
            }
            return (boolean)mh$.invokeExact(eValue, val);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingUtils_SetGlobalConfigValuePtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamNetworkingUtils_SetGlobalConfigValuePtr"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingUtils_SetGlobalConfigValuePtr(ESteamNetworkingConfigValue eValue, void *val)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingUtils_SetGlobalConfigValuePtr$descriptor() {
        return SteamAPI_ISteamNetworkingUtils_SetGlobalConfigValuePtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingUtils_SetGlobalConfigValuePtr(ESteamNetworkingConfigValue eValue, void *val)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingUtils_SetGlobalConfigValuePtr$handle() {
        return SteamAPI_ISteamNetworkingUtils_SetGlobalConfigValuePtr.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingUtils_SetGlobalConfigValuePtr(ESteamNetworkingConfigValue eValue, void *val)
     * }
     */
    public static boolean SteamAPI_ISteamNetworkingUtils_SetGlobalConfigValuePtr(int eValue, MemorySegment val) {
        var mh$ = SteamAPI_ISteamNetworkingUtils_SetGlobalConfigValuePtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingUtils_SetGlobalConfigValuePtr", eValue, val);
            }
            return (boolean)mh$.invokeExact(eValue, val);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingUtils_SetConnectionConfigValueInt32 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamNetworkingUtils_SetConnectionConfigValueInt32"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingUtils_SetConnectionConfigValueInt32(HSteamNetConnection hConn, ESteamNetworkingConfigValue eValue, int32 val)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingUtils_SetConnectionConfigValueInt32$descriptor() {
        return SteamAPI_ISteamNetworkingUtils_SetConnectionConfigValueInt32.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingUtils_SetConnectionConfigValueInt32(HSteamNetConnection hConn, ESteamNetworkingConfigValue eValue, int32 val)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingUtils_SetConnectionConfigValueInt32$handle() {
        return SteamAPI_ISteamNetworkingUtils_SetConnectionConfigValueInt32.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingUtils_SetConnectionConfigValueInt32(HSteamNetConnection hConn, ESteamNetworkingConfigValue eValue, int32 val)
     * }
     */
    public static boolean SteamAPI_ISteamNetworkingUtils_SetConnectionConfigValueInt32(int hConn, int eValue, int val) {
        var mh$ = SteamAPI_ISteamNetworkingUtils_SetConnectionConfigValueInt32.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingUtils_SetConnectionConfigValueInt32", hConn, eValue, val);
            }
            return (boolean)mh$.invokeExact(hConn, eValue, val);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingUtils_SetConnectionConfigValueFloat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_FLOAT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamNetworkingUtils_SetConnectionConfigValueFloat"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingUtils_SetConnectionConfigValueFloat(HSteamNetConnection hConn, ESteamNetworkingConfigValue eValue, float val)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingUtils_SetConnectionConfigValueFloat$descriptor() {
        return SteamAPI_ISteamNetworkingUtils_SetConnectionConfigValueFloat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingUtils_SetConnectionConfigValueFloat(HSteamNetConnection hConn, ESteamNetworkingConfigValue eValue, float val)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingUtils_SetConnectionConfigValueFloat$handle() {
        return SteamAPI_ISteamNetworkingUtils_SetConnectionConfigValueFloat.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingUtils_SetConnectionConfigValueFloat(HSteamNetConnection hConn, ESteamNetworkingConfigValue eValue, float val)
     * }
     */
    public static boolean SteamAPI_ISteamNetworkingUtils_SetConnectionConfigValueFloat(int hConn, int eValue, float val) {
        var mh$ = SteamAPI_ISteamNetworkingUtils_SetConnectionConfigValueFloat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingUtils_SetConnectionConfigValueFloat", hConn, eValue, val);
            }
            return (boolean)mh$.invokeExact(hConn, eValue, val);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingUtils_SetConnectionConfigValueString {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamNetworkingUtils_SetConnectionConfigValueString"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingUtils_SetConnectionConfigValueString(HSteamNetConnection hConn, ESteamNetworkingConfigValue eValue, const char *val)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingUtils_SetConnectionConfigValueString$descriptor() {
        return SteamAPI_ISteamNetworkingUtils_SetConnectionConfigValueString.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingUtils_SetConnectionConfigValueString(HSteamNetConnection hConn, ESteamNetworkingConfigValue eValue, const char *val)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingUtils_SetConnectionConfigValueString$handle() {
        return SteamAPI_ISteamNetworkingUtils_SetConnectionConfigValueString.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingUtils_SetConnectionConfigValueString(HSteamNetConnection hConn, ESteamNetworkingConfigValue eValue, const char *val)
     * }
     */
    public static boolean SteamAPI_ISteamNetworkingUtils_SetConnectionConfigValueString(int hConn, int eValue, MemorySegment val) {
        var mh$ = SteamAPI_ISteamNetworkingUtils_SetConnectionConfigValueString.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingUtils_SetConnectionConfigValueString", hConn, eValue, val);
            }
            return (boolean)mh$.invokeExact(hConn, eValue, val);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_SteamNetConnectionStatusChanged {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_SteamNetConnectionStatusChanged"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_SteamNetConnectionStatusChanged(FnSteamNetConnectionStatusChanged fnCallback)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_SteamNetConnectionStatusChanged$descriptor() {
        return SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_SteamNetConnectionStatusChanged.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_SteamNetConnectionStatusChanged(FnSteamNetConnectionStatusChanged fnCallback)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_SteamNetConnectionStatusChanged$handle() {
        return SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_SteamNetConnectionStatusChanged.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_SteamNetConnectionStatusChanged(FnSteamNetConnectionStatusChanged fnCallback)
     * }
     */
    public static boolean SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_SteamNetConnectionStatusChanged(MemorySegment fnCallback) {
        var mh$ = SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_SteamNetConnectionStatusChanged.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_SteamNetConnectionStatusChanged", fnCallback);
            }
            return (boolean)mh$.invokeExact(fnCallback);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_SteamNetAuthenticationStatusChanged {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_SteamNetAuthenticationStatusChanged"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_SteamNetAuthenticationStatusChanged(FnSteamNetAuthenticationStatusChanged fnCallback)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_SteamNetAuthenticationStatusChanged$descriptor() {
        return SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_SteamNetAuthenticationStatusChanged.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_SteamNetAuthenticationStatusChanged(FnSteamNetAuthenticationStatusChanged fnCallback)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_SteamNetAuthenticationStatusChanged$handle() {
        return SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_SteamNetAuthenticationStatusChanged.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_SteamNetAuthenticationStatusChanged(FnSteamNetAuthenticationStatusChanged fnCallback)
     * }
     */
    public static boolean SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_SteamNetAuthenticationStatusChanged(MemorySegment fnCallback) {
        var mh$ = SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_SteamNetAuthenticationStatusChanged.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_SteamNetAuthenticationStatusChanged", fnCallback);
            }
            return (boolean)mh$.invokeExact(fnCallback);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_SteamRelayNetworkStatusChanged {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_SteamRelayNetworkStatusChanged"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_SteamRelayNetworkStatusChanged(FnSteamRelayNetworkStatusChanged fnCallback)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_SteamRelayNetworkStatusChanged$descriptor() {
        return SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_SteamRelayNetworkStatusChanged.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_SteamRelayNetworkStatusChanged(FnSteamRelayNetworkStatusChanged fnCallback)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_SteamRelayNetworkStatusChanged$handle() {
        return SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_SteamRelayNetworkStatusChanged.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_SteamRelayNetworkStatusChanged(FnSteamRelayNetworkStatusChanged fnCallback)
     * }
     */
    public static boolean SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_SteamRelayNetworkStatusChanged(MemorySegment fnCallback) {
        var mh$ = SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_SteamRelayNetworkStatusChanged.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_SteamRelayNetworkStatusChanged", fnCallback);
            }
            return (boolean)mh$.invokeExact(fnCallback);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_FakeIPResult {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_FakeIPResult"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_FakeIPResult(FnSteamNetworkingFakeIPResult fnCallback)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_FakeIPResult$descriptor() {
        return SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_FakeIPResult.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_FakeIPResult(FnSteamNetworkingFakeIPResult fnCallback)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_FakeIPResult$handle() {
        return SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_FakeIPResult.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_FakeIPResult(FnSteamNetworkingFakeIPResult fnCallback)
     * }
     */
    public static boolean SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_FakeIPResult(MemorySegment fnCallback) {
        var mh$ = SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_FakeIPResult.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_FakeIPResult", fnCallback);
            }
            return (boolean)mh$.invokeExact(fnCallback);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_MessagesSessionRequest {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_MessagesSessionRequest"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_MessagesSessionRequest(FnSteamNetworkingMessagesSessionRequest fnCallback)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_MessagesSessionRequest$descriptor() {
        return SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_MessagesSessionRequest.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_MessagesSessionRequest(FnSteamNetworkingMessagesSessionRequest fnCallback)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_MessagesSessionRequest$handle() {
        return SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_MessagesSessionRequest.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_MessagesSessionRequest(FnSteamNetworkingMessagesSessionRequest fnCallback)
     * }
     */
    public static boolean SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_MessagesSessionRequest(MemorySegment fnCallback) {
        var mh$ = SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_MessagesSessionRequest.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_MessagesSessionRequest", fnCallback);
            }
            return (boolean)mh$.invokeExact(fnCallback);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_MessagesSessionFailed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_MessagesSessionFailed"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_MessagesSessionFailed(FnSteamNetworkingMessagesSessionFailed fnCallback)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_MessagesSessionFailed$descriptor() {
        return SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_MessagesSessionFailed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_MessagesSessionFailed(FnSteamNetworkingMessagesSessionFailed fnCallback)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_MessagesSessionFailed$handle() {
        return SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_MessagesSessionFailed.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_MessagesSessionFailed(FnSteamNetworkingMessagesSessionFailed fnCallback)
     * }
     */
    public static boolean SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_MessagesSessionFailed(MemorySegment fnCallback) {
        var mh$ = SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_MessagesSessionFailed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_MessagesSessionFailed", fnCallback);
            }
            return (boolean)mh$.invokeExact(fnCallback);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingUtils_SetConfigValue {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamNetworkingUtils_SetConfigValue"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingUtils_SetConfigValue(ESteamNetworkingConfigValue eValue, ESteamNetworkingConfigScope eScopeType, intptr_t scopeObj, ESteamNetworkingConfigDataType eDataType, const void *pArg)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingUtils_SetConfigValue$descriptor() {
        return SteamAPI_ISteamNetworkingUtils_SetConfigValue.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingUtils_SetConfigValue(ESteamNetworkingConfigValue eValue, ESteamNetworkingConfigScope eScopeType, intptr_t scopeObj, ESteamNetworkingConfigDataType eDataType, const void *pArg)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingUtils_SetConfigValue$handle() {
        return SteamAPI_ISteamNetworkingUtils_SetConfigValue.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingUtils_SetConfigValue(ESteamNetworkingConfigValue eValue, ESteamNetworkingConfigScope eScopeType, intptr_t scopeObj, ESteamNetworkingConfigDataType eDataType, const void *pArg)
     * }
     */
    public static boolean SteamAPI_ISteamNetworkingUtils_SetConfigValue(int eValue, int eScopeType, long scopeObj, int eDataType, MemorySegment pArg) {
        var mh$ = SteamAPI_ISteamNetworkingUtils_SetConfigValue.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingUtils_SetConfigValue", eValue, eScopeType, scopeObj, eDataType, pArg);
            }
            return (boolean)mh$.invokeExact(eValue, eScopeType, scopeObj, eDataType, pArg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingUtils_SetConfigValueStruct {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamNetworkingUtils_SetConfigValueStruct"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingUtils_SetConfigValueStruct(const SteamNetworkingConfigValue_t *opt, ESteamNetworkingConfigScope eScopeType, intptr_t scopeObj)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingUtils_SetConfigValueStruct$descriptor() {
        return SteamAPI_ISteamNetworkingUtils_SetConfigValueStruct.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingUtils_SetConfigValueStruct(const SteamNetworkingConfigValue_t *opt, ESteamNetworkingConfigScope eScopeType, intptr_t scopeObj)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingUtils_SetConfigValueStruct$handle() {
        return SteamAPI_ISteamNetworkingUtils_SetConfigValueStruct.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingUtils_SetConfigValueStruct(const SteamNetworkingConfigValue_t *opt, ESteamNetworkingConfigScope eScopeType, intptr_t scopeObj)
     * }
     */
    public static boolean SteamAPI_ISteamNetworkingUtils_SetConfigValueStruct(MemorySegment opt, int eScopeType, long scopeObj) {
        var mh$ = SteamAPI_ISteamNetworkingUtils_SetConfigValueStruct.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingUtils_SetConfigValueStruct", opt, eScopeType, scopeObj);
            }
            return (boolean)mh$.invokeExact(opt, eScopeType, scopeObj);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingUtils_GetConfigValue {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamNetworkingUtils_GetConfigValue"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ESteamNetworkingGetConfigValueResult SteamAPI_ISteamNetworkingUtils_GetConfigValue(ESteamNetworkingConfigValue eValue, ESteamNetworkingConfigScope eScopeType, intptr_t scopeObj, ESteamNetworkingConfigDataType *pOutDataType, void *pResult, size_t *cbResult)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingUtils_GetConfigValue$descriptor() {
        return SteamAPI_ISteamNetworkingUtils_GetConfigValue.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ESteamNetworkingGetConfigValueResult SteamAPI_ISteamNetworkingUtils_GetConfigValue(ESteamNetworkingConfigValue eValue, ESteamNetworkingConfigScope eScopeType, intptr_t scopeObj, ESteamNetworkingConfigDataType *pOutDataType, void *pResult, size_t *cbResult)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingUtils_GetConfigValue$handle() {
        return SteamAPI_ISteamNetworkingUtils_GetConfigValue.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ESteamNetworkingGetConfigValueResult SteamAPI_ISteamNetworkingUtils_GetConfigValue(ESteamNetworkingConfigValue eValue, ESteamNetworkingConfigScope eScopeType, intptr_t scopeObj, ESteamNetworkingConfigDataType *pOutDataType, void *pResult, size_t *cbResult)
     * }
     */
    public static int SteamAPI_ISteamNetworkingUtils_GetConfigValue(int eValue, int eScopeType, long scopeObj, MemorySegment pOutDataType, MemorySegment pResult, MemorySegment cbResult) {
        var mh$ = SteamAPI_ISteamNetworkingUtils_GetConfigValue.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingUtils_GetConfigValue", eValue, eScopeType, scopeObj, pOutDataType, pResult, cbResult);
            }
            return (int)mh$.invokeExact(eValue, eScopeType, scopeObj, pOutDataType, pResult, cbResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingUtils_GetConfigValueInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamNetworkingUtils_GetConfigValueInfo"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamNetworkingUtils_GetConfigValueInfo(ESteamNetworkingConfigValue eValue, ESteamNetworkingConfigDataType *pOutDataType, ESteamNetworkingConfigScope *pOutScope)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingUtils_GetConfigValueInfo$descriptor() {
        return SteamAPI_ISteamNetworkingUtils_GetConfigValueInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamNetworkingUtils_GetConfigValueInfo(ESteamNetworkingConfigValue eValue, ESteamNetworkingConfigDataType *pOutDataType, ESteamNetworkingConfigScope *pOutScope)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingUtils_GetConfigValueInfo$handle() {
        return SteamAPI_ISteamNetworkingUtils_GetConfigValueInfo.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * const char *SteamAPI_ISteamNetworkingUtils_GetConfigValueInfo(ESteamNetworkingConfigValue eValue, ESteamNetworkingConfigDataType *pOutDataType, ESteamNetworkingConfigScope *pOutScope)
     * }
     */
    public static MemorySegment SteamAPI_ISteamNetworkingUtils_GetConfigValueInfo(int eValue, MemorySegment pOutDataType, MemorySegment pOutScope) {
        var mh$ = SteamAPI_ISteamNetworkingUtils_GetConfigValueInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingUtils_GetConfigValueInfo", eValue, pOutDataType, pOutScope);
            }
            return (MemorySegment)mh$.invokeExact(eValue, pOutDataType, pOutScope);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingUtils_IterateGenericEditableConfigValues {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamNetworkingUtils_IterateGenericEditableConfigValues"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ESteamNetworkingConfigValue SteamAPI_ISteamNetworkingUtils_IterateGenericEditableConfigValues(ESteamNetworkingConfigValue eCurrent, bool bEnumerateDevVars)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingUtils_IterateGenericEditableConfigValues$descriptor() {
        return SteamAPI_ISteamNetworkingUtils_IterateGenericEditableConfigValues.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ESteamNetworkingConfigValue SteamAPI_ISteamNetworkingUtils_IterateGenericEditableConfigValues(ESteamNetworkingConfigValue eCurrent, bool bEnumerateDevVars)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingUtils_IterateGenericEditableConfigValues$handle() {
        return SteamAPI_ISteamNetworkingUtils_IterateGenericEditableConfigValues.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ESteamNetworkingConfigValue SteamAPI_ISteamNetworkingUtils_IterateGenericEditableConfigValues(ESteamNetworkingConfigValue eCurrent, bool bEnumerateDevVars)
     * }
     */
    public static int SteamAPI_ISteamNetworkingUtils_IterateGenericEditableConfigValues(int eCurrent, boolean bEnumerateDevVars) {
        var mh$ = SteamAPI_ISteamNetworkingUtils_IterateGenericEditableConfigValues.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingUtils_IterateGenericEditableConfigValues", eCurrent, bEnumerateDevVars);
            }
            return (int)mh$.invokeExact(eCurrent, bEnumerateDevVars);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingUtils_SteamNetworkingIPAddr_ToString {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamNetworkingUtils_SteamNetworkingIPAddr_ToString"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamNetworkingUtils_SteamNetworkingIPAddr_ToString(const SteamNetworkingIPAddr *addr, char *buf, uint32 cbBuf, bool bWithPort)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingUtils_SteamNetworkingIPAddr_ToString$descriptor() {
        return SteamAPI_ISteamNetworkingUtils_SteamNetworkingIPAddr_ToString.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamNetworkingUtils_SteamNetworkingIPAddr_ToString(const SteamNetworkingIPAddr *addr, char *buf, uint32 cbBuf, bool bWithPort)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingUtils_SteamNetworkingIPAddr_ToString$handle() {
        return SteamAPI_ISteamNetworkingUtils_SteamNetworkingIPAddr_ToString.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamNetworkingUtils_SteamNetworkingIPAddr_ToString(const SteamNetworkingIPAddr *addr, char *buf, uint32 cbBuf, bool bWithPort)
     * }
     */
    public static void SteamAPI_ISteamNetworkingUtils_SteamNetworkingIPAddr_ToString(MemorySegment addr, MemorySegment buf, int cbBuf, boolean bWithPort) {
        var mh$ = SteamAPI_ISteamNetworkingUtils_SteamNetworkingIPAddr_ToString.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingUtils_SteamNetworkingIPAddr_ToString", addr, buf, cbBuf, bWithPort);
            }
            mh$.invokeExact(addr, buf, cbBuf, bWithPort);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingUtils_SteamNetworkingIPAddr_ParseString {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamNetworkingUtils_SteamNetworkingIPAddr_ParseString"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingUtils_SteamNetworkingIPAddr_ParseString(SteamNetworkingIPAddr *pAddr, const char *pszStr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingUtils_SteamNetworkingIPAddr_ParseString$descriptor() {
        return SteamAPI_ISteamNetworkingUtils_SteamNetworkingIPAddr_ParseString.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingUtils_SteamNetworkingIPAddr_ParseString(SteamNetworkingIPAddr *pAddr, const char *pszStr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingUtils_SteamNetworkingIPAddr_ParseString$handle() {
        return SteamAPI_ISteamNetworkingUtils_SteamNetworkingIPAddr_ParseString.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingUtils_SteamNetworkingIPAddr_ParseString(SteamNetworkingIPAddr *pAddr, const char *pszStr)
     * }
     */
    public static boolean SteamAPI_ISteamNetworkingUtils_SteamNetworkingIPAddr_ParseString(MemorySegment pAddr, MemorySegment pszStr) {
        var mh$ = SteamAPI_ISteamNetworkingUtils_SteamNetworkingIPAddr_ParseString.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingUtils_SteamNetworkingIPAddr_ParseString", pAddr, pszStr);
            }
            return (boolean)mh$.invokeExact(pAddr, pszStr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingUtils_SteamNetworkingIPAddr_GetFakeIPType {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamNetworkingUtils_SteamNetworkingIPAddr_GetFakeIPType"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ESteamNetworkingFakeIPType SteamAPI_ISteamNetworkingUtils_SteamNetworkingIPAddr_GetFakeIPType(const SteamNetworkingIPAddr *addr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingUtils_SteamNetworkingIPAddr_GetFakeIPType$descriptor() {
        return SteamAPI_ISteamNetworkingUtils_SteamNetworkingIPAddr_GetFakeIPType.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ESteamNetworkingFakeIPType SteamAPI_ISteamNetworkingUtils_SteamNetworkingIPAddr_GetFakeIPType(const SteamNetworkingIPAddr *addr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingUtils_SteamNetworkingIPAddr_GetFakeIPType$handle() {
        return SteamAPI_ISteamNetworkingUtils_SteamNetworkingIPAddr_GetFakeIPType.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ESteamNetworkingFakeIPType SteamAPI_ISteamNetworkingUtils_SteamNetworkingIPAddr_GetFakeIPType(const SteamNetworkingIPAddr *addr)
     * }
     */
    public static int SteamAPI_ISteamNetworkingUtils_SteamNetworkingIPAddr_GetFakeIPType(MemorySegment addr) {
        var mh$ = SteamAPI_ISteamNetworkingUtils_SteamNetworkingIPAddr_GetFakeIPType.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingUtils_SteamNetworkingIPAddr_GetFakeIPType", addr);
            }
            return (int)mh$.invokeExact(addr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingUtils_SteamNetworkingIdentity_ToString {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamNetworkingUtils_SteamNetworkingIdentity_ToString"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamNetworkingUtils_SteamNetworkingIdentity_ToString(const SteamNetworkingIdentity *identity, char *buf, uint32 cbBuf)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingUtils_SteamNetworkingIdentity_ToString$descriptor() {
        return SteamAPI_ISteamNetworkingUtils_SteamNetworkingIdentity_ToString.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamNetworkingUtils_SteamNetworkingIdentity_ToString(const SteamNetworkingIdentity *identity, char *buf, uint32 cbBuf)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingUtils_SteamNetworkingIdentity_ToString$handle() {
        return SteamAPI_ISteamNetworkingUtils_SteamNetworkingIdentity_ToString.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamNetworkingUtils_SteamNetworkingIdentity_ToString(const SteamNetworkingIdentity *identity, char *buf, uint32 cbBuf)
     * }
     */
    public static void SteamAPI_ISteamNetworkingUtils_SteamNetworkingIdentity_ToString(MemorySegment identity, MemorySegment buf, int cbBuf) {
        var mh$ = SteamAPI_ISteamNetworkingUtils_SteamNetworkingIdentity_ToString.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingUtils_SteamNetworkingIdentity_ToString", identity, buf, cbBuf);
            }
            mh$.invokeExact(identity, buf, cbBuf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingUtils_SteamNetworkingIdentity_ParseString {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamNetworkingUtils_SteamNetworkingIdentity_ParseString"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingUtils_SteamNetworkingIdentity_ParseString(SteamNetworkingIdentity *pIdentity, const char *pszStr)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingUtils_SteamNetworkingIdentity_ParseString$descriptor() {
        return SteamAPI_ISteamNetworkingUtils_SteamNetworkingIdentity_ParseString.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingUtils_SteamNetworkingIdentity_ParseString(SteamNetworkingIdentity *pIdentity, const char *pszStr)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingUtils_SteamNetworkingIdentity_ParseString$handle() {
        return SteamAPI_ISteamNetworkingUtils_SteamNetworkingIdentity_ParseString.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamNetworkingUtils_SteamNetworkingIdentity_ParseString(SteamNetworkingIdentity *pIdentity, const char *pszStr)
     * }
     */
    public static boolean SteamAPI_ISteamNetworkingUtils_SteamNetworkingIdentity_ParseString(MemorySegment pIdentity, MemorySegment pszStr) {
        var mh$ = SteamAPI_ISteamNetworkingUtils_SteamNetworkingIdentity_ParseString.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingUtils_SteamNetworkingIdentity_ParseString", pIdentity, pszStr);
            }
            return (boolean)mh$.invokeExact(pIdentity, pszStr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameServer_SetProduct {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamGameServer_SetProduct"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_SetProduct(const char *pszProduct)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameServer_SetProduct$descriptor() {
        return SteamAPI_ISteamGameServer_SetProduct.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_SetProduct(const char *pszProduct)
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameServer_SetProduct$handle() {
        return SteamAPI_ISteamGameServer_SetProduct.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_SetProduct(const char *pszProduct)
     * }
     */
    public static void SteamAPI_ISteamGameServer_SetProduct(MemorySegment pszProduct) {
        var mh$ = SteamAPI_ISteamGameServer_SetProduct.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameServer_SetProduct", pszProduct);
            }
            mh$.invokeExact(pszProduct);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameServer_SetGameDescription {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamGameServer_SetGameDescription"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_SetGameDescription(const char *pszGameDescription)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameServer_SetGameDescription$descriptor() {
        return SteamAPI_ISteamGameServer_SetGameDescription.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_SetGameDescription(const char *pszGameDescription)
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameServer_SetGameDescription$handle() {
        return SteamAPI_ISteamGameServer_SetGameDescription.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_SetGameDescription(const char *pszGameDescription)
     * }
     */
    public static void SteamAPI_ISteamGameServer_SetGameDescription(MemorySegment pszGameDescription) {
        var mh$ = SteamAPI_ISteamGameServer_SetGameDescription.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameServer_SetGameDescription", pszGameDescription);
            }
            mh$.invokeExact(pszGameDescription);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameServer_SetModDir {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamGameServer_SetModDir"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_SetModDir(const char *pszModDir)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameServer_SetModDir$descriptor() {
        return SteamAPI_ISteamGameServer_SetModDir.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_SetModDir(const char *pszModDir)
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameServer_SetModDir$handle() {
        return SteamAPI_ISteamGameServer_SetModDir.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_SetModDir(const char *pszModDir)
     * }
     */
    public static void SteamAPI_ISteamGameServer_SetModDir(MemorySegment pszModDir) {
        var mh$ = SteamAPI_ISteamGameServer_SetModDir.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameServer_SetModDir", pszModDir);
            }
            mh$.invokeExact(pszModDir);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameServer_SetDedicatedServer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamGameServer_SetDedicatedServer"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_SetDedicatedServer(bool bDedicated)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameServer_SetDedicatedServer$descriptor() {
        return SteamAPI_ISteamGameServer_SetDedicatedServer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_SetDedicatedServer(bool bDedicated)
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameServer_SetDedicatedServer$handle() {
        return SteamAPI_ISteamGameServer_SetDedicatedServer.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_SetDedicatedServer(bool bDedicated)
     * }
     */
    public static void SteamAPI_ISteamGameServer_SetDedicatedServer(boolean bDedicated) {
        var mh$ = SteamAPI_ISteamGameServer_SetDedicatedServer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameServer_SetDedicatedServer", bDedicated);
            }
            mh$.invokeExact(bDedicated);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameServer_LogOn {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamGameServer_LogOn"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_LogOn(const char *pszToken)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameServer_LogOn$descriptor() {
        return SteamAPI_ISteamGameServer_LogOn.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_LogOn(const char *pszToken)
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameServer_LogOn$handle() {
        return SteamAPI_ISteamGameServer_LogOn.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_LogOn(const char *pszToken)
     * }
     */
    public static void SteamAPI_ISteamGameServer_LogOn(MemorySegment pszToken) {
        var mh$ = SteamAPI_ISteamGameServer_LogOn.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameServer_LogOn", pszToken);
            }
            mh$.invokeExact(pszToken);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameServer_LogOnAnonymous {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamGameServer_LogOnAnonymous"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_LogOnAnonymous()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameServer_LogOnAnonymous$descriptor() {
        return SteamAPI_ISteamGameServer_LogOnAnonymous.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_LogOnAnonymous()
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameServer_LogOnAnonymous$handle() {
        return SteamAPI_ISteamGameServer_LogOnAnonymous.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_LogOnAnonymous()
     * }
     */
    public static void SteamAPI_ISteamGameServer_LogOnAnonymous() {
        var mh$ = SteamAPI_ISteamGameServer_LogOnAnonymous.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameServer_LogOnAnonymous");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameServer_LogOff {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamGameServer_LogOff"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_LogOff()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameServer_LogOff$descriptor() {
        return SteamAPI_ISteamGameServer_LogOff.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_LogOff()
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameServer_LogOff$handle() {
        return SteamAPI_ISteamGameServer_LogOff.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_LogOff()
     * }
     */
    public static void SteamAPI_ISteamGameServer_LogOff() {
        var mh$ = SteamAPI_ISteamGameServer_LogOff.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameServer_LogOff");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameServer_BLoggedOn {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamGameServer_BLoggedOn"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamGameServer_BLoggedOn()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameServer_BLoggedOn$descriptor() {
        return SteamAPI_ISteamGameServer_BLoggedOn.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamGameServer_BLoggedOn()
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameServer_BLoggedOn$handle() {
        return SteamAPI_ISteamGameServer_BLoggedOn.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamGameServer_BLoggedOn()
     * }
     */
    public static boolean SteamAPI_ISteamGameServer_BLoggedOn() {
        var mh$ = SteamAPI_ISteamGameServer_BLoggedOn.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameServer_BLoggedOn");
            }
            return (boolean)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameServer_BSecure {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamGameServer_BSecure"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamGameServer_BSecure()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameServer_BSecure$descriptor() {
        return SteamAPI_ISteamGameServer_BSecure.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamGameServer_BSecure()
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameServer_BSecure$handle() {
        return SteamAPI_ISteamGameServer_BSecure.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamGameServer_BSecure()
     * }
     */
    public static boolean SteamAPI_ISteamGameServer_BSecure() {
        var mh$ = SteamAPI_ISteamGameServer_BSecure.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameServer_BSecure");
            }
            return (boolean)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameServer_GetSteamID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_LONG_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamGameServer_GetSteamID"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint64_steamid SteamAPI_ISteamGameServer_GetSteamID()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameServer_GetSteamID$descriptor() {
        return SteamAPI_ISteamGameServer_GetSteamID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint64_steamid SteamAPI_ISteamGameServer_GetSteamID()
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameServer_GetSteamID$handle() {
        return SteamAPI_ISteamGameServer_GetSteamID.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * uint64_steamid SteamAPI_ISteamGameServer_GetSteamID()
     * }
     */
    public static long SteamAPI_ISteamGameServer_GetSteamID() {
        var mh$ = SteamAPI_ISteamGameServer_GetSteamID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameServer_GetSteamID");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameServer_WasRestartRequested {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamGameServer_WasRestartRequested"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamGameServer_WasRestartRequested()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameServer_WasRestartRequested$descriptor() {
        return SteamAPI_ISteamGameServer_WasRestartRequested.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamGameServer_WasRestartRequested()
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameServer_WasRestartRequested$handle() {
        return SteamAPI_ISteamGameServer_WasRestartRequested.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamGameServer_WasRestartRequested()
     * }
     */
    public static boolean SteamAPI_ISteamGameServer_WasRestartRequested() {
        var mh$ = SteamAPI_ISteamGameServer_WasRestartRequested.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameServer_WasRestartRequested");
            }
            return (boolean)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameServer_SetMaxPlayerCount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamGameServer_SetMaxPlayerCount"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_SetMaxPlayerCount(int cPlayersMax)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameServer_SetMaxPlayerCount$descriptor() {
        return SteamAPI_ISteamGameServer_SetMaxPlayerCount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_SetMaxPlayerCount(int cPlayersMax)
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameServer_SetMaxPlayerCount$handle() {
        return SteamAPI_ISteamGameServer_SetMaxPlayerCount.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_SetMaxPlayerCount(int cPlayersMax)
     * }
     */
    public static void SteamAPI_ISteamGameServer_SetMaxPlayerCount(int cPlayersMax) {
        var mh$ = SteamAPI_ISteamGameServer_SetMaxPlayerCount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameServer_SetMaxPlayerCount", cPlayersMax);
            }
            mh$.invokeExact(cPlayersMax);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameServer_SetBotPlayerCount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamGameServer_SetBotPlayerCount"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_SetBotPlayerCount(int cBotplayers)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameServer_SetBotPlayerCount$descriptor() {
        return SteamAPI_ISteamGameServer_SetBotPlayerCount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_SetBotPlayerCount(int cBotplayers)
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameServer_SetBotPlayerCount$handle() {
        return SteamAPI_ISteamGameServer_SetBotPlayerCount.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_SetBotPlayerCount(int cBotplayers)
     * }
     */
    public static void SteamAPI_ISteamGameServer_SetBotPlayerCount(int cBotplayers) {
        var mh$ = SteamAPI_ISteamGameServer_SetBotPlayerCount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameServer_SetBotPlayerCount", cBotplayers);
            }
            mh$.invokeExact(cBotplayers);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameServer_SetServerName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamGameServer_SetServerName"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_SetServerName(const char *pszServerName)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameServer_SetServerName$descriptor() {
        return SteamAPI_ISteamGameServer_SetServerName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_SetServerName(const char *pszServerName)
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameServer_SetServerName$handle() {
        return SteamAPI_ISteamGameServer_SetServerName.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_SetServerName(const char *pszServerName)
     * }
     */
    public static void SteamAPI_ISteamGameServer_SetServerName(MemorySegment pszServerName) {
        var mh$ = SteamAPI_ISteamGameServer_SetServerName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameServer_SetServerName", pszServerName);
            }
            mh$.invokeExact(pszServerName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameServer_SetMapName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamGameServer_SetMapName"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_SetMapName(const char *pszMapName)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameServer_SetMapName$descriptor() {
        return SteamAPI_ISteamGameServer_SetMapName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_SetMapName(const char *pszMapName)
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameServer_SetMapName$handle() {
        return SteamAPI_ISteamGameServer_SetMapName.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_SetMapName(const char *pszMapName)
     * }
     */
    public static void SteamAPI_ISteamGameServer_SetMapName(MemorySegment pszMapName) {
        var mh$ = SteamAPI_ISteamGameServer_SetMapName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameServer_SetMapName", pszMapName);
            }
            mh$.invokeExact(pszMapName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameServer_SetPasswordProtected {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamGameServer_SetPasswordProtected"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_SetPasswordProtected(bool bPasswordProtected)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameServer_SetPasswordProtected$descriptor() {
        return SteamAPI_ISteamGameServer_SetPasswordProtected.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_SetPasswordProtected(bool bPasswordProtected)
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameServer_SetPasswordProtected$handle() {
        return SteamAPI_ISteamGameServer_SetPasswordProtected.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_SetPasswordProtected(bool bPasswordProtected)
     * }
     */
    public static void SteamAPI_ISteamGameServer_SetPasswordProtected(boolean bPasswordProtected) {
        var mh$ = SteamAPI_ISteamGameServer_SetPasswordProtected.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameServer_SetPasswordProtected", bPasswordProtected);
            }
            mh$.invokeExact(bPasswordProtected);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameServer_SetSpectatorPort {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_SHORT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamGameServer_SetSpectatorPort"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_SetSpectatorPort(uint16 unSpectatorPort)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameServer_SetSpectatorPort$descriptor() {
        return SteamAPI_ISteamGameServer_SetSpectatorPort.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_SetSpectatorPort(uint16 unSpectatorPort)
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameServer_SetSpectatorPort$handle() {
        return SteamAPI_ISteamGameServer_SetSpectatorPort.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_SetSpectatorPort(uint16 unSpectatorPort)
     * }
     */
    public static void SteamAPI_ISteamGameServer_SetSpectatorPort(short unSpectatorPort) {
        var mh$ = SteamAPI_ISteamGameServer_SetSpectatorPort.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameServer_SetSpectatorPort", unSpectatorPort);
            }
            mh$.invokeExact(unSpectatorPort);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameServer_SetSpectatorServerName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamGameServer_SetSpectatorServerName"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_SetSpectatorServerName(const char *pszSpectatorServerName)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameServer_SetSpectatorServerName$descriptor() {
        return SteamAPI_ISteamGameServer_SetSpectatorServerName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_SetSpectatorServerName(const char *pszSpectatorServerName)
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameServer_SetSpectatorServerName$handle() {
        return SteamAPI_ISteamGameServer_SetSpectatorServerName.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_SetSpectatorServerName(const char *pszSpectatorServerName)
     * }
     */
    public static void SteamAPI_ISteamGameServer_SetSpectatorServerName(MemorySegment pszSpectatorServerName) {
        var mh$ = SteamAPI_ISteamGameServer_SetSpectatorServerName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameServer_SetSpectatorServerName", pszSpectatorServerName);
            }
            mh$.invokeExact(pszSpectatorServerName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameServer_ClearAllKeyValues {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamGameServer_ClearAllKeyValues"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_ClearAllKeyValues()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameServer_ClearAllKeyValues$descriptor() {
        return SteamAPI_ISteamGameServer_ClearAllKeyValues.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_ClearAllKeyValues()
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameServer_ClearAllKeyValues$handle() {
        return SteamAPI_ISteamGameServer_ClearAllKeyValues.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_ClearAllKeyValues()
     * }
     */
    public static void SteamAPI_ISteamGameServer_ClearAllKeyValues() {
        var mh$ = SteamAPI_ISteamGameServer_ClearAllKeyValues.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameServer_ClearAllKeyValues");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameServer_SetKeyValue {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamGameServer_SetKeyValue"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_SetKeyValue(const char *pKey, const char *pValue)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameServer_SetKeyValue$descriptor() {
        return SteamAPI_ISteamGameServer_SetKeyValue.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_SetKeyValue(const char *pKey, const char *pValue)
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameServer_SetKeyValue$handle() {
        return SteamAPI_ISteamGameServer_SetKeyValue.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_SetKeyValue(const char *pKey, const char *pValue)
     * }
     */
    public static void SteamAPI_ISteamGameServer_SetKeyValue(MemorySegment pKey, MemorySegment pValue) {
        var mh$ = SteamAPI_ISteamGameServer_SetKeyValue.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameServer_SetKeyValue", pKey, pValue);
            }
            mh$.invokeExact(pKey, pValue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameServer_SetGameTags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamGameServer_SetGameTags"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_SetGameTags(const char *pchGameTags)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameServer_SetGameTags$descriptor() {
        return SteamAPI_ISteamGameServer_SetGameTags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_SetGameTags(const char *pchGameTags)
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameServer_SetGameTags$handle() {
        return SteamAPI_ISteamGameServer_SetGameTags.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_SetGameTags(const char *pchGameTags)
     * }
     */
    public static void SteamAPI_ISteamGameServer_SetGameTags(MemorySegment pchGameTags) {
        var mh$ = SteamAPI_ISteamGameServer_SetGameTags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameServer_SetGameTags", pchGameTags);
            }
            mh$.invokeExact(pchGameTags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameServer_SetGameData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamGameServer_SetGameData"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_SetGameData(const char *pchGameData)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameServer_SetGameData$descriptor() {
        return SteamAPI_ISteamGameServer_SetGameData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_SetGameData(const char *pchGameData)
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameServer_SetGameData$handle() {
        return SteamAPI_ISteamGameServer_SetGameData.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_SetGameData(const char *pchGameData)
     * }
     */
    public static void SteamAPI_ISteamGameServer_SetGameData(MemorySegment pchGameData) {
        var mh$ = SteamAPI_ISteamGameServer_SetGameData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameServer_SetGameData", pchGameData);
            }
            mh$.invokeExact(pchGameData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameServer_SetRegion {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamGameServer_SetRegion"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_SetRegion(const char *pszRegion)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameServer_SetRegion$descriptor() {
        return SteamAPI_ISteamGameServer_SetRegion.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_SetRegion(const char *pszRegion)
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameServer_SetRegion$handle() {
        return SteamAPI_ISteamGameServer_SetRegion.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_SetRegion(const char *pszRegion)
     * }
     */
    public static void SteamAPI_ISteamGameServer_SetRegion(MemorySegment pszRegion) {
        var mh$ = SteamAPI_ISteamGameServer_SetRegion.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameServer_SetRegion", pszRegion);
            }
            mh$.invokeExact(pszRegion);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameServer_SetAdvertiseServerActive {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_BOOL
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamGameServer_SetAdvertiseServerActive"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_SetAdvertiseServerActive(bool bActive)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameServer_SetAdvertiseServerActive$descriptor() {
        return SteamAPI_ISteamGameServer_SetAdvertiseServerActive.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_SetAdvertiseServerActive(bool bActive)
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameServer_SetAdvertiseServerActive$handle() {
        return SteamAPI_ISteamGameServer_SetAdvertiseServerActive.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_SetAdvertiseServerActive(bool bActive)
     * }
     */
    public static void SteamAPI_ISteamGameServer_SetAdvertiseServerActive(boolean bActive) {
        var mh$ = SteamAPI_ISteamGameServer_SetAdvertiseServerActive.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameServer_SetAdvertiseServerActive", bActive);
            }
            mh$.invokeExact(bActive);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameServer_GetAuthSessionTicket {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamGameServer_GetAuthSessionTicket"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HAuthTicket SteamAPI_ISteamGameServer_GetAuthSessionTicket(void *pTicket, int cbMaxTicket, uint32 *pcbTicket, const SteamNetworkingIdentity *pSnid)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameServer_GetAuthSessionTicket$descriptor() {
        return SteamAPI_ISteamGameServer_GetAuthSessionTicket.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HAuthTicket SteamAPI_ISteamGameServer_GetAuthSessionTicket(void *pTicket, int cbMaxTicket, uint32 *pcbTicket, const SteamNetworkingIdentity *pSnid)
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameServer_GetAuthSessionTicket$handle() {
        return SteamAPI_ISteamGameServer_GetAuthSessionTicket.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HAuthTicket SteamAPI_ISteamGameServer_GetAuthSessionTicket(void *pTicket, int cbMaxTicket, uint32 *pcbTicket, const SteamNetworkingIdentity *pSnid)
     * }
     */
    public static int SteamAPI_ISteamGameServer_GetAuthSessionTicket(MemorySegment pTicket, int cbMaxTicket, MemorySegment pcbTicket, MemorySegment pSnid) {
        var mh$ = SteamAPI_ISteamGameServer_GetAuthSessionTicket.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameServer_GetAuthSessionTicket", pTicket, cbMaxTicket, pcbTicket, pSnid);
            }
            return (int)mh$.invokeExact(pTicket, cbMaxTicket, pcbTicket, pSnid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameServer_BeginAuthSession {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamGameServer_BeginAuthSession"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * EBeginAuthSessionResult SteamAPI_ISteamGameServer_BeginAuthSession(const void *pAuthTicket, int cbAuthTicket, uint64_steamid steamID)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameServer_BeginAuthSession$descriptor() {
        return SteamAPI_ISteamGameServer_BeginAuthSession.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * EBeginAuthSessionResult SteamAPI_ISteamGameServer_BeginAuthSession(const void *pAuthTicket, int cbAuthTicket, uint64_steamid steamID)
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameServer_BeginAuthSession$handle() {
        return SteamAPI_ISteamGameServer_BeginAuthSession.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * EBeginAuthSessionResult SteamAPI_ISteamGameServer_BeginAuthSession(const void *pAuthTicket, int cbAuthTicket, uint64_steamid steamID)
     * }
     */
    public static int SteamAPI_ISteamGameServer_BeginAuthSession(MemorySegment pAuthTicket, int cbAuthTicket, long steamID) {
        var mh$ = SteamAPI_ISteamGameServer_BeginAuthSession.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameServer_BeginAuthSession", pAuthTicket, cbAuthTicket, steamID);
            }
            return (int)mh$.invokeExact(pAuthTicket, cbAuthTicket, steamID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameServer_EndAuthSession {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamGameServer_EndAuthSession"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_EndAuthSession(uint64_steamid steamID)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameServer_EndAuthSession$descriptor() {
        return SteamAPI_ISteamGameServer_EndAuthSession.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_EndAuthSession(uint64_steamid steamID)
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameServer_EndAuthSession$handle() {
        return SteamAPI_ISteamGameServer_EndAuthSession.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_EndAuthSession(uint64_steamid steamID)
     * }
     */
    public static void SteamAPI_ISteamGameServer_EndAuthSession(long steamID) {
        var mh$ = SteamAPI_ISteamGameServer_EndAuthSession.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameServer_EndAuthSession", steamID);
            }
            mh$.invokeExact(steamID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameServer_CancelAuthTicket {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamGameServer_CancelAuthTicket"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_CancelAuthTicket(HAuthTicket hAuthTicket)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameServer_CancelAuthTicket$descriptor() {
        return SteamAPI_ISteamGameServer_CancelAuthTicket.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_CancelAuthTicket(HAuthTicket hAuthTicket)
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameServer_CancelAuthTicket$handle() {
        return SteamAPI_ISteamGameServer_CancelAuthTicket.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_CancelAuthTicket(HAuthTicket hAuthTicket)
     * }
     */
    public static void SteamAPI_ISteamGameServer_CancelAuthTicket(int hAuthTicket) {
        var mh$ = SteamAPI_ISteamGameServer_CancelAuthTicket.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameServer_CancelAuthTicket", hAuthTicket);
            }
            mh$.invokeExact(hAuthTicket);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameServer_UserHasLicenseForApp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamGameServer_UserHasLicenseForApp"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * EUserHasLicenseForAppResult SteamAPI_ISteamGameServer_UserHasLicenseForApp(uint64_steamid steamID, AppId_t appID)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameServer_UserHasLicenseForApp$descriptor() {
        return SteamAPI_ISteamGameServer_UserHasLicenseForApp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * EUserHasLicenseForAppResult SteamAPI_ISteamGameServer_UserHasLicenseForApp(uint64_steamid steamID, AppId_t appID)
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameServer_UserHasLicenseForApp$handle() {
        return SteamAPI_ISteamGameServer_UserHasLicenseForApp.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * EUserHasLicenseForAppResult SteamAPI_ISteamGameServer_UserHasLicenseForApp(uint64_steamid steamID, AppId_t appID)
     * }
     */
    public static int SteamAPI_ISteamGameServer_UserHasLicenseForApp(long steamID, int appID) {
        var mh$ = SteamAPI_ISteamGameServer_UserHasLicenseForApp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameServer_UserHasLicenseForApp", steamID, appID);
            }
            return (int)mh$.invokeExact(steamID, appID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameServer_RequestUserGroupStatus {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamGameServer_RequestUserGroupStatus"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamGameServer_RequestUserGroupStatus(uint64_steamid steamIDUser, uint64_steamid steamIDGroup)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameServer_RequestUserGroupStatus$descriptor() {
        return SteamAPI_ISteamGameServer_RequestUserGroupStatus.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamGameServer_RequestUserGroupStatus(uint64_steamid steamIDUser, uint64_steamid steamIDGroup)
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameServer_RequestUserGroupStatus$handle() {
        return SteamAPI_ISteamGameServer_RequestUserGroupStatus.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamGameServer_RequestUserGroupStatus(uint64_steamid steamIDUser, uint64_steamid steamIDGroup)
     * }
     */
    public static boolean SteamAPI_ISteamGameServer_RequestUserGroupStatus(long steamIDUser, long steamIDGroup) {
        var mh$ = SteamAPI_ISteamGameServer_RequestUserGroupStatus.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameServer_RequestUserGroupStatus", steamIDUser, steamIDGroup);
            }
            return (boolean)mh$.invokeExact(steamIDUser, steamIDGroup);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameServer_GetGameplayStats {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamGameServer_GetGameplayStats"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_GetGameplayStats()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameServer_GetGameplayStats$descriptor() {
        return SteamAPI_ISteamGameServer_GetGameplayStats.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_GetGameplayStats()
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameServer_GetGameplayStats$handle() {
        return SteamAPI_ISteamGameServer_GetGameplayStats.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_GetGameplayStats()
     * }
     */
    public static void SteamAPI_ISteamGameServer_GetGameplayStats() {
        var mh$ = SteamAPI_ISteamGameServer_GetGameplayStats.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameServer_GetGameplayStats");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameServer_GetServerReputation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_LONG_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamGameServer_GetServerReputation"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamGameServer_GetServerReputation()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameServer_GetServerReputation$descriptor() {
        return SteamAPI_ISteamGameServer_GetServerReputation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamGameServer_GetServerReputation()
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameServer_GetServerReputation$handle() {
        return SteamAPI_ISteamGameServer_GetServerReputation.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamGameServer_GetServerReputation()
     * }
     */
    public static long SteamAPI_ISteamGameServer_GetServerReputation() {
        var mh$ = SteamAPI_ISteamGameServer_GetServerReputation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameServer_GetServerReputation");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameServer_GetPublicIP {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamIPAddress_t.layout()    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamGameServer_GetPublicIP"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamIPAddress_t SteamAPI_ISteamGameServer_GetPublicIP()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameServer_GetPublicIP$descriptor() {
        return SteamAPI_ISteamGameServer_GetPublicIP.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamIPAddress_t SteamAPI_ISteamGameServer_GetPublicIP()
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameServer_GetPublicIP$handle() {
        return SteamAPI_ISteamGameServer_GetPublicIP.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamIPAddress_t SteamAPI_ISteamGameServer_GetPublicIP()
     * }
     */
    public static MemorySegment SteamAPI_ISteamGameServer_GetPublicIP(SegmentAllocator allocator) {
        var mh$ = SteamAPI_ISteamGameServer_GetPublicIP.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameServer_GetPublicIP", allocator);
            }
            return (MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameServer_HandleIncomingPacket {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_SHORT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamGameServer_HandleIncomingPacket"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamGameServer_HandleIncomingPacket(const void *pData, int cbData, uint32 srcIP, uint16 srcPort)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameServer_HandleIncomingPacket$descriptor() {
        return SteamAPI_ISteamGameServer_HandleIncomingPacket.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamGameServer_HandleIncomingPacket(const void *pData, int cbData, uint32 srcIP, uint16 srcPort)
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameServer_HandleIncomingPacket$handle() {
        return SteamAPI_ISteamGameServer_HandleIncomingPacket.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamGameServer_HandleIncomingPacket(const void *pData, int cbData, uint32 srcIP, uint16 srcPort)
     * }
     */
    public static boolean SteamAPI_ISteamGameServer_HandleIncomingPacket(MemorySegment pData, int cbData, int srcIP, short srcPort) {
        var mh$ = SteamAPI_ISteamGameServer_HandleIncomingPacket.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameServer_HandleIncomingPacket", pData, cbData, srcIP, srcPort);
            }
            return (boolean)mh$.invokeExact(pData, cbData, srcIP, srcPort);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameServer_GetNextOutgoingPacket {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamGameServer_GetNextOutgoingPacket"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamGameServer_GetNextOutgoingPacket(void *pOut, int cbMaxOut, uint32 *pNetAdr, uint16 *pPort)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameServer_GetNextOutgoingPacket$descriptor() {
        return SteamAPI_ISteamGameServer_GetNextOutgoingPacket.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamGameServer_GetNextOutgoingPacket(void *pOut, int cbMaxOut, uint32 *pNetAdr, uint16 *pPort)
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameServer_GetNextOutgoingPacket$handle() {
        return SteamAPI_ISteamGameServer_GetNextOutgoingPacket.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int SteamAPI_ISteamGameServer_GetNextOutgoingPacket(void *pOut, int cbMaxOut, uint32 *pNetAdr, uint16 *pPort)
     * }
     */
    public static int SteamAPI_ISteamGameServer_GetNextOutgoingPacket(MemorySegment pOut, int cbMaxOut, MemorySegment pNetAdr, MemorySegment pPort) {
        var mh$ = SteamAPI_ISteamGameServer_GetNextOutgoingPacket.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameServer_GetNextOutgoingPacket", pOut, cbMaxOut, pNetAdr, pPort);
            }
            return (int)mh$.invokeExact(pOut, cbMaxOut, pNetAdr, pPort);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameServer_AssociateWithClan {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamGameServer_AssociateWithClan"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamGameServer_AssociateWithClan(uint64_steamid steamIDClan)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameServer_AssociateWithClan$descriptor() {
        return SteamAPI_ISteamGameServer_AssociateWithClan.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamGameServer_AssociateWithClan(uint64_steamid steamIDClan)
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameServer_AssociateWithClan$handle() {
        return SteamAPI_ISteamGameServer_AssociateWithClan.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamGameServer_AssociateWithClan(uint64_steamid steamIDClan)
     * }
     */
    public static long SteamAPI_ISteamGameServer_AssociateWithClan(long steamIDClan) {
        var mh$ = SteamAPI_ISteamGameServer_AssociateWithClan.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameServer_AssociateWithClan", steamIDClan);
            }
            return (long)mh$.invokeExact(steamIDClan);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameServer_ComputeNewPlayerCompatibility {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamGameServer_ComputeNewPlayerCompatibility"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamGameServer_ComputeNewPlayerCompatibility(uint64_steamid steamIDNewPlayer)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameServer_ComputeNewPlayerCompatibility$descriptor() {
        return SteamAPI_ISteamGameServer_ComputeNewPlayerCompatibility.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamGameServer_ComputeNewPlayerCompatibility(uint64_steamid steamIDNewPlayer)
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameServer_ComputeNewPlayerCompatibility$handle() {
        return SteamAPI_ISteamGameServer_ComputeNewPlayerCompatibility.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamGameServer_ComputeNewPlayerCompatibility(uint64_steamid steamIDNewPlayer)
     * }
     */
    public static long SteamAPI_ISteamGameServer_ComputeNewPlayerCompatibility(long steamIDNewPlayer) {
        var mh$ = SteamAPI_ISteamGameServer_ComputeNewPlayerCompatibility.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameServer_ComputeNewPlayerCompatibility", steamIDNewPlayer);
            }
            return (long)mh$.invokeExact(steamIDNewPlayer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameServer_SendUserConnectAndAuthenticate_DEPRECATED {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamGameServer_SendUserConnectAndAuthenticate_DEPRECATED"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamGameServer_SendUserConnectAndAuthenticate_DEPRECATED(uint32 unIPClient, const void *pvAuthBlob, uint32 cubAuthBlobSize, CSteamID *pSteamIDUser)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameServer_SendUserConnectAndAuthenticate_DEPRECATED$descriptor() {
        return SteamAPI_ISteamGameServer_SendUserConnectAndAuthenticate_DEPRECATED.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamGameServer_SendUserConnectAndAuthenticate_DEPRECATED(uint32 unIPClient, const void *pvAuthBlob, uint32 cubAuthBlobSize, CSteamID *pSteamIDUser)
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameServer_SendUserConnectAndAuthenticate_DEPRECATED$handle() {
        return SteamAPI_ISteamGameServer_SendUserConnectAndAuthenticate_DEPRECATED.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamGameServer_SendUserConnectAndAuthenticate_DEPRECATED(uint32 unIPClient, const void *pvAuthBlob, uint32 cubAuthBlobSize, CSteamID *pSteamIDUser)
     * }
     */
    public static boolean SteamAPI_ISteamGameServer_SendUserConnectAndAuthenticate_DEPRECATED(int unIPClient, MemorySegment pvAuthBlob, int cubAuthBlobSize, MemorySegment pSteamIDUser) {
        var mh$ = SteamAPI_ISteamGameServer_SendUserConnectAndAuthenticate_DEPRECATED.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameServer_SendUserConnectAndAuthenticate_DEPRECATED", unIPClient, pvAuthBlob, cubAuthBlobSize, pSteamIDUser);
            }
            return (boolean)mh$.invokeExact(unIPClient, pvAuthBlob, cubAuthBlobSize, pSteamIDUser);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameServer_CreateUnauthenticatedUserConnection {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_LONG_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamGameServer_CreateUnauthenticatedUserConnection"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint64_steamid SteamAPI_ISteamGameServer_CreateUnauthenticatedUserConnection()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameServer_CreateUnauthenticatedUserConnection$descriptor() {
        return SteamAPI_ISteamGameServer_CreateUnauthenticatedUserConnection.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint64_steamid SteamAPI_ISteamGameServer_CreateUnauthenticatedUserConnection()
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameServer_CreateUnauthenticatedUserConnection$handle() {
        return SteamAPI_ISteamGameServer_CreateUnauthenticatedUserConnection.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * uint64_steamid SteamAPI_ISteamGameServer_CreateUnauthenticatedUserConnection()
     * }
     */
    public static long SteamAPI_ISteamGameServer_CreateUnauthenticatedUserConnection() {
        var mh$ = SteamAPI_ISteamGameServer_CreateUnauthenticatedUserConnection.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameServer_CreateUnauthenticatedUserConnection");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameServer_SendUserDisconnect_DEPRECATED {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamGameServer_SendUserDisconnect_DEPRECATED"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_SendUserDisconnect_DEPRECATED(uint64_steamid steamIDUser)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameServer_SendUserDisconnect_DEPRECATED$descriptor() {
        return SteamAPI_ISteamGameServer_SendUserDisconnect_DEPRECATED.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_SendUserDisconnect_DEPRECATED(uint64_steamid steamIDUser)
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameServer_SendUserDisconnect_DEPRECATED$handle() {
        return SteamAPI_ISteamGameServer_SendUserDisconnect_DEPRECATED.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamGameServer_SendUserDisconnect_DEPRECATED(uint64_steamid steamIDUser)
     * }
     */
    public static void SteamAPI_ISteamGameServer_SendUserDisconnect_DEPRECATED(long steamIDUser) {
        var mh$ = SteamAPI_ISteamGameServer_SendUserDisconnect_DEPRECATED.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameServer_SendUserDisconnect_DEPRECATED", steamIDUser);
            }
            mh$.invokeExact(steamIDUser);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameServer_BUpdateUserData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamGameServer_BUpdateUserData"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamGameServer_BUpdateUserData(uint64_steamid steamIDUser, const char *pchPlayerName, uint32 uScore)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameServer_BUpdateUserData$descriptor() {
        return SteamAPI_ISteamGameServer_BUpdateUserData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamGameServer_BUpdateUserData(uint64_steamid steamIDUser, const char *pchPlayerName, uint32 uScore)
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameServer_BUpdateUserData$handle() {
        return SteamAPI_ISteamGameServer_BUpdateUserData.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamGameServer_BUpdateUserData(uint64_steamid steamIDUser, const char *pchPlayerName, uint32 uScore)
     * }
     */
    public static boolean SteamAPI_ISteamGameServer_BUpdateUserData(long steamIDUser, MemorySegment pchPlayerName, int uScore) {
        var mh$ = SteamAPI_ISteamGameServer_BUpdateUserData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameServer_BUpdateUserData", steamIDUser, pchPlayerName, uScore);
            }
            return (boolean)mh$.invokeExact(steamIDUser, pchPlayerName, uScore);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameServerStats_RequestUserStats {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamGameServerStats_RequestUserStats"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamGameServerStats_RequestUserStats(uint64_steamid steamIDUser)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameServerStats_RequestUserStats$descriptor() {
        return SteamAPI_ISteamGameServerStats_RequestUserStats.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamGameServerStats_RequestUserStats(uint64_steamid steamIDUser)
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameServerStats_RequestUserStats$handle() {
        return SteamAPI_ISteamGameServerStats_RequestUserStats.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamGameServerStats_RequestUserStats(uint64_steamid steamIDUser)
     * }
     */
    public static long SteamAPI_ISteamGameServerStats_RequestUserStats(long steamIDUser) {
        var mh$ = SteamAPI_ISteamGameServerStats_RequestUserStats.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameServerStats_RequestUserStats", steamIDUser);
            }
            return (long)mh$.invokeExact(steamIDUser);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameServerStats_GetUserStatInt32 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamGameServerStats_GetUserStatInt32"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamGameServerStats_GetUserStatInt32(uint64_steamid steamIDUser, const char *pchName, int32 *pData)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameServerStats_GetUserStatInt32$descriptor() {
        return SteamAPI_ISteamGameServerStats_GetUserStatInt32.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamGameServerStats_GetUserStatInt32(uint64_steamid steamIDUser, const char *pchName, int32 *pData)
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameServerStats_GetUserStatInt32$handle() {
        return SteamAPI_ISteamGameServerStats_GetUserStatInt32.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamGameServerStats_GetUserStatInt32(uint64_steamid steamIDUser, const char *pchName, int32 *pData)
     * }
     */
    public static boolean SteamAPI_ISteamGameServerStats_GetUserStatInt32(long steamIDUser, MemorySegment pchName, MemorySegment pData) {
        var mh$ = SteamAPI_ISteamGameServerStats_GetUserStatInt32.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameServerStats_GetUserStatInt32", steamIDUser, pchName, pData);
            }
            return (boolean)mh$.invokeExact(steamIDUser, pchName, pData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameServerStats_GetUserStatFloat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamGameServerStats_GetUserStatFloat"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamGameServerStats_GetUserStatFloat(uint64_steamid steamIDUser, const char *pchName, float *pData)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameServerStats_GetUserStatFloat$descriptor() {
        return SteamAPI_ISteamGameServerStats_GetUserStatFloat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamGameServerStats_GetUserStatFloat(uint64_steamid steamIDUser, const char *pchName, float *pData)
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameServerStats_GetUserStatFloat$handle() {
        return SteamAPI_ISteamGameServerStats_GetUserStatFloat.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamGameServerStats_GetUserStatFloat(uint64_steamid steamIDUser, const char *pchName, float *pData)
     * }
     */
    public static boolean SteamAPI_ISteamGameServerStats_GetUserStatFloat(long steamIDUser, MemorySegment pchName, MemorySegment pData) {
        var mh$ = SteamAPI_ISteamGameServerStats_GetUserStatFloat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameServerStats_GetUserStatFloat", steamIDUser, pchName, pData);
            }
            return (boolean)mh$.invokeExact(steamIDUser, pchName, pData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameServerStats_GetUserAchievement {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamGameServerStats_GetUserAchievement"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamGameServerStats_GetUserAchievement(uint64_steamid steamIDUser, const char *pchName, bool *pbAchieved)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameServerStats_GetUserAchievement$descriptor() {
        return SteamAPI_ISteamGameServerStats_GetUserAchievement.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamGameServerStats_GetUserAchievement(uint64_steamid steamIDUser, const char *pchName, bool *pbAchieved)
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameServerStats_GetUserAchievement$handle() {
        return SteamAPI_ISteamGameServerStats_GetUserAchievement.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamGameServerStats_GetUserAchievement(uint64_steamid steamIDUser, const char *pchName, bool *pbAchieved)
     * }
     */
    public static boolean SteamAPI_ISteamGameServerStats_GetUserAchievement(long steamIDUser, MemorySegment pchName, MemorySegment pbAchieved) {
        var mh$ = SteamAPI_ISteamGameServerStats_GetUserAchievement.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameServerStats_GetUserAchievement", steamIDUser, pchName, pbAchieved);
            }
            return (boolean)mh$.invokeExact(steamIDUser, pchName, pbAchieved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameServerStats_SetUserStatInt32 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamGameServerStats_SetUserStatInt32"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamGameServerStats_SetUserStatInt32(uint64_steamid steamIDUser, const char *pchName, int32 nData)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameServerStats_SetUserStatInt32$descriptor() {
        return SteamAPI_ISteamGameServerStats_SetUserStatInt32.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamGameServerStats_SetUserStatInt32(uint64_steamid steamIDUser, const char *pchName, int32 nData)
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameServerStats_SetUserStatInt32$handle() {
        return SteamAPI_ISteamGameServerStats_SetUserStatInt32.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamGameServerStats_SetUserStatInt32(uint64_steamid steamIDUser, const char *pchName, int32 nData)
     * }
     */
    public static boolean SteamAPI_ISteamGameServerStats_SetUserStatInt32(long steamIDUser, MemorySegment pchName, int nData) {
        var mh$ = SteamAPI_ISteamGameServerStats_SetUserStatInt32.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameServerStats_SetUserStatInt32", steamIDUser, pchName, nData);
            }
            return (boolean)mh$.invokeExact(steamIDUser, pchName, nData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameServerStats_SetUserStatFloat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_FLOAT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamGameServerStats_SetUserStatFloat"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamGameServerStats_SetUserStatFloat(uint64_steamid steamIDUser, const char *pchName, float fData)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameServerStats_SetUserStatFloat$descriptor() {
        return SteamAPI_ISteamGameServerStats_SetUserStatFloat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamGameServerStats_SetUserStatFloat(uint64_steamid steamIDUser, const char *pchName, float fData)
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameServerStats_SetUserStatFloat$handle() {
        return SteamAPI_ISteamGameServerStats_SetUserStatFloat.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamGameServerStats_SetUserStatFloat(uint64_steamid steamIDUser, const char *pchName, float fData)
     * }
     */
    public static boolean SteamAPI_ISteamGameServerStats_SetUserStatFloat(long steamIDUser, MemorySegment pchName, float fData) {
        var mh$ = SteamAPI_ISteamGameServerStats_SetUserStatFloat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameServerStats_SetUserStatFloat", steamIDUser, pchName, fData);
            }
            return (boolean)mh$.invokeExact(steamIDUser, pchName, fData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameServerStats_UpdateUserAvgRateStat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_FLOAT,
            SteamFlat4j.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamGameServerStats_UpdateUserAvgRateStat"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamGameServerStats_UpdateUserAvgRateStat(uint64_steamid steamIDUser, const char *pchName, float flCountThisSession, double dSessionLength)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameServerStats_UpdateUserAvgRateStat$descriptor() {
        return SteamAPI_ISteamGameServerStats_UpdateUserAvgRateStat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamGameServerStats_UpdateUserAvgRateStat(uint64_steamid steamIDUser, const char *pchName, float flCountThisSession, double dSessionLength)
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameServerStats_UpdateUserAvgRateStat$handle() {
        return SteamAPI_ISteamGameServerStats_UpdateUserAvgRateStat.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamGameServerStats_UpdateUserAvgRateStat(uint64_steamid steamIDUser, const char *pchName, float flCountThisSession, double dSessionLength)
     * }
     */
    public static boolean SteamAPI_ISteamGameServerStats_UpdateUserAvgRateStat(long steamIDUser, MemorySegment pchName, float flCountThisSession, double dSessionLength) {
        var mh$ = SteamAPI_ISteamGameServerStats_UpdateUserAvgRateStat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameServerStats_UpdateUserAvgRateStat", steamIDUser, pchName, flCountThisSession, dSessionLength);
            }
            return (boolean)mh$.invokeExact(steamIDUser, pchName, flCountThisSession, dSessionLength);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameServerStats_SetUserAchievement {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamGameServerStats_SetUserAchievement"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamGameServerStats_SetUserAchievement(uint64_steamid steamIDUser, const char *pchName)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameServerStats_SetUserAchievement$descriptor() {
        return SteamAPI_ISteamGameServerStats_SetUserAchievement.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamGameServerStats_SetUserAchievement(uint64_steamid steamIDUser, const char *pchName)
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameServerStats_SetUserAchievement$handle() {
        return SteamAPI_ISteamGameServerStats_SetUserAchievement.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamGameServerStats_SetUserAchievement(uint64_steamid steamIDUser, const char *pchName)
     * }
     */
    public static boolean SteamAPI_ISteamGameServerStats_SetUserAchievement(long steamIDUser, MemorySegment pchName) {
        var mh$ = SteamAPI_ISteamGameServerStats_SetUserAchievement.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameServerStats_SetUserAchievement", steamIDUser, pchName);
            }
            return (boolean)mh$.invokeExact(steamIDUser, pchName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameServerStats_ClearUserAchievement {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_BOOL,
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamGameServerStats_ClearUserAchievement"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamGameServerStats_ClearUserAchievement(uint64_steamid steamIDUser, const char *pchName)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameServerStats_ClearUserAchievement$descriptor() {
        return SteamAPI_ISteamGameServerStats_ClearUserAchievement.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool SteamAPI_ISteamGameServerStats_ClearUserAchievement(uint64_steamid steamIDUser, const char *pchName)
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameServerStats_ClearUserAchievement$handle() {
        return SteamAPI_ISteamGameServerStats_ClearUserAchievement.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * bool SteamAPI_ISteamGameServerStats_ClearUserAchievement(uint64_steamid steamIDUser, const char *pchName)
     * }
     */
    public static boolean SteamAPI_ISteamGameServerStats_ClearUserAchievement(long steamIDUser, MemorySegment pchName) {
        var mh$ = SteamAPI_ISteamGameServerStats_ClearUserAchievement.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameServerStats_ClearUserAchievement", steamIDUser, pchName);
            }
            return (boolean)mh$.invokeExact(steamIDUser, pchName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamGameServerStats_StoreUserStats {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_LONG_LONG,
            SteamFlat4j.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamGameServerStats_StoreUserStats"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamGameServerStats_StoreUserStats(uint64_steamid steamIDUser)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamGameServerStats_StoreUserStats$descriptor() {
        return SteamAPI_ISteamGameServerStats_StoreUserStats.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamGameServerStats_StoreUserStats(uint64_steamid steamIDUser)
     * }
     */
    public static MethodHandle SteamAPI_ISteamGameServerStats_StoreUserStats$handle() {
        return SteamAPI_ISteamGameServerStats_StoreUserStats.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SteamAPICall_t SteamAPI_ISteamGameServerStats_StoreUserStats(uint64_steamid steamIDUser)
     * }
     */
    public static long SteamAPI_ISteamGameServerStats_StoreUserStats(long steamIDUser) {
        var mh$ = SteamAPI_ISteamGameServerStats_StoreUserStats.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamGameServerStats_StoreUserStats", steamIDUser);
            }
            return (long)mh$.invokeExact(steamIDUser);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingFakeUDPPort_DestroyFakeUDPPort {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamNetworkingFakeUDPPort_DestroyFakeUDPPort"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamNetworkingFakeUDPPort_DestroyFakeUDPPort()
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingFakeUDPPort_DestroyFakeUDPPort$descriptor() {
        return SteamAPI_ISteamNetworkingFakeUDPPort_DestroyFakeUDPPort.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamNetworkingFakeUDPPort_DestroyFakeUDPPort()
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingFakeUDPPort_DestroyFakeUDPPort$handle() {
        return SteamAPI_ISteamNetworkingFakeUDPPort_DestroyFakeUDPPort.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamNetworkingFakeUDPPort_DestroyFakeUDPPort()
     * }
     */
    public static void SteamAPI_ISteamNetworkingFakeUDPPort_DestroyFakeUDPPort() {
        var mh$ = SteamAPI_ISteamNetworkingFakeUDPPort_DestroyFakeUDPPort.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingFakeUDPPort_DestroyFakeUDPPort");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingFakeUDPPort_SendMessageToFakeIP {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamNetworkingFakeUDPPort_SendMessageToFakeIP"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * EResult SteamAPI_ISteamNetworkingFakeUDPPort_SendMessageToFakeIP(const SteamNetworkingIPAddr *remoteAddress, const void *pData, uint32 cbData, int nSendFlags)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingFakeUDPPort_SendMessageToFakeIP$descriptor() {
        return SteamAPI_ISteamNetworkingFakeUDPPort_SendMessageToFakeIP.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * EResult SteamAPI_ISteamNetworkingFakeUDPPort_SendMessageToFakeIP(const SteamNetworkingIPAddr *remoteAddress, const void *pData, uint32 cbData, int nSendFlags)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingFakeUDPPort_SendMessageToFakeIP$handle() {
        return SteamAPI_ISteamNetworkingFakeUDPPort_SendMessageToFakeIP.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * EResult SteamAPI_ISteamNetworkingFakeUDPPort_SendMessageToFakeIP(const SteamNetworkingIPAddr *remoteAddress, const void *pData, uint32 cbData, int nSendFlags)
     * }
     */
    public static int SteamAPI_ISteamNetworkingFakeUDPPort_SendMessageToFakeIP(MemorySegment remoteAddress, MemorySegment pData, int cbData, int nSendFlags) {
        var mh$ = SteamAPI_ISteamNetworkingFakeUDPPort_SendMessageToFakeIP.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingFakeUDPPort_SendMessageToFakeIP", remoteAddress, pData, cbData, nSendFlags);
            }
            return (int)mh$.invokeExact(remoteAddress, pData, cbData, nSendFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingFakeUDPPort_ReceiveMessages {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER,
            SteamFlat4j.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamNetworkingFakeUDPPort_ReceiveMessages"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamNetworkingFakeUDPPort_ReceiveMessages(SteamNetworkingMessage_t **ppOutMessages, int nMaxMessages)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingFakeUDPPort_ReceiveMessages$descriptor() {
        return SteamAPI_ISteamNetworkingFakeUDPPort_ReceiveMessages.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SteamAPI_ISteamNetworkingFakeUDPPort_ReceiveMessages(SteamNetworkingMessage_t **ppOutMessages, int nMaxMessages)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingFakeUDPPort_ReceiveMessages$handle() {
        return SteamAPI_ISteamNetworkingFakeUDPPort_ReceiveMessages.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int SteamAPI_ISteamNetworkingFakeUDPPort_ReceiveMessages(SteamNetworkingMessage_t **ppOutMessages, int nMaxMessages)
     * }
     */
    public static int SteamAPI_ISteamNetworkingFakeUDPPort_ReceiveMessages(MemorySegment ppOutMessages, int nMaxMessages) {
        var mh$ = SteamAPI_ISteamNetworkingFakeUDPPort_ReceiveMessages.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingFakeUDPPort_ReceiveMessages", ppOutMessages, nMaxMessages);
            }
            return (int)mh$.invokeExact(ppOutMessages, nMaxMessages);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_ISteamNetworkingFakeUDPPort_ScheduleCleanup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_ISteamNetworkingFakeUDPPort_ScheduleCleanup"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamNetworkingFakeUDPPort_ScheduleCleanup(const SteamNetworkingIPAddr *remoteAddress)
     * }
     */
    public static FunctionDescriptor SteamAPI_ISteamNetworkingFakeUDPPort_ScheduleCleanup$descriptor() {
        return SteamAPI_ISteamNetworkingFakeUDPPort_ScheduleCleanup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SteamAPI_ISteamNetworkingFakeUDPPort_ScheduleCleanup(const SteamNetworkingIPAddr *remoteAddress)
     * }
     */
    public static MethodHandle SteamAPI_ISteamNetworkingFakeUDPPort_ScheduleCleanup$handle() {
        return SteamAPI_ISteamNetworkingFakeUDPPort_ScheduleCleanup.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void SteamAPI_ISteamNetworkingFakeUDPPort_ScheduleCleanup(const SteamNetworkingIPAddr *remoteAddress)
     * }
     */
    public static void SteamAPI_ISteamNetworkingFakeUDPPort_ScheduleCleanup(MemorySegment remoteAddress) {
        var mh$ = SteamAPI_ISteamNetworkingFakeUDPPort_ScheduleCleanup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_ISteamNetworkingFakeUDPPort_ScheduleCleanup", remoteAddress);
            }
            mh$.invokeExact(remoteAddress);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SteamAPI_InitFlat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            SteamFlat4j.C_INT,
            SteamFlat4j.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    SteamFlat4j.findOrThrow("SteamAPI_InitFlat"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ESteamAPIInitResult SteamAPI_InitFlat(SteamErrMsg *pOutErrMsg)
     * }
     */
    public static FunctionDescriptor SteamAPI_InitFlat$descriptor() {
        return SteamAPI_InitFlat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ESteamAPIInitResult SteamAPI_InitFlat(SteamErrMsg *pOutErrMsg)
     * }
     */
    public static MethodHandle SteamAPI_InitFlat$handle() {
        return SteamAPI_InitFlat.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * ESteamAPIInitResult SteamAPI_InitFlat(SteamErrMsg *pOutErrMsg)
     * }
     */
    public static int SteamAPI_InitFlat(MemorySegment pOutErrMsg) {
        var mh$ = SteamAPI_InitFlat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SteamAPI_InitFlat", pOutErrMsg);
            }
            return (int)mh$.invokeExact(pOutErrMsg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * void SteamAPI_Shutdown()
     * }
     */
    public static class SteamAPI_Shutdown {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(        );
        private static final MemorySegment ADDR = SteamFlat4j.findOrThrow("SteamAPI_Shutdown");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private SteamAPI_Shutdown(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * void SteamAPI_Shutdown()
         * }
         */
        public static SteamAPI_Shutdown makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new SteamAPI_Shutdown(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(Object... x0) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("SteamAPI_Shutdown", x0);
                }
                spreader.invokeExact(x0);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }
    private static final int _VCRUNTIME_DISABLED_WARNINGS = (int)4514L;
    /**
     * {@snippet lang=c :
     * #define _VCRUNTIME_DISABLED_WARNINGS 4514
     * }
     */
    public static int _VCRUNTIME_DISABLED_WARNINGS() {
        return _VCRUNTIME_DISABLED_WARNINGS;
    }
    private static final MemorySegment NULL = MemorySegment.ofAddress(0L);
    /**
     * {@snippet lang=c :
     * #define NULL (void*) 0
     * }
     */
    public static MemorySegment NULL() {
        return NULL;
    }
    private static final int INT8_MIN = (int)-128L;
    /**
     * {@snippet lang=c :
     * #define INT8_MIN -128
     * }
     */
    public static int INT8_MIN() {
        return INT8_MIN;
    }
    private static final int INT16_MIN = (int)-32768L;
    /**
     * {@snippet lang=c :
     * #define INT16_MIN -32768
     * }
     */
    public static int INT16_MIN() {
        return INT16_MIN;
    }
    private static final int INT32_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define INT32_MIN -2147483648
     * }
     */
    public static int INT32_MIN() {
        return INT32_MIN;
    }
    private static final long INT64_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INT64_MIN -9223372036854775808
     * }
     */
    public static long INT64_MIN() {
        return INT64_MIN;
    }
    private static final byte INT8_MAX = (byte)127L;
    /**
     * {@snippet lang=c :
     * #define INT8_MAX 127
     * }
     */
    public static byte INT8_MAX() {
        return INT8_MAX;
    }
    private static final short INT16_MAX = (short)32767L;
    /**
     * {@snippet lang=c :
     * #define INT16_MAX 32767
     * }
     */
    public static short INT16_MAX() {
        return INT16_MAX;
    }
    private static final int INT32_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define INT32_MAX 2147483647
     * }
     */
    public static int INT32_MAX() {
        return INT32_MAX;
    }
    private static final long INT64_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INT64_MAX 9223372036854775807
     * }
     */
    public static long INT64_MAX() {
        return INT64_MAX;
    }
    private static final byte UINT8_MAX = (byte)255L;
    /**
     * {@snippet lang=c :
     * #define UINT8_MAX 255
     * }
     */
    public static byte UINT8_MAX() {
        return UINT8_MAX;
    }
    private static final short UINT16_MAX = (short)65535L;
    /**
     * {@snippet lang=c :
     * #define UINT16_MAX 65535
     * }
     */
    public static short UINT16_MAX() {
        return UINT16_MAX;
    }
    private static final int UINT32_MAX = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define UINT32_MAX 4294967295
     * }
     */
    public static int UINT32_MAX() {
        return UINT32_MAX;
    }
    private static final long UINT64_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINT64_MAX -1
     * }
     */
    public static long UINT64_MAX() {
        return UINT64_MAX;
    }
    private static final int INT_LEAST8_MIN = (int)-128L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST8_MIN -128
     * }
     */
    public static int INT_LEAST8_MIN() {
        return INT_LEAST8_MIN;
    }
    private static final int INT_LEAST16_MIN = (int)-32768L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST16_MIN -32768
     * }
     */
    public static int INT_LEAST16_MIN() {
        return INT_LEAST16_MIN;
    }
    private static final int INT_LEAST32_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST32_MIN -2147483648
     * }
     */
    public static int INT_LEAST32_MIN() {
        return INT_LEAST32_MIN;
    }
    private static final long INT_LEAST64_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST64_MIN -9223372036854775808
     * }
     */
    public static long INT_LEAST64_MIN() {
        return INT_LEAST64_MIN;
    }
    private static final byte INT_LEAST8_MAX = (byte)127L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST8_MAX 127
     * }
     */
    public static byte INT_LEAST8_MAX() {
        return INT_LEAST8_MAX;
    }
    private static final short INT_LEAST16_MAX = (short)32767L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST16_MAX 32767
     * }
     */
    public static short INT_LEAST16_MAX() {
        return INT_LEAST16_MAX;
    }
    private static final int INT_LEAST32_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST32_MAX 2147483647
     * }
     */
    public static int INT_LEAST32_MAX() {
        return INT_LEAST32_MAX;
    }
    private static final long INT_LEAST64_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST64_MAX 9223372036854775807
     * }
     */
    public static long INT_LEAST64_MAX() {
        return INT_LEAST64_MAX;
    }
    private static final byte UINT_LEAST8_MAX = (byte)255L;
    /**
     * {@snippet lang=c :
     * #define UINT_LEAST8_MAX 255
     * }
     */
    public static byte UINT_LEAST8_MAX() {
        return UINT_LEAST8_MAX;
    }
    private static final short UINT_LEAST16_MAX = (short)65535L;
    /**
     * {@snippet lang=c :
     * #define UINT_LEAST16_MAX 65535
     * }
     */
    public static short UINT_LEAST16_MAX() {
        return UINT_LEAST16_MAX;
    }
    private static final int UINT_LEAST32_MAX = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define UINT_LEAST32_MAX 4294967295
     * }
     */
    public static int UINT_LEAST32_MAX() {
        return UINT_LEAST32_MAX;
    }
    private static final long UINT_LEAST64_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINT_LEAST64_MAX -1
     * }
     */
    public static long UINT_LEAST64_MAX() {
        return UINT_LEAST64_MAX;
    }
    private static final int INT_FAST8_MIN = (int)-128L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST8_MIN -128
     * }
     */
    public static int INT_FAST8_MIN() {
        return INT_FAST8_MIN;
    }
    private static final int INT_FAST16_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST16_MIN -2147483648
     * }
     */
    public static int INT_FAST16_MIN() {
        return INT_FAST16_MIN;
    }
    private static final int INT_FAST32_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST32_MIN -2147483648
     * }
     */
    public static int INT_FAST32_MIN() {
        return INT_FAST32_MIN;
    }
    private static final long INT_FAST64_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST64_MIN -9223372036854775808
     * }
     */
    public static long INT_FAST64_MIN() {
        return INT_FAST64_MIN;
    }
    private static final byte INT_FAST8_MAX = (byte)127L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST8_MAX 127
     * }
     */
    public static byte INT_FAST8_MAX() {
        return INT_FAST8_MAX;
    }
    private static final int INT_FAST16_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST16_MAX 2147483647
     * }
     */
    public static int INT_FAST16_MAX() {
        return INT_FAST16_MAX;
    }
    private static final int INT_FAST32_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST32_MAX 2147483647
     * }
     */
    public static int INT_FAST32_MAX() {
        return INT_FAST32_MAX;
    }
    private static final long INT_FAST64_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST64_MAX 9223372036854775807
     * }
     */
    public static long INT_FAST64_MAX() {
        return INT_FAST64_MAX;
    }
    private static final byte UINT_FAST8_MAX = (byte)255L;
    /**
     * {@snippet lang=c :
     * #define UINT_FAST8_MAX 255
     * }
     */
    public static byte UINT_FAST8_MAX() {
        return UINT_FAST8_MAX;
    }
    private static final int UINT_FAST16_MAX = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define UINT_FAST16_MAX 4294967295
     * }
     */
    public static int UINT_FAST16_MAX() {
        return UINT_FAST16_MAX;
    }
    private static final int UINT_FAST32_MAX = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define UINT_FAST32_MAX 4294967295
     * }
     */
    public static int UINT_FAST32_MAX() {
        return UINT_FAST32_MAX;
    }
    private static final long UINT_FAST64_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINT_FAST64_MAX -1
     * }
     */
    public static long UINT_FAST64_MAX() {
        return UINT_FAST64_MAX;
    }
    private static final long INTPTR_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INTPTR_MIN -9223372036854775808
     * }
     */
    public static long INTPTR_MIN() {
        return INTPTR_MIN;
    }
    private static final long INTPTR_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INTPTR_MAX 9223372036854775807
     * }
     */
    public static long INTPTR_MAX() {
        return INTPTR_MAX;
    }
    private static final long UINTPTR_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINTPTR_MAX -1
     * }
     */
    public static long UINTPTR_MAX() {
        return UINTPTR_MAX;
    }
    private static final long INTMAX_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INTMAX_MIN -9223372036854775808
     * }
     */
    public static long INTMAX_MIN() {
        return INTMAX_MIN;
    }
    private static final long INTMAX_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INTMAX_MAX 9223372036854775807
     * }
     */
    public static long INTMAX_MAX() {
        return INTMAX_MAX;
    }
    private static final long UINTMAX_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINTMAX_MAX -1
     * }
     */
    public static long UINTMAX_MAX() {
        return UINTMAX_MAX;
    }
    private static final long PTRDIFF_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define PTRDIFF_MIN -9223372036854775808
     * }
     */
    public static long PTRDIFF_MIN() {
        return PTRDIFF_MIN;
    }
    private static final long PTRDIFF_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define PTRDIFF_MAX 9223372036854775807
     * }
     */
    public static long PTRDIFF_MAX() {
        return PTRDIFF_MAX;
    }
    private static final long SIZE_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define SIZE_MAX -1
     * }
     */
    public static long SIZE_MAX() {
        return SIZE_MAX;
    }
    private static final int SIG_ATOMIC_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define SIG_ATOMIC_MIN -2147483648
     * }
     */
    public static int SIG_ATOMIC_MIN() {
        return SIG_ATOMIC_MIN;
    }
}

