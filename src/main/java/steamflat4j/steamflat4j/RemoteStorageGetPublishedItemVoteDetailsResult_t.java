// Generated by jextract

package steamflat4j;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct RemoteStorageGetPublishedItemVoteDetailsResult_t {
 *     EResult m_eResult;
 *     PublishedFileId_t m_unPublishedFileId;
 *     int32 m_nVotesFor;
 *     int32 m_nVotesAgainst;
 *     int32 m_nReports;
 *     float m_fScore;
 * }
 * }
 */
public class RemoteStorageGetPublishedItemVoteDetailsResult_t {

    RemoteStorageGetPublishedItemVoteDetailsResult_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        SteamFlat4j.C_INT.withName("m_eResult"),
        MemoryLayout.paddingLayout(4),
        SteamFlat4j.C_LONG_LONG.withName("m_unPublishedFileId"),
        SteamFlat4j.C_INT.withName("m_nVotesFor"),
        SteamFlat4j.C_INT.withName("m_nVotesAgainst"),
        SteamFlat4j.C_INT.withName("m_nReports"),
        SteamFlat4j.C_FLOAT.withName("m_fScore")
    ).withName("RemoteStorageGetPublishedItemVoteDetailsResult_t");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt m_eResult$LAYOUT = (OfInt)$LAYOUT.select(groupElement("m_eResult"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * EResult m_eResult
     * }
     */
    public static final OfInt m_eResult$layout() {
        return m_eResult$LAYOUT;
    }

    private static final long m_eResult$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * EResult m_eResult
     * }
     */
    public static final long m_eResult$offset() {
        return m_eResult$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * EResult m_eResult
     * }
     */
    public static int m_eResult(MemorySegment struct) {
        return struct.get(m_eResult$LAYOUT, m_eResult$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * EResult m_eResult
     * }
     */
    public static void m_eResult(MemorySegment struct, int fieldValue) {
        struct.set(m_eResult$LAYOUT, m_eResult$OFFSET, fieldValue);
    }

    private static final OfLong m_unPublishedFileId$LAYOUT = (OfLong)$LAYOUT.select(groupElement("m_unPublishedFileId"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PublishedFileId_t m_unPublishedFileId
     * }
     */
    public static final OfLong m_unPublishedFileId$layout() {
        return m_unPublishedFileId$LAYOUT;
    }

    private static final long m_unPublishedFileId$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PublishedFileId_t m_unPublishedFileId
     * }
     */
    public static final long m_unPublishedFileId$offset() {
        return m_unPublishedFileId$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PublishedFileId_t m_unPublishedFileId
     * }
     */
    public static long m_unPublishedFileId(MemorySegment struct) {
        return struct.get(m_unPublishedFileId$LAYOUT, m_unPublishedFileId$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PublishedFileId_t m_unPublishedFileId
     * }
     */
    public static void m_unPublishedFileId(MemorySegment struct, long fieldValue) {
        struct.set(m_unPublishedFileId$LAYOUT, m_unPublishedFileId$OFFSET, fieldValue);
    }

    private static final OfInt m_nVotesFor$LAYOUT = (OfInt)$LAYOUT.select(groupElement("m_nVotesFor"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32 m_nVotesFor
     * }
     */
    public static final OfInt m_nVotesFor$layout() {
        return m_nVotesFor$LAYOUT;
    }

    private static final long m_nVotesFor$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32 m_nVotesFor
     * }
     */
    public static final long m_nVotesFor$offset() {
        return m_nVotesFor$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32 m_nVotesFor
     * }
     */
    public static int m_nVotesFor(MemorySegment struct) {
        return struct.get(m_nVotesFor$LAYOUT, m_nVotesFor$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32 m_nVotesFor
     * }
     */
    public static void m_nVotesFor(MemorySegment struct, int fieldValue) {
        struct.set(m_nVotesFor$LAYOUT, m_nVotesFor$OFFSET, fieldValue);
    }

    private static final OfInt m_nVotesAgainst$LAYOUT = (OfInt)$LAYOUT.select(groupElement("m_nVotesAgainst"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32 m_nVotesAgainst
     * }
     */
    public static final OfInt m_nVotesAgainst$layout() {
        return m_nVotesAgainst$LAYOUT;
    }

    private static final long m_nVotesAgainst$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32 m_nVotesAgainst
     * }
     */
    public static final long m_nVotesAgainst$offset() {
        return m_nVotesAgainst$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32 m_nVotesAgainst
     * }
     */
    public static int m_nVotesAgainst(MemorySegment struct) {
        return struct.get(m_nVotesAgainst$LAYOUT, m_nVotesAgainst$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32 m_nVotesAgainst
     * }
     */
    public static void m_nVotesAgainst(MemorySegment struct, int fieldValue) {
        struct.set(m_nVotesAgainst$LAYOUT, m_nVotesAgainst$OFFSET, fieldValue);
    }

    private static final OfInt m_nReports$LAYOUT = (OfInt)$LAYOUT.select(groupElement("m_nReports"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32 m_nReports
     * }
     */
    public static final OfInt m_nReports$layout() {
        return m_nReports$LAYOUT;
    }

    private static final long m_nReports$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32 m_nReports
     * }
     */
    public static final long m_nReports$offset() {
        return m_nReports$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32 m_nReports
     * }
     */
    public static int m_nReports(MemorySegment struct) {
        return struct.get(m_nReports$LAYOUT, m_nReports$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32 m_nReports
     * }
     */
    public static void m_nReports(MemorySegment struct, int fieldValue) {
        struct.set(m_nReports$LAYOUT, m_nReports$OFFSET, fieldValue);
    }

    private static final OfFloat m_fScore$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("m_fScore"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float m_fScore
     * }
     */
    public static final OfFloat m_fScore$layout() {
        return m_fScore$LAYOUT;
    }

    private static final long m_fScore$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float m_fScore
     * }
     */
    public static final long m_fScore$offset() {
        return m_fScore$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float m_fScore
     * }
     */
    public static float m_fScore(MemorySegment struct) {
        return struct.get(m_fScore$LAYOUT, m_fScore$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float m_fScore
     * }
     */
    public static void m_fScore(MemorySegment struct, float fieldValue) {
        struct.set(m_fScore$LAYOUT, m_fScore$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

