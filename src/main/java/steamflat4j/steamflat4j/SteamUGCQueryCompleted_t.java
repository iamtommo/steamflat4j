// Generated by jextract

package steamflat4j;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct SteamUGCQueryCompleted_t {
 *     UGCQueryHandle_t m_handle;
 *     EResult m_eResult;
 *     uint32 m_unNumResultsReturned;
 *     uint32 m_unTotalMatchingResults;
 *     bool m_bCachedData;
 *     char m_rgchNextCursor[256];
 * }
 * }
 */
public class SteamUGCQueryCompleted_t {

    SteamUGCQueryCompleted_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        SteamFlat4j.C_LONG_LONG.withName("m_handle"),
        SteamFlat4j.C_INT.withName("m_eResult"),
        SteamFlat4j.C_INT.withName("m_unNumResultsReturned"),
        SteamFlat4j.C_INT.withName("m_unTotalMatchingResults"),
        SteamFlat4j.C_BOOL.withName("m_bCachedData"),
        MemoryLayout.sequenceLayout(256, SteamFlat4j.C_CHAR).withName("m_rgchNextCursor"),
        MemoryLayout.paddingLayout(3)
    ).withName("SteamUGCQueryCompleted_t");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfLong m_handle$LAYOUT = (OfLong)$LAYOUT.select(groupElement("m_handle"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * UGCQueryHandle_t m_handle
     * }
     */
    public static final OfLong m_handle$layout() {
        return m_handle$LAYOUT;
    }

    private static final long m_handle$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * UGCQueryHandle_t m_handle
     * }
     */
    public static final long m_handle$offset() {
        return m_handle$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * UGCQueryHandle_t m_handle
     * }
     */
    public static long m_handle(MemorySegment struct) {
        return struct.get(m_handle$LAYOUT, m_handle$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * UGCQueryHandle_t m_handle
     * }
     */
    public static void m_handle(MemorySegment struct, long fieldValue) {
        struct.set(m_handle$LAYOUT, m_handle$OFFSET, fieldValue);
    }

    private static final OfInt m_eResult$LAYOUT = (OfInt)$LAYOUT.select(groupElement("m_eResult"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * EResult m_eResult
     * }
     */
    public static final OfInt m_eResult$layout() {
        return m_eResult$LAYOUT;
    }

    private static final long m_eResult$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * EResult m_eResult
     * }
     */
    public static final long m_eResult$offset() {
        return m_eResult$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * EResult m_eResult
     * }
     */
    public static int m_eResult(MemorySegment struct) {
        return struct.get(m_eResult$LAYOUT, m_eResult$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * EResult m_eResult
     * }
     */
    public static void m_eResult(MemorySegment struct, int fieldValue) {
        struct.set(m_eResult$LAYOUT, m_eResult$OFFSET, fieldValue);
    }

    private static final OfInt m_unNumResultsReturned$LAYOUT = (OfInt)$LAYOUT.select(groupElement("m_unNumResultsReturned"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32 m_unNumResultsReturned
     * }
     */
    public static final OfInt m_unNumResultsReturned$layout() {
        return m_unNumResultsReturned$LAYOUT;
    }

    private static final long m_unNumResultsReturned$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32 m_unNumResultsReturned
     * }
     */
    public static final long m_unNumResultsReturned$offset() {
        return m_unNumResultsReturned$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32 m_unNumResultsReturned
     * }
     */
    public static int m_unNumResultsReturned(MemorySegment struct) {
        return struct.get(m_unNumResultsReturned$LAYOUT, m_unNumResultsReturned$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32 m_unNumResultsReturned
     * }
     */
    public static void m_unNumResultsReturned(MemorySegment struct, int fieldValue) {
        struct.set(m_unNumResultsReturned$LAYOUT, m_unNumResultsReturned$OFFSET, fieldValue);
    }

    private static final OfInt m_unTotalMatchingResults$LAYOUT = (OfInt)$LAYOUT.select(groupElement("m_unTotalMatchingResults"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32 m_unTotalMatchingResults
     * }
     */
    public static final OfInt m_unTotalMatchingResults$layout() {
        return m_unTotalMatchingResults$LAYOUT;
    }

    private static final long m_unTotalMatchingResults$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32 m_unTotalMatchingResults
     * }
     */
    public static final long m_unTotalMatchingResults$offset() {
        return m_unTotalMatchingResults$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32 m_unTotalMatchingResults
     * }
     */
    public static int m_unTotalMatchingResults(MemorySegment struct) {
        return struct.get(m_unTotalMatchingResults$LAYOUT, m_unTotalMatchingResults$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32 m_unTotalMatchingResults
     * }
     */
    public static void m_unTotalMatchingResults(MemorySegment struct, int fieldValue) {
        struct.set(m_unTotalMatchingResults$LAYOUT, m_unTotalMatchingResults$OFFSET, fieldValue);
    }

    private static final OfBoolean m_bCachedData$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("m_bCachedData"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool m_bCachedData
     * }
     */
    public static final OfBoolean m_bCachedData$layout() {
        return m_bCachedData$LAYOUT;
    }

    private static final long m_bCachedData$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool m_bCachedData
     * }
     */
    public static final long m_bCachedData$offset() {
        return m_bCachedData$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool m_bCachedData
     * }
     */
    public static boolean m_bCachedData(MemorySegment struct) {
        return struct.get(m_bCachedData$LAYOUT, m_bCachedData$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool m_bCachedData
     * }
     */
    public static void m_bCachedData(MemorySegment struct, boolean fieldValue) {
        struct.set(m_bCachedData$LAYOUT, m_bCachedData$OFFSET, fieldValue);
    }

    private static final SequenceLayout m_rgchNextCursor$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("m_rgchNextCursor"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char m_rgchNextCursor[256]
     * }
     */
    public static final SequenceLayout m_rgchNextCursor$layout() {
        return m_rgchNextCursor$LAYOUT;
    }

    private static final long m_rgchNextCursor$OFFSET = 21;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char m_rgchNextCursor[256]
     * }
     */
    public static final long m_rgchNextCursor$offset() {
        return m_rgchNextCursor$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char m_rgchNextCursor[256]
     * }
     */
    public static MemorySegment m_rgchNextCursor(MemorySegment struct) {
        return struct.asSlice(m_rgchNextCursor$OFFSET, m_rgchNextCursor$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char m_rgchNextCursor[256]
     * }
     */
    public static void m_rgchNextCursor(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, m_rgchNextCursor$OFFSET, m_rgchNextCursor$LAYOUT.byteSize());
    }

    private static long[] m_rgchNextCursor$DIMS = { 256 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * char m_rgchNextCursor[256]
     * }
     */
    public static long[] m_rgchNextCursor$dimensions() {
        return m_rgchNextCursor$DIMS;
    }
    private static final VarHandle m_rgchNextCursor$ELEM_HANDLE = m_rgchNextCursor$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * char m_rgchNextCursor[256]
     * }
     */
    public static byte m_rgchNextCursor(MemorySegment struct, long index0) {
        return (byte)m_rgchNextCursor$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * char m_rgchNextCursor[256]
     * }
     */
    public static void m_rgchNextCursor(MemorySegment struct, long index0, byte fieldValue) {
        m_rgchNextCursor$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

