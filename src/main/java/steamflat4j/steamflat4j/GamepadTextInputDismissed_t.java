// Generated by jextract

package steamflat4j;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct GamepadTextInputDismissed_t {
 *     bool m_bSubmitted;
 *     uint32 m_unSubmittedText;
 *     AppId_t m_unAppID;
 * }
 * }
 */
public class GamepadTextInputDismissed_t {

    GamepadTextInputDismissed_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        SteamFlat4j.C_BOOL.withName("m_bSubmitted"),
        MemoryLayout.paddingLayout(3),
        SteamFlat4j.C_INT.withName("m_unSubmittedText"),
        SteamFlat4j.C_INT.withName("m_unAppID")
    ).withName("GamepadTextInputDismissed_t");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfBoolean m_bSubmitted$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("m_bSubmitted"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool m_bSubmitted
     * }
     */
    public static final OfBoolean m_bSubmitted$layout() {
        return m_bSubmitted$LAYOUT;
    }

    private static final long m_bSubmitted$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool m_bSubmitted
     * }
     */
    public static final long m_bSubmitted$offset() {
        return m_bSubmitted$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool m_bSubmitted
     * }
     */
    public static boolean m_bSubmitted(MemorySegment struct) {
        return struct.get(m_bSubmitted$LAYOUT, m_bSubmitted$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool m_bSubmitted
     * }
     */
    public static void m_bSubmitted(MemorySegment struct, boolean fieldValue) {
        struct.set(m_bSubmitted$LAYOUT, m_bSubmitted$OFFSET, fieldValue);
    }

    private static final OfInt m_unSubmittedText$LAYOUT = (OfInt)$LAYOUT.select(groupElement("m_unSubmittedText"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32 m_unSubmittedText
     * }
     */
    public static final OfInt m_unSubmittedText$layout() {
        return m_unSubmittedText$LAYOUT;
    }

    private static final long m_unSubmittedText$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32 m_unSubmittedText
     * }
     */
    public static final long m_unSubmittedText$offset() {
        return m_unSubmittedText$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32 m_unSubmittedText
     * }
     */
    public static int m_unSubmittedText(MemorySegment struct) {
        return struct.get(m_unSubmittedText$LAYOUT, m_unSubmittedText$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32 m_unSubmittedText
     * }
     */
    public static void m_unSubmittedText(MemorySegment struct, int fieldValue) {
        struct.set(m_unSubmittedText$LAYOUT, m_unSubmittedText$OFFSET, fieldValue);
    }

    private static final OfInt m_unAppID$LAYOUT = (OfInt)$LAYOUT.select(groupElement("m_unAppID"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * AppId_t m_unAppID
     * }
     */
    public static final OfInt m_unAppID$layout() {
        return m_unAppID$LAYOUT;
    }

    private static final long m_unAppID$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * AppId_t m_unAppID
     * }
     */
    public static final long m_unAppID$offset() {
        return m_unAppID$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * AppId_t m_unAppID
     * }
     */
    public static int m_unAppID(MemorySegment struct) {
        return struct.get(m_unAppID$LAYOUT, m_unAppID$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * AppId_t m_unAppID
     * }
     */
    public static void m_unAppID(MemorySegment struct, int fieldValue) {
        struct.set(m_unAppID$LAYOUT, m_unAppID$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

