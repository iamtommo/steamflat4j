// Generated by jextract

package steamflat4j;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct MarketEligibilityResponse_t {
 *     bool m_bAllowed;
 *     EMarketNotAllowedReasonFlags m_eNotAllowedReason;
 *     RTime32 m_rtAllowedAtTime;
 *     int m_cdaySteamGuardRequiredDays;
 *     int m_cdayNewDeviceCooldown;
 * }
 * }
 */
public class MarketEligibilityResponse_t {

    MarketEligibilityResponse_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        SteamFlat4j.C_BOOL.withName("m_bAllowed"),
        MemoryLayout.paddingLayout(3),
        SteamFlat4j.C_INT.withName("m_eNotAllowedReason"),
        SteamFlat4j.C_INT.withName("m_rtAllowedAtTime"),
        SteamFlat4j.C_INT.withName("m_cdaySteamGuardRequiredDays"),
        SteamFlat4j.C_INT.withName("m_cdayNewDeviceCooldown")
    ).withName("MarketEligibilityResponse_t");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfBoolean m_bAllowed$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("m_bAllowed"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool m_bAllowed
     * }
     */
    public static final OfBoolean m_bAllowed$layout() {
        return m_bAllowed$LAYOUT;
    }

    private static final long m_bAllowed$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool m_bAllowed
     * }
     */
    public static final long m_bAllowed$offset() {
        return m_bAllowed$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool m_bAllowed
     * }
     */
    public static boolean m_bAllowed(MemorySegment struct) {
        return struct.get(m_bAllowed$LAYOUT, m_bAllowed$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool m_bAllowed
     * }
     */
    public static void m_bAllowed(MemorySegment struct, boolean fieldValue) {
        struct.set(m_bAllowed$LAYOUT, m_bAllowed$OFFSET, fieldValue);
    }

    private static final OfInt m_eNotAllowedReason$LAYOUT = (OfInt)$LAYOUT.select(groupElement("m_eNotAllowedReason"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * EMarketNotAllowedReasonFlags m_eNotAllowedReason
     * }
     */
    public static final OfInt m_eNotAllowedReason$layout() {
        return m_eNotAllowedReason$LAYOUT;
    }

    private static final long m_eNotAllowedReason$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * EMarketNotAllowedReasonFlags m_eNotAllowedReason
     * }
     */
    public static final long m_eNotAllowedReason$offset() {
        return m_eNotAllowedReason$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * EMarketNotAllowedReasonFlags m_eNotAllowedReason
     * }
     */
    public static int m_eNotAllowedReason(MemorySegment struct) {
        return struct.get(m_eNotAllowedReason$LAYOUT, m_eNotAllowedReason$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * EMarketNotAllowedReasonFlags m_eNotAllowedReason
     * }
     */
    public static void m_eNotAllowedReason(MemorySegment struct, int fieldValue) {
        struct.set(m_eNotAllowedReason$LAYOUT, m_eNotAllowedReason$OFFSET, fieldValue);
    }

    private static final OfInt m_rtAllowedAtTime$LAYOUT = (OfInt)$LAYOUT.select(groupElement("m_rtAllowedAtTime"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * RTime32 m_rtAllowedAtTime
     * }
     */
    public static final OfInt m_rtAllowedAtTime$layout() {
        return m_rtAllowedAtTime$LAYOUT;
    }

    private static final long m_rtAllowedAtTime$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * RTime32 m_rtAllowedAtTime
     * }
     */
    public static final long m_rtAllowedAtTime$offset() {
        return m_rtAllowedAtTime$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * RTime32 m_rtAllowedAtTime
     * }
     */
    public static int m_rtAllowedAtTime(MemorySegment struct) {
        return struct.get(m_rtAllowedAtTime$LAYOUT, m_rtAllowedAtTime$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * RTime32 m_rtAllowedAtTime
     * }
     */
    public static void m_rtAllowedAtTime(MemorySegment struct, int fieldValue) {
        struct.set(m_rtAllowedAtTime$LAYOUT, m_rtAllowedAtTime$OFFSET, fieldValue);
    }

    private static final OfInt m_cdaySteamGuardRequiredDays$LAYOUT = (OfInt)$LAYOUT.select(groupElement("m_cdaySteamGuardRequiredDays"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int m_cdaySteamGuardRequiredDays
     * }
     */
    public static final OfInt m_cdaySteamGuardRequiredDays$layout() {
        return m_cdaySteamGuardRequiredDays$LAYOUT;
    }

    private static final long m_cdaySteamGuardRequiredDays$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int m_cdaySteamGuardRequiredDays
     * }
     */
    public static final long m_cdaySteamGuardRequiredDays$offset() {
        return m_cdaySteamGuardRequiredDays$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int m_cdaySteamGuardRequiredDays
     * }
     */
    public static int m_cdaySteamGuardRequiredDays(MemorySegment struct) {
        return struct.get(m_cdaySteamGuardRequiredDays$LAYOUT, m_cdaySteamGuardRequiredDays$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int m_cdaySteamGuardRequiredDays
     * }
     */
    public static void m_cdaySteamGuardRequiredDays(MemorySegment struct, int fieldValue) {
        struct.set(m_cdaySteamGuardRequiredDays$LAYOUT, m_cdaySteamGuardRequiredDays$OFFSET, fieldValue);
    }

    private static final OfInt m_cdayNewDeviceCooldown$LAYOUT = (OfInt)$LAYOUT.select(groupElement("m_cdayNewDeviceCooldown"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int m_cdayNewDeviceCooldown
     * }
     */
    public static final OfInt m_cdayNewDeviceCooldown$layout() {
        return m_cdayNewDeviceCooldown$LAYOUT;
    }

    private static final long m_cdayNewDeviceCooldown$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int m_cdayNewDeviceCooldown
     * }
     */
    public static final long m_cdayNewDeviceCooldown$offset() {
        return m_cdayNewDeviceCooldown$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int m_cdayNewDeviceCooldown
     * }
     */
    public static int m_cdayNewDeviceCooldown(MemorySegment struct) {
        return struct.get(m_cdayNewDeviceCooldown$LAYOUT, m_cdayNewDeviceCooldown$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int m_cdayNewDeviceCooldown
     * }
     */
    public static void m_cdayNewDeviceCooldown(MemorySegment struct, int fieldValue) {
        struct.set(m_cdayNewDeviceCooldown$LAYOUT, m_cdayNewDeviceCooldown$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

