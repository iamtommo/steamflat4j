// Generated by jextract

package steamflat4j;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct SteamNetConnectionRealTimeLaneStatus_t {
 *     int m_cbPendingUnreliable;
 *     int m_cbPendingReliable;
 *     int m_cbSentUnackedReliable;
 *     int _reservePad1;
 *     SteamNetworkingMicroseconds m_usecQueueTime;
 *     uint32 reserved[10];
 * }
 * }
 */
public class SteamNetConnectionRealTimeLaneStatus_t {

    SteamNetConnectionRealTimeLaneStatus_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        SteamFlat4j.C_INT.withName("m_cbPendingUnreliable"),
        SteamFlat4j.C_INT.withName("m_cbPendingReliable"),
        SteamFlat4j.C_INT.withName("m_cbSentUnackedReliable"),
        SteamFlat4j.C_INT.withName("_reservePad1"),
        SteamFlat4j.C_LONG_LONG.withName("m_usecQueueTime"),
        MemoryLayout.sequenceLayout(10, SteamFlat4j.C_INT).withName("reserved")
    ).withName("SteamNetConnectionRealTimeLaneStatus_t");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt m_cbPendingUnreliable$LAYOUT = (OfInt)$LAYOUT.select(groupElement("m_cbPendingUnreliable"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int m_cbPendingUnreliable
     * }
     */
    public static final OfInt m_cbPendingUnreliable$layout() {
        return m_cbPendingUnreliable$LAYOUT;
    }

    private static final long m_cbPendingUnreliable$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int m_cbPendingUnreliable
     * }
     */
    public static final long m_cbPendingUnreliable$offset() {
        return m_cbPendingUnreliable$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int m_cbPendingUnreliable
     * }
     */
    public static int m_cbPendingUnreliable(MemorySegment struct) {
        return struct.get(m_cbPendingUnreliable$LAYOUT, m_cbPendingUnreliable$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int m_cbPendingUnreliable
     * }
     */
    public static void m_cbPendingUnreliable(MemorySegment struct, int fieldValue) {
        struct.set(m_cbPendingUnreliable$LAYOUT, m_cbPendingUnreliable$OFFSET, fieldValue);
    }

    private static final OfInt m_cbPendingReliable$LAYOUT = (OfInt)$LAYOUT.select(groupElement("m_cbPendingReliable"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int m_cbPendingReliable
     * }
     */
    public static final OfInt m_cbPendingReliable$layout() {
        return m_cbPendingReliable$LAYOUT;
    }

    private static final long m_cbPendingReliable$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int m_cbPendingReliable
     * }
     */
    public static final long m_cbPendingReliable$offset() {
        return m_cbPendingReliable$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int m_cbPendingReliable
     * }
     */
    public static int m_cbPendingReliable(MemorySegment struct) {
        return struct.get(m_cbPendingReliable$LAYOUT, m_cbPendingReliable$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int m_cbPendingReliable
     * }
     */
    public static void m_cbPendingReliable(MemorySegment struct, int fieldValue) {
        struct.set(m_cbPendingReliable$LAYOUT, m_cbPendingReliable$OFFSET, fieldValue);
    }

    private static final OfInt m_cbSentUnackedReliable$LAYOUT = (OfInt)$LAYOUT.select(groupElement("m_cbSentUnackedReliable"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int m_cbSentUnackedReliable
     * }
     */
    public static final OfInt m_cbSentUnackedReliable$layout() {
        return m_cbSentUnackedReliable$LAYOUT;
    }

    private static final long m_cbSentUnackedReliable$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int m_cbSentUnackedReliable
     * }
     */
    public static final long m_cbSentUnackedReliable$offset() {
        return m_cbSentUnackedReliable$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int m_cbSentUnackedReliable
     * }
     */
    public static int m_cbSentUnackedReliable(MemorySegment struct) {
        return struct.get(m_cbSentUnackedReliable$LAYOUT, m_cbSentUnackedReliable$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int m_cbSentUnackedReliable
     * }
     */
    public static void m_cbSentUnackedReliable(MemorySegment struct, int fieldValue) {
        struct.set(m_cbSentUnackedReliable$LAYOUT, m_cbSentUnackedReliable$OFFSET, fieldValue);
    }

    private static final OfInt _reservePad1$LAYOUT = (OfInt)$LAYOUT.select(groupElement("_reservePad1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int _reservePad1
     * }
     */
    public static final OfInt _reservePad1$layout() {
        return _reservePad1$LAYOUT;
    }

    private static final long _reservePad1$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int _reservePad1
     * }
     */
    public static final long _reservePad1$offset() {
        return _reservePad1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int _reservePad1
     * }
     */
    public static int _reservePad1(MemorySegment struct) {
        return struct.get(_reservePad1$LAYOUT, _reservePad1$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int _reservePad1
     * }
     */
    public static void _reservePad1(MemorySegment struct, int fieldValue) {
        struct.set(_reservePad1$LAYOUT, _reservePad1$OFFSET, fieldValue);
    }

    private static final OfLong m_usecQueueTime$LAYOUT = (OfLong)$LAYOUT.select(groupElement("m_usecQueueTime"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * SteamNetworkingMicroseconds m_usecQueueTime
     * }
     */
    public static final OfLong m_usecQueueTime$layout() {
        return m_usecQueueTime$LAYOUT;
    }

    private static final long m_usecQueueTime$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * SteamNetworkingMicroseconds m_usecQueueTime
     * }
     */
    public static final long m_usecQueueTime$offset() {
        return m_usecQueueTime$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * SteamNetworkingMicroseconds m_usecQueueTime
     * }
     */
    public static long m_usecQueueTime(MemorySegment struct) {
        return struct.get(m_usecQueueTime$LAYOUT, m_usecQueueTime$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * SteamNetworkingMicroseconds m_usecQueueTime
     * }
     */
    public static void m_usecQueueTime(MemorySegment struct, long fieldValue) {
        struct.set(m_usecQueueTime$LAYOUT, m_usecQueueTime$OFFSET, fieldValue);
    }

    private static final SequenceLayout reserved$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("reserved"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32 reserved[10]
     * }
     */
    public static final SequenceLayout reserved$layout() {
        return reserved$LAYOUT;
    }

    private static final long reserved$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32 reserved[10]
     * }
     */
    public static final long reserved$offset() {
        return reserved$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32 reserved[10]
     * }
     */
    public static MemorySegment reserved(MemorySegment struct) {
        return struct.asSlice(reserved$OFFSET, reserved$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32 reserved[10]
     * }
     */
    public static void reserved(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, reserved$OFFSET, reserved$LAYOUT.byteSize());
    }

    private static long[] reserved$DIMS = { 10 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * uint32 reserved[10]
     * }
     */
    public static long[] reserved$dimensions() {
        return reserved$DIMS;
    }
    private static final VarHandle reserved$ELEM_HANDLE = reserved$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * uint32 reserved[10]
     * }
     */
    public static int reserved(MemorySegment struct, long index0) {
        return (int)reserved$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * uint32 reserved[10]
     * }
     */
    public static void reserved(MemorySegment struct, long index0, int fieldValue) {
        reserved$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

