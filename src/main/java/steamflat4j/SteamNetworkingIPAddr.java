// Generated by jextract

package steamflat4j;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct SteamNetworkingIPAddr {
 *     uint8 m_ipv6[16];
 *     uint16 m_port;
 * }
 * }
 */
public class SteamNetworkingIPAddr {

    SteamNetworkingIPAddr() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.sequenceLayout(16, SteamFlat.C_CHAR).withName("m_ipv6"),
        SteamFlat.C_SHORT.withName("m_port")
    ).withName("SteamNetworkingIPAddr");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final SequenceLayout m_ipv6$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("m_ipv6"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8 m_ipv6[16]
     * }
     */
    public static final SequenceLayout m_ipv6$layout() {
        return m_ipv6$LAYOUT;
    }

    private static final long m_ipv6$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8 m_ipv6[16]
     * }
     */
    public static final long m_ipv6$offset() {
        return m_ipv6$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8 m_ipv6[16]
     * }
     */
    public static MemorySegment m_ipv6(MemorySegment struct) {
        return struct.asSlice(m_ipv6$OFFSET, m_ipv6$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8 m_ipv6[16]
     * }
     */
    public static void m_ipv6(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, m_ipv6$OFFSET, m_ipv6$LAYOUT.byteSize());
    }

    private static long[] m_ipv6$DIMS = { 16 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * uint8 m_ipv6[16]
     * }
     */
    public static long[] m_ipv6$dimensions() {
        return m_ipv6$DIMS;
    }
    private static final VarHandle m_ipv6$ELEM_HANDLE = m_ipv6$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * uint8 m_ipv6[16]
     * }
     */
    public static byte m_ipv6(MemorySegment struct, long index0) {
        return (byte)m_ipv6$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * uint8 m_ipv6[16]
     * }
     */
    public static void m_ipv6(MemorySegment struct, long index0, byte fieldValue) {
        m_ipv6$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfShort m_port$LAYOUT = (OfShort)$LAYOUT.select(groupElement("m_port"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint16 m_port
     * }
     */
    public static final OfShort m_port$layout() {
        return m_port$LAYOUT;
    }

    private static final long m_port$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint16 m_port
     * }
     */
    public static final long m_port$offset() {
        return m_port$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint16 m_port
     * }
     */
    public static short m_port(MemorySegment struct) {
        return struct.get(m_port$LAYOUT, m_port$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint16 m_port
     * }
     */
    public static void m_port(MemorySegment struct, short fieldValue) {
        struct.set(m_port$LAYOUT, m_port$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

