// Generated by jextract

package steamflat4j;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct TimedTrialStatus_t {
 *     AppId_t m_unAppID;
 *     bool m_bIsOffline;
 *     uint32 m_unSecondsAllowed;
 *     uint32 m_unSecondsPlayed;
 * }
 * }
 */
public class TimedTrialStatus_t {

    TimedTrialStatus_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        SteamFlat.C_INT.withName("m_unAppID"),
        SteamFlat.C_BOOL.withName("m_bIsOffline"),
        MemoryLayout.paddingLayout(3),
        SteamFlat.C_INT.withName("m_unSecondsAllowed"),
        SteamFlat.C_INT.withName("m_unSecondsPlayed")
    ).withName("TimedTrialStatus_t");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt m_unAppID$LAYOUT = (OfInt)$LAYOUT.select(groupElement("m_unAppID"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * AppId_t m_unAppID
     * }
     */
    public static final OfInt m_unAppID$layout() {
        return m_unAppID$LAYOUT;
    }

    private static final long m_unAppID$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * AppId_t m_unAppID
     * }
     */
    public static final long m_unAppID$offset() {
        return m_unAppID$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * AppId_t m_unAppID
     * }
     */
    public static int m_unAppID(MemorySegment struct) {
        return struct.get(m_unAppID$LAYOUT, m_unAppID$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * AppId_t m_unAppID
     * }
     */
    public static void m_unAppID(MemorySegment struct, int fieldValue) {
        struct.set(m_unAppID$LAYOUT, m_unAppID$OFFSET, fieldValue);
    }

    private static final OfBoolean m_bIsOffline$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("m_bIsOffline"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool m_bIsOffline
     * }
     */
    public static final OfBoolean m_bIsOffline$layout() {
        return m_bIsOffline$LAYOUT;
    }

    private static final long m_bIsOffline$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool m_bIsOffline
     * }
     */
    public static final long m_bIsOffline$offset() {
        return m_bIsOffline$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool m_bIsOffline
     * }
     */
    public static boolean m_bIsOffline(MemorySegment struct) {
        return struct.get(m_bIsOffline$LAYOUT, m_bIsOffline$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool m_bIsOffline
     * }
     */
    public static void m_bIsOffline(MemorySegment struct, boolean fieldValue) {
        struct.set(m_bIsOffline$LAYOUT, m_bIsOffline$OFFSET, fieldValue);
    }

    private static final OfInt m_unSecondsAllowed$LAYOUT = (OfInt)$LAYOUT.select(groupElement("m_unSecondsAllowed"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32 m_unSecondsAllowed
     * }
     */
    public static final OfInt m_unSecondsAllowed$layout() {
        return m_unSecondsAllowed$LAYOUT;
    }

    private static final long m_unSecondsAllowed$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32 m_unSecondsAllowed
     * }
     */
    public static final long m_unSecondsAllowed$offset() {
        return m_unSecondsAllowed$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32 m_unSecondsAllowed
     * }
     */
    public static int m_unSecondsAllowed(MemorySegment struct) {
        return struct.get(m_unSecondsAllowed$LAYOUT, m_unSecondsAllowed$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32 m_unSecondsAllowed
     * }
     */
    public static void m_unSecondsAllowed(MemorySegment struct, int fieldValue) {
        struct.set(m_unSecondsAllowed$LAYOUT, m_unSecondsAllowed$OFFSET, fieldValue);
    }

    private static final OfInt m_unSecondsPlayed$LAYOUT = (OfInt)$LAYOUT.select(groupElement("m_unSecondsPlayed"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32 m_unSecondsPlayed
     * }
     */
    public static final OfInt m_unSecondsPlayed$layout() {
        return m_unSecondsPlayed$LAYOUT;
    }

    private static final long m_unSecondsPlayed$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32 m_unSecondsPlayed
     * }
     */
    public static final long m_unSecondsPlayed$offset() {
        return m_unSecondsPlayed$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32 m_unSecondsPlayed
     * }
     */
    public static int m_unSecondsPlayed(MemorySegment struct) {
        return struct.get(m_unSecondsPlayed$LAYOUT, m_unSecondsPlayed$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32 m_unSecondsPlayed
     * }
     */
    public static void m_unSecondsPlayed(MemorySegment struct, int fieldValue) {
        struct.set(m_unSecondsPlayed$LAYOUT, m_unSecondsPlayed$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

