// Generated by jextract

package steamflat4j;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct ClientGameServerDeny_t {
 *     uint32 m_uAppID;
 *     uint32 m_unGameServerIP;
 *     uint16 m_usGameServerPort;
 *     uint16 m_bSecure;
 *     uint32 m_uReason;
 * }
 * }
 */
public class ClientGameServerDeny_t {

    ClientGameServerDeny_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        SteamFlat.C_INT.withName("m_uAppID"),
        SteamFlat.C_INT.withName("m_unGameServerIP"),
        SteamFlat.C_SHORT.withName("m_usGameServerPort"),
        SteamFlat.C_SHORT.withName("m_bSecure"),
        SteamFlat.C_INT.withName("m_uReason")
    ).withName("ClientGameServerDeny_t");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt m_uAppID$LAYOUT = (OfInt)$LAYOUT.select(groupElement("m_uAppID"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32 m_uAppID
     * }
     */
    public static final OfInt m_uAppID$layout() {
        return m_uAppID$LAYOUT;
    }

    private static final long m_uAppID$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32 m_uAppID
     * }
     */
    public static final long m_uAppID$offset() {
        return m_uAppID$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32 m_uAppID
     * }
     */
    public static int m_uAppID(MemorySegment struct) {
        return struct.get(m_uAppID$LAYOUT, m_uAppID$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32 m_uAppID
     * }
     */
    public static void m_uAppID(MemorySegment struct, int fieldValue) {
        struct.set(m_uAppID$LAYOUT, m_uAppID$OFFSET, fieldValue);
    }

    private static final OfInt m_unGameServerIP$LAYOUT = (OfInt)$LAYOUT.select(groupElement("m_unGameServerIP"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32 m_unGameServerIP
     * }
     */
    public static final OfInt m_unGameServerIP$layout() {
        return m_unGameServerIP$LAYOUT;
    }

    private static final long m_unGameServerIP$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32 m_unGameServerIP
     * }
     */
    public static final long m_unGameServerIP$offset() {
        return m_unGameServerIP$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32 m_unGameServerIP
     * }
     */
    public static int m_unGameServerIP(MemorySegment struct) {
        return struct.get(m_unGameServerIP$LAYOUT, m_unGameServerIP$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32 m_unGameServerIP
     * }
     */
    public static void m_unGameServerIP(MemorySegment struct, int fieldValue) {
        struct.set(m_unGameServerIP$LAYOUT, m_unGameServerIP$OFFSET, fieldValue);
    }

    private static final OfShort m_usGameServerPort$LAYOUT = (OfShort)$LAYOUT.select(groupElement("m_usGameServerPort"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint16 m_usGameServerPort
     * }
     */
    public static final OfShort m_usGameServerPort$layout() {
        return m_usGameServerPort$LAYOUT;
    }

    private static final long m_usGameServerPort$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint16 m_usGameServerPort
     * }
     */
    public static final long m_usGameServerPort$offset() {
        return m_usGameServerPort$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint16 m_usGameServerPort
     * }
     */
    public static short m_usGameServerPort(MemorySegment struct) {
        return struct.get(m_usGameServerPort$LAYOUT, m_usGameServerPort$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint16 m_usGameServerPort
     * }
     */
    public static void m_usGameServerPort(MemorySegment struct, short fieldValue) {
        struct.set(m_usGameServerPort$LAYOUT, m_usGameServerPort$OFFSET, fieldValue);
    }

    private static final OfShort m_bSecure$LAYOUT = (OfShort)$LAYOUT.select(groupElement("m_bSecure"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint16 m_bSecure
     * }
     */
    public static final OfShort m_bSecure$layout() {
        return m_bSecure$LAYOUT;
    }

    private static final long m_bSecure$OFFSET = 10;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint16 m_bSecure
     * }
     */
    public static final long m_bSecure$offset() {
        return m_bSecure$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint16 m_bSecure
     * }
     */
    public static short m_bSecure(MemorySegment struct) {
        return struct.get(m_bSecure$LAYOUT, m_bSecure$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint16 m_bSecure
     * }
     */
    public static void m_bSecure(MemorySegment struct, short fieldValue) {
        struct.set(m_bSecure$LAYOUT, m_bSecure$OFFSET, fieldValue);
    }

    private static final OfInt m_uReason$LAYOUT = (OfInt)$LAYOUT.select(groupElement("m_uReason"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32 m_uReason
     * }
     */
    public static final OfInt m_uReason$layout() {
        return m_uReason$LAYOUT;
    }

    private static final long m_uReason$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32 m_uReason
     * }
     */
    public static final long m_uReason$offset() {
        return m_uReason$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32 m_uReason
     * }
     */
    public static int m_uReason(MemorySegment struct) {
        return struct.get(m_uReason$LAYOUT, m_uReason$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32 m_uReason
     * }
     */
    public static void m_uReason(MemorySegment struct, int fieldValue) {
        struct.set(m_uReason$LAYOUT, m_uReason$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

