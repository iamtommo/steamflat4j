// Generated by jextract

package steamflat4j;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct GSGameplayStats_t {
 *     EResult m_eResult;
 *     int32 m_nRank;
 *     uint32 m_unTotalConnects;
 *     uint32 m_unTotalMinutesPlayed;
 * }
 * }
 */
public class GSGameplayStats_t {

    GSGameplayStats_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        SteamFlat.C_INT.withName("m_eResult"),
        SteamFlat.C_INT.withName("m_nRank"),
        SteamFlat.C_INT.withName("m_unTotalConnects"),
        SteamFlat.C_INT.withName("m_unTotalMinutesPlayed")
    ).withName("GSGameplayStats_t");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt m_eResult$LAYOUT = (OfInt)$LAYOUT.select(groupElement("m_eResult"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * EResult m_eResult
     * }
     */
    public static final OfInt m_eResult$layout() {
        return m_eResult$LAYOUT;
    }

    private static final long m_eResult$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * EResult m_eResult
     * }
     */
    public static final long m_eResult$offset() {
        return m_eResult$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * EResult m_eResult
     * }
     */
    public static int m_eResult(MemorySegment struct) {
        return struct.get(m_eResult$LAYOUT, m_eResult$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * EResult m_eResult
     * }
     */
    public static void m_eResult(MemorySegment struct, int fieldValue) {
        struct.set(m_eResult$LAYOUT, m_eResult$OFFSET, fieldValue);
    }

    private static final OfInt m_nRank$LAYOUT = (OfInt)$LAYOUT.select(groupElement("m_nRank"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32 m_nRank
     * }
     */
    public static final OfInt m_nRank$layout() {
        return m_nRank$LAYOUT;
    }

    private static final long m_nRank$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32 m_nRank
     * }
     */
    public static final long m_nRank$offset() {
        return m_nRank$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32 m_nRank
     * }
     */
    public static int m_nRank(MemorySegment struct) {
        return struct.get(m_nRank$LAYOUT, m_nRank$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32 m_nRank
     * }
     */
    public static void m_nRank(MemorySegment struct, int fieldValue) {
        struct.set(m_nRank$LAYOUT, m_nRank$OFFSET, fieldValue);
    }

    private static final OfInt m_unTotalConnects$LAYOUT = (OfInt)$LAYOUT.select(groupElement("m_unTotalConnects"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32 m_unTotalConnects
     * }
     */
    public static final OfInt m_unTotalConnects$layout() {
        return m_unTotalConnects$LAYOUT;
    }

    private static final long m_unTotalConnects$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32 m_unTotalConnects
     * }
     */
    public static final long m_unTotalConnects$offset() {
        return m_unTotalConnects$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32 m_unTotalConnects
     * }
     */
    public static int m_unTotalConnects(MemorySegment struct) {
        return struct.get(m_unTotalConnects$LAYOUT, m_unTotalConnects$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32 m_unTotalConnects
     * }
     */
    public static void m_unTotalConnects(MemorySegment struct, int fieldValue) {
        struct.set(m_unTotalConnects$LAYOUT, m_unTotalConnects$OFFSET, fieldValue);
    }

    private static final OfInt m_unTotalMinutesPlayed$LAYOUT = (OfInt)$LAYOUT.select(groupElement("m_unTotalMinutesPlayed"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32 m_unTotalMinutesPlayed
     * }
     */
    public static final OfInt m_unTotalMinutesPlayed$layout() {
        return m_unTotalMinutesPlayed$LAYOUT;
    }

    private static final long m_unTotalMinutesPlayed$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32 m_unTotalMinutesPlayed
     * }
     */
    public static final long m_unTotalMinutesPlayed$offset() {
        return m_unTotalMinutesPlayed$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32 m_unTotalMinutesPlayed
     * }
     */
    public static int m_unTotalMinutesPlayed(MemorySegment struct) {
        return struct.get(m_unTotalMinutesPlayed$LAYOUT, m_unTotalMinutesPlayed$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32 m_unTotalMinutesPlayed
     * }
     */
    public static void m_unTotalMinutesPlayed(MemorySegment struct, int fieldValue) {
        struct.set(m_unTotalMinutesPlayed$LAYOUT, m_unTotalMinutesPlayed$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

