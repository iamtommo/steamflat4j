// Generated by jextract

package steamflat4j;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct WorkshopEULAStatus_t {
 *     EResult m_eResult;
 *     AppId_t m_nAppID;
 *     uint32 m_unVersion;
 *     RTime32 m_rtAction;
 *     bool m_bAccepted;
 *     bool m_bNeedsAction;
 * }
 * }
 */
public class WorkshopEULAStatus_t {

    WorkshopEULAStatus_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        SteamFlat.C_INT.withName("m_eResult"),
        SteamFlat.C_INT.withName("m_nAppID"),
        SteamFlat.C_INT.withName("m_unVersion"),
        SteamFlat.C_INT.withName("m_rtAction"),
        SteamFlat.C_BOOL.withName("m_bAccepted"),
        SteamFlat.C_BOOL.withName("m_bNeedsAction"),
        MemoryLayout.paddingLayout(2)
    ).withName("WorkshopEULAStatus_t");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt m_eResult$LAYOUT = (OfInt)$LAYOUT.select(groupElement("m_eResult"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * EResult m_eResult
     * }
     */
    public static final OfInt m_eResult$layout() {
        return m_eResult$LAYOUT;
    }

    private static final long m_eResult$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * EResult m_eResult
     * }
     */
    public static final long m_eResult$offset() {
        return m_eResult$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * EResult m_eResult
     * }
     */
    public static int m_eResult(MemorySegment struct) {
        return struct.get(m_eResult$LAYOUT, m_eResult$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * EResult m_eResult
     * }
     */
    public static void m_eResult(MemorySegment struct, int fieldValue) {
        struct.set(m_eResult$LAYOUT, m_eResult$OFFSET, fieldValue);
    }

    private static final OfInt m_nAppID$LAYOUT = (OfInt)$LAYOUT.select(groupElement("m_nAppID"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * AppId_t m_nAppID
     * }
     */
    public static final OfInt m_nAppID$layout() {
        return m_nAppID$LAYOUT;
    }

    private static final long m_nAppID$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * AppId_t m_nAppID
     * }
     */
    public static final long m_nAppID$offset() {
        return m_nAppID$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * AppId_t m_nAppID
     * }
     */
    public static int m_nAppID(MemorySegment struct) {
        return struct.get(m_nAppID$LAYOUT, m_nAppID$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * AppId_t m_nAppID
     * }
     */
    public static void m_nAppID(MemorySegment struct, int fieldValue) {
        struct.set(m_nAppID$LAYOUT, m_nAppID$OFFSET, fieldValue);
    }

    private static final OfInt m_unVersion$LAYOUT = (OfInt)$LAYOUT.select(groupElement("m_unVersion"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32 m_unVersion
     * }
     */
    public static final OfInt m_unVersion$layout() {
        return m_unVersion$LAYOUT;
    }

    private static final long m_unVersion$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32 m_unVersion
     * }
     */
    public static final long m_unVersion$offset() {
        return m_unVersion$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32 m_unVersion
     * }
     */
    public static int m_unVersion(MemorySegment struct) {
        return struct.get(m_unVersion$LAYOUT, m_unVersion$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32 m_unVersion
     * }
     */
    public static void m_unVersion(MemorySegment struct, int fieldValue) {
        struct.set(m_unVersion$LAYOUT, m_unVersion$OFFSET, fieldValue);
    }

    private static final OfInt m_rtAction$LAYOUT = (OfInt)$LAYOUT.select(groupElement("m_rtAction"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * RTime32 m_rtAction
     * }
     */
    public static final OfInt m_rtAction$layout() {
        return m_rtAction$LAYOUT;
    }

    private static final long m_rtAction$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * RTime32 m_rtAction
     * }
     */
    public static final long m_rtAction$offset() {
        return m_rtAction$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * RTime32 m_rtAction
     * }
     */
    public static int m_rtAction(MemorySegment struct) {
        return struct.get(m_rtAction$LAYOUT, m_rtAction$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * RTime32 m_rtAction
     * }
     */
    public static void m_rtAction(MemorySegment struct, int fieldValue) {
        struct.set(m_rtAction$LAYOUT, m_rtAction$OFFSET, fieldValue);
    }

    private static final OfBoolean m_bAccepted$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("m_bAccepted"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool m_bAccepted
     * }
     */
    public static final OfBoolean m_bAccepted$layout() {
        return m_bAccepted$LAYOUT;
    }

    private static final long m_bAccepted$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool m_bAccepted
     * }
     */
    public static final long m_bAccepted$offset() {
        return m_bAccepted$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool m_bAccepted
     * }
     */
    public static boolean m_bAccepted(MemorySegment struct) {
        return struct.get(m_bAccepted$LAYOUT, m_bAccepted$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool m_bAccepted
     * }
     */
    public static void m_bAccepted(MemorySegment struct, boolean fieldValue) {
        struct.set(m_bAccepted$LAYOUT, m_bAccepted$OFFSET, fieldValue);
    }

    private static final OfBoolean m_bNeedsAction$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("m_bNeedsAction"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool m_bNeedsAction
     * }
     */
    public static final OfBoolean m_bNeedsAction$layout() {
        return m_bNeedsAction$LAYOUT;
    }

    private static final long m_bNeedsAction$OFFSET = 17;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool m_bNeedsAction
     * }
     */
    public static final long m_bNeedsAction$offset() {
        return m_bNeedsAction$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool m_bNeedsAction
     * }
     */
    public static boolean m_bNeedsAction(MemorySegment struct) {
        return struct.get(m_bNeedsAction$LAYOUT, m_bNeedsAction$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool m_bNeedsAction
     * }
     */
    public static void m_bNeedsAction(MemorySegment struct, boolean fieldValue) {
        struct.set(m_bNeedsAction$LAYOUT, m_bNeedsAction$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

