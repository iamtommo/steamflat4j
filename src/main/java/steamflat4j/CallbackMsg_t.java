// Generated by jextract

package steamflat4j;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct CallbackMsg_t {
 *     HSteamUser m_hSteamUser;
 *     int m_iCallback;
 *     uint8 *m_pubParam;
 *     int m_cubParam;
 * }
 * }
 */
public class CallbackMsg_t {

    CallbackMsg_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        SteamFlat.C_INT.withName("m_hSteamUser"),
        SteamFlat.C_INT.withName("m_iCallback"),
        SteamFlat.C_POINTER.withName("m_pubParam"),
        SteamFlat.C_INT.withName("m_cubParam"),
        MemoryLayout.paddingLayout(4)
    ).withName("CallbackMsg_t");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt m_hSteamUser$LAYOUT = (OfInt)$LAYOUT.select(groupElement("m_hSteamUser"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HSteamUser m_hSteamUser
     * }
     */
    public static final OfInt m_hSteamUser$layout() {
        return m_hSteamUser$LAYOUT;
    }

    private static final long m_hSteamUser$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HSteamUser m_hSteamUser
     * }
     */
    public static final long m_hSteamUser$offset() {
        return m_hSteamUser$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HSteamUser m_hSteamUser
     * }
     */
    public static int m_hSteamUser(MemorySegment struct) {
        return struct.get(m_hSteamUser$LAYOUT, m_hSteamUser$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HSteamUser m_hSteamUser
     * }
     */
    public static void m_hSteamUser(MemorySegment struct, int fieldValue) {
        struct.set(m_hSteamUser$LAYOUT, m_hSteamUser$OFFSET, fieldValue);
    }

    private static final OfInt m_iCallback$LAYOUT = (OfInt)$LAYOUT.select(groupElement("m_iCallback"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int m_iCallback
     * }
     */
    public static final OfInt m_iCallback$layout() {
        return m_iCallback$LAYOUT;
    }

    private static final long m_iCallback$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int m_iCallback
     * }
     */
    public static final long m_iCallback$offset() {
        return m_iCallback$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int m_iCallback
     * }
     */
    public static int m_iCallback(MemorySegment struct) {
        return struct.get(m_iCallback$LAYOUT, m_iCallback$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int m_iCallback
     * }
     */
    public static void m_iCallback(MemorySegment struct, int fieldValue) {
        struct.set(m_iCallback$LAYOUT, m_iCallback$OFFSET, fieldValue);
    }

    private static final AddressLayout m_pubParam$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("m_pubParam"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8 *m_pubParam
     * }
     */
    public static final AddressLayout m_pubParam$layout() {
        return m_pubParam$LAYOUT;
    }

    private static final long m_pubParam$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8 *m_pubParam
     * }
     */
    public static final long m_pubParam$offset() {
        return m_pubParam$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8 *m_pubParam
     * }
     */
    public static MemorySegment m_pubParam(MemorySegment struct) {
        return struct.get(m_pubParam$LAYOUT, m_pubParam$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8 *m_pubParam
     * }
     */
    public static void m_pubParam(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(m_pubParam$LAYOUT, m_pubParam$OFFSET, fieldValue);
    }

    private static final OfInt m_cubParam$LAYOUT = (OfInt)$LAYOUT.select(groupElement("m_cubParam"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int m_cubParam
     * }
     */
    public static final OfInt m_cubParam$layout() {
        return m_cubParam$LAYOUT;
    }

    private static final long m_cubParam$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int m_cubParam
     * }
     */
    public static final long m_cubParam$offset() {
        return m_cubParam$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int m_cubParam
     * }
     */
    public static int m_cubParam(MemorySegment struct) {
        return struct.get(m_cubParam$LAYOUT, m_cubParam$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int m_cubParam
     * }
     */
    public static void m_cubParam(MemorySegment struct, int fieldValue) {
        struct.set(m_cubParam$LAYOUT, m_cubParam$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

